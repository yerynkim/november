[0.000000] (-) TimerEvent: {}
[0.001406] (ros2_unitree_legged_control) JobQueued: {'identifier': 'ros2_unitree_legged_control', 'dependencies': OrderedDict([('ros2_unitree_legged_msgs', '/home/yk/rosros/install/ros2_unitree_legged_msgs'), ('ros2_unitree_legged_control', '/home/yk/rosros/install/ros2_unitree_legged_control')])}
[0.001451] (unitree_guide2) JobQueued: {'identifier': 'unitree_guide2', 'dependencies': OrderedDict([('ros2_unitree_legged_msgs', '/home/yk/rosros/install/ros2_unitree_legged_msgs'), ('unitree_guide2', '/home/yk/rosros/install/unitree_guide2')])}
[0.001476] (ros2_unitree_legged_control) JobStarted: {'identifier': 'ros2_unitree_legged_control'}
[0.033964] (unitree_guide2) JobStarted: {'identifier': 'unitree_guide2'}
[0.099996] (-) TimerEvent: {}
[0.120131] (ros2_unitree_legged_control) JobEnded: {'identifier': 'ros2_unitree_legged_control', 'rc': 0}
[0.125055] (unitree_guide2) Command: {'cmd': ['/usr/bin/ctest', '-C', 'Release', '-D', 'ExperimentalTest', '--no-compress-output', '-V', '--force-new-ctest-process'], 'cwd': '/home/yk/rosros/build/unitree_guide2', 'env': OrderedDict([('LESSOPEN', '| /usr/bin/lesspipe %s'), ('USER', 'yk'), ('LC_TIME', 'ko_KR.UTF-8'), ('XDG_SESSION_TYPE', 'wayland'), ('SHLVL', '1'), ('LD_LIBRARY_PATH', '/home/yk/rosros/install/ros2_unitree_legged_msgs/lib:/usr/lib/x86_64-linux-gnu/gazebo-11/plugins:/opt/ros/humble/opt/rviz_ogre_vendor/lib:/opt/ros/humble/lib/x86_64-linux-gnu:/opt/ros/humble/lib'), ('HOME', '/home/yk'), ('OLDPWD', '/home/yk/rosros/src'), ('DESKTOP_SESSION', 'ubuntu'), ('ROS_PYTHON_VERSION', '3'), ('GNOME_SHELL_SESSION_MODE', 'ubuntu'), ('GTK_MODULES', 'gail:atk-bridge'), ('LC_MONETARY', 'ko_KR.UTF-8'), ('SYSTEMD_EXEC_PID', '1267'), ('DBUS_SESSION_BUS_ADDRESS', 'unix:path=/run/user/1000/bus'), ('COLORTERM', 'truecolor'), ('IM_CONFIG_PHASE', '1'), ('WAYLAND_DISPLAY', 'wayland-0'), ('ROS_DISTRO', 'humble'), ('LOGNAME', 'yk'), ('_', '/usr/bin/colcon'), ('ROS_VERSION', '2'), ('XDG_SESSION_CLASS', 'user'), ('USERNAME', 'yk'), ('TERM', 'xterm-256color'), ('GNOME_DESKTOP_SESSION_ID', 'this-is-deprecated'), ('ROS_LOCALHOST_ONLY', '0'), ('PATH', '/opt/ros/humble/bin:/home/yk/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin'), ('SESSION_MANAGER', 'local/yk-VirtualBox:@/tmp/.ICE-unix/1243,unix/yk-VirtualBox:/tmp/.ICE-unix/1243'), ('XDG_MENU_PREFIX', 'gnome-'), ('LC_ADDRESS', 'ko_KR.UTF-8'), ('GNOME_TERMINAL_SCREEN', '/org/gnome/Terminal/screen/295a874a_67e2_4e5f_a570_8e24e6b491dd'), ('GNOME_SETUP_DISPLAY', ':1'), ('XDG_RUNTIME_DIR', '/run/user/1000'), ('DISPLAY', ':0'), ('LANG', 'en_US.UTF-8'), ('XDG_CURRENT_DESKTOP', 'ubuntu:GNOME'), ('LC_TELEPHONE', 'ko_KR.UTF-8'), ('XMODIFIERS', '@im=ibus'), ('XDG_SESSION_DESKTOP', 'ubuntu'), ('XAUTHORITY', '/run/user/1000/.mutter-Xwaylandauth.RLGUW2'), ('LS_COLORS', 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:'), ('GNOME_TERMINAL_SERVICE', ':1.125'), ('SSH_AGENT_LAUNCHER', 'gnome-keyring'), ('SSH_AUTH_SOCK', '/run/user/1000/keyring/ssh'), ('AMENT_PREFIX_PATH', '/home/yk/rosros/install/unitree_guide2:/home/yk/rosros/install/ros2_unitree_legged_msgs:/opt/ros/humble'), ('SHELL', '/bin/bash'), ('LC_NAME', 'ko_KR.UTF-8'), ('QT_ACCESSIBILITY', '1'), ('GDMSESSION', 'ubuntu'), ('LESSCLOSE', '/usr/bin/lesspipe %s %s'), ('LC_MEASUREMENT', 'ko_KR.UTF-8'), ('LC_IDENTIFICATION', 'ko_KR.UTF-8'), ('QT_IM_MODULE', 'ibus'), ('PWD', '/home/yk/rosros/build/unitree_guide2'), ('XDG_CONFIG_DIRS', '/etc/xdg/xdg-ubuntu:/etc/xdg'), ('XDG_DATA_DIRS', '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop'), ('PYTHONPATH', '/home/yk/rosros/install/ros2_unitree_legged_msgs/local/lib/python3.10/dist-packages:/opt/ros/humble/lib/python3.10/site-packages:/opt/ros/humble/local/lib/python3.10/dist-packages'), ('LC_NUMERIC', 'ko_KR.UTF-8'), ('LC_PAPER', 'ko_KR.UTF-8'), ('COLCON', '1'), ('VTE_VERSION', '6800'), ('CMAKE_PREFIX_PATH', '/home/yk/rosros/install/unitree_guide2:/home/yk/rosros/install/ros2_unitree_legged_msgs')]), 'shell': False}
[0.139876] (unitree_guide2) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini\n'}
[0.140277] (unitree_guide2) StdoutLine: {'line': b'Parse Config file:/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini\n'}
[0.140379] (unitree_guide2) StdoutLine: {'line': b'   Site: yk-VirtualBox\n'}
[0.140438] (unitree_guide2) StdoutLine: {'line': b'   Build name: (empty)\n'}
[0.140495] (unitree_guide2) StdoutLine: {'line': b' Add coverage exclude regular expressions.\n'}
[0.140554] (unitree_guide2) StdoutLine: {'line': b'Create new tag: 20241108-1141 - Experimental\n'}
[0.141021] (unitree_guide2) StdoutLine: {'line': b'UpdateCTestConfiguration  from :/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini\n'}
[0.141116] (unitree_guide2) StdoutLine: {'line': b'Parse Config file:/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini\n'}
[0.141196] (unitree_guide2) StdoutLine: {'line': b'Test project /home/yk/rosros/build/unitree_guide2\n'}
[0.141275] (unitree_guide2) StdoutLine: {'line': b'Constructing a list of tests\n'}
[0.141362] (unitree_guide2) StdoutLine: {'line': b'Done constructing a list of tests\n'}
[0.141454] (unitree_guide2) StdoutLine: {'line': b'Updating test list for fixtures\n'}
[0.141964] (unitree_guide2) StdoutLine: {'line': b'Added 0 tests to meet fixture requirements\n'}
[0.142100] (unitree_guide2) StdoutLine: {'line': b'Checking test dependency graph...\n'}
[0.142249] (unitree_guide2) StdoutLine: {'line': b'Checking test dependency graph end\n'}
[0.142495] (unitree_guide2) StdoutLine: {'line': b'test 1\n'}
[0.143076] (unitree_guide2) StdoutLine: {'line': b'    Start 1: cppcheck\n'}
[0.144466] (unitree_guide2) StdoutLine: {'line': b'\n'}
[0.144641] (unitree_guide2) StdoutLine: {'line': b'1: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml" "--include_dirs" "/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2/include"\n'}
[0.144818] (unitree_guide2) StdoutLine: {'line': b'1: Test timeout computed to be: 300\n'}
[0.200339] (-) TimerEvent: {}
[0.245979] (unitree_guide2) StdoutLine: {'line': b"1: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':\n"}
[0.246156] (unitree_guide2) StdoutLine: {'line': b'1:  - /opt/ros/humble/bin/ament_cppcheck --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml --include_dirs /home/yk/rosros/src/unitree_ros2_sim/unitree_guide2/include\n'}
[0.303438] (-) TimerEvent: {}
[0.366955] (unitree_guide2) StdoutLine: {'line': b'1: cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.\n'}
[0.381496] (unitree_guide2) StdoutLine: {'line': b'1: -- run_test.py: return code 0\n'}
[0.381708] (unitree_guide2) StdoutLine: {'line': b"1: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml'\n"}
[0.392485] (unitree_guide2) StdoutLine: {'line': b'1/4 Test #1: cppcheck .........................   Passed    0.25 sec\n'}
[0.393486] (unitree_guide2) StdoutLine: {'line': b'test 2\n'}
[0.393648] (unitree_guide2) StdoutLine: {'line': b'    Start 2: lint_cmake\n'}
[0.393720] (unitree_guide2) StdoutLine: {'line': b'\n'}
[0.393786] (unitree_guide2) StdoutLine: {'line': b'2: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml"\n'}
[0.393860] (unitree_guide2) StdoutLine: {'line': b'2: Test timeout computed to be: 60\n'}
[0.409726] (-) TimerEvent: {}
[0.464623] (unitree_guide2) StdoutLine: {'line': b"2: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':\n"}
[0.465001] (unitree_guide2) StdoutLine: {'line': b'2:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml\n'}
[0.513939] (-) TimerEvent: {}
[0.548662] (unitree_guide2) StdoutLine: {'line': b'2: \n'}
[0.548849] (unitree_guide2) StdoutLine: {'line': b'2: No problems found\n'}
[0.557802] (unitree_guide2) StdoutLine: {'line': b'2: -- run_test.py: return code 0\n'}
[0.558069] (unitree_guide2) StdoutLine: {'line': b"2: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml'\n"}
[0.568260] (unitree_guide2) StdoutLine: {'line': b'2/4 Test #2: lint_cmake .......................   Passed    0.17 sec\n'}
[0.568531] (unitree_guide2) StdoutLine: {'line': b'test 3\n'}
[0.568605] (unitree_guide2) StdoutLine: {'line': b'    Start 3: uncrustify\n'}
[0.568675] (unitree_guide2) StdoutLine: {'line': b'\n'}
[0.568728] (unitree_guide2) StdoutLine: {'line': b'3: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml"\n'}
[0.568824] (unitree_guide2) StdoutLine: {'line': b'3: Test timeout computed to be: 60\n'}
[0.619282] (-) TimerEvent: {}
[0.632001] (unitree_guide2) StdoutLine: {'line': b"3: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':\n"}
[0.632185] (unitree_guide2) StdoutLine: {'line': b'3:  - /opt/ros/humble/bin/ament_uncrustify --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml\n'}
[0.719755] (-) TimerEvent: {}
[0.839896] (-) TimerEvent: {}
[0.940786] (-) TimerEvent: {}
[1.042153] (-) TimerEvent: {}
[1.143069] (-) TimerEvent: {}
[1.249719] (-) TimerEvent: {}
[1.350934] (-) TimerEvent: {}
[1.463057] (-) TimerEvent: {}
[1.565985] (-) TimerEvent: {}
[1.674154] (-) TimerEvent: {}
[1.774632] (-) TimerEvent: {}
[1.888955] (-) TimerEvent: {}
[1.990296] (-) TimerEvent: {}
[2.091441] (-) TimerEvent: {}
[2.192902] (-) TimerEvent: {}
[2.309943] (-) TimerEvent: {}
[2.422235] (-) TimerEvent: {}
[2.538285] (-) TimerEvent: {}
[2.653498] (-) TimerEvent: {}
[2.758949] (-) TimerEvent: {}
[2.863008] (-) TimerEvent: {}
[2.971297] (-) TimerEvent: {}
[3.076060] (-) TimerEvent: {}
[3.178098] (-) TimerEvent: {}
[3.278450] (-) TimerEvent: {}
[3.379388] (-) TimerEvent: {}
[3.387642] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/FSM.h':\n"}
[3.387989] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.388287] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/FSM.h\n'}
[3.388661] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/FSM.h.uncrustify\n'}
[3.388718] (unitree_guide2) StdoutLine: {'line': b'3: @@ -26,9 +26,10 @@\n'}
[3.388766] (unitree_guide2) StdoutLine: {'line': b'3: -struct FSMStateList{\n'}
[3.388813] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMState *invalid;\n'}
[3.388859] (unitree_guide2) StdoutLine: {'line': b'3: -    State_Passive *passive;\n'}
[3.388905] (unitree_guide2) StdoutLine: {'line': b'3: -    State_FixedStand *fixedStand;\n'}
[3.388951] (unitree_guide2) StdoutLine: {'line': b'3: -    State_FreeStand *freeStand;\n'}
[3.389032] (unitree_guide2) StdoutLine: {'line': b'3: -    State_Trotting *trotting;\n'}
[3.389080] (unitree_guide2) StdoutLine: {'line': b'3: -    State_BalanceTest *balanceTest;\n'}
[3.389140] (unitree_guide2) StdoutLine: {'line': b'3: -    State_SwingTest *swingTest;\n'}
[3.389184] (unitree_guide2) StdoutLine: {'line': b'3: -    State_StepTest *stepTest;\n'}
[3.389227] (unitree_guide2) StdoutLine: {'line': b'3: +struct FSMStateList\n'}
[3.389281] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.389340] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMState * invalid;\n'}
[3.389399] (unitree_guide2) StdoutLine: {'line': b'3: +  State_Passive * passive;\n'}
[3.389461] (unitree_guide2) StdoutLine: {'line': b'3: +  State_FixedStand * fixedStand;\n'}
[3.389521] (unitree_guide2) StdoutLine: {'line': b'3: +  State_FreeStand * freeStand;\n'}
[3.389580] (unitree_guide2) StdoutLine: {'line': b'3: +  State_Trotting * trotting;\n'}
[3.389660] (unitree_guide2) StdoutLine: {'line': b'3: +  State_BalanceTest * balanceTest;\n'}
[3.389728] (unitree_guide2) StdoutLine: {'line': b'3: +  State_SwingTest * swingTest;\n'}
[3.390050] (unitree_guide2) StdoutLine: {'line': b'3: +  State_StepTest * stepTest;\n'}
[3.390181] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36 +37 @@\n'}
[3.390263] (unitree_guide2) StdoutLine: {'line': b'3: -    State_move_base *moveBase;\n'}
[3.398857] (unitree_guide2) StdoutLine: {'line': b'3: +  State_move_base * moveBase;\n'}
[3.398946] (unitree_guide2) StdoutLine: {'line': b'3: @@ -40 +41 @@\n'}
[3.399019] (unitree_guide2) StdoutLine: {'line': b'3: -    State_move_base *moveBase;\n'}
[3.399076] (unitree_guide2) StdoutLine: {'line': b'3: +  State_move_base * moveBase;\n'}
[3.399129] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,9 +44,10 @@\n'}
[3.399183] (unitree_guide2) StdoutLine: {'line': b'3: -    void deletePtr(){\n'}
[3.399236] (unitree_guide2) StdoutLine: {'line': b'3: -        delete invalid;\n'}
[3.399289] (unitree_guide2) StdoutLine: {'line': b'3: -        delete passive;\n'}
[3.399341] (unitree_guide2) StdoutLine: {'line': b'3: -        delete fixedStand;\n'}
[3.399393] (unitree_guide2) StdoutLine: {'line': b'3: -        delete freeStand;\n'}
[3.399444] (unitree_guide2) StdoutLine: {'line': b'3: -        delete trotting;\n'}
[3.399497] (unitree_guide2) StdoutLine: {'line': b'3: -        delete balanceTest;\n'}
[3.399549] (unitree_guide2) StdoutLine: {'line': b'3: -        delete swingTest;\n'}
[3.399601] (unitree_guide2) StdoutLine: {'line': b'3: -        delete stepTest;\n'}
[3.399653] (unitree_guide2) StdoutLine: {'line': b'3: +  void deletePtr()\n'}
[3.399706] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.399758] (unitree_guide2) StdoutLine: {'line': b'3: +    delete invalid;\n'}
[3.399810] (unitree_guide2) StdoutLine: {'line': b'3: +    delete passive;\n'}
[3.399870] (unitree_guide2) StdoutLine: {'line': b'3: +    delete fixedStand;\n'}
[3.399921] (unitree_guide2) StdoutLine: {'line': b'3: +    delete freeStand;\n'}
[3.399972] (unitree_guide2) StdoutLine: {'line': b'3: +    delete trotting;\n'}
[3.400036] (unitree_guide2) StdoutLine: {'line': b'3: +    delete balanceTest;\n'}
[3.400086] (unitree_guide2) StdoutLine: {'line': b'3: +    delete swingTest;\n'}
[3.400135] (unitree_guide2) StdoutLine: {'line': b'3: +    delete stepTest;\n'}
[3.400184] (unitree_guide2) StdoutLine: {'line': b'3: @@ -53 +55 @@\n'}
[3.400235] (unitree_guide2) StdoutLine: {'line': b'3: -        delete moveBase;\n'}
[3.400284] (unitree_guide2) StdoutLine: {'line': b'3: +    delete moveBase;\n'}
[3.400334] (unitree_guide2) StdoutLine: {'line': b'3: @@ -56 +58 @@\n'}
[3.400383] (unitree_guide2) StdoutLine: {'line': b'3: -        delete moveBase;\n'}
[3.400432] (unitree_guide2) StdoutLine: {'line': b'3: +    delete moveBase;\n'}
[3.400481] (unitree_guide2) StdoutLine: {'line': b'3: @@ -58 +60 @@\n'}
[3.400531] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.400580] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.400630] (unitree_guide2) StdoutLine: {'line': b'3: @@ -61 +63 @@\n'}
[3.400681] (unitree_guide2) StdoutLine: {'line': b'3: -class FSM{\n'}
[3.400730] (unitree_guide2) StdoutLine: {'line': b'3: +class FSM {\n'}
[3.400781] (unitree_guide2) StdoutLine: {'line': b'3: @@ -63,4 +65,5 @@\n'}
[3.400830] (unitree_guide2) StdoutLine: {'line': b'3: -    FSM(CtrlComponents *ctrlComp);\n'}
[3.400879] (unitree_guide2) StdoutLine: {'line': b'3: -    ~FSM();\n'}
[3.400927] (unitree_guide2) StdoutLine: {'line': b'3: -    void initialize();\n'}
[3.400976] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.401039] (unitree_guide2) StdoutLine: {'line': b'3: +  FSM(CtrlComponents * ctrlComp);\n'}
[3.401090] (unitree_guide2) StdoutLine: {'line': b'3: +  ~FSM();\n'}
[3.401140] (unitree_guide2) StdoutLine: {'line': b'3: +  void initialize();\n'}
[3.401190] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.401240] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.401290] (unitree_guide2) StdoutLine: {'line': b'3: @@ -68,10 +71,10 @@\n'}
[3.401340] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMState* getNextState(FSMStateName stateName);\n'}
[3.401391] (unitree_guide2) StdoutLine: {'line': b'3: -    bool checkSafty();\n'}
[3.401442] (unitree_guide2) StdoutLine: {'line': b'3: -    CtrlComponents *_ctrlComp;\n'}
[3.401492] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMState *_currentState;\n'}
[3.401542] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMState *_nextState;\n'}
[3.401593] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName _nextStateName;\n'}
[3.401644] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateList _stateList;\n'}
[3.401694] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMMode _mode;\n'}
[3.401744] (unitree_guide2) StdoutLine: {'line': b'3: -    long long _startTime;\n'}
[3.401794] (unitree_guide2) StdoutLine: {'line': b'3: -    int count;\n'}
[3.401844] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMState * getNextState(FSMStateName stateName);\n'}
[3.401895] (unitree_guide2) StdoutLine: {'line': b'3: +  bool checkSafty();\n'}
[3.401946] (unitree_guide2) StdoutLine: {'line': b'3: +  CtrlComponents * _ctrlComp;\n'}
[3.401996] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMState * _currentState;\n'}
[3.402060] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMState * _nextState;\n'}
[3.402108] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName _nextStateName;\n'}
[3.402157] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateList _stateList;\n'}
[3.402206] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMMode _mode;\n'}
[3.402255] (unitree_guide2) StdoutLine: {'line': b'3: +  long long _startTime;\n'}
[3.402305] (unitree_guide2) StdoutLine: {'line': b'3: +  int count;\n'}
[3.402359] (unitree_guide2) StdoutLine: {'line': b'3: @@ -81 +84 @@\n'}
[3.402409] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // FSM_H\n'}
[3.402462] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // FSM_H\n'}
[3.402511] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.402560] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/FSMState.h':\n"}
[3.402610] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.402659] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/FSMState.h\n'}
[3.402709] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/FSMState.h.uncrustify\n'}
[3.402759] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19 +19 @@\n'}
[3.402808] (unitree_guide2) StdoutLine: {'line': b'3: -class FSMState{\n'}
[3.402856] (unitree_guide2) StdoutLine: {'line': b'3: +class FSMState {\n'}
[3.402905] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21 +21 @@\n'}
[3.402954] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMState(CtrlComponents *ctrlComp, FSMStateName stateName, std::string stateNameString);\n'}
[3.403005] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMState(CtrlComponents * ctrlComp, FSMStateName stateName, std::string stateNameString);\n'}
[3.403067] (unitree_guide2) StdoutLine: {'line': b'3: @@ -23,4 +23,4 @@\n'}
[3.403115] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual void enter() = 0;\n'}
[3.403164] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual void run() = 0;\n'}
[3.403212] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual void exit() = 0;\n'}
[3.403260] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual FSMStateName checkChange() {return FSMStateName::INVALID;}\n'}
[3.403308] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual void enter() = 0;\n'}
[3.403356] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual void run() = 0;\n'}
[3.403404] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual void exit() = 0;\n'}
[3.403453] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual FSMStateName checkChange() {return FSMStateName::INVALID;}\n'}
[3.403501] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,2 +28,3 @@\n'}
[3.403549] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName _stateName;\n'}
[3.403596] (unitree_guide2) StdoutLine: {'line': b'3: -    std::string _stateNameString;\n'}
[3.403644] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName _stateName;\n'}
[3.403691] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string _stateNameString;\n'}
[3.403738] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.403786] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31,2 +32,2 @@\n'}
[3.403834] (unitree_guide2) StdoutLine: {'line': b'3: -    CtrlComponents *_ctrlComp;\n'}
[3.403882] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName _nextStateName;\n'}
[3.403929] (unitree_guide2) StdoutLine: {'line': b'3: +  CtrlComponents * _ctrlComp;\n'}
[3.403983] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName _nextStateName;\n'}
[3.404048] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34,3 +35,3 @@\n'}
[3.404095] (unitree_guide2) StdoutLine: {'line': b'3: -    LowlevelCmd *_lowCmd;\n'}
[3.404141] (unitree_guide2) StdoutLine: {'line': b'3: -    LowlevelState *_lowState;\n'}
[3.404187] (unitree_guide2) StdoutLine: {'line': b'3: -    UserValue _userValue;\n'}
[3.415919] (unitree_guide2) StdoutLine: {'line': b'3: +  LowlevelCmd * _lowCmd;\n'}
[3.416997] (unitree_guide2) StdoutLine: {'line': b'3: +  LowlevelState * _lowState;\n'}
[3.417079] (unitree_guide2) StdoutLine: {'line': b'3: +  UserValue _userValue;\n'}
[3.417130] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39 +40 @@\n'}
[3.417178] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // FSMSTATE_H\n'}
[3.417224] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // FSMSTATE_H\n'}
[3.417269] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.417313] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_BalanceTest.h':\n"}
[3.417358] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.417402] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_BalanceTest.h\n'}
[3.417454] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_BalanceTest.h.uncrustify\n'}
[3.417499] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9 +9 @@\n'}
[3.417544] (unitree_guide2) StdoutLine: {'line': b'3: -class State_BalanceTest : public FSMState{\n'}
[3.417588] (unitree_guide2) StdoutLine: {'line': b'3: +class State_BalanceTest: public FSMState {\n'}
[3.417651] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,6 +11,8 @@\n'}
[3.417708] (unitree_guide2) StdoutLine: {'line': b'3: -    State_BalanceTest(CtrlComponents *ctrlComp);\n'}
[3.417752] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_BalanceTest(){}\n'}
[3.417796] (unitree_guide2) StdoutLine: {'line': b'3: -    void enter();\n'}
[3.417848] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.417932] (unitree_guide2) StdoutLine: {'line': b'3: -    void exit();\n'}
[3.417995] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.418053] (unitree_guide2) StdoutLine: {'line': b'3: +  State_BalanceTest(CtrlComponents * ctrlComp);\n'}
[3.418096] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_BalanceTest() {\n'}
[3.418139] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.418181] (unitree_guide2) StdoutLine: {'line': b'3: +  void enter();\n'}
[3.418224] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.418266] (unitree_guide2) StdoutLine: {'line': b'3: +  void exit();\n'}
[3.418308] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.418351] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.418393] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18 +20 @@\n'}
[3.418436] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcTau();\n'}
[3.418478] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcTau();\n'}
[3.418521] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,3 +22,3 @@\n'}
[3.418582] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator *_est;\n'}
[3.418626] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot *_robModel;\n'}
[3.418671] (unitree_guide2) StdoutLine: {'line': b'3: -    BalanceCtrl *_balCtrl;\n'}
[3.418716] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator * _est;\n'}
[3.418761] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * _robModel;\n'}
[3.418806] (unitree_guide2) StdoutLine: {'line': b'3: +  BalanceCtrl * _balCtrl;\n'}
[3.418850] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24 +26 @@\n'}
[3.418895] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 *_contact;\n'}
[3.418940] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * _contact;\n'}
[3.418984] (unitree_guide2) StdoutLine: {'line': b'3: @@ -26,5 +28,5 @@\n'}
[3.419029] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat _Rd, _RdInit;\n'}
[3.419074] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _pcd, _pcdInit;\n'}
[3.419119] (unitree_guide2) StdoutLine: {'line': b'3: -    double _kpw;\n'}
[3.419163] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _Kpp, _Kdp, _Kdw;\n'}
[3.419208] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _ddPcd, _dWbd;\n'}
[3.419253] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat _Rd, _RdInit;\n'}
[3.419299] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _pcd, _pcdInit;\n'}
[3.419343] (unitree_guide2) StdoutLine: {'line': b'3: +  double _kpw;\n'}
[3.419389] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _Kpp, _Kdp, _Kdw;\n'}
[3.419446] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _ddPcd, _dWbd;\n'}
[3.419490] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32,5 +34,5 @@\n'}
[3.419533] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 _q, _tau;\n'}
[3.419576] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _posBody, _velBody;\n'}
[3.419619] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat _B2G_RotMat, _G2B_RotMat;\n'}
[3.419661] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeet2BGlobal;\n'}
[3.419704] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _forceFeetGlobal, _forceFeetBody;\n'}
[3.419746] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 _q, _tau;\n'}
[3.419799] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _posBody, _velBody;\n'}
[3.419842] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat _B2G_RotMat, _G2B_RotMat;\n'}
[3.419885] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeet2BGlobal;\n'}
[3.419928] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _forceFeetGlobal, _forceFeetBody;\n'}
[3.419970] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38,4 +40,4 @@\n'}
[3.420013] (unitree_guide2) StdoutLine: {'line': b'3: -    float _xMax, _xMin;\n'}
[3.420056] (unitree_guide2) StdoutLine: {'line': b'3: -    float _yMax, _yMin;\n'}
[3.420102] (unitree_guide2) StdoutLine: {'line': b'3: -    float _zMax, _zMin;\n'}
[3.420146] (unitree_guide2) StdoutLine: {'line': b'3: -    float _yawMax, _yawMin;\n'}
[3.420208] (unitree_guide2) StdoutLine: {'line': b'3: +  float _xMax, _xMin;\n'}
[3.420266] (unitree_guide2) StdoutLine: {'line': b'3: +  float _yMax, _yMin;\n'}
[3.420308] (unitree_guide2) StdoutLine: {'line': b'3: +  float _zMax, _zMin;\n'}
[3.420351] (unitree_guide2) StdoutLine: {'line': b'3: +  float _yawMax, _yawMin;\n'}
[3.420414] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44 +46 @@\n'}
[3.421031] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // BALANCETEST_H\n'}
[3.421195] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // BALANCETEST_H\n'}
[3.421265] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.421320] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_FixedStand.h':\n"}
[3.421379] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.421437] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_FixedStand.h\n'}
[3.421488] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_FixedStand.h.uncrustify\n'}
[3.421540] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9 +9 @@\n'}
[3.421590] (unitree_guide2) StdoutLine: {'line': b'3: -class State_FixedStand : public FSMState{\n'}
[3.421641] (unitree_guide2) StdoutLine: {'line': b'3: +class State_FixedStand: public FSMState {\n'}
[3.421692] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,6 +11,7 @@\n'}
[3.421742] (unitree_guide2) StdoutLine: {'line': b'3: -    State_FixedStand(CtrlComponents *ctrlComp);\n'}
[3.421793] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_FixedStand(){}\n'}
[3.421841] (unitree_guide2) StdoutLine: {'line': b'3: -    void enter();\n'}
[3.421895] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.421949] (unitree_guide2) StdoutLine: {'line': b'3: -    void exit();\n'}
[3.421999] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.422853] (unitree_guide2) StdoutLine: {'line': b'3: +  State_FixedStand(CtrlComponents * ctrlComp);\n'}
[3.422920] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_FixedStand() {\n'}
[3.422973] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.423025] (unitree_guide2) StdoutLine: {'line': b'3: +  void enter();\n'}
[3.423074] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.423123] (unitree_guide2) StdoutLine: {'line': b'3: +  void exit();\n'}
[3.423171] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.423218] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,5 +20,5 @@\n'}
[3.423662] (unitree_guide2) StdoutLine: {'line': b'3: -    float _targetPos[12] = {0.0, 0.67, -1.3, 0.0, 0.67, -1.3, \n'}
[3.423740] (unitree_guide2) StdoutLine: {'line': b'3: -                            0.0, 0.67, -1.3, 0.0, 0.67, -1.3};\n'}
[3.423796] (unitree_guide2) StdoutLine: {'line': b'3: -    float _startPos[12];\n'}
[3.423856] (unitree_guide2) StdoutLine: {'line': b'3: -    float _duration = 1000;   //steps\n'}
[3.423909] (unitree_guide2) StdoutLine: {'line': b'3: -    float _percent = 0;       //%\n'}
[3.423960] (unitree_guide2) StdoutLine: {'line': b'3: +  float _targetPos[12] = {0.0, 0.67, -1.3, 0.0, 0.67, -1.3,\n'}
[3.424010] (unitree_guide2) StdoutLine: {'line': b'3: +    0.0, 0.67, -1.3, 0.0, 0.67, -1.3};\n'}
[3.424628] (unitree_guide2) StdoutLine: {'line': b'3: +  float _startPos[12];\n'}
[3.424718] (unitree_guide2) StdoutLine: {'line': b'3: +  float _duration = 1000;     //steps\n'}
[3.424772] (unitree_guide2) StdoutLine: {'line': b'3: +  float _percent = 0;         //%\n'}
[3.424821] (unitree_guide2) StdoutLine: {'line': b'3: @@ -26 +27 @@\n'}
[3.424907] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // FIXEDSTAND_H\n'}
[3.425302] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // FIXEDSTAND_H\n'}
[3.425361] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.425413] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_FreeStand.h':\n"}
[3.425463] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.425510] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_FreeStand.h\n'}
[3.425557] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_FreeStand.h.uncrustify\n'}
[3.425604] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9 +9 @@\n'}
[3.425650] (unitree_guide2) StdoutLine: {'line': b'3: -class State_FreeStand : public FSMState{\n'}
[3.425696] (unitree_guide2) StdoutLine: {'line': b'3: +class State_FreeStand: public FSMState {\n'}
[3.425742] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,6 +11,8 @@\n'}
[3.425788] (unitree_guide2) StdoutLine: {'line': b'3: -    State_FreeStand(CtrlComponents *ctrlComp);\n'}
[3.425835] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_FreeStand(){}\n'}
[3.425924] (unitree_guide2) StdoutLine: {'line': b'3: -    void enter();\n'}
[3.425993] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.426042] (unitree_guide2) StdoutLine: {'line': b'3: -    void exit();\n'}
[3.426091] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.426137] (unitree_guide2) StdoutLine: {'line': b'3: +  State_FreeStand(CtrlComponents * ctrlComp);\n'}
[3.426184] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_FreeStand() {\n'}
[3.426240] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.426286] (unitree_guide2) StdoutLine: {'line': b'3: +  void enter();\n'}
[3.426332] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.426377] (unitree_guide2) StdoutLine: {'line': b'3: +  void exit();\n'}
[3.426423] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.426468] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.426514] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18,6 +20,6 @@\n'}
[3.426559] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _initVecOX;\n'}
[3.426605] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _initVecXP;\n'}
[3.426650] (unitree_guide2) StdoutLine: {'line': b'3: -    float _rowMax, _rowMin;\n'}
[3.426719] (unitree_guide2) StdoutLine: {'line': b'3: -    float _pitchMax, _pitchMin;\n'}
[3.426848] (unitree_guide2) StdoutLine: {'line': b'3: -    float _yawMax, _yawMin;\n'}
[3.427324] (unitree_guide2) StdoutLine: {'line': b'3: -    float _heightMax, _heightMin;\n'}
[3.427397] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _initVecOX;\n'}
[3.427451] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _initVecXP;\n'}
[3.427502] (unitree_guide2) StdoutLine: {'line': b'3: +  float _rowMax, _rowMin;\n'}
[3.427550] (unitree_guide2) StdoutLine: {'line': b'3: +  float _pitchMax, _pitchMin;\n'}
[3.427597] (unitree_guide2) StdoutLine: {'line': b'3: +  float _yawMax, _yawMin;\n'}
[3.427648] (unitree_guide2) StdoutLine: {'line': b'3: +  float _heightMax, _heightMin;\n'}
[3.427695] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,2 +27,2 @@\n'}
[3.427741] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _calcOP(float row, float pitch, float yaw, float height);\n'}
[3.428119] (unitree_guide2) StdoutLine: {'line': b'3: -    void _calcCmd(Vec34 vecOP);\n'}
[3.428207] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _calcOP(float row, float pitch, float yaw, float height);\n'}
[3.428263] (unitree_guide2) StdoutLine: {'line': b'3: +  void _calcCmd(Vec34 vecOP);\n'}
[3.428311] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29 +31 @@\n'}
[3.428358] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // FREESTAND_H\n'}
[3.428416] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // FREESTAND_H\n'}
[3.428472] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.428520] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_Passive.h':\n"}
[3.428576] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.428623] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_Passive.h\n'}
[3.428669] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_Passive.h.uncrustify\n'}
[3.428726] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9 +9 @@\n'}
[3.428771] (unitree_guide2) StdoutLine: {'line': b'3: -class State_Passive : public FSMState{\n'}
[3.428814] (unitree_guide2) StdoutLine: {'line': b'3: +class State_Passive: public FSMState {\n'}
[3.428857] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,5 +11,5 @@\n'}
[3.428937] (unitree_guide2) StdoutLine: {'line': b'3: -    State_Passive(CtrlComponents *ctrlComp);\n'}
[3.428986] (unitree_guide2) StdoutLine: {'line': b'3: -    void enter();\n'}
[3.429030] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.429087] (unitree_guide2) StdoutLine: {'line': b'3: -    void exit();\n'}
[3.429138] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.431373] (unitree_guide2) StdoutLine: {'line': b'3: +  State_Passive(CtrlComponents * ctrlComp);\n'}
[3.431432] (unitree_guide2) StdoutLine: {'line': b'3: +  void enter();\n'}
[3.431483] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.431533] (unitree_guide2) StdoutLine: {'line': b'3: +  void exit();\n'}
[3.431581] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.431629] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18 +18 @@\n'}
[3.431685] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // PASSIVE_H\n'}
[3.431732] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // PASSIVE_H\n'}
[3.431779] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.431824] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_StepTest.h':\n"}
[3.431915] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.431970] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_StepTest.h\n'}
[3.432017] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_StepTest.h.uncrustify\n'}
[3.432064] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9 +9 @@\n'}
[3.432118] (unitree_guide2) StdoutLine: {'line': b'3: -class State_StepTest : public FSMState{\n'}
[3.432164] (unitree_guide2) StdoutLine: {'line': b'3: +class State_StepTest: public FSMState {\n'}
[3.432210] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,6 +11,8 @@\n'}
[3.432256] (unitree_guide2) StdoutLine: {'line': b'3: -    State_StepTest(CtrlComponents *ctrlComp);\n'}
[3.432302] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_StepTest(){}\n'}
[3.432348] (unitree_guide2) StdoutLine: {'line': b'3: -    void enter();\n'}
[3.432393] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.432439] (unitree_guide2) StdoutLine: {'line': b'3: -    void exit();\n'}
[3.432485] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.432531] (unitree_guide2) StdoutLine: {'line': b'3: +  State_StepTest(CtrlComponents * ctrlComp);\n'}
[3.432577] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_StepTest() {\n'}
[3.432623] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.432670] (unitree_guide2) StdoutLine: {'line': b'3: +  void enter();\n'}
[3.432716] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.432761] (unitree_guide2) StdoutLine: {'line': b'3: +  void exit();\n'}
[3.432807] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.432880] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.432950] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18 +20 @@\n'}
[3.432997] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcTau();\n'}
[3.433055] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcTau();\n'}
[3.433108] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20 +22 @@\n'}
[3.433152] (unitree_guide2) StdoutLine: {'line': b'3: -    float _gaitHeight;\n'}
[3.433197] (unitree_guide2) StdoutLine: {'line': b'3: +  float _gaitHeight;\n'}
[3.433241] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22,3 +24,3 @@\n'}
[3.433285] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator *_est;\n'}
[3.433329] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot *_robModel;\n'}
[3.433374] (unitree_guide2) StdoutLine: {'line': b'3: -    BalanceCtrl *_balCtrl;\n'}
[3.433418] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator * _est;\n'}
[3.433462] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * _robModel;\n'}
[3.433506] (unitree_guide2) StdoutLine: {'line': b'3: +  BalanceCtrl * _balCtrl;\n'}
[3.433551] (unitree_guide2) StdoutLine: {'line': b'3: @@ -26,2 +28,2 @@\n'}
[3.433595] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 *_contact;\n'}
[3.433640] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 *_phase;\n'}
[3.433685] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * _contact;\n'}
[3.433730] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 * _phase;\n'}
[3.433774] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29,5 +31,5 @@\n'}
[3.433819] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat _Rd;\n'}
[3.433869] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _pcd;\n'}
[3.433916] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _Kpp, _Kpw, _Kdp, _Kdw;\n'}
[3.433961] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _KpSwing, _KdSwing;\n'}
[3.434007] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _ddPcd, _dWbd;\n'}
[3.434051] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat _Rd;\n'}
[3.434096] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _pcd;\n'}
[3.434141] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _Kpp, _Kpw, _Kdp, _Kdw;\n'}
[3.434185] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _KpSwing, _KdSwing;\n'}
[3.434285] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _ddPcd, _dWbd;\n'}
[3.434348] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35,7 +37,7 @@\n'}
[3.434406] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 _q, _tau;\n'}
[3.434470] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _posBody, _velBody;\n'}
[3.434533] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat _B2G_RotMat, _G2B_RotMat;\n'}
[3.434621] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeet2BGlobal;\n'}
[3.434681] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeetGlobalInit, _posFeetGlobalGoal, _velFeetGlobalGoal;\n'}
[3.434739] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeetGlobal, _velFeetGlobal;\n'}
[3.434802] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _forceFeetGlobal, _forceFeetBody;\n'}
[3.434875] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 _q, _tau;\n'}
[3.434932] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _posBody, _velBody;\n'}
[3.434978] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat _B2G_RotMat, _G2B_RotMat;\n'}
[3.435023] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeet2BGlobal;\n'}
[3.435067] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeetGlobalInit, _posFeetGlobalGoal, _velFeetGlobalGoal;\n'}
[3.435112] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeetGlobal, _velFeetGlobal;\n'}
[3.435156] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _forceFeetGlobal, _forceFeetBody;\n'}
[3.435200] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44 +46 @@\n'}
[3.435245] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // STEPTEST_H\n'}
[3.435289] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // STEPTEST_H\n'}
[3.435334] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.435383] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_SwingTest.h':\n"}
[3.435430] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.435474] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_SwingTest.h\n'}
[3.435530] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_SwingTest.h.uncrustify\n'}
[3.435575] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10 +10 @@\n'}
[3.435621] (unitree_guide2) StdoutLine: {'line': b'3: -class State_SwingTest : public FSMState{\n'}
[3.435674] (unitree_guide2) StdoutLine: {'line': b'3: +class State_SwingTest: public FSMState {\n'}
[3.435728] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,6 +12,8 @@\n'}
[3.435801] (unitree_guide2) StdoutLine: {'line': b'3: -    State_SwingTest(CtrlComponents *ctrlComp);\n'}
[3.435905] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_SwingTest(){};\n'}
[3.435984] (unitree_guide2) StdoutLine: {'line': b'3: -    void enter();\n'}
[3.436044] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.436111] (unitree_guide2) StdoutLine: {'line': b'3: -    void exit();\n'}
[3.438333] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.438496] (unitree_guide2) StdoutLine: {'line': b'3: +  State_SwingTest(CtrlComponents * ctrlComp);\n'}
[3.438563] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_SwingTest() {\n'}
[3.438613] (unitree_guide2) StdoutLine: {'line': b'3: +  };\n'}
[3.438669] (unitree_guide2) StdoutLine: {'line': b'3: +  void enter();\n'}
[3.438721] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.438796] (unitree_guide2) StdoutLine: {'line': b'3: +  void exit();\n'}
[3.438868] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.438965] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.439012] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,2 +21,2 @@\n'}
[3.439080] (unitree_guide2) StdoutLine: {'line': b'3: -    void _positionCtrl();\n'}
[3.440887] (unitree_guide2) StdoutLine: {'line': b'3: -    void _torqueCtrl();\n'}
[3.441156] (unitree_guide2) StdoutLine: {'line': b'3: +  void _positionCtrl();\n'}
[3.441228] (unitree_guide2) StdoutLine: {'line': b'3: +  void _torqueCtrl();\n'}
[3.441587] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22,7 +24,7 @@\n'}
[3.441649] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _initFeetPos, _feetPos;\n'}
[3.441711] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3  _initPos, _posGoal;\n'}
[3.441765] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 _targetPos;\n'}
[3.441815] (unitree_guide2) StdoutLine: {'line': b'3: -    float _xMin, _xMax;\n'}
[3.441903] (unitree_guide2) StdoutLine: {'line': b'3: -    float _yMin, _yMax;\n'}
[3.441969] (unitree_guide2) StdoutLine: {'line': b'3: -    float _zMin, _zMax;\n'}
[3.442023] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _Kp, _Kd;\n'}
[3.442120] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _initFeetPos, _feetPos;\n'}
[3.442171] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _initPos, _posGoal;\n'}
[3.443700] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 _targetPos;\n'}
[3.443776] (unitree_guide2) StdoutLine: {'line': b'3: +  float _xMin, _xMax;\n'}
[3.443842] (unitree_guide2) StdoutLine: {'line': b'3: +  float _yMin, _yMax;\n'}
[3.443947] (unitree_guide2) StdoutLine: {'line': b'3: +  float _zMin, _zMax;\n'}
[3.444036] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _Kp, _Kd;\n'}
[3.444948] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31 +33 @@\n'}
[3.445003] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // STATE_SWINGTEST_H\n'}
[3.445063] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // STATE_SWINGTEST_H\n'}
[3.445108] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.445151] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_Trotting.h':\n"}
[3.445194] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.445237] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_Trotting.h\n'}
[3.445312] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_Trotting.h.uncrustify\n'}
[3.445384] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11 +11 @@\n'}
[3.445429] (unitree_guide2) StdoutLine: {'line': b'3: -class State_Trotting : public FSMState{\n'}
[3.445492] (unitree_guide2) StdoutLine: {'line': b'3: +class State_Trotting: public FSMState {\n'}
[3.445535] (unitree_guide2) StdoutLine: {'line': b'3: @@ -13,7 +13,8 @@\n'}
[3.445577] (unitree_guide2) StdoutLine: {'line': b'3: -    State_Trotting(CtrlComponents *ctrlComp);\n'}
[3.445619] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_Trotting();\n'}
[3.445662] (unitree_guide2) StdoutLine: {'line': b'3: -    void enter();\n'}
[3.445705] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.445747] (unitree_guide2) StdoutLine: {'line': b'3: -    void exit();\n'}
[3.445790] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual FSMStateName checkChange();\n'}
[3.445833] (unitree_guide2) StdoutLine: {'line': b'3: -    void setHighCmd(double vx, double vy, double wz);\n'}
[3.445876] (unitree_guide2) StdoutLine: {'line': b'3: +  State_Trotting(CtrlComponents * ctrlComp);\n'}
[3.445922] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_Trotting();\n'}
[3.446006] (unitree_guide2) StdoutLine: {'line': b'3: +  void enter();\n'}
[3.446058] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.446103] (unitree_guide2) StdoutLine: {'line': b'3: +  void exit();\n'}
[3.446146] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual FSMStateName checkChange();\n'}
[3.446190] (unitree_guide2) StdoutLine: {'line': b'3: +  void setHighCmd(double vx, double vy, double wz);\n'}
[3.446234] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.446299] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21,6 +22,6 @@\n'}
[3.446356] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcTau();\n'}
[3.446399] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcQQd();\n'}
[3.446442] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcCmd();\n'}
[3.446486] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual void getUserCmd();\n'}
[3.446530] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcBalanceKp();\n'}
[3.446574] (unitree_guide2) StdoutLine: {'line': b'3: -    bool checkStepOrNot();\n'}
[3.446617] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcTau();\n'}
[3.446660] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcQQd();\n'}
[3.446704] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcCmd();\n'}
[3.446749] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual void getUserCmd();\n'}
[3.446794] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcBalanceKp();\n'}
[3.446839] (unitree_guide2) StdoutLine: {'line': b'3: +  bool checkStepOrNot();\n'}
[3.446883] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,4 +29,4 @@\n'}
[3.446927] (unitree_guide2) StdoutLine: {'line': b'3: -    GaitGenerator *_gait;\n'}
[3.446971] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator *_est;\n'}
[3.447028] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot *_robModel;\n'}
[3.447072] (unitree_guide2) StdoutLine: {'line': b'3: -    BalanceCtrl *_balCtrl;\n'}
[3.447116] (unitree_guide2) StdoutLine: {'line': b'3: +  GaitGenerator * _gait;\n'}
[3.447161] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator * _est;\n'}
[3.447206] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * _robModel;\n'}
[3.447331] (unitree_guide2) StdoutLine: {'line': b'3: +  BalanceCtrl * _balCtrl;\n'}
[3.447439] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,7 +34,7 @@\n'}
[3.447495] (unitree_guide2) StdoutLine: {'line': b'3: -    // Rob State\n'}
[3.447544] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3  _posBody, _velBody;\n'}
[3.447591] (unitree_guide2) StdoutLine: {'line': b'3: -    double _yaw, _dYaw;\n'}
[3.447638] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeetGlobal, _velFeetGlobal;\n'}
[3.447684] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeet2BGlobal;\n'}
[3.447730] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat _B2G_RotMat, _G2B_RotMat;\n'}
[3.447775] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 _q;\n'}
[3.447855] (unitree_guide2) StdoutLine: {'line': b'3: +  // Rob State\n'}
[3.447904] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _posBody, _velBody;\n'}
[3.447959] (unitree_guide2) StdoutLine: {'line': b'3: +  double _yaw, _dYaw;\n'}
[3.448004] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeetGlobal, _velFeetGlobal;\n'}
[3.448049] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeet2BGlobal;\n'}
[3.448109] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat _B2G_RotMat, _G2B_RotMat;\n'}
[3.448154] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 _q;\n'}
[3.448232] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41,13 +42,13 @@\n'}
[3.448278] (unitree_guide2) StdoutLine: {'line': b'3: -    // Robot command\n'}
[3.448324] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _pcd;\n'}
[3.448370] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _vCmdGlobal, _vCmdBody;\n'}
[3.448415] (unitree_guide2) StdoutLine: {'line': b'3: -    double _yawCmd, _dYawCmd;\n'}
[3.448461] (unitree_guide2) StdoutLine: {'line': b'3: -    double _dYawCmdPast;\n'}
[3.448506] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _wCmdGlobal;\n'}
[3.448551] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeetGlobalGoal, _velFeetGlobalGoal;\n'}
[3.448598] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeet2BGoal, _velFeet2BGoal;\n'}
[3.448644] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat _Rd;\n'}
[3.448689] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _ddPcd, _dWbd;\n'}
[3.448771] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _forceFeetGlobal, _forceFeetBody;\n'}
[3.448839] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _qGoal, _qdGoal;\n'}
[3.448887] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 _tau;\n'}
[3.448933] (unitree_guide2) StdoutLine: {'line': b'3: +  // Robot command\n'}
[3.448979] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _pcd;\n'}
[3.449025] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _vCmdGlobal, _vCmdBody;\n'}
[3.449070] (unitree_guide2) StdoutLine: {'line': b'3: +  double _yawCmd, _dYawCmd;\n'}
[3.449115] (unitree_guide2) StdoutLine: {'line': b'3: +  double _dYawCmdPast;\n'}
[3.449175] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _wCmdGlobal;\n'}
[3.449222] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeetGlobalGoal, _velFeetGlobalGoal;\n'}
[3.449269] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeet2BGoal, _velFeet2BGoal;\n'}
[3.449316] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat _Rd;\n'}
[3.449362] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _ddPcd, _dWbd;\n'}
[3.449409] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _forceFeetGlobal, _forceFeetBody;\n'}
[3.449456] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _qGoal, _qdGoal;\n'}
[3.449502] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 _tau;\n'}
[3.449549] (unitree_guide2) StdoutLine: {'line': b'3: @@ -55,9 +56,9 @@\n'}
[3.449596] (unitree_guide2) StdoutLine: {'line': b'3: -    // Control Parameters\n'}
[3.449643] (unitree_guide2) StdoutLine: {'line': b'3: -    double _gaitHeight;\n'}
[3.449697] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _posError, _velError;\n'}
[3.449745] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _Kpp, _Kdp, _Kdw;\n'}
[3.449792] (unitree_guide2) StdoutLine: {'line': b'3: -    double _kpw;\n'}
[3.449838] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _KpSwing, _KdSwing;\n'}
[3.449885] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 _vxLim, _vyLim, _wyawLim;\n'}
[3.449931] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 *_phase;\n'}
[3.449978] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 *_contact;\n'}
[3.450025] (unitree_guide2) StdoutLine: {'line': b'3: +  // Control Parameters\n'}
[3.450072] (unitree_guide2) StdoutLine: {'line': b'3: +  double _gaitHeight;\n'}
[3.450119] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _posError, _velError;\n'}
[3.453149] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _Kpp, _Kdp, _Kdw;\n'}
[3.453316] (unitree_guide2) StdoutLine: {'line': b'3: +  double _kpw;\n'}
[3.453396] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _KpSwing, _KdSwing;\n'}
[3.456582] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 _vxLim, _vyLim, _wyawLim;\n'}
[3.456647] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 * _phase;\n'}
[3.456699] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * _contact;\n'}
[3.456749] (unitree_guide2) StdoutLine: {'line': b'3: @@ -65,3 +66,3 @@\n'}
[3.456796] (unitree_guide2) StdoutLine: {'line': b'3: -    // Calculate average value\n'}
[3.456843] (unitree_guide2) StdoutLine: {'line': b'3: -    AvgCov *_avg_posError = new AvgCov(3, "_posError", true, 1000, 1000, 1);\n'}
[3.456890] (unitree_guide2) StdoutLine: {'line': b'3: -    AvgCov *_avg_angError = new AvgCov(3, "_angError", true, 1000, 1000, 1000);\n'}
[3.456936] (unitree_guide2) StdoutLine: {'line': b'3: +  // Calculate average value\n'}
[3.456982] (unitree_guide2) StdoutLine: {'line': b'3: +  AvgCov * _avg_posError = new AvgCov(3, "_posError", true, 1000, 1000, 1);\n'}
[3.457028] (unitree_guide2) StdoutLine: {'line': b'3: +  AvgCov * _avg_angError = new AvgCov(3, "_angError", true, 1000, 1000, 1000);\n'}
[3.457087] (unitree_guide2) StdoutLine: {'line': b'3: @@ -70 +71 @@\n'}
[3.457133] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // TROTTING_H\n'}
[3.457180] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // TROTTING_H\n'}
[3.457275] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.457388] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/FSM/State_move_base.h':\n"}
[3.457988] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.458046] (unitree_guide2) StdoutLine: {'line': b'3: --- include/FSM/State_move_base.h\n'}
[3.458109] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/FSM/State_move_base.h.uncrustify\n'}
[3.458156] (unitree_guide2) StdoutLine: {'line': b'3: @@ -13 +13 @@\n'}
[3.458203] (unitree_guide2) StdoutLine: {'line': b'3: -class State_move_base : public State_Trotting{\n'}
[3.458250] (unitree_guide2) StdoutLine: {'line': b'3: +class State_move_base: public State_Trotting {\n'}
[3.458297] (unitree_guide2) StdoutLine: {'line': b'3: @@ -15,3 +15,5 @@\n'}
[3.458343] (unitree_guide2) StdoutLine: {'line': b'3: -    State_move_base(CtrlComponents *ctrlComp);\n'}
[3.458390] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_move_base(){}\n'}
[3.458436] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.458489] (unitree_guide2) StdoutLine: {'line': b'3: +  State_move_base(CtrlComponents * ctrlComp);\n'}
[3.458535] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_move_base() {\n'}
[3.458581] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.458626] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.458671] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.458750] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,7 +21,7 @@\n'}
[3.458798] (unitree_guide2) StdoutLine: {'line': b'3: -    void getUserCmd();\n'}
[3.458857] (unitree_guide2) StdoutLine: {'line': b'3: -    void initRecv();\n'}
[3.458904] (unitree_guide2) StdoutLine: {'line': b'3: -    void twistCallback(const geometry_msgs::Twist::msg::SharedPtr msg);\n'}
[3.458950] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::NodeHandle _nm;\n'}
[3.459060] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::Subscriber _cmdSub;\n'}
[3.459140] (unitree_guide2) StdoutLine: {'line': b'3: -    double _vx, _vy;\n'}
[3.459201] (unitree_guide2) StdoutLine: {'line': b'3: -    double _wz;\n'}
[3.459260] (unitree_guide2) StdoutLine: {'line': b'3: +  void getUserCmd();\n'}
[3.459322] (unitree_guide2) StdoutLine: {'line': b'3: +  void initRecv();\n'}
[3.459387] (unitree_guide2) StdoutLine: {'line': b'3: +  void twistCallback(const geometry_msgs::Twist::msg::SharedPtr msg);\n'}
[3.459448] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::NodeHandle _nm;\n'}
[3.459508] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::Subscriber _cmdSub;\n'}
[3.459567] (unitree_guide2) StdoutLine: {'line': b'3: +  double _vx, _vy;\n'}
[3.459626] (unitree_guide2) StdoutLine: {'line': b'3: +  double _wz;\n'}
[3.459691] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41 +43 @@\n'}
[3.460907] (unitree_guide2) StdoutLine: {'line': b'3: -class State_move_base : public State_Trotting{\n'}
[3.460974] (unitree_guide2) StdoutLine: {'line': b'3: +class State_move_base: public State_Trotting {\n'}
[3.461024] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,3 +45,5 @@\n'}
[3.461084] (unitree_guide2) StdoutLine: {'line': b'3: -    State_move_base(CtrlComponents *ctrlComp);\n'}
[3.461282] (unitree_guide2) StdoutLine: {'line': b'3: -    ~State_move_base(){}\n'}
[3.461331] (unitree_guide2) StdoutLine: {'line': b'3: -    FSMStateName checkChange();\n'}
[3.461378] (unitree_guide2) StdoutLine: {'line': b'3: +  State_move_base(CtrlComponents * ctrlComp);\n'}
[3.461424] (unitree_guide2) StdoutLine: {'line': b'3: +  ~State_move_base() {\n'}
[3.461477] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.461532] (unitree_guide2) StdoutLine: {'line': b'3: +  FSMStateName checkChange();\n'}
[3.462163] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.462232] (unitree_guide2) StdoutLine: {'line': b'3: @@ -47,9 +51,9 @@\n'}
[3.462292] (unitree_guide2) StdoutLine: {'line': b'3: -    void getUserCmd();\n'}
[3.462359] (unitree_guide2) StdoutLine: {'line': b'3: -    void initRecv();\n'}
[3.462417] (unitree_guide2) StdoutLine: {'line': b'3: -    void twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg);\n'}
[3.462474] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::Node::SharedPtr _nm;\n'}
[3.462530] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr _cmdSub;\n'}
[3.462586] (unitree_guide2) StdoutLine: {'line': b'3: -    double _vx, _vy;\n'}
[3.462640] (unitree_guide2) StdoutLine: {'line': b'3: -    double _wz;\n'}
[3.462695] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::executors::MultiThreadedExecutor::SharedPtr executor;\n'}
[3.462750] (unitree_guide2) StdoutLine: {'line': b'3: -    std::thread executor_thread;\n'}
[3.462814] (unitree_guide2) StdoutLine: {'line': b'3: +  void getUserCmd();\n'}
[3.462907] (unitree_guide2) StdoutLine: {'line': b'3: +  void initRecv();\n'}
[3.463995] (unitree_guide2) StdoutLine: {'line': b'3: +  void twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg);\n'}
[3.464123] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Node::SharedPtr _nm;\n'}
[3.464239] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Subscription < geometry_msgs::msg::Twist > ::SharedPtr _cmdSub;\n'}
[3.464306] (unitree_guide2) StdoutLine: {'line': b'3: +  double _vx, _vy;\n'}
[3.464363] (unitree_guide2) StdoutLine: {'line': b'3: +  double _wz;\n'}
[3.464420] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::executors::MultiThreadedExecutor::SharedPtr executor;\n'}
[3.465143] (unitree_guide2) StdoutLine: {'line': b'3: +  std::thread executor_thread;\n'}
[3.465205] (unitree_guide2) StdoutLine: {'line': b'3: @@ -60 +64 @@\n'}
[3.465255] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // COMPILE_WITH_ROS2_MB\n'}
[3.465303] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // COMPILE_WITH_ROS2_MB\n'}
[3.465383] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.465437] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/Gait/FeetEndCal.h':\n"}
[3.465484] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.465547] (unitree_guide2) StdoutLine: {'line': b'3: --- include/Gait/FeetEndCal.h\n'}
[3.469579] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/Gait/FeetEndCal.h.uncrustify\n'}
[3.469807] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10 +10 @@\n'}
[3.469875] (unitree_guide2) StdoutLine: {'line': b'3: -class FeetEndCal{\n'}
[3.470040] (unitree_guide2) StdoutLine: {'line': b'3: +class FeetEndCal {\n'}
[3.470190] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,3 +12,4 @@\n'}
[3.470243] (unitree_guide2) StdoutLine: {'line': b'3: -    FeetEndCal(CtrlComponents *ctrlComp);\n'}
[3.470379] (unitree_guide2) StdoutLine: {'line': b'3: -    ~FeetEndCal();\n'}
[3.470431] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase);\n'}
[3.470494] (unitree_guide2) StdoutLine: {'line': b'3: +  FeetEndCal(CtrlComponents * ctrlComp);\n'}
[3.470549] (unitree_guide2) StdoutLine: {'line': b'3: +  ~FeetEndCal();\n'}
[3.470603] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase);\n'}
[3.470726] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.470912] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16,3 +17,3 @@\n'}
[3.470973] (unitree_guide2) StdoutLine: {'line': b'3: -    LowlevelState *_lowState;\n'}
[3.471020] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator *_est;\n'}
[3.471066] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot *_robModel;\n'}
[3.471111] (unitree_guide2) StdoutLine: {'line': b'3: +  LowlevelState * _lowState;\n'}
[3.471156] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator * _est;\n'}
[3.471200] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * _robModel;\n'}
[3.471244] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,4 +21,4 @@\n'}
[3.471288] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _nextStep, _footPos;\n'}
[3.471331] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _bodyVelGlobal;        // linear velocity\n'}
[3.471375] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _bodyAccGlobal;        // linear accelerator\n'}
[3.471418] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _bodyWGlobal;          // angular velocity\n'}
[3.471469] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _nextStep, _footPos;\n'}
[3.471522] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _bodyVelGlobal;          // linear velocity\n'}
[3.471577] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _bodyAccGlobal;          // linear accelerator\n'}
[3.471641] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _bodyWGlobal;            // angular velocity\n'}
[3.476856] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,2 +26,2 @@\n'}
[3.476988] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 _feetRadius, _feetInitAngle;\n'}
[3.477064] (unitree_guide2) StdoutLine: {'line': b'3: -    float _yaw, _dYaw, _nextYaw;\n'}
[3.477466] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 _feetRadius, _feetInitAngle;\n'}
[3.477543] (unitree_guide2) StdoutLine: {'line': b'3: +  float _yaw, _dYaw, _nextYaw;\n'}
[3.477608] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,2 +29,2 @@\n'}
[3.477655] (unitree_guide2) StdoutLine: {'line': b'3: -    float _Tstance, _Tswing;\n'}
[3.477702] (unitree_guide2) StdoutLine: {'line': b'3: -    float _kx, _ky, _kyaw;\n'}
[3.477747] (unitree_guide2) StdoutLine: {'line': b'3: +  float _Tstance, _Tswing;\n'}
[3.477793] (unitree_guide2) StdoutLine: {'line': b'3: +  float _kx, _ky, _kyaw;\n'}
[3.477845] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32 +33 @@\n'}
[3.477941] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // FEETENDCAL_H\n'}
[3.478012] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // FEETENDCAL_H\n'}
[3.478063] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.478154] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/Gait/GaitGenerator.h':\n"}
[3.478225] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.478278] (unitree_guide2) StdoutLine: {'line': b'3: --- include/Gait/GaitGenerator.h\n'}
[3.478336] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/Gait/GaitGenerator.h.uncrustify\n'}
[3.478718] (unitree_guide2) StdoutLine: {'line': b'3: @@ -15 +15 @@\n'}
[3.478772] (unitree_guide2) StdoutLine: {'line': b'3: -class GaitGenerator{\n'}
[3.478821] (unitree_guide2) StdoutLine: {'line': b'3: +class GaitGenerator {\n'}
[3.478913] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17,7 +17,8 @@\n'}
[3.478965] (unitree_guide2) StdoutLine: {'line': b'3: -    GaitGenerator(CtrlComponents *ctrlComp);\n'}
[3.479011] (unitree_guide2) StdoutLine: {'line': b'3: -    ~GaitGenerator();\n'}
[3.479062] (unitree_guide2) StdoutLine: {'line': b'3: -    void setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight);\n'}
[3.479146] (unitree_guide2) StdoutLine: {'line': b'3: -    void run(Vec34 &feetPos, Vec34 &feetVel);\n'}
[3.479202] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getFootPos(int i);\n'}
[3.479256] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getFootVel(int i);\n'}
[3.479310] (unitree_guide2) StdoutLine: {'line': b'3: -    void restart();\n'}
[3.479933] (-) TimerEvent: {}
[3.480075] (unitree_guide2) StdoutLine: {'line': b'3: +  GaitGenerator(CtrlComponents * ctrlComp);\n'}
[3.480145] (unitree_guide2) StdoutLine: {'line': b'3: +  ~GaitGenerator();\n'}
[3.480197] (unitree_guide2) StdoutLine: {'line': b'3: +  void setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight);\n'}
[3.480255] (unitree_guide2) StdoutLine: {'line': b'3: +  void run(Vec34 & feetPos, Vec34 & feetVel);\n'}
[3.480302] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getFootPos(int i);\n'}
[3.480347] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getFootVel(int i);\n'}
[3.480412] (unitree_guide2) StdoutLine: {'line': b'3: +  void restart();\n'}
[3.480458] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.480503] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,4 +26,4 @@\n'}
[3.480560] (unitree_guide2) StdoutLine: {'line': b'3: -    float cycloidXYPosition(float startXY, float endXY, float phase);\n'}
[3.480607] (unitree_guide2) StdoutLine: {'line': b'3: -    float cycloidXYVelocity(float startXY, float endXY, float phase);\n'}
[3.480667] (unitree_guide2) StdoutLine: {'line': b'3: -    float cycloidZPosition(float startZ, float height, float phase);\n'}
[3.480723] (unitree_guide2) StdoutLine: {'line': b'3: -    float cycloidZVelocity(float height, float phase);\n'}
[3.480789] (unitree_guide2) StdoutLine: {'line': b'3: +  float cycloidXYPosition(float startXY, float endXY, float phase);\n'}
[3.480850] (unitree_guide2) StdoutLine: {'line': b'3: +  float cycloidXYVelocity(float startXY, float endXY, float phase);\n'}
[3.481256] (unitree_guide2) StdoutLine: {'line': b'3: +  float cycloidZPosition(float startZ, float height, float phase);\n'}
[3.481309] (unitree_guide2) StdoutLine: {'line': b'3: +  float cycloidZVelocity(float height, float phase);\n'}
[3.481355] (unitree_guide2) StdoutLine: {'line': b'3: @@ -30,12 +31,12 @@\n'}
[3.481421] (unitree_guide2) StdoutLine: {'line': b'3: -    WaveGenerator *_waveG;\n'}
[3.481468] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator *_est;\n'}
[3.481514] (unitree_guide2) StdoutLine: {'line': b'3: -    FeetEndCal *_feetCal;\n'}
[3.481573] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot *_robModel;\n'}
[3.481617] (unitree_guide2) StdoutLine: {'line': b'3: -    LowlevelState *_state;\n'}
[3.481660] (unitree_guide2) StdoutLine: {'line': b'3: -    float _gaitHeight;\n'}
[3.488041] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 _vxyGoal;\n'}
[3.488162] (unitree_guide2) StdoutLine: {'line': b'3: -    float _dYawGoal;\n'}
[3.488216] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 *_phase, _phasePast;\n'}
[3.488266] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 *_contact;\n'}
[3.488313] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _startP, _endP, _idealP, _pastP;\n'}
[3.488371] (unitree_guide2) StdoutLine: {'line': b'3: -    bool _firstRun;\n'}
[3.488418] (unitree_guide2) StdoutLine: {'line': b'3: +  WaveGenerator * _waveG;\n'}
[3.488517] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator * _est;\n'}
[3.488618] (unitree_guide2) StdoutLine: {'line': b'3: +  FeetEndCal * _feetCal;\n'}
[3.488698] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * _robModel;\n'}
[3.488744] (unitree_guide2) StdoutLine: {'line': b'3: +  LowlevelState * _state;\n'}
[3.488790] (unitree_guide2) StdoutLine: {'line': b'3: +  float _gaitHeight;\n'}
[3.488834] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 _vxyGoal;\n'}
[3.488879] (unitree_guide2) StdoutLine: {'line': b'3: +  float _dYawGoal;\n'}
[3.488923] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 * _phase, _phasePast;\n'}
[3.488967] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * _contact;\n'}
[3.489019] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _startP, _endP, _idealP, _pastP;\n'}
[3.489064] (unitree_guide2) StdoutLine: {'line': b'3: +  bool _firstRun;\n'}
[3.489108] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44 +45 @@\n'}
[3.489152] (unitree_guide2) StdoutLine: {'line': b'3: -    PyPlot _testGaitPlot;\n'}
[3.489200] (unitree_guide2) StdoutLine: {'line': b'3: +  PyPlot _testGaitPlot;\n'}
[3.489246] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49 +50 @@\n'}
[3.489291] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // GAITGENERATOR_H\n'}
[3.489336] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // GAITGENERATOR_H\n'}
[3.489380] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.489424] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/Gait/WaveGenerator.h':\n"}
[3.489470] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.489515] (unitree_guide2) StdoutLine: {'line': b'3: --- include/Gait/WaveGenerator.h\n'}
[3.489559] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/Gait/WaveGenerator.h.uncrustify\n'}
[3.489604] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17 +17 @@\n'}
[3.489648] (unitree_guide2) StdoutLine: {'line': b'3: -class WaveGenerator{\n'}
[3.489692] (unitree_guide2) StdoutLine: {'line': b'3: +class WaveGenerator {\n'}
[3.489737] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,6 +19,7 @@\n'}
[3.489782] (unitree_guide2) StdoutLine: {'line': b'3: -    WaveGenerator(double period, double stancePhaseRatio, Vec4 bias);\n'}
[3.489835] (unitree_guide2) StdoutLine: {'line': b'3: -    ~WaveGenerator();\n'}
[3.489880] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcContactPhase(Vec4 &phaseResult, VecInt4 &contactResult, WaveStatus status);\n'}
[3.489926] (unitree_guide2) StdoutLine: {'line': b'3: -    float getTstance();\n'}
[3.489971] (unitree_guide2) StdoutLine: {'line': b'3: -    float getTswing();\n'}
[3.490015] (unitree_guide2) StdoutLine: {'line': b'3: -    float getT();\n'}
[3.490060] (unitree_guide2) StdoutLine: {'line': b'3: +  WaveGenerator(double period, double stancePhaseRatio, Vec4 bias);\n'}
[3.490105] (unitree_guide2) StdoutLine: {'line': b'3: +  ~WaveGenerator();\n'}
[3.490150] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcContactPhase(Vec4 & phaseResult, VecInt4 & contactResult, WaveStatus status);\n'}
[3.490195] (unitree_guide2) StdoutLine: {'line': b'3: +  float getTstance();\n'}
[3.490240] (unitree_guide2) StdoutLine: {'line': b'3: +  float getTswing();\n'}
[3.490285] (unitree_guide2) StdoutLine: {'line': b'3: +  float getT();\n'}
[3.490331] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.490375] (unitree_guide2) StdoutLine: {'line': b'3: @@ -26 +27 @@\n'}
[3.490420] (unitree_guide2) StdoutLine: {'line': b'3: -    void calcWave(Vec4 &phase, VecInt4 &contact, WaveStatus status);\n'}
[3.490465] (unitree_guide2) StdoutLine: {'line': b'3: +  void calcWave(Vec4 & phase, VecInt4 & contact, WaveStatus status);\n'}
[3.490510] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,3 +29,3 @@\n'}
[3.490555] (unitree_guide2) StdoutLine: {'line': b'3: -    double _period;\n'}
[3.490599] (unitree_guide2) StdoutLine: {'line': b'3: -    double _stRatio;\n'}
[3.490643] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 _bias;\n'}
[3.490688] (unitree_guide2) StdoutLine: {'line': b'3: +  double _period;\n'}
[3.490733] (unitree_guide2) StdoutLine: {'line': b'3: +  double _stRatio;\n'}
[3.490777] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 _bias;\n'}
[3.490821] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32,5 +33,5 @@\n'}
[3.490864] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 _normalT;                   // [0, 1)\n'}
[3.490909] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 _phase, _phasePast;\n'}
[3.490953] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 _contact, _contactPast;\n'}
[3.490998] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 _switchStatus;          // 1: switching, 0: do not switch\n'}
[3.491043] (unitree_guide2) StdoutLine: {'line': b'3: -    WaveStatus _statusPast;\n'}
[3.491095] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 _normalT;                     // [0, 1)\n'}
[3.496077] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 _phase, _phasePast;\n'}
[3.496180] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 _contact, _contactPast;\n'}
[3.496242] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 _switchStatus;            // 1: switching, 0: do not switch\n'}
[3.496304] (unitree_guide2) StdoutLine: {'line': b'3: +  WaveStatus _statusPast;\n'}
[3.496390] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38,2 +39,2 @@\n'}
[3.496444] (unitree_guide2) StdoutLine: {'line': b'3: -    double _passT;                   // unit: second\n'}
[3.496496] (unitree_guide2) StdoutLine: {'line': b'3: -    long long _startT;    // unit: us\n'}
[3.496551] (unitree_guide2) StdoutLine: {'line': b'3: +  double _passT;                     // unit: second\n'}
[3.496999] (unitree_guide2) StdoutLine: {'line': b'3: +  long long _startT;      // unit: us\n'}
[3.497071] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41 +42 @@\n'}
[3.497122] (unitree_guide2) StdoutLine: {'line': b'3: -    PyPlot _testPlot;\n'}
[3.497172] (unitree_guide2) StdoutLine: {'line': b'3: +  PyPlot _testPlot;\n'}
[3.497219] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46 +47 @@\n'}
[3.497265] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // WAVEGENERATOR_H\n'}
[3.497311] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // WAVEGENERATOR_H\n'}
[3.497356] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.497401] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/LowPassFilter.h':\n"}
[3.497461] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.497516] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/LowPassFilter.h\n'}
[3.497839] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/LowPassFilter.h.uncrustify\n'}
[3.497951] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7 +7 @@\n'}
[3.498006] (unitree_guide2) StdoutLine: {'line': b'3: -class LPFilter{\n'}
[3.498054] (unitree_guide2) StdoutLine: {'line': b'3: +class LPFilter {\n'}
[3.498121] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9,5 +9,6 @@\n'}
[3.498178] (unitree_guide2) StdoutLine: {'line': b'3: -    LPFilter(double samplePeriod, double cutFrequency);\n'}
[3.498227] (unitree_guide2) StdoutLine: {'line': b'3: -    ~LPFilter();\n'}
[3.498271] (unitree_guide2) StdoutLine: {'line': b'3: -    void addValue(double newValue);\n'}
[3.498315] (unitree_guide2) StdoutLine: {'line': b'3: -    double getValue();\n'}
[3.498358] (unitree_guide2) StdoutLine: {'line': b'3: -    void clear();\n'}
[3.498936] (unitree_guide2) StdoutLine: {'line': b'3: +  LPFilter(double samplePeriod, double cutFrequency);\n'}
[3.499301] (unitree_guide2) StdoutLine: {'line': b'3: +  ~LPFilter();\n'}
[3.499375] (unitree_guide2) StdoutLine: {'line': b'3: +  void addValue(double newValue);\n'}
[3.499427] (unitree_guide2) StdoutLine: {'line': b'3: +  double getValue();\n'}
[3.499474] (unitree_guide2) StdoutLine: {'line': b'3: +  void clear();\n'}
[3.499520] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.499565] (unitree_guide2) StdoutLine: {'line': b'3: @@ -15,3 +16,3 @@\n'}
[3.499609] (unitree_guide2) StdoutLine: {'line': b'3: -    double _weight;\n'}
[3.499686] (unitree_guide2) StdoutLine: {'line': b'3: -    double _pastValue;\n'}
[3.500278] (unitree_guide2) StdoutLine: {'line': b'3: -    bool _start;\n'}
[3.500345] (unitree_guide2) StdoutLine: {'line': b'3: +  double _weight;\n'}
[3.500396] (unitree_guide2) StdoutLine: {'line': b'3: +  double _pastValue;\n'}
[3.500442] (unitree_guide2) StdoutLine: {'line': b'3: +  bool _start;\n'}
[3.500499] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20 +21 @@\n'}
[3.500543] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // LOWPASSFILTER\n'}
[3.500586] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // LOWPASSFILTER\n'}
[3.500628] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.500697] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/PyPlot.h':\n"}
[3.500763] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.500830] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/PyPlot.h\n'}
[3.500880] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/PyPlot.h.uncrustify\n'}
[3.500925] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18,12 +18,11 @@\n'}
[3.500973] (unitree_guide2) StdoutLine: {'line': b'3: -struct Curve{\n'}
[3.501017] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<double> x;\n'}
[3.501076] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<double> y;\n'}
[3.501123] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.501679] (unitree_guide2) StdoutLine: {'line': b'3: -    void printXY(double xRough, int pointNum){\n'}
[3.501759] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<x.size(); ++i){\n'}
[3.501810] (unitree_guide2) StdoutLine: {'line': b'3: -            if(xRough < x[i]){\n'}
[3.501916] (unitree_guide2) StdoutLine: {'line': b'3: -                for(int j(0); j < pointNum; ++j){\n'}
[3.501967] (unitree_guide2) StdoutLine: {'line': b'3: -                    std::cout << "  X: " << x[i+j] << ", Y: " << y[i+j] << std::endl;\n'}
[3.502019] (unitree_guide2) StdoutLine: {'line': b'3: -                }\n'}
[3.502067] (unitree_guide2) StdoutLine: {'line': b'3: -                break;\n'}
[3.502115] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[3.502161] (unitree_guide2) StdoutLine: {'line': b'3: +struct Curve\n'}
[3.502207] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.502252] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < double > x;\n'}
[3.502297] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < double > y;\n'}
[3.502342] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.502386] (unitree_guide2) StdoutLine: {'line': b'3: +  void printXY(double xRough, int pointNum)\n'}
[3.502435] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.502519] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < x.size(); ++i) {\n'}
[3.502583] (unitree_guide2) StdoutLine: {'line': b'3: +      if (xRough < x[i]) {\n'}
[3.502649] (unitree_guide2) StdoutLine: {'line': b'3: +        for (int j(0); j < pointNum; ++j) {\n'}
[3.505088] (unitree_guide2) StdoutLine: {'line': b'3: +          std::cout << "  X: " << x[i + j] << ", Y: " << y[i + j] << std::endl;\n'}
[3.505160] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31 +30,4 @@\n'}
[3.505209] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.505255] (unitree_guide2) StdoutLine: {'line': b'3: +        break;\n'}
[3.505300] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.505345] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.505389] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.505432] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34,30 +36,33 @@\n'}
[3.505475] (unitree_guide2) StdoutLine: {'line': b'3: -struct Plot{\n'}
[3.505518] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<Curve*> curves;\n'}
[3.505566] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<std::string> labels;\n'}
[3.505610] (unitree_guide2) StdoutLine: {'line': b'3: -    std::string plotName;\n'}
[3.505653] (unitree_guide2) StdoutLine: {'line': b'3: -    int curveCount;\n'}
[3.505697] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.505740] (unitree_guide2) StdoutLine: {'line': b'3: -    std::map<std::string, int> curveName2ID;\n'}
[3.505783] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.505826] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot(std::string name, int count, std::vector<std::string> labelVec)\n'}
[3.505873] (unitree_guide2) StdoutLine: {'line': b'3: -        :plotName(name), curveCount(count), labels(labelVec){\n'}
[3.505922] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i < count; ++i){\n'}
[3.506029] (unitree_guide2) StdoutLine: {'line': b'3: -            curveName2ID.insert(std::pair<std::string, int>(labels[i], i));\n'}
[3.506101] (unitree_guide2) StdoutLine: {'line': b'3: -            curves.push_back(new Curve());\n'}
[3.506302] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.506361] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.506405] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.506449] (unitree_guide2) StdoutLine: {'line': b'3: -    ~Plot(){\n'}
[3.506493] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i < curveCount; ++i){\n'}
[3.506542] (unitree_guide2) StdoutLine: {'line': b'3: -            delete curves[i];\n'}
[3.506594] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.506648] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.506699] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.506752] (unitree_guide2) StdoutLine: {'line': b'3: -    double getX(long long startT){\n'}
[3.506815] (unitree_guide2) StdoutLine: {'line': b'3: -        return (double)(getSystemTime() - startT) * 1e-6;\n'}
[3.506992] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.507079] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.507160] (unitree_guide2) StdoutLine: {'line': b'3: -    void printXY(std::string curveName, double xRough, int pointNum){\n'}
[3.507243] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[DEBUG] Plot: " << plotName << ", Curve: " << curveName << std::endl;\n'}
[3.507298] (unitree_guide2) StdoutLine: {'line': b'3: -        curves[curveName2ID[curveName]]->printXY(xRough, pointNum);\n'}
[3.507351] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.507403] (unitree_guide2) StdoutLine: {'line': b'3: +struct Plot\n'}
[3.507454] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.507529] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < Curve * > curves;\n'}
[3.507598] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < std::string > labels;\n'}
[3.507659] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string plotName;\n'}
[3.507712] (unitree_guide2) StdoutLine: {'line': b'3: +  int curveCount;\n'}
[3.507768] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.518770] (unitree_guide2) StdoutLine: {'line': b'3: +  std::map < std::string, int > curveName2ID;\n'}
[3.519341] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.519411] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot(std::string name, int count, std::vector < std::string > labelVec)\n'}
[3.519469] (unitree_guide2) StdoutLine: {'line': b'3: +    : plotName(name), curveCount(count), labels(labelVec) {\n'}
[3.519518] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < count; ++i) {\n'}
[3.519690] (unitree_guide2) StdoutLine: {'line': b'3: +      curveName2ID.insert(std::pair < std::string, int > (labels[i], i));\n'}
[3.519744] (unitree_guide2) StdoutLine: {'line': b'3: +      curves.push_back(new Curve());\n'}
[3.519800] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.519858] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.519960] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.520031] (unitree_guide2) StdoutLine: {'line': b'3: +  ~Plot() {\n'}
[3.529224] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < curveCount; ++i) {\n'}
[3.529307] (unitree_guide2) StdoutLine: {'line': b'3: +      delete curves[i];\n'}
[3.529356] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.529402] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.529446] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.529500] (unitree_guide2) StdoutLine: {'line': b'3: +  double getX(long long startT)\n'}
[3.529579] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.529670] (unitree_guide2) StdoutLine: {'line': b'3: +    return (double)(getSystemTime() - startT) * 1e-6;\n'}
[3.529772] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.529837] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.531970] (unitree_guide2) StdoutLine: {'line': b'3: +  void printXY(std::string curveName, double xRough, int pointNum)\n'}
[3.532024] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.532070] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[DEBUG] Plot: " << plotName << ", Curve: " << curveName << std::endl;\n'}
[3.532121] (unitree_guide2) StdoutLine: {'line': b'3: +    curves[curveName2ID[curveName]]->printXY(xRough, pointNum);\n'}
[3.532166] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.532214] (unitree_guide2) StdoutLine: {'line': b'3: @@ -66 +71 @@\n'}
[3.532257] (unitree_guide2) StdoutLine: {'line': b'3: -class PyPlot{\n'}
[3.532301] (unitree_guide2) StdoutLine: {'line': b'3: +class PyPlot {\n'}
[3.532344] (unitree_guide2) StdoutLine: {'line': b'3: @@ -68,27 +73,27 @@\n'}
[3.532387] (unitree_guide2) StdoutLine: {'line': b'3: -    PyPlot();\n'}
[3.532430] (unitree_guide2) StdoutLine: {'line': b'3: -    ~PyPlot();\n'}
[3.532473] (unitree_guide2) StdoutLine: {'line': b'3: -    void addPlot(std::string plotName, int curveCount, std::vector<std::string> labelVec);\n'}
[3.532517] (unitree_guide2) StdoutLine: {'line': b'3: -    void addPlot(std::string plotName, int curveCount);\n'}
[3.532560] (unitree_guide2) StdoutLine: {'line': b'3: -    void showPlot(std::string plotName);\n'}
[3.532604] (unitree_guide2) StdoutLine: {'line': b'3: -    void showPlot(std::vector<std::string> plotNameVec);\n'}
[3.532647] (unitree_guide2) StdoutLine: {'line': b'3: -    void showPlotAll();\n'}
[3.532690] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.532733] (unitree_guide2) StdoutLine: {'line': b'3: -    void printXY(std::string plotName, std::string curveName, double xRough, int pointNum = 1);\n'}
[3.532776] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.532819] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, double value);\n'}
[3.532890] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, double x, double value);\n'}
[3.532950] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.532993] (unitree_guide2) StdoutLine: {'line': b'3: -    template <typename T>\n'}
[3.533036] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, T* valueArray);\n'}
[3.533079] (unitree_guide2) StdoutLine: {'line': b'3: -    template <typename T>\n'}
[3.533121] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, double x, T* valueArray);\n'}
[3.533164] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.533206] (unitree_guide2) StdoutLine: {'line': b'3: -    template <typename T>\n'}
[3.533248] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, const Eigen::MatrixBase<T> &vec);\n'}
[3.533299] (unitree_guide2) StdoutLine: {'line': b'3: -    template <typename T>\n'}
[3.533341] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, double x, const Eigen::MatrixBase<T> &vec);\n'}
[3.533384] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.533426] (unitree_guide2) StdoutLine: {'line': b'3: -    template <typename T>\n'}
[3.533468] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, const std::vector<T> &vec);\n'}
[3.533510] (unitree_guide2) StdoutLine: {'line': b'3: -    template <typename T>\n'}
[3.533552] (unitree_guide2) StdoutLine: {'line': b'3: -    void addFrame(std::string plotName, double x, const std::vector<T> &vec);\n'}
[3.533594] (unitree_guide2) StdoutLine: {'line': b'3: +  PyPlot();\n'}
[3.533636] (unitree_guide2) StdoutLine: {'line': b'3: +  ~PyPlot();\n'}
[3.533678] (unitree_guide2) StdoutLine: {'line': b'3: +  void addPlot(std::string plotName, int curveCount, std::vector < std::string > labelVec);\n'}
[3.533721] (unitree_guide2) StdoutLine: {'line': b'3: +  void addPlot(std::string plotName, int curveCount);\n'}
[3.533762] (unitree_guide2) StdoutLine: {'line': b'3: +  void showPlot(std::string plotName);\n'}
[3.533804] (unitree_guide2) StdoutLine: {'line': b'3: +  void showPlot(std::vector < std::string > plotNameVec);\n'}
[3.533847] (unitree_guide2) StdoutLine: {'line': b'3: +  void showPlotAll();\n'}
[3.533899] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.533959] (unitree_guide2) StdoutLine: {'line': b'3: +  void printXY(std::string plotName, std::string curveName, double xRough, int pointNum = 1);\n'}
[3.537175] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.537288] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, double value);\n'}
[3.537464] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, double x, double value);\n'}
[3.537529] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.538126] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[3.538193] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, T * valueArray);\n'}
[3.538243] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[3.538290] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, double x, T * valueArray);\n'}
[3.538337] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.538382] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[3.538427] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, const Eigen::MatrixBase < T > & vec);\n'}
[3.538472] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[3.538515] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, double x, const Eigen::MatrixBase < T > & vec);\n'}
[3.538560] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.538707] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[3.538766] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, const std::vector < T > & vec);\n'}
[3.538842] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[3.538891] (unitree_guide2) StdoutLine: {'line': b'3: +  void addFrame(std::string plotName, double x, const std::vector < T > & vec);\n'}
[3.538935] (unitree_guide2) StdoutLine: {'line': b'3: @@ -97,8 +102,8 @@\n'}
[3.538978] (unitree_guide2) StdoutLine: {'line': b'3: -    void _checkStart();\n'}
[3.539021] (unitree_guide2) StdoutLine: {'line': b'3: -    int _plotCount = 0;\n'}
[3.539064] (unitree_guide2) StdoutLine: {'line': b'3: -    std::map<std::string, int> _plotName2ID;\n'}
[3.539108] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector< Plot* > _plots;\n'}
[3.539152] (unitree_guide2) StdoutLine: {'line': b'3: -    long long _pointNum;\n'}
[3.539196] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* _getPlotPtr(std::string plotName);\n'}
[3.539240] (unitree_guide2) StdoutLine: {'line': b'3: -    bool start;\n'}
[3.539770] (unitree_guide2) StdoutLine: {'line': b'3: -    long long startT;\n'}
[3.539829] (unitree_guide2) StdoutLine: {'line': b'3: +  void _checkStart();\n'}
[3.539881] (unitree_guide2) StdoutLine: {'line': b'3: +  int _plotCount = 0;\n'}
[3.539931] (unitree_guide2) StdoutLine: {'line': b'3: +  std::map < std::string, int > _plotName2ID;\n'}
[3.539979] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < Plot * > _plots;\n'}
[3.540028] (unitree_guide2) StdoutLine: {'line': b'3: +  long long _pointNum;\n'}
[3.540076] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * _getPlotPtr(std::string plotName);\n'}
[3.540126] (unitree_guide2) StdoutLine: {'line': b'3: +  bool start;\n'}
[3.540181] (unitree_guide2) StdoutLine: {'line': b'3: +  long long startT;\n'}
[3.540230] (unitree_guide2) StdoutLine: {'line': b'3: @@ -107,43 +112,68 @@\n'}
[3.540276] (unitree_guide2) StdoutLine: {'line': b'3: -inline PyPlot::PyPlot(){\n'}
[3.540323] (unitree_guide2) StdoutLine: {'line': b'3: -    start = false;\n'}
[3.540369] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.540417] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.540462] (unitree_guide2) StdoutLine: {'line': b'3: -inline PyPlot::~PyPlot(){\n'}
[3.540509] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < _plotCount; ++i){\n'}
[3.540555] (unitree_guide2) StdoutLine: {'line': b'3: -        delete _plots[i];\n'}
[3.540603] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.540649] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.540707] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.540755] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::_checkStart(){\n'}
[3.540889] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!start){\n'}
[3.541750] (unitree_guide2) StdoutLine: {'line': b'3: -        start = true;\n'}
[3.541812] (unitree_guide2) StdoutLine: {'line': b'3: -        startT = getSystemTime();\n'}
[3.541898] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.541972] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.542019] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.542084] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::printXY(std::string plotName, std::string curveName, double xRough, int pointNum){\n'}
[3.542160] (unitree_guide2) StdoutLine: {'line': b'3: -    _plots[_plotName2ID[plotName]]->printXY(curveName, xRough, pointNum);\n'}
[3.542209] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.542287] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.542354] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addPlot(std::string plotName, int curveCount, std::vector<std::string> labelVec){\n'}
[3.542399] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_plotName2ID.count(plotName) == 0){\n'}
[3.542444] (unitree_guide2) StdoutLine: {'line': b'3: -        _plotName2ID.insert(std::pair<std::string, int>(plotName, _plotCount));\n'}
[3.542488] (unitree_guide2) StdoutLine: {'line': b'3: -        ++_plotCount;\n'}
[3.542532] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.542576] (unitree_guide2) StdoutLine: {'line': b'3: -        _plots.push_back( new Plot(plotName, curveCount, labelVec) );\n'}
[3.542622] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[3.542670] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] Already has same Plot: " << plotName << std::endl;\n'}
[3.542715] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[3.542759] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.542813] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.542888] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.543487] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addPlot(std::string plotName, int curveCount){\n'}
[3.543538] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<std::string> label;\n'}
[3.543584] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < curveCount; ++i){\n'}
[3.543633] (unitree_guide2) StdoutLine: {'line': b'3: -        label.push_back(std::to_string(i+1));\n'}
[3.549009] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.549094] (unitree_guide2) StdoutLine: {'line': b'3: -    addPlot(plotName, curveCount, label);\n'}
[3.549142] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.549188] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.549232] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::showPlot(std::string plotName){\n'}
[3.549277] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.549321] (unitree_guide2) StdoutLine: {'line': b'3: +inline PyPlot::PyPlot()\n'}
[3.549366] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.549411] (unitree_guide2) StdoutLine: {'line': b'3: +  start = false;\n'}
[3.549457] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.549508] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.549552] (unitree_guide2) StdoutLine: {'line': b'3: +inline PyPlot::~PyPlot()\n'}
[3.549598] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.549644] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < _plotCount; ++i) {\n'}
[3.549985] (unitree_guide2) StdoutLine: {'line': b'3: +    delete _plots[i];\n'}
[3.550066] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.550123] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.550222] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.550277] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::_checkStart()\n'}
[3.551062] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.551137] (unitree_guide2) StdoutLine: {'line': b'3: +  if (!start) {\n'}
[3.551256] (unitree_guide2) StdoutLine: {'line': b'3: +    start = true;\n'}
[3.551319] (unitree_guide2) StdoutLine: {'line': b'3: +    startT = getSystemTime();\n'}
[3.551451] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.551519] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.551573] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.551655] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::printXY(\n'}
[3.551710] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string plotName, std::string curveName, double xRough,\n'}
[3.551765] (unitree_guide2) StdoutLine: {'line': b'3: +  int pointNum)\n'}
[3.551818] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.552063] (unitree_guide2) StdoutLine: {'line': b'3: +  _plots[_plotName2ID[plotName]]->printXY(curveName, xRough, pointNum);\n'}
[3.552134] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.552196] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.552301] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addPlot(\n'}
[3.552492] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string plotName, int curveCount,\n'}
[3.552565] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < std::string > labelVec)\n'}
[3.552614] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.552658] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_plotName2ID.count(plotName) == 0) {\n'}
[3.552716] (unitree_guide2) StdoutLine: {'line': b'3: +    _plotName2ID.insert(std::pair < std::string, int > (plotName, _plotCount));\n'}
[3.552939] (unitree_guide2) StdoutLine: {'line': b'3: +    ++_plotCount;\n'}
[3.553025] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.553086] (unitree_guide2) StdoutLine: {'line': b'3: +    _plots.push_back(new Plot(plotName, curveCount, labelVec) );\n'}
[3.553145] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.553201] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] Already has same Plot: " << plotName << std::endl;\n'}
[3.553260] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[3.553441] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.553545] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.553601] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.553655] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addPlot(std::string plotName, int curveCount)\n'}
[3.553710] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.553768] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < std::string > label;\n'}
[3.553835] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < curveCount; ++i) {\n'}
[3.554202] (unitree_guide2) StdoutLine: {'line': b'3: +    label.push_back(std::to_string(i + 1));\n'}
[3.554424] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.554521] (unitree_guide2) StdoutLine: {'line': b'3: +  addPlot(plotName, curveCount, label);\n'}
[3.554673] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.554742] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.554799] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::showPlot(std::string plotName)\n'}
[3.554894] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.554973] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.555030] (unitree_guide2) StdoutLine: {'line': b'3: +  plt::figure();\n'}
[3.555089] (unitree_guide2) StdoutLine: {'line': b'3: +  plt::title(plot->plotName);\n'}
[3.555155] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < plot->curveCount; ++i) {\n'}
[3.555213] (unitree_guide2) StdoutLine: {'line': b'3: +    plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);\n'}
[3.555272] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.555325] (unitree_guide2) StdoutLine: {'line': b'3: +  plt::legend();\n'}
[3.555389] (unitree_guide2) StdoutLine: {'line': b'3: +  plt::show();\n'}
[3.555447] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.555588] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.555658] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::showPlot(std::vector < std::string > plotNameVec)\n'}
[3.555725] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.555831] (unitree_guide2) StdoutLine: {'line': b'3: +  for (std::vector < std::string > ::iterator itName = plotNameVec.begin();\n'}
[3.555922] (unitree_guide2) StdoutLine: {'line': b'3: +    itName != plotNameVec.end(); ++itName)\n'}
[3.555991] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.556049] (unitree_guide2) StdoutLine: {'line': b'3: @@ -150,0 +181 @@\n'}
[3.556105] (unitree_guide2) StdoutLine: {'line': b'3: +    Plot * plot = _plots[_plotName2ID[*itName]];\n'}
[3.556220] (unitree_guide2) StdoutLine: {'line': b'3: @@ -152,2 +183,2 @@\n'}
[3.556267] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < plot->curveCount; ++i){\n'}
[3.556313] (unitree_guide2) StdoutLine: {'line': b'3: -        plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);\n'}
[3.556367] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < plot->curveCount; ++i) {\n'}
[3.556413] (unitree_guide2) StdoutLine: {'line': b'3: +      plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);\n'}
[3.556457] (unitree_guide2) StdoutLine: {'line': b'3: @@ -156,103 +187,101 @@\n'}
[3.556502] (unitree_guide2) StdoutLine: {'line': b'3: -    plt::show();\n'}
[3.556546] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.556590] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.556634] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::showPlot(std::vector<std::string> plotNameVec){\n'}
[3.556678] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::vector<std::string>::iterator itName = plotNameVec.begin(); itName != plotNameVec.end(); ++itName){\n'}
[3.556724] (unitree_guide2) StdoutLine: {'line': b'3: -        plt::figure();\n'}
[3.556767] (unitree_guide2) StdoutLine: {'line': b'3: -        Plot* plot = _plots[_plotName2ID[*itName]];\n'}
[3.556811] (unitree_guide2) StdoutLine: {'line': b'3: -        plt::title(plot->plotName);\n'}
[3.556886] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i < plot->curveCount; ++i){\n'}
[3.556953] (unitree_guide2) StdoutLine: {'line': b'3: -            plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);\n'}
[3.556999] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.557042] (unitree_guide2) StdoutLine: {'line': b'3: -        plt::legend();\n'}
[3.557085] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.557128] (unitree_guide2) StdoutLine: {'line': b'3: -    plt::show();\n'}
[3.557170] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.557214] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.557257] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::showPlotAll(){\n'}
[3.557304] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < _plotCount; ++i){\n'}
[3.557351] (unitree_guide2) StdoutLine: {'line': b'3: -        plt::figure();\n'}
[3.557396] (unitree_guide2) StdoutLine: {'line': b'3: -        Plot* plot = _plots[i];\n'}
[3.557439] (unitree_guide2) StdoutLine: {'line': b'3: -        plt::title(plot->plotName);\n'}
[3.557481] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int j(0); j < plot->curveCount; ++j){\n'}
[3.557524] (unitree_guide2) StdoutLine: {'line': b'3: -            plt::named_plot(plot->labels[j], plot->curves[j]->x, plot->curves[j]->y);\n'}
[3.557568] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.557611] (unitree_guide2) StdoutLine: {'line': b'3: -        plt::legend();\n'}
[3.557654] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.557696] (unitree_guide2) StdoutLine: {'line': b'3: -    plt::show();\n'}
[3.557738] (unitree_guide2) StdoutLine: {'line': b'3: -    exit(0);\n'}
[3.557781] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.557824] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.557866] (unitree_guide2) StdoutLine: {'line': b'3: -inline Plot* PyPlot::_getPlotPtr(std::string plotName){\n'}
[3.557909] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_plotName2ID.count(plotName) == 0){\n'}
[3.557966] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] Plot " << plotName << " does not exist" << std::endl;\n'}
[3.558011] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[3.558056] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[3.558099] (unitree_guide2) StdoutLine: {'line': b'3: -        return _plots[_plotName2ID[plotName]];\n'}
[3.558143] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.558187] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.558230] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.558275] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, double value){\n'}
[3.558327] (unitree_guide2) StdoutLine: {'line': b'3: -    _checkStart();\n'}
[3.558370] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.558413] (unitree_guide2) StdoutLine: {'line': b'3: -    addFrame(plotName, plot->getX(startT), value);\n'}
[3.558455] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.558498] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.558541] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, double x, double value){\n'}
[3.558584] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.558627] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[3.558670] (unitree_guide2) StdoutLine: {'line': b'3: -    plot->curves[0]->x.push_back(x);\n'}
[3.558714] (unitree_guide2) StdoutLine: {'line': b'3: -    plot->curves[0]->y.push_back(value);\n'}
[3.558757] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.558800] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.558843] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[3.558887] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, T* valueArray){\n'}
[3.558931] (unitree_guide2) StdoutLine: {'line': b'3: -    _checkStart();\n'}
[3.558974] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.559016] (unitree_guide2) StdoutLine: {'line': b'3: -    addFrame(plotName, plot->getX(startT), valueArray);\n'}
[3.559060] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.559102] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.559145] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[3.559187] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, double x, T* valueArray){\n'}
[3.559231] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.559287] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.559332] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < plot->curveCount; ++i){\n'}
[3.559376] (unitree_guide2) StdoutLine: {'line': b'3: -        plot->curves[i]->x.push_back(x);\n'}
[3.559419] (unitree_guide2) StdoutLine: {'line': b'3: -        plot->curves[i]->y.push_back(valueArray[i]);\n'}
[3.559462] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.559506] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.559550] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.559594] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[3.559636] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, const Eigen::MatrixBase<T> &vec){\n'}
[3.559701] (unitree_guide2) StdoutLine: {'line': b'3: -    _checkStart();\n'}
[3.559746] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.559789] (unitree_guide2) StdoutLine: {'line': b'3: -    addFrame(plotName, plot->getX(startT), vec);\n'}
[3.559832] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.559874] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.559917] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[3.559960] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, double x, const Eigen::MatrixBase<T> &vec){\n'}
[3.560010] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.560053] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.560096] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < plot->curveCount; ++i){\n'}
[3.560139] (unitree_guide2) StdoutLine: {'line': b'3: -        plot->curves[i]->x.push_back(x);\n'}
[3.560182] (unitree_guide2) StdoutLine: {'line': b'3: -        plot->curves[i]->y.push_back(vec(i));\n'}
[3.560227] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.560272] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.560316] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.560359] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[3.560402] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, const std::vector<T> &vec){\n'}
[3.560445] (unitree_guide2) StdoutLine: {'line': b'3: -    _checkStart();\n'}
[3.560488] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.560536] (unitree_guide2) StdoutLine: {'line': b'3: -    addFrame(plotName, plot->getX(startT), vec);\n'}
[3.560580] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.560623] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.560666] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[3.560709] (unitree_guide2) StdoutLine: {'line': b'3: -inline void PyPlot::addFrame(std::string plotName, double x, const std::vector<T> &vec){\n'}
[3.560752] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot* plot = _getPlotPtr(plotName);\n'}
[3.560794] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.560836] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < plot->curveCount; ++i){\n'}
[3.560879] (unitree_guide2) StdoutLine: {'line': b'3: -        plot->curves[i]->x.push_back(x);\n'}
[3.560922] (unitree_guide2) StdoutLine: {'line': b'3: -        plot->curves[i]->y.push_back(vec[i]);\n'}
[3.560964] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.561007] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.561051] (unitree_guide2) StdoutLine: {'line': b'3: -#endif // PYPLOT_H\n'}
[3.561094] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.561137] (unitree_guide2) StdoutLine: {'line': b'3: +  plt::show();\n'}
[3.561180] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.561228] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.561271] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::showPlotAll()\n'}
[3.561314] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.561356] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < _plotCount; ++i) {\n'}
[3.561399] (unitree_guide2) StdoutLine: {'line': b'3: +    plt::figure();\n'}
[3.561441] (unitree_guide2) StdoutLine: {'line': b'3: +    Plot * plot = _plots[i];\n'}
[3.561485] (unitree_guide2) StdoutLine: {'line': b'3: +    plt::title(plot->plotName);\n'}
[3.561527] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int j(0); j < plot->curveCount; ++j) {\n'}
[3.561570] (unitree_guide2) StdoutLine: {'line': b'3: +      plt::named_plot(plot->labels[j], plot->curves[j]->x, plot->curves[j]->y);\n'}
[3.561613] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.561656] (unitree_guide2) StdoutLine: {'line': b'3: +    plt::legend();\n'}
[3.561698] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.561741] (unitree_guide2) StdoutLine: {'line': b'3: +  plt::show();\n'}
[3.561784] (unitree_guide2) StdoutLine: {'line': b'3: +  exit(0);\n'}
[3.561827] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.561870] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.561913] (unitree_guide2) StdoutLine: {'line': b'3: +inline Plot * PyPlot::_getPlotPtr(std::string plotName)\n'}
[3.561956] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.561998] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_plotName2ID.count(plotName) == 0) {\n'}
[3.562041] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] Plot " << plotName << " does not exist" << std::endl;\n'}
[3.562091] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[3.562134] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.562178] (unitree_guide2) StdoutLine: {'line': b'3: +    return _plots[_plotName2ID[plotName]];\n'}
[3.562224] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.562266] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.562310] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.562352] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, double value)\n'}
[3.562396] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.562439] (unitree_guide2) StdoutLine: {'line': b'3: +  _checkStart();\n'}
[3.562482] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.562526] (unitree_guide2) StdoutLine: {'line': b'3: +  addFrame(plotName, plot->getX(startT), value);\n'}
[3.562570] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.562613] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.562657] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, double x, double value)\n'}
[3.562701] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.562743] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.562786] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.562829] (unitree_guide2) StdoutLine: {'line': b'3: +  plot->curves[0]->x.push_back(x);\n'}
[3.562871] (unitree_guide2) StdoutLine: {'line': b'3: +  plot->curves[0]->y.push_back(value);\n'}
[3.562914] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.562957] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.562999] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.563042] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, T * valueArray)\n'}
[3.563085] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.563128] (unitree_guide2) StdoutLine: {'line': b'3: +  _checkStart();\n'}
[3.563175] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.563219] (unitree_guide2) StdoutLine: {'line': b'3: +  addFrame(plotName, plot->getX(startT), valueArray);\n'}
[3.563262] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.563305] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.563348] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.563391] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, double x, T * valueArray)\n'}
[3.563434] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.563478] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.563521] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.563563] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < plot->curveCount; ++i) {\n'}
[3.563606] (unitree_guide2) StdoutLine: {'line': b'3: +    plot->curves[i]->x.push_back(x);\n'}
[3.563648] (unitree_guide2) StdoutLine: {'line': b'3: +    plot->curves[i]->y.push_back(valueArray[i]);\n'}
[3.563690] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.563733] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.563775] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.563818] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.563860] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, const Eigen::MatrixBase < T > & vec)\n'}
[3.563904] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.563948] (unitree_guide2) StdoutLine: {'line': b'3: +  _checkStart();\n'}
[3.563992] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.564036] (unitree_guide2) StdoutLine: {'line': b'3: +  addFrame(plotName, plot->getX(startT), vec);\n'}
[3.564079] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.564123] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.564170] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.564214] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, double x, const Eigen::MatrixBase < T > & vec)\n'}
[3.564267] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.564310] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.564354] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.564398] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < plot->curveCount; ++i) {\n'}
[3.564441] (unitree_guide2) StdoutLine: {'line': b'3: +    plot->curves[i]->x.push_back(x);\n'}
[3.564484] (unitree_guide2) StdoutLine: {'line': b'3: +    plot->curves[i]->y.push_back(vec(i));\n'}
[3.564527] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.564570] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.564613] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.564655] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.564698] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, const std::vector < T > & vec)\n'}
[3.564742] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.564785] (unitree_guide2) StdoutLine: {'line': b'3: +  _checkStart();\n'}
[3.564828] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.564871] (unitree_guide2) StdoutLine: {'line': b'3: +  addFrame(plotName, plot->getX(startT), vec);\n'}
[3.564914] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.564957] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.564999] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.565041] (unitree_guide2) StdoutLine: {'line': b'3: +inline void PyPlot::addFrame(std::string plotName, double x, const std::vector < T > & vec)\n'}
[3.565089] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.565145] (unitree_guide2) StdoutLine: {'line': b'3: +  Plot * plot = _getPlotPtr(plotName);\n'}
[3.565190] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.565232] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < plot->curveCount; ++i) {\n'}
[3.565523] (unitree_guide2) StdoutLine: {'line': b'3: +    plot->curves[i]->x.push_back(x);\n'}
[3.565639] (unitree_guide2) StdoutLine: {'line': b'3: +    plot->curves[i]->y.push_back(vec[i]);\n'}
[3.565818] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.565926] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.565987] (unitree_guide2) StdoutLine: {'line': b'3: +#endif // PYPLOT_H\n'}
[3.566044] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.566104] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/enumClass.h':\n"}
[3.566160] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.566221] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/enumClass.h\n'}
[3.566296] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/enumClass.h.uncrustify\n'}
[3.566352] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10,3 +10,4 @@\n'}
[3.566408] (unitree_guide2) StdoutLine: {'line': b'3: -enum class CtrlPlatform{\n'}
[3.566538] (unitree_guide2) StdoutLine: {'line': b'3: -    GAZEBO,\n'}
[3.566608] (unitree_guide2) StdoutLine: {'line': b'3: -    REALROBOT,\n'}
[3.566661] (unitree_guide2) StdoutLine: {'line': b'3: +enum class CtrlPlatform\n'}
[3.566719] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.566775] (unitree_guide2) StdoutLine: {'line': b'3: +  GAZEBO,\n'}
[3.566956] (unitree_guide2) StdoutLine: {'line': b'3: +  REALROBOT,\n'}
[3.567030] (unitree_guide2) StdoutLine: {'line': b'3: @@ -15,3 +16,4 @@\n'}
[3.567095] (unitree_guide2) StdoutLine: {'line': b'3: -enum class RobotType{\n'}
[3.567152] (unitree_guide2) StdoutLine: {'line': b'3: -    A1,\n'}
[3.567205] (unitree_guide2) StdoutLine: {'line': b'3: -    Go1\n'}
[3.567260] (unitree_guide2) StdoutLine: {'line': b'3: +enum class RobotType\n'}
[3.567313] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.567453] (unitree_guide2) StdoutLine: {'line': b'3: +  A1,\n'}
[3.567508] (unitree_guide2) StdoutLine: {'line': b'3: +  Go1\n'}
[3.567559] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,7 +22,8 @@\n'}
[3.567619] (unitree_guide2) StdoutLine: {'line': b'3: -enum class UserCommand{\n'}
[3.567673] (unitree_guide2) StdoutLine: {'line': b'3: -    // EXIT,\n'}
[3.567725] (unitree_guide2) StdoutLine: {'line': b'3: -    NONE,\n'}
[3.567784] (unitree_guide2) StdoutLine: {'line': b'3: -    START,      // trotting\n'}
[3.567839] (unitree_guide2) StdoutLine: {'line': b'3: -    L2_A,       // fixedStand\n'}
[3.567934] (unitree_guide2) StdoutLine: {'line': b'3: -    L2_B,       // passive\n'}
[3.567990] (unitree_guide2) StdoutLine: {'line': b'3: -    L2_X,       // freeStand\n'}
[3.568164] (unitree_guide2) StdoutLine: {'line': b'3: +enum class UserCommand\n'}
[3.568214] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.568259] (unitree_guide2) StdoutLine: {'line': b'3: +  // EXIT,\n'}
[3.568309] (unitree_guide2) StdoutLine: {'line': b'3: +  NONE,\n'}
[3.568358] (unitree_guide2) StdoutLine: {'line': b'3: +  START,        // trotting\n'}
[3.568411] (unitree_guide2) StdoutLine: {'line': b'3: +  L2_A,         // fixedStand\n'}
[3.568578] (unitree_guide2) StdoutLine: {'line': b'3: +  L2_B,         // passive\n'}
[3.568627] (unitree_guide2) StdoutLine: {'line': b'3: +  L2_X,         // freeStand\n'}
[3.568672] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28 +31 @@\n'}
[3.568722] (unitree_guide2) StdoutLine: {'line': b'3: -    L2_Y,       // move_base\n'}
[3.568777] (unitree_guide2) StdoutLine: {'line': b'3: +  L2_Y,         // move_base\n'}
[3.568956] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31 +34 @@\n'}
[3.569022] (unitree_guide2) StdoutLine: {'line': b'3: -    L2_Y,       // move_base\n'}
[3.569068] (unitree_guide2) StdoutLine: {'line': b'3: +  L2_Y,         // move_base\n'}
[3.569111] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,3 +36,3 @@\n'}
[3.569162] (unitree_guide2) StdoutLine: {'line': b'3: -    L1_X,       // balanceTest\n'}
[3.569224] (unitree_guide2) StdoutLine: {'line': b'3: -    L1_A,       // swingTest\n'}
[3.569276] (unitree_guide2) StdoutLine: {'line': b'3: -    L1_Y        // stepTest\n'}
[3.569329] (unitree_guide2) StdoutLine: {'line': b'3: +  L1_X,         // balanceTest\n'}
[3.569382] (unitree_guide2) StdoutLine: {'line': b'3: +  L1_A,         // swingTest\n'}
[3.569436] (unitree_guide2) StdoutLine: {'line': b'3: +  L1_Y          // stepTest\n'}
[3.569489] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38,4 +41,5 @@\n'}
[3.569688] (unitree_guide2) StdoutLine: {'line': b'3: -enum class FrameType{\n'}
[3.569747] (unitree_guide2) StdoutLine: {'line': b'3: -    BODY,\n'}
[3.569792] (unitree_guide2) StdoutLine: {'line': b'3: -    HIP,\n'}
[3.569836] (unitree_guide2) StdoutLine: {'line': b'3: -    GLOBAL\n'}
[3.569911] (unitree_guide2) StdoutLine: {'line': b'3: +enum class FrameType\n'}
[3.570074] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.570129] (unitree_guide2) StdoutLine: {'line': b'3: +  BODY,\n'}
[3.570196] (unitree_guide2) StdoutLine: {'line': b'3: +  HIP,\n'}
[3.570251] (unitree_guide2) StdoutLine: {'line': b'3: +  GLOBAL\n'}
[3.570304] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44,4 +48,5 @@\n'}
[3.570467] (unitree_guide2) StdoutLine: {'line': b'3: -enum class WaveStatus{\n'}
[3.570515] (unitree_guide2) StdoutLine: {'line': b'3: -    STANCE_ALL,\n'}
[3.570561] (unitree_guide2) StdoutLine: {'line': b'3: -    SWING_ALL,\n'}
[3.570617] (unitree_guide2) StdoutLine: {'line': b'3: -    WAVE_ALL\n'}
[3.570786] (unitree_guide2) StdoutLine: {'line': b'3: +enum class WaveStatus\n'}
[3.570852] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.571050] (unitree_guide2) StdoutLine: {'line': b'3: +  STANCE_ALL,\n'}
[3.571133] (unitree_guide2) StdoutLine: {'line': b'3: +  SWING_ALL,\n'}
[3.571437] (unitree_guide2) StdoutLine: {'line': b'3: +  WAVE_ALL\n'}
[3.571622] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50,3 +55,4 @@\n'}
[3.571702] (unitree_guide2) StdoutLine: {'line': b'3: -enum class FSMMode{\n'}
[3.571789] (unitree_guide2) StdoutLine: {'line': b'3: -    NORMAL,\n'}
[3.571864] (unitree_guide2) StdoutLine: {'line': b'3: -    CHANGE\n'}
[3.572389] (unitree_guide2) StdoutLine: {'line': b'3: +enum class FSMMode\n'}
[3.572468] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.572517] (unitree_guide2) StdoutLine: {'line': b'3: +  NORMAL,\n'}
[3.572563] (unitree_guide2) StdoutLine: {'line': b'3: +  CHANGE\n'}
[3.572868] (unitree_guide2) StdoutLine: {'line': b'3: @@ -55,7 +61,8 @@\n'}
[3.572959] (unitree_guide2) StdoutLine: {'line': b'3: -enum class FSMStateName{\n'}
[3.573023] (unitree_guide2) StdoutLine: {'line': b'3: -    // EXIT,\n'}
[3.573084] (unitree_guide2) StdoutLine: {'line': b'3: -    INVALID,\n'}
[3.573174] (unitree_guide2) StdoutLine: {'line': b'3: -    PASSIVE,\n'}
[3.573237] (unitree_guide2) StdoutLine: {'line': b'3: -    FIXEDSTAND,\n'}
[3.573296] (unitree_guide2) StdoutLine: {'line': b'3: -    FREESTAND,\n'}
[3.573354] (unitree_guide2) StdoutLine: {'line': b'3: -    TROTTING,\n'}
[3.573412] (unitree_guide2) StdoutLine: {'line': b'3: +enum class FSMStateName\n'}
[3.573469] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.573535] (unitree_guide2) StdoutLine: {'line': b'3: +  // EXIT,\n'}
[3.573592] (unitree_guide2) StdoutLine: {'line': b'3: +  INVALID,\n'}
[3.573646] (unitree_guide2) StdoutLine: {'line': b'3: +  PASSIVE,\n'}
[3.575467] (unitree_guide2) StdoutLine: {'line': b'3: +  FIXEDSTAND,\n'}
[3.575544] (unitree_guide2) StdoutLine: {'line': b'3: +  FREESTAND,\n'}
[3.575596] (unitree_guide2) StdoutLine: {'line': b'3: +  TROTTING,\n'}
[3.575645] (unitree_guide2) StdoutLine: {'line': b'3: @@ -63 +70 @@\n'}
[3.575692] (unitree_guide2) StdoutLine: {'line': b'3: -    MOVE_BASE,       // move_base\n'}
[3.575739] (unitree_guide2) StdoutLine: {'line': b'3: +  MOVE_BASE,         // move_base\n'}
[3.575786] (unitree_guide2) StdoutLine: {'line': b'3: @@ -66 +73 @@\n'}
[3.575833] (unitree_guide2) StdoutLine: {'line': b'3: -    MOVE_BASE,       // move_base\n'}
[3.575919] (unitree_guide2) StdoutLine: {'line': b'3: +  MOVE_BASE,         // move_base\n'}
[3.575970] (unitree_guide2) StdoutLine: {'line': b'3: @@ -68,3 +75,3 @@\n'}
[3.576016] (unitree_guide2) StdoutLine: {'line': b'3: -    BALANCETEST,\n'}
[3.576062] (unitree_guide2) StdoutLine: {'line': b'3: -    SWINGTEST,\n'}
[3.576121] (unitree_guide2) StdoutLine: {'line': b'3: -    STEPTEST\n'}
[3.576169] (unitree_guide2) StdoutLine: {'line': b'3: +  BALANCETEST,\n'}
[3.576216] (unitree_guide2) StdoutLine: {'line': b'3: +  SWINGTEST,\n'}
[3.576263] (unitree_guide2) StdoutLine: {'line': b'3: +  STEPTEST\n'}
[3.576310] (unitree_guide2) StdoutLine: {'line': b'3: @@ -73 +80 @@\n'}
[3.576356] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // ENUMCLASS_H\n'}
[3.576402] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // ENUMCLASS_H\n'}
[3.576448] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.576493] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/mathTools.h':\n"}
[3.576540] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.576586] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/mathTools.h\n'}
[3.576632] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/mathTools.h.uncrustify\n'}
[3.576679] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,19 +11,290 @@\n'}
[3.576725] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T1, typename T2>\n'}
[3.576771] (unitree_guide2) StdoutLine: {'line': b'3: -inline T1 max(const T1 a, const T2 b){\n'}
[3.576818] (unitree_guide2) StdoutLine: {'line': b'3: -\treturn (a > b ? a : b);\n'}
[3.576865] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.576912] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.576958] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T1, typename T2>\n'}
[3.577012] (unitree_guide2) StdoutLine: {'line': b'3: -inline T1 min(const T1 a, const T2 b){\n'}
[3.577060] (unitree_guide2) StdoutLine: {'line': b'3: -\treturn (a < b ? a : b);\n'}
[3.577108] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.577169] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.577217] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[3.577265] (unitree_guide2) StdoutLine: {'line': b'3: -inline T saturation(const T a, Vec2 limits){\n'}
[3.577318] (unitree_guide2) StdoutLine: {'line': b'3: -    T lowLim, highLim;\n'}
[3.577366] (unitree_guide2) StdoutLine: {'line': b'3: -    if(limits(0) > limits(1)){\n'}
[3.577414] (unitree_guide2) StdoutLine: {'line': b'3: -        lowLim = limits(1);\n'}
[3.577462] (unitree_guide2) StdoutLine: {'line': b'3: -        highLim= limits(0);\n'}
[3.577509] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[3.577557] (unitree_guide2) StdoutLine: {'line': b'3: -        lowLim = limits(0);\n'}
[3.577605] (unitree_guide2) StdoutLine: {'line': b'3: -        highLim= limits(1);\n'}
[3.577653] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T1, typename T2 >\n'}
[3.577700] (unitree_guide2) StdoutLine: {'line': b'3: +inline T1 max(const T1 a, const T2 b)\n'}
[3.577749] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.577798] (unitree_guide2) StdoutLine: {'line': b'3: +  return a > b ? a : b;\n'}
[3.577847] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.577895] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.577944] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T1, typename T2 >\n'}
[3.577991] (unitree_guide2) StdoutLine: {'line': b'3: +inline T1 min(const T1 a, const T2 b)\n'}
[3.578039] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.578086] (unitree_guide2) StdoutLine: {'line': b'3: +  return a < b ? a : b;\n'}
[3.578145] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.578191] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.578237] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.578282] (unitree_guide2) StdoutLine: {'line': b'3: +inline T saturation(const T a, Vec2 limits)\n'}
[3.578329] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.578375] (unitree_guide2) StdoutLine: {'line': b'3: +  T lowLim, highLim;\n'}
[3.578422] (unitree_guide2) StdoutLine: {'line': b'3: +  if (limits(0) > limits(1)) {\n'}
[3.578468] (unitree_guide2) StdoutLine: {'line': b'3: +    lowLim = limits(1);\n'}
[3.578515] (unitree_guide2) StdoutLine: {'line': b'3: +    highLim = limits(0);\n'}
[3.578561] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.578607] (unitree_guide2) StdoutLine: {'line': b'3: +    lowLim = limits(0);\n'}
[3.578653] (unitree_guide2) StdoutLine: {'line': b'3: +    highLim = limits(1);\n'}
[3.578699] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.578745] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.578791] (unitree_guide2) StdoutLine: {'line': b'3: +  if (a < lowLim) {\n'}
[3.578837] (unitree_guide2) StdoutLine: {'line': b'3: +    return lowLim;\n'}
[3.578883] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (a > highLim) {\n'}
[3.578928] (unitree_guide2) StdoutLine: {'line': b'3: +    return highLim;\n'}
[3.578973] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.579020] (unitree_guide2) StdoutLine: {'line': b'3: +    return a;\n'}
[3.579066] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.579112] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.579173] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.579221] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T0, typename T1 >\n'}
[3.579269] (unitree_guide2) StdoutLine: {'line': b'3: +inline T0 killZeroOffset(T0 a, const T1 limit)\n'}
[3.579317] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.579364] (unitree_guide2) StdoutLine: {'line': b'3: +  if ((a > -limit) && (a < limit)) {\n'}
[3.579412] (unitree_guide2) StdoutLine: {'line': b'3: +    a = 0;\n'}
[3.579460] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.579507] (unitree_guide2) StdoutLine: {'line': b'3: +  return a;\n'}
[3.579554] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.579601] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.579648] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T0, typename T1, typename T2 >\n'}
[3.579695] (unitree_guide2) StdoutLine: {'line': b'3: +inline T1 invNormalize(\n'}
[3.579742] (unitree_guide2) StdoutLine: {'line': b'3: +  const T0 value, const T1 min, const T2 max, const double minLim = -1,\n'}
[3.579795] (unitree_guide2) StdoutLine: {'line': b'3: +  const double maxLim = 1)\n'}
[3.579843] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.579890] (unitree_guide2) StdoutLine: {'line': b'3: +  return (value - minLim) * (max - min) / (maxLim - minLim) + min;\n'}
[3.579943] (-) TimerEvent: {}
[3.580148] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.580212] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.580261] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T >\n'}
[3.580309] (unitree_guide2) StdoutLine: {'line': b'3: +inline T windowFunc(const T x, const T windowRatio, const T xRange = 1.0, const T yRange = 1.0)\n'}
[3.580358] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.580406] (unitree_guide2) StdoutLine: {'line': b'3: +  if ((x < 0) || (x > xRange)) {\n'}
[3.580452] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR][windowFunc] The x=" << x << ", which should between [0, xRange]" <<\n'}
[3.580501] (unitree_guide2) StdoutLine: {'line': b'3: +      std::endl;\n'}
[3.580549] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.580596] (unitree_guide2) StdoutLine: {'line': b'3: +  if ((windowRatio <= 0) || (windowRatio >= 0.5)) {\n'}
[3.580643] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR][windowFunc] The windowRatio=" << windowRatio <<\n'}
[3.580693] (unitree_guide2) StdoutLine: {'line': b'3: +      ", which should between [0, 0.5]" << std::endl;\n'}
[3.580741] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.580788] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.580836] (unitree_guide2) StdoutLine: {'line': b'3: +  if (x / xRange < windowRatio) {\n'}
[3.580884] (unitree_guide2) StdoutLine: {'line': b'3: +    return x * yRange / (xRange * windowRatio);\n'}
[3.580932] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (x / xRange > 1 - windowRatio) {\n'}
[3.580980] (unitree_guide2) StdoutLine: {'line': b'3: +    return yRange * (xRange - x) / (xRange * windowRatio);\n'}
[3.581028] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.581076] (unitree_guide2) StdoutLine: {'line': b'3: +    return yRange;\n'}
[3.581138] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.581185] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.581233] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.581280] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T1, typename T2 >\n'}
[3.581328] (unitree_guide2) StdoutLine: {'line': b'3: +inline void updateAverage(T1 & exp, T2 newValue, double n)\n'}
[3.581377] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.581425] (unitree_guide2) StdoutLine: {'line': b'3: +  if (exp.rows() != newValue.rows()) {\n'}
[3.581473] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "The size of updateAverage is error" << std::endl;\n'}
[3.581522] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[3.581569] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.581619] (unitree_guide2) StdoutLine: {'line': b'3: +  if (fabs(n - 1) < 0.001) {\n'}
[3.581668] (unitree_guide2) StdoutLine: {'line': b'3: +    exp = newValue;\n'}
[3.581716] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.581765] (unitree_guide2) StdoutLine: {'line': b'3: +    exp = exp + (newValue - exp) / n;\n'}
[3.581814] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.581862] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.581910] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.581957] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T1, typename T2, typename T3 >\n'}
[3.582006] (unitree_guide2) StdoutLine: {'line': b'3: +inline void updateCovariance(T1 & cov, T2 expPast, T3 newValue, double n)\n'}
[3.582054] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.582101] (unitree_guide2) StdoutLine: {'line': b'3: +  if ( (cov.rows() != cov.cols()) || (cov.rows() != expPast.rows()) ||\n'}
[3.582202] (unitree_guide2) StdoutLine: {'line': b'3: +    (expPast.rows() != newValue.rows()))\n'}
[3.582260] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.582308] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "The size of updateCovariance is error" << std::endl;\n'}
[3.582356] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[3.582403] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.582450] (unitree_guide2) StdoutLine: {'line': b'3: +  if (fabs(n - 1) < 0.1) {\n'}
[3.582498] (unitree_guide2) StdoutLine: {'line': b'3: +    cov.setZero();\n'}
[3.582546] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.582599] (unitree_guide2) StdoutLine: {'line': b'3: +    cov = cov * (n - 1) / n + (newValue - expPast) * (newValue - expPast).transpose() * (n - 1) /\n'}
[3.582650] (unitree_guide2) StdoutLine: {'line': b'3: +      (n * n);\n'}
[3.582698] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.582747] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.582795] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.582843] (unitree_guide2) StdoutLine: {'line': b'3: +template < typename T1, typename T2, typename T3 >\n'}
[3.582891] (unitree_guide2) StdoutLine: {'line': b'3: +inline void updateAvgCov(T1 & cov, T2 & exp, T3 newValue, double n)\n'}
[3.582941] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.582992] (unitree_guide2) StdoutLine: {'line': b'3: +  // The order matters!!! covariance first!!!\n'}
[3.583039] (unitree_guide2) StdoutLine: {'line': b'3: +  updateCovariance(cov, exp, newValue, n);\n'}
[3.583088] (unitree_guide2) StdoutLine: {'line': b'3: +  updateAverage(exp, newValue, n);\n'}
[3.583136] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.583185] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.583247] (unitree_guide2) StdoutLine: {'line': b'3: +inline RotMat rotx(const double & theta)\n'}
[3.583293] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.583340] (unitree_guide2) StdoutLine: {'line': b'3: +  double s = std::sin(theta);\n'}
[3.583387] (unitree_guide2) StdoutLine: {'line': b'3: +  double c = std::cos(theta);\n'}
[3.583435] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.583482] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat R;\n'}
[3.583530] (unitree_guide2) StdoutLine: {'line': b'3: +  R << 1, 0, 0, 0, c, -s, 0, s, c;\n'}
[3.583577] (unitree_guide2) StdoutLine: {'line': b'3: +  return R;\n'}
[3.583624] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.583670] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.583718] (unitree_guide2) StdoutLine: {'line': b'3: +inline RotMat roty(const double & theta)\n'}
[3.583765] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.583815] (unitree_guide2) StdoutLine: {'line': b'3: +  double s = std::sin(theta);\n'}
[3.583860] (unitree_guide2) StdoutLine: {'line': b'3: +  double c = std::cos(theta);\n'}
[3.583906] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.583952] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat R;\n'}
[3.583999] (unitree_guide2) StdoutLine: {'line': b'3: +  R << c, 0, s, 0, 1, 0, -s, 0, c;\n'}
[3.584046] (unitree_guide2) StdoutLine: {'line': b'3: +  return R;\n'}
[3.584093] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.584140] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.584201] (unitree_guide2) StdoutLine: {'line': b'3: +inline RotMat rotz(const double & theta)\n'}
[3.584250] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.584298] (unitree_guide2) StdoutLine: {'line': b'3: +  double s = std::sin(theta);\n'}
[3.584347] (unitree_guide2) StdoutLine: {'line': b'3: +  double c = std::cos(theta);\n'}
[3.584395] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.584443] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat R;\n'}
[3.584491] (unitree_guide2) StdoutLine: {'line': b'3: +  R << c, -s, 0, s, c, 0, 0, 0, 1;\n'}
[3.584540] (unitree_guide2) StdoutLine: {'line': b'3: +  return R;\n'}
[3.584587] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.584636] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.584684] (unitree_guide2) StdoutLine: {'line': b'3: +inline Mat2 skew(const double & w)\n'}
[3.584751] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.584799] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat2 mat; mat.setZero();\n'}
[3.584847] (unitree_guide2) StdoutLine: {'line': b'3: +  mat(0, 1) = -w;\n'}
[3.584895] (unitree_guide2) StdoutLine: {'line': b'3: +  mat(1, 0) = w;\n'}
[3.584943] (unitree_guide2) StdoutLine: {'line': b'3: +  return mat;\n'}
[3.584990] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.585038] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.585086] (unitree_guide2) StdoutLine: {'line': b'3: +inline Mat3 skew(const Vec3 & v)\n'}
[3.585134] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.587117] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 m;\n'}
[3.587225] (unitree_guide2) StdoutLine: {'line': b'3: +  m << 0, -v(2), v(1),\n'}
[3.589470] (unitree_guide2) StdoutLine: {'line': b'3: +    v(2), 0, -v(0),\n'}
[3.591084] (unitree_guide2) StdoutLine: {'line': b'3: +    -v(1), v(0), 0;\n'}
[3.591194] (unitree_guide2) StdoutLine: {'line': b'3: +  return m;\n'}
[3.591270] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.592096] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.592198] (unitree_guide2) StdoutLine: {'line': b'3: +inline RotMat rpyToRotMat(const double & row, const double & pitch, const double & yaw)\n'}
[3.592263] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.592327] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat m = rotz(yaw) * roty(pitch) * rotx(row);\n'}
[3.593448] (unitree_guide2) StdoutLine: {'line': b'3: +  return m;\n'}
[3.593539] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.593603] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.593662] (unitree_guide2) StdoutLine: {'line': b'3: +inline Vec3 rotMatToRPY(const Mat3 & R)\n'}
[3.593720] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.593787] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 rpy;\n'}
[3.593847] (unitree_guide2) StdoutLine: {'line': b'3: +  rpy(0) = atan2(R(2, 1), R(2, 2));\n'}
[3.593946] (unitree_guide2) StdoutLine: {'line': b'3: +  rpy(1) = asin(-R(2, 0));\n'}
[3.594009] (unitree_guide2) StdoutLine: {'line': b'3: +  rpy(2) = atan2(R(1, 0), R(0, 0));\n'}
[3.594071] (unitree_guide2) StdoutLine: {'line': b'3: +  return rpy;\n'}
[3.594132] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.594188] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.594242] (unitree_guide2) StdoutLine: {'line': b'3: +inline RotMat quatToRotMat(const Quat & q)\n'}
[3.594299] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.594355] (unitree_guide2) StdoutLine: {'line': b'3: +  double e0 = q(0);\n'}
[3.594422] (unitree_guide2) StdoutLine: {'line': b'3: +  double e1 = q(1);\n'}
[3.594482] (unitree_guide2) StdoutLine: {'line': b'3: +  double e2 = q(2);\n'}
[3.594539] (unitree_guide2) StdoutLine: {'line': b'3: +  double e3 = q(3);\n'}
[3.594594] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.594649] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat R;\n'}
[3.594708] (unitree_guide2) StdoutLine: {'line': b'3: +  R << 1 - 2 * (e2 * e2 + e3 * e3), 2 * (e1 * e2 - e0 * e3),\n'}
[3.594769] (unitree_guide2) StdoutLine: {'line': b'3: +    2 * (e1 * e3 + e0 * e2), 2 * (e1 * e2 + e0 * e3),\n'}
[3.594824] (unitree_guide2) StdoutLine: {'line': b'3: +    1 - 2 * (e1 * e1 + e3 * e3), 2 * (e2 * e3 - e0 * e1),\n'}
[3.594915] (unitree_guide2) StdoutLine: {'line': b'3: +    2 * (e1 * e3 - e0 * e2), 2 * (e2 * e3 + e0 * e1),\n'}
[3.594979] (unitree_guide2) StdoutLine: {'line': b'3: +    1 - 2 * (e1 * e1 + e2 * e2);\n'}
[3.597502] (unitree_guide2) StdoutLine: {'line': b'3: +  return R;\n'}
[3.597590] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.597651] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.598113] (unitree_guide2) StdoutLine: {'line': b'3: +inline Vec3 rotMatToExp(const RotMat & rm)\n'}
[3.598177] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.598222] (unitree_guide2) StdoutLine: {'line': b'3: +  double cosValue = rm.trace() / 2.0 - 1 / 2.0;\n'}
[3.598265] (unitree_guide2) StdoutLine: {'line': b'3: +  if (cosValue > 1.0f) {\n'}
[3.598308] (unitree_guide2) StdoutLine: {'line': b'3: +    cosValue = 1.0f;\n'}
[3.598396] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (cosValue < -1.0f) {\n'}
[3.598455] (unitree_guide2) StdoutLine: {'line': b'3: +    cosValue = -1.0f;\n'}
[3.598498] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.598540] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.598582] (unitree_guide2) StdoutLine: {'line': b'3: +  double angle = acos(cosValue);\n'}
[3.598625] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 exp;\n'}
[3.598677] (unitree_guide2) StdoutLine: {'line': b'3: +  if (fabs(angle) < 1e-5) {\n'}
[3.598720] (unitree_guide2) StdoutLine: {'line': b'3: +    exp = Vec3(0, 0, 0);\n'}
[3.598763] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (fabs(angle - M_PI) < 1e-5) {\n'}
[3.598805] (unitree_guide2) StdoutLine: {'line': b'3: +    exp = angle * Vec3(rm(0, 0) + 1, rm(0, 1), rm(0, 2)) / sqrt(2 * (1 + rm(0, 0)));\n'}
[3.598849] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[3.598896] (unitree_guide2) StdoutLine: {'line': b'3: +    exp = angle / (2.0f * sin(angle)) * Vec3(\n'}
[3.598997] (unitree_guide2) StdoutLine: {'line': b'3: +      rm(2, 1) - rm(1, 2), rm(0, 2) - rm(2, 0), rm(1, 0) - rm(\n'}
[3.599043] (unitree_guide2) StdoutLine: {'line': b'3: +        0, 1));\n'}
[3.599085] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.599127] (unitree_guide2) StdoutLine: {'line': b'3: +  return exp;\n'}
[3.599169] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.599211] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.599252] (unitree_guide2) StdoutLine: {'line': b'3: +inline HomoMat homoMatrix(Vec3 p, RotMat m)\n'}
[3.599298] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.599341] (unitree_guide2) StdoutLine: {'line': b'3: +  HomoMat homoM;\n'}
[3.599384] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM.setZero();\n'}
[3.599426] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM.topLeftCorner(3, 3) = m;\n'}
[3.599475] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM.topRightCorner(3, 1) = p;\n'}
[3.599518] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM(3, 3) = 1;\n'}
[3.599560] (unitree_guide2) StdoutLine: {'line': b'3: +  return homoM;\n'}
[3.599603] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.599645] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.599687] (unitree_guide2) StdoutLine: {'line': b'3: +inline HomoMat homoMatrix(Vec3 p, Quat q)\n'}
[3.599730] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.599771] (unitree_guide2) StdoutLine: {'line': b'3: +  HomoMat homoM;\n'}
[3.599812] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM.setZero();\n'}
[3.599853] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM.topLeftCorner(3, 3) = quatToRotMat(q);\n'}
[3.599895] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM.topRightCorner(3, 1) = p;\n'}
[3.599937] (unitree_guide2) StdoutLine: {'line': b'3: +  homoM(3, 3) = 1;\n'}
[3.599978] (unitree_guide2) StdoutLine: {'line': b'3: +  return homoM;\n'}
[3.600019] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.600060] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.600102] (unitree_guide2) StdoutLine: {'line': b'3: +inline HomoMat homoMatrixInverse(HomoMat homoM)\n'}
[3.600143] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.600185] (unitree_guide2) StdoutLine: {'line': b'3: +  HomoMat homoInv;\n'}
[3.600227] (unitree_guide2) StdoutLine: {'line': b'3: +  homoInv.setZero();\n'}
[3.600268] (unitree_guide2) StdoutLine: {'line': b'3: +  homoInv.topLeftCorner(3, 3) = homoM.topLeftCorner(3, 3).transpose();\n'}
[3.600311] (unitree_guide2) StdoutLine: {'line': b'3: +  homoInv.topRightCorner(\n'}
[3.600353] (unitree_guide2) StdoutLine: {'line': b'3: +    3,\n'}
[3.600394] (unitree_guide2) StdoutLine: {'line': b'3: +    1) = -homoM.topLeftCorner(3, 3).transpose() * homoM.topRightCorner(3, 1);\n'}
[3.600436] (unitree_guide2) StdoutLine: {'line': b'3: +  homoInv(3, 3) = 1;\n'}
[3.600476] (unitree_guide2) StdoutLine: {'line': b'3: +  return homoInv;\n'}
[3.600517] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.600558] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.600609] (unitree_guide2) StdoutLine: {'line': b'3: +//  add 1 at the end of Vec3\n'}
[3.600650] (unitree_guide2) StdoutLine: {'line': b'3: +inline Vec4 homoVec(Vec3 v3)\n'}
[3.600692] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.600733] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 v4;\n'}
[3.600774] (unitree_guide2) StdoutLine: {'line': b'3: +  v4.block(0, 0, 3, 1) = v3;\n'}
[3.600824] (unitree_guide2) StdoutLine: {'line': b'3: +  v4(3) = 1;\n'}
[3.600891] (unitree_guide2) StdoutLine: {'line': b'3: +  return v4;\n'}
[3.600934] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.600990] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.601031] (unitree_guide2) StdoutLine: {'line': b'3: +//  remove 1 at the end of Vec4\n'}
[3.601073] (unitree_guide2) StdoutLine: {'line': b'3: +inline Vec3 noHomoVec(Vec4 v4)\n'}
[3.601115] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.601157] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 v3;\n'}
[3.601198] (unitree_guide2) StdoutLine: {'line': b'3: +  v3 = v4.block(0, 0, 3, 1);\n'}
[3.601239] (unitree_guide2) StdoutLine: {'line': b'3: +  return v3;\n'}
[3.601281] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[3.601321] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.601362] (unitree_guide2) StdoutLine: {'line': b'3: +// Calculate average value and covariance\n'}
[3.601403] (unitree_guide2) StdoutLine: {'line': b'3: +class AvgCov {\n'}
[3.601444] (unitree_guide2) StdoutLine: {'line': b'3: +public:\n'}
[3.601484] (unitree_guide2) StdoutLine: {'line': b'3: +  AvgCov(\n'}
[3.601525] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int size, std::string name, bool avgOnly = false, unsigned int showPeriod = 1000,\n'}
[3.601567] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int waitCount = 5000, double zoomFactor = 10000)\n'}
[3.601610] (unitree_guide2) StdoutLine: {'line': b'3: +    : _size(size), _showPeriod(showPeriod), _waitCount(waitCount), _zoomFactor(zoomFactor),\n'}
[3.601652] (unitree_guide2) StdoutLine: {'line': b'3: +    _valueName(name), _avgOnly(avgOnly) {\n'}
[3.601694] (unitree_guide2) StdoutLine: {'line': b'3: +    _exp.resize(size);\n'}
[3.601735] (unitree_guide2) StdoutLine: {'line': b'3: +    _cov.resize(size, size);\n'}
[3.601980] (unitree_guide2) StdoutLine: {'line': b'3: +    _defaultWeight.resize(size, size);\n'}
[3.602092] (unitree_guide2) StdoutLine: {'line': b'3: +    _defaultWeight.setIdentity();\n'}
[3.602136] (unitree_guide2) StdoutLine: {'line': b'3: +    _measureCount = 0;\n'}
[3.602180] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.602224] (unitree_guide2) StdoutLine: {'line': b'3: +  void measure(VecX newValue)\n'}
[3.602266] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.602309] (unitree_guide2) StdoutLine: {'line': b'3: +    ++_measureCount;\n'}
[3.602352] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.602423] (unitree_guide2) StdoutLine: {'line': b'3: +    if (_measureCount > _waitCount) {\n'}
[3.602466] (unitree_guide2) StdoutLine: {'line': b'3: +      updateAvgCov(_cov, _exp, newValue, _measureCount - _waitCount);\n'}
[3.602509] (unitree_guide2) StdoutLine: {'line': b'3: +      if (_measureCount % _showPeriod == 0) {\n'}
[3.602552] (unitree_guide2) StdoutLine: {'line': b'3: +        std::cout << "******" << _valueName << " measured count: " << _measureCount - _waitCount <<\n'}
[3.602597] (unitree_guide2) StdoutLine: {'line': b'3: +          "******" << std::endl;\n'}
[3.602639] (unitree_guide2) StdoutLine: {'line': b'3: +        std::cout << _zoomFactor << " Times Average of " << _valueName << std::endl <<\n'}
[3.602684] (unitree_guide2) StdoutLine: {'line': b'3: +          (_zoomFactor * _exp).transpose() << std::endl;\n'}
[3.602727] (unitree_guide2) StdoutLine: {'line': b'3: +        if (!_avgOnly) {\n'}
[3.602775] (unitree_guide2) StdoutLine: {'line': b'3: +          std::cout << _zoomFactor << " Times Covariance of " << _valueName << std::endl <<\n'}
[3.602820] (unitree_guide2) StdoutLine: {'line': b'3: +            _zoomFactor * _cov << std::endl;\n'}
[3.602877] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.602921] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.602965] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31,237 +302,2 @@\n'}
[3.603008] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.603062] (unitree_guide2) StdoutLine: {'line': b'3: -    if(a < lowLim){\n'}
[3.603103] (unitree_guide2) StdoutLine: {'line': b'3: -        return lowLim;\n'}
[3.603158] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.603199] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(a > highLim){\n'}
[3.603240] (unitree_guide2) StdoutLine: {'line': b'3: -        return highLim;\n'}
[3.603281] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.603322] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[3.603454] (unitree_guide2) StdoutLine: {'line': b'3: -        return a;\n'}
[3.603577] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.603662] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.603719] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.603775] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T0, typename T1>\n'}
[3.603838] (unitree_guide2) StdoutLine: {'line': b'3: -inline T0 killZeroOffset(T0 a, const T1 limit){\n'}
[3.603928] (unitree_guide2) StdoutLine: {'line': b'3: -    if((a > -limit) && (a < limit)){\n'}
[3.603985] (unitree_guide2) StdoutLine: {'line': b'3: -        a = 0;\n'}
[3.604039] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.604101] (unitree_guide2) StdoutLine: {'line': b'3: -    return a;\n'}
[3.604156] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.604260] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.604311] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T0, typename T1, typename T2>\n'}
[3.604353] (unitree_guide2) StdoutLine: {'line': b'3: -inline T1 invNormalize(const T0 value, const T1 min, const T2 max, const double minLim = -1, const double maxLim = 1){\n'}
[3.604396] (unitree_guide2) StdoutLine: {'line': b'3: -\treturn (value-minLim)*(max-min)/(maxLim-minLim) + min;\n'}
[3.604440] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.604482] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.604524] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[3.604566] (unitree_guide2) StdoutLine: {'line': b'3: -inline T windowFunc(const T x, const T windowRatio, const T xRange=1.0, const T yRange=1.0){\n'}
[3.604609] (unitree_guide2) StdoutLine: {'line': b'3: -    if((x < 0)||(x > xRange)){\n'}
[3.604651] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR][windowFunc] The x=" << x << ", which should between [0, xRange]" << std::endl;\n'}
[3.604701] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.604748] (unitree_guide2) StdoutLine: {'line': b'3: -    if((windowRatio <= 0)||(windowRatio >= 0.5)){\n'}
[3.604790] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR][windowFunc] The windowRatio=" << windowRatio << ", which should between [0, 0.5]" << std::endl;\n'}
[3.604833] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.604927] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.604975] (unitree_guide2) StdoutLine: {'line': b'3: -    if(x/xRange < windowRatio){\n'}
[3.605017] (unitree_guide2) StdoutLine: {'line': b'3: -        return x * yRange / (xRange * windowRatio);\n'}
[3.605060] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.605101] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(x/xRange > 1 - windowRatio){\n'}
[3.605152] (unitree_guide2) StdoutLine: {'line': b'3: -        return yRange * (xRange - x)/(xRange * windowRatio);\n'}
[3.605195] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.605237] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[3.605280] (unitree_guide2) StdoutLine: {'line': b'3: -        return yRange;\n'}
[3.605322] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.605366] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.605408] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.605455] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T1, typename T2>\n'}
[3.605497] (unitree_guide2) StdoutLine: {'line': b'3: -inline void updateAverage(T1 &exp, T2 newValue, double n){\n'}
[3.605540] (unitree_guide2) StdoutLine: {'line': b'3: -    if(exp.rows()!=newValue.rows()){\n'}
[3.605582] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "The size of updateAverage is error" << std::endl;\n'}
[3.605624] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[3.605666] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.605712] (unitree_guide2) StdoutLine: {'line': b'3: -    if(fabs(n - 1) < 0.001){\n'}
[3.605754] (unitree_guide2) StdoutLine: {'line': b'3: -        exp = newValue;\n'}
[3.605797] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[3.605838] (unitree_guide2) StdoutLine: {'line': b'3: -        exp = exp + (newValue - exp)/n;\n'}
[3.605880] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.605962] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.606009] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.606051] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T1, typename T2, typename T3>\n'}
[3.606094] (unitree_guide2) StdoutLine: {'line': b'3: -inline void updateCovariance(T1 &cov, T2 expPast, T3 newValue, double n){\n'}
[3.606137] (unitree_guide2) StdoutLine: {'line': b'3: -    if( (cov.rows()!=cov.cols()) || (cov.rows() != expPast.rows()) || (expPast.rows()!=newValue.rows())){\n'}
[3.606181] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "The size of updateCovariance is error" << std::endl;\n'}
[3.606223] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[3.606265] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.606306] (unitree_guide2) StdoutLine: {'line': b'3: -    if(fabs(n - 1) < 0.1){\n'}
[3.606348] (unitree_guide2) StdoutLine: {'line': b'3: -        cov.setZero();\n'}
[3.606389] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[3.606430] (unitree_guide2) StdoutLine: {'line': b'3: -        cov = cov*(n-1)/n + (newValue-expPast)*(newValue-expPast).transpose()*(n-1)/(n*n);\n'}
[3.606472] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.606513] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.606554] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.606596] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T1, typename T2, typename T3>\n'}
[3.606638] (unitree_guide2) StdoutLine: {'line': b'3: -inline void updateAvgCov(T1 &cov, T2 &exp, T3 newValue, double n){\n'}
[3.606705] (unitree_guide2) StdoutLine: {'line': b'3: -    // The order matters!!! covariance first!!!\n'}
[3.606750] (unitree_guide2) StdoutLine: {'line': b'3: -    updateCovariance(cov, exp, newValue, n);\n'}
[3.606807] (unitree_guide2) StdoutLine: {'line': b'3: -    updateAverage(exp, newValue, n);\n'}
[3.606849] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.606891] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.606933] (unitree_guide2) StdoutLine: {'line': b'3: -inline RotMat rotx(const double &theta) {\n'}
[3.606975] (unitree_guide2) StdoutLine: {'line': b'3: -    double s = std::sin(theta);\n'}
[3.607017] (unitree_guide2) StdoutLine: {'line': b'3: -    double c = std::cos(theta);\n'}
[3.607059] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.607100] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat R;\n'}
[3.607142] (unitree_guide2) StdoutLine: {'line': b'3: -    R << 1, 0, 0, 0, c, -s, 0, s, c;\n'}
[3.607184] (unitree_guide2) StdoutLine: {'line': b'3: -    return R;\n'}
[3.607225] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.607267] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.607308] (unitree_guide2) StdoutLine: {'line': b'3: -inline RotMat roty(const double &theta) {\n'}
[3.607350] (unitree_guide2) StdoutLine: {'line': b'3: -    double s = std::sin(theta);\n'}
[3.607393] (unitree_guide2) StdoutLine: {'line': b'3: -    double c = std::cos(theta);\n'}
[3.607435] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.607477] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat R;\n'}
[3.607526] (unitree_guide2) StdoutLine: {'line': b'3: -    R << c, 0, s, 0, 1, 0, -s, 0, c;\n'}
[3.607569] (unitree_guide2) StdoutLine: {'line': b'3: -    return R;\n'}
[3.607611] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.607676] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.607733] (unitree_guide2) StdoutLine: {'line': b'3: -inline RotMat rotz(const double &theta) {\n'}
[3.607776] (unitree_guide2) StdoutLine: {'line': b'3: -    double s = std::sin(theta);\n'}
[3.607818] (unitree_guide2) StdoutLine: {'line': b'3: -    double c = std::cos(theta);\n'}
[3.607859] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.607901] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat R;\n'}
[3.607942] (unitree_guide2) StdoutLine: {'line': b'3: -    R << c, -s, 0, s, c, 0, 0, 0, 1;\n'}
[3.607985] (unitree_guide2) StdoutLine: {'line': b'3: -    return R;\n'}
[3.608026] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.608068] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.608111] (unitree_guide2) StdoutLine: {'line': b'3: -inline Mat2 skew(const double& w){\n'}
[3.608153] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat2 mat; mat.setZero();\n'}
[3.608196] (unitree_guide2) StdoutLine: {'line': b'3: -    mat(0, 1) = -w;\n'}
[3.608239] (unitree_guide2) StdoutLine: {'line': b'3: -    mat(1, 0) =  w;\n'}
[3.608282] (unitree_guide2) StdoutLine: {'line': b'3: -    return mat;\n'}
[3.608326] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.608368] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.608411] (unitree_guide2) StdoutLine: {'line': b'3: -inline Mat3 skew(const Vec3& v) {\n'}
[3.608453] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 m;\n'}
[3.608495] (unitree_guide2) StdoutLine: {'line': b'3: -    m << 0, -v(2), v(1),\n'}
[3.608536] (unitree_guide2) StdoutLine: {'line': b'3: -            v(2), 0, -v(0),\n'}
[3.608578] (unitree_guide2) StdoutLine: {'line': b'3: -            -v(1), v(0), 0;\n'}
[3.608621] (unitree_guide2) StdoutLine: {'line': b'3: -    return m;\n'}
[3.608698] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.608740] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.608782] (unitree_guide2) StdoutLine: {'line': b'3: -inline RotMat rpyToRotMat(const double& row, const double& pitch, const double& yaw) {\n'}
[3.608824] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat m = rotz(yaw) * roty(pitch) * rotx(row);\n'}
[3.608866] (unitree_guide2) StdoutLine: {'line': b'3: -    return m;\n'}
[3.608907] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.608949] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.608991] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vec3 rotMatToRPY(const Mat3& R) {\n'}
[3.609033] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 rpy;\n'}
[3.609076] (unitree_guide2) StdoutLine: {'line': b'3: -    rpy(0) = atan2(R(2,1),R(2,2));\n'}
[3.609119] (unitree_guide2) StdoutLine: {'line': b'3: -    rpy(1) = asin(-R(2,0));\n'}
[3.609174] (unitree_guide2) StdoutLine: {'line': b'3: -    rpy(2) = atan2(R(1,0),R(0,0));\n'}
[3.609215] (unitree_guide2) StdoutLine: {'line': b'3: -    return rpy;\n'}
[3.609256] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.609297] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.609337] (unitree_guide2) StdoutLine: {'line': b'3: -inline RotMat quatToRotMat(const Quat& q) {\n'}
[3.609381] (unitree_guide2) StdoutLine: {'line': b'3: -    double e0 = q(0);\n'}
[3.609422] (unitree_guide2) StdoutLine: {'line': b'3: -    double e1 = q(1);\n'}
[3.609462] (unitree_guide2) StdoutLine: {'line': b'3: -    double e2 = q(2);\n'}
[3.609522] (unitree_guide2) StdoutLine: {'line': b'3: -    double e3 = q(3);\n'}
[3.609564] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.609611] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat R;\n'}
[3.609655] (unitree_guide2) StdoutLine: {'line': b'3: -    R << 1 - 2 * (e2 * e2 + e3 * e3), 2 * (e1 * e2 - e0 * e3),\n'}
[3.609711] (unitree_guide2) StdoutLine: {'line': b'3: -            2 * (e1 * e3 + e0 * e2), 2 * (e1 * e2 + e0 * e3),\n'}
[3.609757] (unitree_guide2) StdoutLine: {'line': b'3: -            1 - 2 * (e1 * e1 + e3 * e3), 2 * (e2 * e3 - e0 * e1),\n'}
[3.609798] (unitree_guide2) StdoutLine: {'line': b'3: -            2 * (e1 * e3 - e0 * e2), 2 * (e2 * e3 + e0 * e1),\n'}
[3.609839] (unitree_guide2) StdoutLine: {'line': b'3: -            1 - 2 * (e1 * e1 + e2 * e2);\n'}
[3.609880] (unitree_guide2) StdoutLine: {'line': b'3: -    return R;\n'}
[3.609921] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.609962] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.610003] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vec3 rotMatToExp(const RotMat& rm){\n'}
[3.610044] (unitree_guide2) StdoutLine: {'line': b'3: -    double cosValue = rm.trace()/2.0-1/2.0;\n'}
[3.610084] (unitree_guide2) StdoutLine: {'line': b'3: -    if(cosValue > 1.0f){\n'}
[3.610124] (unitree_guide2) StdoutLine: {'line': b'3: -        cosValue = 1.0f;\n'}
[3.610179] (unitree_guide2) StdoutLine: {'line': b'3: -    }else if(cosValue < -1.0f){\n'}
[3.610220] (unitree_guide2) StdoutLine: {'line': b'3: -        cosValue = -1.0f;\n'}
[3.610261] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.610302] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.610344] (unitree_guide2) StdoutLine: {'line': b'3: -    double angle = acos(cosValue);\n'}
[3.610385] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 exp;\n'}
[3.610427] (unitree_guide2) StdoutLine: {'line': b'3: -    if (fabs(angle) < 1e-5){\n'}
[3.610468] (unitree_guide2) StdoutLine: {'line': b'3: -        exp=Vec3(0,0,0);\n'}
[3.610510] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.610552] (unitree_guide2) StdoutLine: {'line': b'3: -    else if (fabs(angle - M_PI) < 1e-5){\n'}
[3.610597] (unitree_guide2) StdoutLine: {'line': b'3: -        exp = angle * Vec3(rm(0,0)+1, rm(0,1), rm(0,2)) / sqrt(2*(1+rm(0, 0)));\n'}
[3.610640] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.610682] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[3.610723] (unitree_guide2) StdoutLine: {'line': b'3: -        exp=angle/(2.0f*sin(angle))*Vec3(rm(2,1)-rm(1,2),rm(0,2)-rm(2,0),rm(1,0)-rm(0,1));\n'}
[3.610765] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.610806] (unitree_guide2) StdoutLine: {'line': b'3: -    return exp;\n'}
[3.610848] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.610890] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.610932] (unitree_guide2) StdoutLine: {'line': b'3: -inline HomoMat homoMatrix(Vec3 p, RotMat m){\n'}
[3.610974] (unitree_guide2) StdoutLine: {'line': b'3: -    HomoMat homoM;\n'}
[3.611016] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM.setZero();\n'}
[3.611057] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM.topLeftCorner(3, 3) = m;\n'}
[3.611099] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM.topRightCorner(3, 1) = p;\n'}
[3.611154] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM(3, 3) = 1;\n'}
[3.611195] (unitree_guide2) StdoutLine: {'line': b'3: -    return homoM;\n'}
[3.611242] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.611284] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.611324] (unitree_guide2) StdoutLine: {'line': b'3: -inline HomoMat homoMatrix(Vec3 p, Quat q){\n'}
[3.611365] (unitree_guide2) StdoutLine: {'line': b'3: -    HomoMat homoM;\n'}
[3.611405] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM.setZero();\n'}
[3.611446] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM.topLeftCorner(3, 3) = quatToRotMat(q);\n'}
[3.611486] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM.topRightCorner(3, 1) = p;\n'}
[3.611527] (unitree_guide2) StdoutLine: {'line': b'3: -    homoM(3, 3) = 1;\n'}
[3.611571] (unitree_guide2) StdoutLine: {'line': b'3: -    return homoM;\n'}
[3.611612] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.611652] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.611693] (unitree_guide2) StdoutLine: {'line': b'3: -inline HomoMat homoMatrixInverse(HomoMat homoM){\n'}
[3.611733] (unitree_guide2) StdoutLine: {'line': b'3: -    HomoMat homoInv;\n'}
[3.611773] (unitree_guide2) StdoutLine: {'line': b'3: -    homoInv.setZero();\n'}
[3.611818] (unitree_guide2) StdoutLine: {'line': b'3: -    homoInv.topLeftCorner(3, 3) = homoM.topLeftCorner(3, 3).transpose();\n'}
[3.611859] (unitree_guide2) StdoutLine: {'line': b'3: -    homoInv.topRightCorner(3, 1) = -homoM.topLeftCorner(3, 3).transpose() * homoM.topRightCorner(3, 1);\n'}
[3.611901] (unitree_guide2) StdoutLine: {'line': b'3: -    homoInv(3, 3) = 1;\n'}
[3.611942] (unitree_guide2) StdoutLine: {'line': b'3: -    return homoInv;\n'}
[3.611982] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.612023] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.612063] (unitree_guide2) StdoutLine: {'line': b'3: -//  add 1 at the end of Vec3\n'}
[3.612103] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vec4 homoVec(Vec3 v3){\n'}
[3.612143] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 v4;\n'}
[3.612183] (unitree_guide2) StdoutLine: {'line': b'3: -    v4.block(0, 0, 3, 1) = v3;\n'}
[3.612223] (unitree_guide2) StdoutLine: {'line': b'3: -    v4(3) = 1;\n'}
[3.612263] (unitree_guide2) StdoutLine: {'line': b'3: -    return v4;\n'}
[3.612304] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.612345] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.612385] (unitree_guide2) StdoutLine: {'line': b'3: -//  remove 1 at the end of Vec4\n'}
[3.612426] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vec3 noHomoVec(Vec4 v4){\n'}
[3.612467] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 v3;\n'}
[3.612507] (unitree_guide2) StdoutLine: {'line': b'3: -    v3 = v4.block(0, 0, 3, 1);\n'}
[3.612552] (unitree_guide2) StdoutLine: {'line': b'3: -    return v3;\n'}
[3.612593] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.612633] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.612673] (unitree_guide2) StdoutLine: {'line': b'3: -// Calculate average value and covariance\n'}
[3.612713] (unitree_guide2) StdoutLine: {'line': b'3: -class AvgCov{\n'}
[3.612753] (unitree_guide2) StdoutLine: {'line': b'3: -public:\n'}
[3.612793] (unitree_guide2) StdoutLine: {'line': b'3: -    AvgCov(unsigned int size, std::string name, bool avgOnly=false, unsigned int showPeriod=1000, unsigned int waitCount=5000, double zoomFactor=10000)\n'}
[3.612835] (unitree_guide2) StdoutLine: {'line': b'3: -            :_size(size), _showPeriod(showPeriod), _waitCount(waitCount), _zoomFactor(zoomFactor), _valueName(name), _avgOnly(avgOnly) {\n'}
[3.612877] (unitree_guide2) StdoutLine: {'line': b'3: -        _exp.resize(size);\n'}
[3.612916] (unitree_guide2) StdoutLine: {'line': b'3: -        _cov.resize(size, size);\n'}
[3.612956] (unitree_guide2) StdoutLine: {'line': b'3: -        _defaultWeight.resize(size, size);\n'}
[3.612997] (unitree_guide2) StdoutLine: {'line': b'3: -        _defaultWeight.setIdentity();\n'}
[3.613037] (unitree_guide2) StdoutLine: {'line': b'3: -        _measureCount = 0;\n'}
[3.613077] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.613147] (unitree_guide2) StdoutLine: {'line': b'3: -    void measure(VecX newValue){\n'}
[3.613188] (unitree_guide2) StdoutLine: {'line': b'3: -        ++_measureCount;\n'}
[3.613229] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.613270] (unitree_guide2) StdoutLine: {'line': b'3: -        if(_measureCount > _waitCount){\n'}
[3.613310] (unitree_guide2) StdoutLine: {'line': b'3: -            updateAvgCov(_cov, _exp, newValue, _measureCount-_waitCount);\n'}
[3.613350] (unitree_guide2) StdoutLine: {'line': b'3: -            if(_measureCount % _showPeriod == 0){\n'}
[3.613391] (unitree_guide2) StdoutLine: {'line': b'3: -                std::cout << "******" << _valueName << " measured count: " << _measureCount-_waitCount << "******" << std::endl;\n'}
[3.613436] (unitree_guide2) StdoutLine: {'line': b'3: -                std::cout << _zoomFactor << " Times Average of " << _valueName << std::endl << (_zoomFactor*_exp).transpose() << std::endl;\n'}
[3.613478] (unitree_guide2) StdoutLine: {'line': b'3: -                if(!_avgOnly){\n'}
[3.613522] (unitree_guide2) StdoutLine: {'line': b'3: -                    std::cout << _zoomFactor << " Times Covariance of " << _valueName << std::endl << _zoomFactor*_cov << std::endl;\n'}
[3.613567] (unitree_guide2) StdoutLine: {'line': b'3: -                }\n'}
[3.613607] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[3.613647] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.613687] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.613727] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.613768] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.613807] (unitree_guide2) StdoutLine: {'line': b'3: @@ -269,10 +305,10 @@\n'}
[3.613848] (unitree_guide2) StdoutLine: {'line': b'3: -    VecX _exp;\n'}
[3.613888] (unitree_guide2) StdoutLine: {'line': b'3: -    MatX _cov;\n'}
[3.613928] (unitree_guide2) StdoutLine: {'line': b'3: -    MatX _defaultWeight;\n'}
[3.613968] (unitree_guide2) StdoutLine: {'line': b'3: -    bool _avgOnly;\n'}
[3.614008] (unitree_guide2) StdoutLine: {'line': b'3: -    unsigned int _size;\n'}
[3.614049] (unitree_guide2) StdoutLine: {'line': b'3: -    unsigned int _measureCount;\n'}
[3.614089] (unitree_guide2) StdoutLine: {'line': b'3: -    unsigned int _showPeriod;\n'}
[3.614129] (unitree_guide2) StdoutLine: {'line': b'3: -    unsigned int _waitCount;\n'}
[3.614168] (unitree_guide2) StdoutLine: {'line': b'3: -    double _zoomFactor;\n'}
[3.614208] (unitree_guide2) StdoutLine: {'line': b'3: -    std::string _valueName;\n'}
[3.614249] (unitree_guide2) StdoutLine: {'line': b'3: +  VecX _exp;\n'}
[3.614289] (unitree_guide2) StdoutLine: {'line': b'3: +  MatX _cov;\n'}
[3.614330] (unitree_guide2) StdoutLine: {'line': b'3: +  MatX _defaultWeight;\n'}
[3.614370] (unitree_guide2) StdoutLine: {'line': b'3: +  bool _avgOnly;\n'}
[3.614410] (unitree_guide2) StdoutLine: {'line': b'3: +  unsigned int _size;\n'}
[3.614450] (unitree_guide2) StdoutLine: {'line': b'3: +  unsigned int _measureCount;\n'}
[3.614494] (unitree_guide2) StdoutLine: {'line': b'3: +  unsigned int _showPeriod;\n'}
[3.614535] (unitree_guide2) StdoutLine: {'line': b'3: +  unsigned int _waitCount;\n'}
[3.614576] (unitree_guide2) StdoutLine: {'line': b'3: +  double _zoomFactor;\n'}
[3.614617] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string _valueName;\n'}
[3.614657] (unitree_guide2) StdoutLine: {'line': b'3: @@ -281 +317 @@\n'}
[3.614698] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // MATHTOOLS_H\n'}
[3.614738] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // MATHTOOLS_H\n'}
[3.614779] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.614819] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/mathTypes.h':\n"}
[3.614860] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.614900] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/mathTypes.h\n'}
[3.615132] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/mathTypes.h.uncrustify\n'}
[3.615182] (unitree_guide2) StdoutLine: {'line': b'3: @@ -13 +13 @@\n'}
[3.615223] (unitree_guide2) StdoutLine: {'line': b'3: -using Vec2 = typename Eigen::Matrix<double, 2, 1>;\n'}
[3.615264] (unitree_guide2) StdoutLine: {'line': b'3: +using Vec2 = typename Eigen::Matrix < double, 2, 1 >;\n'}
[3.615305] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16 +16 @@\n'}
[3.615345] (unitree_guide2) StdoutLine: {'line': b'3: -using Vec3 = typename Eigen::Matrix<double, 3, 1>;\n'}
[3.615389] (unitree_guide2) StdoutLine: {'line': b'3: +using Vec3 = typename Eigen::Matrix < double, 3, 1 >;\n'}
[3.615440] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19 +19 @@\n'}
[3.615489] (unitree_guide2) StdoutLine: {'line': b'3: -using Vec4 = typename Eigen::Matrix<double, 4, 1>;\n'}
[3.615534] (unitree_guide2) StdoutLine: {'line': b'3: +using Vec4 = typename Eigen::Matrix < double, 4, 1 >;\n'}
[3.615578] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22 +22 @@\n'}
[3.615622] (unitree_guide2) StdoutLine: {'line': b'3: -using Vec6 = typename Eigen::Matrix<double, 6, 1>;\n'}
[3.615667] (unitree_guide2) StdoutLine: {'line': b'3: +using Vec6 = typename Eigen::Matrix < double, 6, 1 >;\n'}
[3.615710] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25 +25 @@\n'}
[3.615814] (unitree_guide2) StdoutLine: {'line': b'3: -using Quat = typename Eigen::Matrix<double, 4, 1>;\n'}
[3.615867] (unitree_guide2) StdoutLine: {'line': b'3: +using Quat = typename Eigen::Matrix < double, 4, 1 >;\n'}
[3.615909] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28 +28 @@\n'}
[3.615951] (unitree_guide2) StdoutLine: {'line': b'3: -using VecInt4 = typename Eigen::Matrix<int, 4, 1>;\n'}
[3.615992] (unitree_guide2) StdoutLine: {'line': b'3: +using VecInt4 = typename Eigen::Matrix < int, 4, 1 >;\n'}
[3.616033] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31 +31 @@\n'}
[3.616073] (unitree_guide2) StdoutLine: {'line': b'3: -using Vec12 = typename Eigen::Matrix<double, 12, 1>;\n'}
[3.616114] (unitree_guide2) StdoutLine: {'line': b'3: +using Vec12 = typename Eigen::Matrix < double, 12, 1 >;\n'}
[3.616155] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34 +34 @@\n'}
[3.616195] (unitree_guide2) StdoutLine: {'line': b'3: -using Vec18 = typename Eigen::Matrix<double, 18, 1>;\n'}
[3.616236] (unitree_guide2) StdoutLine: {'line': b'3: +using Vec18 = typename Eigen::Matrix < double, 18, 1 >;\n'}
[3.616288] (unitree_guide2) StdoutLine: {'line': b'3: @@ -37 +37 @@\n'}
[3.616329] (unitree_guide2) StdoutLine: {'line': b'3: -using VecX = typename Eigen::Matrix<double, Eigen::Dynamic, 1>;\n'}
[3.616371] (unitree_guide2) StdoutLine: {'line': b'3: +using VecX = typename Eigen::Matrix < double, Eigen::Dynamic, 1 >;\n'}
[3.616411] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43 +43 @@\n'}
[3.616456] (unitree_guide2) StdoutLine: {'line': b'3: -using RotMat = typename Eigen::Matrix<double, 3, 3>;\n'}
[3.616498] (unitree_guide2) StdoutLine: {'line': b'3: +using RotMat = typename Eigen::Matrix < double, 3, 3 >;\n'}
[3.616539] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46 +46 @@\n'}
[3.616579] (unitree_guide2) StdoutLine: {'line': b'3: -using HomoMat = typename Eigen::Matrix<double, 4, 4>;\n'}
[3.616620] (unitree_guide2) StdoutLine: {'line': b'3: +using HomoMat = typename Eigen::Matrix < double, 4, 4 >;\n'}
[3.616662] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49 +49 @@\n'}
[3.616703] (unitree_guide2) StdoutLine: {'line': b'3: -using Mat2 = typename Eigen::Matrix<double, 2, 2>;\n'}
[3.616743] (unitree_guide2) StdoutLine: {'line': b'3: +using Mat2 = typename Eigen::Matrix < double, 2, 2 >;\n'}
[3.616784] (unitree_guide2) StdoutLine: {'line': b'3: @@ -52 +52 @@\n'}
[3.616824] (unitree_guide2) StdoutLine: {'line': b'3: -using Mat3 = typename Eigen::Matrix<double, 3, 3>;\n'}
[3.616864] (unitree_guide2) StdoutLine: {'line': b'3: +using Mat3 = typename Eigen::Matrix < double, 3, 3 >;\n'}
[3.616904] (unitree_guide2) StdoutLine: {'line': b'3: @@ -58 +58 @@\n'}
[3.616944] (unitree_guide2) StdoutLine: {'line': b'3: -using Vec34 = typename Eigen::Matrix<double, 3, 4>;\n'}
[3.616983] (unitree_guide2) StdoutLine: {'line': b'3: +using Vec34 = typename Eigen::Matrix < double, 3, 4 >;\n'}
[3.617024] (unitree_guide2) StdoutLine: {'line': b'3: @@ -61 +61 @@\n'}
[3.617064] (unitree_guide2) StdoutLine: {'line': b'3: -using Mat6 = typename Eigen::Matrix<double, 6, 6>;\n'}
[3.617104] (unitree_guide2) StdoutLine: {'line': b'3: +using Mat6 = typename Eigen::Matrix < double, 6, 6 >;\n'}
[3.617145] (unitree_guide2) StdoutLine: {'line': b'3: @@ -64 +64 @@\n'}
[3.617185] (unitree_guide2) StdoutLine: {'line': b'3: -using Mat12 = typename Eigen::Matrix<double, 12, 12>;\n'}
[3.617225] (unitree_guide2) StdoutLine: {'line': b'3: +using Mat12 = typename Eigen::Matrix < double, 12, 12 >;\n'}
[3.617270] (unitree_guide2) StdoutLine: {'line': b'3: @@ -73 +73 @@\n'}
[3.617311] (unitree_guide2) StdoutLine: {'line': b'3: -using MatX = typename Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>;\n'}
[3.617353] (unitree_guide2) StdoutLine: {'line': b'3: +using MatX = typename Eigen::Matrix < double, Eigen::Dynamic, Eigen::Dynamic >;\n'}
[3.617394] (unitree_guide2) StdoutLine: {'line': b'3: @@ -78,6 +78,7 @@\n'}
[3.617462] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vec34 vec12ToVec34(Vec12 vec12){\n'}
[3.617511] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 vec34;\n'}
[3.617566] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[3.617606] (unitree_guide2) StdoutLine: {'line': b'3: -        vec34.col(i) = vec12.segment(3*i, 3);\n'}
[3.617646] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.617686] (unitree_guide2) StdoutLine: {'line': b'3: -    return vec34;\n'}
[3.617726] (unitree_guide2) StdoutLine: {'line': b'3: +inline Vec34 vec12ToVec34(Vec12 vec12)\n'}
[3.617766] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.617807] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 vec34;\n'}
[3.617847] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[3.617887] (unitree_guide2) StdoutLine: {'line': b'3: +    vec34.col(i) = vec12.segment(3 * i, 3);\n'}
[3.617928] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.617968] (unitree_guide2) StdoutLine: {'line': b'3: +  return vec34;\n'}
[3.618009] (unitree_guide2) StdoutLine: {'line': b'3: @@ -86,6 +87,7 @@\n'}
[3.618050] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vec12 vec34ToVec12(Vec34 vec34){\n'}
[3.618091] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 vec12;\n'}
[3.618132] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[3.618173] (unitree_guide2) StdoutLine: {'line': b'3: -        vec12.segment(3*i, 3) = vec34.col(i);\n'}
[3.618213] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.618253] (unitree_guide2) StdoutLine: {'line': b'3: -    return vec12;\n'}
[3.618292] (unitree_guide2) StdoutLine: {'line': b'3: +inline Vec12 vec34ToVec12(Vec34 vec34)\n'}
[3.618333] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.618372] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 vec12;\n'}
[3.618416] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[3.618456] (unitree_guide2) StdoutLine: {'line': b'3: +    vec12.segment(3 * i, 3) = vec34.col(i);\n'}
[3.618517] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.618560] (unitree_guide2) StdoutLine: {'line': b'3: +  return vec12;\n'}
[3.618603] (unitree_guide2) StdoutLine: {'line': b'3: @@ -94 +96 @@\n'}
[3.618646] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // MATHTYPES_H\n'}
[3.618688] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // MATHTYPES_H\n'}
[3.618730] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.618774] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/timeMarker.h':\n"}
[3.618816] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.618859] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/timeMarker.h\n'}
[3.618901] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/timeMarker.h.uncrustify\n'}
[3.618943] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,5 +11,6 @@\n'}
[3.618985] (unitree_guide2) StdoutLine: {'line': b'3: -//\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3  \xe5\xbe\xae\xe7\xa7\x92\xe7\xba\xa7\xef\xbc\x8c \xe9\x9c\x80\xe8\xa6\x81#include <sys/time.h> \n'}
[3.619031] (unitree_guide2) StdoutLine: {'line': b'3: -inline long long getSystemTime(){\n'}
[3.619074] (unitree_guide2) StdoutLine: {'line': b'3: -    struct timeval t;  \n'}
[3.619116] (unitree_guide2) StdoutLine: {'line': b'3: -    gettimeofday(&t, NULL);\n'}
[3.619159] (unitree_guide2) StdoutLine: {'line': b'3: -    return 1000000 * t.tv_sec + t.tv_usec;  \n'}
[3.619201] (unitree_guide2) StdoutLine: {'line': b'3: +//\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3  \xe5\xbe\xae\xe7\xa7\x92\xe7\xba\xa7\xef\xbc\x8c \xe9\x9c\x80\xe8\xa6\x81#include <sys/time.h>\n'}
[3.619244] (unitree_guide2) StdoutLine: {'line': b'3: +inline long long getSystemTime()\n'}
[3.619287] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.619330] (unitree_guide2) StdoutLine: {'line': b'3: +  struct timeval t;\n'}
[3.619381] (unitree_guide2) StdoutLine: {'line': b'3: +  gettimeofday(&t, NULL);\n'}
[3.619436] (unitree_guide2) StdoutLine: {'line': b'3: +  return 1000000 * t.tv_sec + t.tv_usec;\n'}
[3.619480] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18,3 +19,4 @@\n'}
[3.619532] (unitree_guide2) StdoutLine: {'line': b'3: -inline double getTimeSecond(){\n'}
[3.619576] (unitree_guide2) StdoutLine: {'line': b'3: -    double time = getSystemTime() * 0.000001;\n'}
[3.619618] (unitree_guide2) StdoutLine: {'line': b'3: -    return time;\n'}
[3.619673] (unitree_guide2) StdoutLine: {'line': b'3: +inline double getTimeSecond()\n'}
[3.619713] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.619753] (unitree_guide2) StdoutLine: {'line': b'3: +  double time = getSystemTime() * 0.000001;\n'}
[3.619794] (unitree_guide2) StdoutLine: {'line': b'3: +  return time;\n'}
[3.619833] (unitree_guide2) StdoutLine: {'line': b'3: @@ -23,8 +25,11 @@\n'}
[3.619874] (unitree_guide2) StdoutLine: {'line': b'3: -inline void absoluteWait(long long startTime, long long waitTime){\n'}
[3.619915] (unitree_guide2) StdoutLine: {'line': b'3: -    if(getSystemTime() - startTime > waitTime){\n'}
[3.619955] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[WARNING] The waitTime=" << waitTime << " of function absoluteWait is not enough!" << std::endl\n'}
[3.619997] (unitree_guide2) StdoutLine: {'line': b'3: -        << "The program has already cost " << getSystemTime() - startTime << "us." << std::endl;\n'}
[3.620039] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.620079] (unitree_guide2) StdoutLine: {'line': b'3: -    while(getSystemTime() - startTime < waitTime){\n'}
[3.620120] (unitree_guide2) StdoutLine: {'line': b'3: -        usleep(50);\n'}
[3.620161] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.620201] (unitree_guide2) StdoutLine: {'line': b'3: +inline void absoluteWait(long long startTime, long long waitTime)\n'}
[3.620242] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.620282] (unitree_guide2) StdoutLine: {'line': b'3: +  if (getSystemTime() - startTime > waitTime) {\n'}
[3.620322] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[WARNING] The waitTime=" << waitTime <<\n'}
[3.620370] (unitree_guide2) StdoutLine: {'line': b'3: +      " of function absoluteWait is not enough!" << std::endl\n'}
[3.620411] (unitree_guide2) StdoutLine: {'line': b'3: +              << "The program has already cost " << getSystemTime() - startTime << "us." <<\n'}
[3.620451] (unitree_guide2) StdoutLine: {'line': b'3: +      std::endl;\n'}
[3.620492] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.620532] (unitree_guide2) StdoutLine: {'line': b'3: +  while (getSystemTime() - startTime < waitTime) {\n'}
[3.620572] (unitree_guide2) StdoutLine: {'line': b'3: +    usleep(50);\n'}
[3.620613] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.620653] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33 +38 @@\n'}
[3.620693] (unitree_guide2) StdoutLine: {'line': b'3: -#endif //TIMEMARKER_H\n'}
[3.620734] (unitree_guide2) StdoutLine: {'line': b'3: +#endif //TIMEMARKER_H\n'}
[3.620775] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.620816] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/unitreeLeg.h':\n"}
[3.620858] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.620899] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/unitreeLeg.h\n'}
[3.620939] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/unitreeLeg.h.uncrustify\n'}
[3.620987] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10 +10 @@\n'}
[3.621027] (unitree_guide2) StdoutLine: {'line': b'3: -class QuadrupedLeg{\n'}
[3.621068] (unitree_guide2) StdoutLine: {'line': b'3: +class QuadrupedLeg {\n'}
[3.621108] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,12 +12,15 @@\n'}
[3.621148] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedLeg(int legID, float abadLinkLength, float hipLinkLength, \n'}
[3.621189] (unitree_guide2) StdoutLine: {'line': b'3: -                 float kneeLinkLength, Vec3 pHip2B);\n'}
[3.621229] (unitree_guide2) StdoutLine: {'line': b'3: -    ~QuadrupedLeg(){}\n'}
[3.621270] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calcPEe2H(Vec3 q);\n'}
[3.621319] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calcPEe2B(Vec3 q);\n'}
[3.621388] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calcVEe(Vec3 q, Vec3 qd);\n'}
[3.621431] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calcQ(Vec3 pEe, FrameType frame);\n'}
[3.621474] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calcQd(Vec3 q, Vec3 vEe);\n'}
[3.621521] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calcQd(Vec3 pEe, Vec3 vEe, FrameType frame);\n'}
[3.621576] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 calcTau(Vec3 q, Vec3 force);\n'}
[3.621628] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 calcJaco(Vec3 q);\n'}
[3.621677] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getHip2B(){return _pHip2B;}\n'}
[3.621733] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedLeg(\n'}
[3.621773] (unitree_guide2) StdoutLine: {'line': b'3: +    int legID, float abadLinkLength, float hipLinkLength,\n'}
[3.621813] (unitree_guide2) StdoutLine: {'line': b'3: +    float kneeLinkLength, Vec3 pHip2B);\n'}
[3.621854] (unitree_guide2) StdoutLine: {'line': b'3: +  ~QuadrupedLeg() {\n'}
[3.621894] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.621934] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calcPEe2H(Vec3 q);\n'}
[3.621974] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calcPEe2B(Vec3 q);\n'}
[3.622015] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calcVEe(Vec3 q, Vec3 qd);\n'}
[3.622055] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calcQ(Vec3 pEe, FrameType frame);\n'}
[3.622097] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calcQd(Vec3 q, Vec3 vEe);\n'}
[3.622138] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calcQd(Vec3 pEe, Vec3 vEe, FrameType frame);\n'}
[3.622180] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 calcTau(Vec3 q, Vec3 force);\n'}
[3.622222] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 calcJaco(Vec3 q);\n'}
[3.622264] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getHip2B() {return _pHip2B;}\n'}
[3.622332] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.622375] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,7 +28,8 @@\n'}
[3.622431] (unitree_guide2) StdoutLine: {'line': b'3: -    float q1_ik(float py, float pz, float b2y);\n'}
[3.622472] (unitree_guide2) StdoutLine: {'line': b'3: -    float q3_ik(float b3z, float b4z, float b);\n'}
[3.622512] (unitree_guide2) StdoutLine: {'line': b'3: -    float q2_ik(float q1, float q3, float px, \n'}
[3.622552] (unitree_guide2) StdoutLine: {'line': b'3: -                float py, float pz, float b3z, float b4z);\n'}
[3.622592] (unitree_guide2) StdoutLine: {'line': b'3: -    float _sideSign;\n'}
[3.622632] (unitree_guide2) StdoutLine: {'line': b'3: -    const float _abadLinkLength, _hipLinkLength, _kneeLinkLength;\n'}
[3.622673] (unitree_guide2) StdoutLine: {'line': b'3: -    const Vec3 _pHip2B;\n'}
[3.622713] (unitree_guide2) StdoutLine: {'line': b'3: +  float q1_ik(float py, float pz, float b2y);\n'}
[3.622753] (unitree_guide2) StdoutLine: {'line': b'3: +  float q3_ik(float b3z, float b4z, float b);\n'}
[3.622793] (unitree_guide2) StdoutLine: {'line': b'3: +  float q2_ik(\n'}
[3.622834] (unitree_guide2) StdoutLine: {'line': b'3: +    float q1, float q3, float px,\n'}
[3.622874] (unitree_guide2) StdoutLine: {'line': b'3: +    float py, float pz, float b3z, float b4z);\n'}
[3.622915] (unitree_guide2) StdoutLine: {'line': b'3: +  float _sideSign;\n'}
[3.622955] (unitree_guide2) StdoutLine: {'line': b'3: +  const float _abadLinkLength, _hipLinkLength, _kneeLinkLength;\n'}
[3.622996] (unitree_guide2) StdoutLine: {'line': b'3: +  const Vec3 _pHip2B;\n'}
[3.623036] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34 +38 @@\n'}
[3.623076] (unitree_guide2) StdoutLine: {'line': b'3: -class A1Leg : public QuadrupedLeg{\n'}
[3.623117] (unitree_guide2) StdoutLine: {'line': b'3: +class A1Leg: public QuadrupedLeg {\n'}
[3.623156] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36,3 +40,5 @@\n'}
[3.623196] (unitree_guide2) StdoutLine: {'line': b'3: -    A1Leg(const int legID, const Vec3 pHip2B):\n'}
[3.623236] (unitree_guide2) StdoutLine: {'line': b'3: -        QuadrupedLeg(legID, 0.0838, 0.2, 0.2, pHip2B){}\n'}
[3.623286] (unitree_guide2) StdoutLine: {'line': b'3: -    ~A1Leg(){}\n'}
[3.623327] (unitree_guide2) StdoutLine: {'line': b'3: +  A1Leg(const int legID, const Vec3 pHip2B)\n'}
[3.623368] (unitree_guide2) StdoutLine: {'line': b'3: +    : QuadrupedLeg(legID, 0.0838, 0.2, 0.2, pHip2B) {\n'}
[3.623408] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.623449] (unitree_guide2) StdoutLine: {'line': b'3: +  ~A1Leg() {\n'}
[3.623490] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.623531] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41 +47 @@\n'}
[3.623572] (unitree_guide2) StdoutLine: {'line': b'3: -class Go1Leg : public QuadrupedLeg{\n'}
[3.623613] (unitree_guide2) StdoutLine: {'line': b'3: +class Go1Leg: public QuadrupedLeg {\n'}
[3.623654] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,3 +49,5 @@\n'}
[3.623695] (unitree_guide2) StdoutLine: {'line': b'3: -    Go1Leg(const int legID, const Vec3 pHip2B):\n'}
[3.623736] (unitree_guide2) StdoutLine: {'line': b'3: -        QuadrupedLeg(legID, 0.08, 0.213, 0.213, pHip2B){}\n'}
[3.623776] (unitree_guide2) StdoutLine: {'line': b'3: -    ~Go1Leg(){}\n'}
[3.623817] (unitree_guide2) StdoutLine: {'line': b'3: +  Go1Leg(const int legID, const Vec3 pHip2B)\n'}
[3.623857] (unitree_guide2) StdoutLine: {'line': b'3: +    : QuadrupedLeg(legID, 0.08, 0.213, 0.213, pHip2B) {\n'}
[3.623898] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.623938] (unitree_guide2) StdoutLine: {'line': b'3: +  ~Go1Leg() {\n'}
[3.623978] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.624019] (unitree_guide2) StdoutLine: {'line': b'3: @@ -48 +56 @@\n'}
[3.624058] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // UNITREELEG_H\n'}
[3.624099] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // UNITREELEG_H\n'}
[3.624139] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.624179] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/common/unitreeRobot.h':\n"}
[3.624221] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.624286] (unitree_guide2) StdoutLine: {'line': b'3: --- include/common/unitreeRobot.h\n'}
[3.624330] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/common/unitreeRobot.h.uncrustify\n'}
[3.624373] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10 +10 @@\n'}
[3.624415] (unitree_guide2) StdoutLine: {'line': b'3: -class QuadrupedRobot{\n'}
[3.624457] (unitree_guide2) StdoutLine: {'line': b'3: +class QuadrupedRobot {\n'}
[3.624500] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,2 +12,4 @@\n'}
[3.624544] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot(){};\n'}
[3.624588] (unitree_guide2) StdoutLine: {'line': b'3: -    ~QuadrupedRobot(){}\n'}
[3.624631] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot() {\n'}
[3.624674] (unitree_guide2) StdoutLine: {'line': b'3: +  };\n'}
[3.624717] (unitree_guide2) StdoutLine: {'line': b'3: +  ~QuadrupedRobot() {\n'}
[3.624759] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.624815] (unitree_guide2) StdoutLine: {'line': b'3: @@ -15,2 +17,2 @@\n'}
[3.624855] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getX(LowlevelState &state);\n'}
[3.624896] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getVecXP(LowlevelState &state);\n'}
[3.624938] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getX(LowlevelState & state);\n'}
[3.624979] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getVecXP(LowlevelState & state);\n'}
[3.625020] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18,4 +20,4 @@\n'}
[3.625061] (unitree_guide2) StdoutLine: {'line': b'3: -    // Inverse Kinematics(Body/Hip Frame)\n'}
[3.625102] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 getQ(const Vec34 &feetPosition, FrameType frame);\n'}
[3.625143] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 getQd(const Vec34 &feetPosition, const Vec34 &feetVelocity, FrameType frame);\n'}
[3.625184] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 getTau(const Vec12 &q, const Vec34 feetForce);\n'}
[3.625229] (unitree_guide2) StdoutLine: {'line': b'3: +  // Inverse Kinematics(Body/Hip Frame)\n'}
[3.625279] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 getQ(const Vec34 & feetPosition, FrameType frame);\n'}
[3.625320] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 getQd(const Vec34 & feetPosition, const Vec34 & feetVelocity, FrameType frame);\n'}
[3.625362] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 getTau(const Vec12 & q, const Vec34 feetForce);\n'}
[3.625402] (unitree_guide2) StdoutLine: {'line': b'3: @@ -23,5 +25,5 @@\n'}
[3.625443] (unitree_guide2) StdoutLine: {'line': b'3: -    // Forward Kinematics\n'}
[3.625484] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getFootPosition(LowlevelState &state, int id, FrameType frame);\n'}
[3.639964] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getFootVelocity(LowlevelState &state, int id);\n'}
[3.640080] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getFeet2BPositions(LowlevelState &state, FrameType frame);\n'}
[3.640133] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getFeet2BVelocities(LowlevelState &state, FrameType frame);\n'}
[3.640213] (unitree_guide2) StdoutLine: {'line': b'3: +  // Forward Kinematics\n'}
[3.640260] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getFootPosition(LowlevelState & state, int id, FrameType frame);\n'}
[3.640305] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getFootVelocity(LowlevelState & state, int id);\n'}
[3.640351] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getFeet2BPositions(LowlevelState & state, FrameType frame);\n'}
[3.640396] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getFeet2BVelocities(LowlevelState & state, FrameType frame);\n'}
[3.640440] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29,8 +31,8 @@\n'}
[3.640484] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 getJaco(LowlevelState &state, int legID);\n'}
[3.640528] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 getRobVelLimitX(){return _robVelLimitX;}\n'}
[3.640571] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 getRobVelLimitY(){return _robVelLimitY;}\n'}
[3.640616] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 getRobVelLimitYaw(){return _robVelLimitYaw;}\n'}
[3.640660] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getFeetPosIdeal(){return _feetPosNormalStand;}\n'}
[3.640705] (unitree_guide2) StdoutLine: {'line': b'3: -    double getRobMass(){return _mass;}\n'}
[3.640751] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getPcb(){return _pcb;}\n'}
[3.640794] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 getRobInertial(){return _Ib;}\n'}
[3.640838] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 getJaco(LowlevelState & state, int legID);\n'}
[3.640892] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 getRobVelLimitX() {return _robVelLimitX;}\n'}
[3.640936] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 getRobVelLimitY() {return _robVelLimitY;}\n'}
[3.640979] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 getRobVelLimitYaw() {return _robVelLimitYaw;}\n'}
[3.641023] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getFeetPosIdeal() {return _feetPosNormalStand;}\n'}
[3.641066] (unitree_guide2) StdoutLine: {'line': b'3: +  double getRobMass() {return _mass;}\n'}
[3.641109] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getPcb() {return _pcb;}\n'}
[3.641152] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 getRobInertial() {return _Ib;}\n'}
[3.641195] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39,8 +41,8 @@\n'}
[3.641238] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedLeg* _Legs[4];\n'}
[3.641282] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 _robVelLimitX;\n'}
[3.641325] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 _robVelLimitY;\n'}
[3.641370] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec2 _robVelLimitYaw;\n'}
[3.641413] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _feetPosNormalStand;\n'}
[3.641456] (unitree_guide2) StdoutLine: {'line': b'3: -    double _mass;\n'}
[3.641500] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _pcb;\n'}
[3.641669] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _Ib;\n'}
[3.641721] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedLeg * _Legs[4];\n'}
[3.641764] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 _robVelLimitX;\n'}
[3.641808] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 _robVelLimitY;\n'}
[3.641861] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec2 _robVelLimitYaw;\n'}
[3.641905] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _feetPosNormalStand;\n'}
[3.641948] (unitree_guide2) StdoutLine: {'line': b'3: +  double _mass;\n'}
[3.641992] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _pcb;\n'}
[3.642035] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _Ib;\n'}
[3.642077] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49 +51 @@\n'}
[3.642120] (unitree_guide2) StdoutLine: {'line': b'3: -class A1Robot : public QuadrupedRobot{\n'}
[3.642163] (unitree_guide2) StdoutLine: {'line': b'3: +class A1Robot: public QuadrupedRobot {\n'}
[3.642206] (unitree_guide2) StdoutLine: {'line': b'3: @@ -51,2 +53,3 @@\n'}
[3.642248] (unitree_guide2) StdoutLine: {'line': b'3: -    A1Robot();\n'}
[3.642291] (unitree_guide2) StdoutLine: {'line': b'3: -    ~A1Robot(){}\n'}
[3.642334] (unitree_guide2) StdoutLine: {'line': b'3: +  A1Robot();\n'}
[3.642377] (unitree_guide2) StdoutLine: {'line': b'3: +  ~A1Robot() {\n'}
[3.642421] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.642464] (unitree_guide2) StdoutLine: {'line': b'3: @@ -55 +58 @@\n'}
[3.642508] (unitree_guide2) StdoutLine: {'line': b'3: -class Go1Robot : public QuadrupedRobot{\n'}
[3.642551] (unitree_guide2) StdoutLine: {'line': b'3: +class Go1Robot: public QuadrupedRobot {\n'}
[3.642595] (unitree_guide2) StdoutLine: {'line': b'3: @@ -57,2 +60,3 @@\n'}
[3.642638] (unitree_guide2) StdoutLine: {'line': b'3: -    Go1Robot();\n'}
[3.642680] (unitree_guide2) StdoutLine: {'line': b'3: -    ~Go1Robot(){};\n'}
[3.642724] (unitree_guide2) StdoutLine: {'line': b'3: +  Go1Robot();\n'}
[3.642766] (unitree_guide2) StdoutLine: {'line': b'3: +  ~Go1Robot() {\n'}
[3.642817] (unitree_guide2) StdoutLine: {'line': b'3: +  };\n'}
[3.642861] (unitree_guide2) StdoutLine: {'line': b'3: @@ -61 +65 @@\n'}
[3.642904] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // UNITREEROBOT_H\n'}
[3.642947] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // UNITREEROBOT_H\n'}
[3.642989] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.643033] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/control/BalanceCtrl.h':\n"}
[3.643078] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.643121] (unitree_guide2) StdoutLine: {'line': b'3: --- include/control/BalanceCtrl.h\n'}
[3.643165] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/control/BalanceCtrl.h.uncrustify\n'}
[3.643208] (unitree_guide2) StdoutLine: {'line': b'3: @@ -15 +15 @@\n'}
[3.643252] (unitree_guide2) StdoutLine: {'line': b'3: -class BalanceCtrl{\n'}
[3.643294] (unitree_guide2) StdoutLine: {'line': b'3: +class BalanceCtrl {\n'}
[3.643337] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17,3 +17,3 @@\n'}
[3.643381] (unitree_guide2) StdoutLine: {'line': b'3: -    BalanceCtrl(double mass, Mat3 Ib, Mat6 S, double alpha, double beta);\n'}
[3.643429] (unitree_guide2) StdoutLine: {'line': b'3: -    BalanceCtrl(QuadrupedRobot *robModel);\n'}
[3.643472] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact);\n'}
[3.643517] (unitree_guide2) StdoutLine: {'line': b'3: +  BalanceCtrl(double mass, Mat3 Ib, Mat6 S, double alpha, double beta);\n'}
[3.643560] (unitree_guide2) StdoutLine: {'line': b'3: +  BalanceCtrl(QuadrupedRobot * robModel);\n'}
[3.643602] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact);\n'}
[3.643645] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21 +21 @@\n'}
[3.643688] (unitree_guide2) StdoutLine: {'line': b'3: -    void setPyPlot(PyPlot *plot){_testPlot = plot;}\n'}
[3.643742] (unitree_guide2) StdoutLine: {'line': b'3: +  void setPyPlot(PyPlot * plot) {_testPlot = plot;}\n'}
[3.643795] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22,0 +23 @@\n'}
[3.643839] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.643883] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24,4 +25,4 @@\n'}
[3.643927] (unitree_guide2) StdoutLine: {'line': b'3: -    void calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact);\n'}
[3.643971] (unitree_guide2) StdoutLine: {'line': b'3: -    void calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM);\n'}
[3.644016] (unitree_guide2) StdoutLine: {'line': b'3: -    void calConstraints(VecInt4 contact);\n'}
[3.644059] (unitree_guide2) StdoutLine: {'line': b'3: -    void solveQP();\n'}
[3.644102] (unitree_guide2) StdoutLine: {'line': b'3: +  void calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact);\n'}
[3.644145] (unitree_guide2) StdoutLine: {'line': b'3: +  void calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM);\n'}
[3.644190] (unitree_guide2) StdoutLine: {'line': b'3: +  void calConstraints(VecInt4 contact);\n'}
[3.644234] (unitree_guide2) StdoutLine: {'line': b'3: +  void solveQP();\n'}
[3.644278] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29,12 +30,12 @@\n'}
[3.644321] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat12 _G, _W, _U;\n'}
[3.644366] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat6 _S;\n'}
[3.644411] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _Ib;\n'}
[3.644454] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec6 _bd;\n'}
[3.644497] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _g;\n'}
[3.644540] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _pcb;\n'}
[3.644584] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 _F, _Fprev, _g0T;\n'}
[3.644627] (unitree_guide2) StdoutLine: {'line': b'3: -    double _mass, _alpha, _beta, _fricRatio;\n'}
[3.644671] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::MatrixXd _CE, _CI;\n'}
[3.644716] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::VectorXd _ce0, _ci0;\n'}
[3.644766] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 6 , 12> _A;\n'}
[3.644815] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 5 , 3 > _fricMat;\n'}
[3.644858] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat12 _G, _W, _U;\n'}
[3.644902] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat6 _S;\n'}
[3.644945] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _Ib;\n'}
[3.644987] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec6 _bd;\n'}
[3.645030] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _g;\n'}
[3.645073] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _pcb;\n'}
[3.645116] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 _F, _Fprev, _g0T;\n'}
[3.645160] (unitree_guide2) StdoutLine: {'line': b'3: +  double _mass, _alpha, _beta, _fricRatio;\n'}
[3.645203] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::MatrixXd _CE, _CI;\n'}
[3.645247] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::VectorXd _ce0, _ci0;\n'}
[3.645291] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 6, 12 > _A;\n'}
[3.645335] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 5, 3 > _fricMat;\n'}
[3.645378] (unitree_guide2) StdoutLine: {'line': b'3: @@ -42,2 +43,2 @@\n'}
[3.645422] (unitree_guide2) StdoutLine: {'line': b'3: -    quadprogpp::Matrix<double> G, CE, CI;\n'}
[3.645466] (unitree_guide2) StdoutLine: {'line': b'3: -    quadprogpp::Vector<double> g0, ce0, ci0, x;\n'}
[3.645528] (unitree_guide2) StdoutLine: {'line': b'3: +  quadprogpp::Matrix < double > G, CE, CI;\n'}
[3.645573] (unitree_guide2) StdoutLine: {'line': b'3: +  quadprogpp::Vector < double > g0, ce0, ci0, x;\n'}
[3.645616] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46 +47 @@\n'}
[3.645659] (unitree_guide2) StdoutLine: {'line': b'3: -    PyPlot *_testPlot;\n'}
[3.645701] (unitree_guide2) StdoutLine: {'line': b'3: +  PyPlot * _testPlot;\n'}
[3.645756] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50 +51 @@\n'}
[3.645807] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // BALANCECTRL_H\n'}
[3.645857] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // BALANCECTRL_H\n'}
[3.645900] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.645943] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/control/ControlFrame.h':\n"}
[3.645987] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.646030] (unitree_guide2) StdoutLine: {'line': b'3: --- include/control/ControlFrame.h\n'}
[3.646074] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/control/ControlFrame.h.uncrustify\n'}
[3.646119] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10 +10 @@\n'}
[3.646162] (unitree_guide2) StdoutLine: {'line': b'3: -class ControlFrame{\n'}
[3.646205] (unitree_guide2) StdoutLine: {'line': b'3: +class ControlFrame {\n'}
[3.646377] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,5 +12,6 @@\n'}
[3.646531] (unitree_guide2) StdoutLine: {'line': b'3: -\tControlFrame(CtrlComponents *ctrlComp);\n'}
[3.646607] (unitree_guide2) StdoutLine: {'line': b'3: -\t~ControlFrame(){\n'}
[3.646675] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tdelete _FSMController;\n'}
[3.646802] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[3.646851] (unitree_guide2) StdoutLine: {'line': b'3: -\tvoid run();\n'}
[3.646895] (unitree_guide2) StdoutLine: {'line': b'3: +  ControlFrame(CtrlComponents * ctrlComp);\n'}
[3.646939] (unitree_guide2) StdoutLine: {'line': b'3: +  ~ControlFrame() {\n'}
[3.647062] (unitree_guide2) StdoutLine: {'line': b'3: +    delete _FSMController;\n'}
[3.647110] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.647156] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.647200] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.647244] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18,2 +19,2 @@\n'}
[3.647287] (unitree_guide2) StdoutLine: {'line': b'3: -\tFSM* _FSMController;\n'}
[3.647331] (unitree_guide2) StdoutLine: {'line': b'3: -\tCtrlComponents *_ctrlComp;\n'}
[3.647375] (unitree_guide2) StdoutLine: {'line': b'3: +  FSM * _FSMController;\n'}
[3.647418] (unitree_guide2) StdoutLine: {'line': b'3: +  CtrlComponents * _ctrlComp;\n'}
[3.647460] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22 +23 @@\n'}
[3.647503] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  //CONTROLFRAME_H\n'}
[3.647546] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  //CONTROLFRAME_H\n'}
[3.647589] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.647632] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/control/CtrlComponents.h':\n"}
[3.647679] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.647731] (unitree_guide2) StdoutLine: {'line': b'3: --- include/control/CtrlComponents.h\n'}
[3.647776] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/control/CtrlComponents.h.uncrustify\n'}
[3.647820] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22 +22,2 @@\n'}
[3.647863] (unitree_guide2) StdoutLine: {'line': b'3: -struct CtrlComponents{\n'}
[3.647906] (unitree_guide2) StdoutLine: {'line': b'3: +struct CtrlComponents\n'}
[3.647949] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.647993] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24,16 +25,16 @@\n'}
[3.648035] (unitree_guide2) StdoutLine: {'line': b'3: -    CtrlComponents(IOInterface *ioInter):ioInter(ioInter){\n'}
[3.648078] (unitree_guide2) StdoutLine: {'line': b'3: -        lowCmd = new LowlevelCmd();\n'}
[3.648121] (unitree_guide2) StdoutLine: {'line': b'3: -        lowState = new LowlevelState();\n'}
[3.648175] (unitree_guide2) StdoutLine: {'line': b'3: -        contact = new VecInt4;\n'}
[3.648216] (unitree_guide2) StdoutLine: {'line': b'3: -        phase = new Vec4;\n'}
[3.648257] (unitree_guide2) StdoutLine: {'line': b'3: -        *contact = VecInt4(0, 0, 0, 0);\n'}
[3.648297] (unitree_guide2) StdoutLine: {'line': b'3: -        *phase = Vec4(0.5, 0.5, 0.5, 0.5);\n'}
[3.648337] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.648378] (unitree_guide2) StdoutLine: {'line': b'3: -    ~CtrlComponents(){\n'}
[3.648418] (unitree_guide2) StdoutLine: {'line': b'3: -        delete lowCmd;\n'}
[3.648459] (unitree_guide2) StdoutLine: {'line': b'3: -        delete lowState;\n'}
[3.648510] (unitree_guide2) StdoutLine: {'line': b'3: -        delete ioInter;\n'}
[3.648551] (unitree_guide2) StdoutLine: {'line': b'3: -        delete robotModel;\n'}
[3.648592] (unitree_guide2) StdoutLine: {'line': b'3: -        delete waveGen;\n'}
[3.648632] (unitree_guide2) StdoutLine: {'line': b'3: -        delete estimator;\n'}
[3.648697] (unitree_guide2) StdoutLine: {'line': b'3: -        delete balCtrl;\n'}
[3.648739] (unitree_guide2) StdoutLine: {'line': b'3: +  CtrlComponents(IOInterface * ioInter) : ioInter(ioInter) {\n'}
[3.648798] (unitree_guide2) StdoutLine: {'line': b'3: +    lowCmd = new LowlevelCmd();\n'}
[3.648839] (unitree_guide2) StdoutLine: {'line': b'3: +    lowState = new LowlevelState();\n'}
[3.648879] (unitree_guide2) StdoutLine: {'line': b'3: +    contact = new VecInt4;\n'}
[3.648919] (unitree_guide2) StdoutLine: {'line': b'3: +    phase = new Vec4;\n'}
[3.648959] (unitree_guide2) StdoutLine: {'line': b'3: +    *contact = VecInt4(0, 0, 0, 0);\n'}
[3.649000] (unitree_guide2) StdoutLine: {'line': b'3: +    *phase = Vec4(0.5, 0.5, 0.5, 0.5);\n'}
[3.649040] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.649080] (unitree_guide2) StdoutLine: {'line': b'3: +  ~CtrlComponents() {\n'}
[3.649121] (unitree_guide2) StdoutLine: {'line': b'3: +    delete lowCmd;\n'}
[3.649164] (unitree_guide2) StdoutLine: {'line': b'3: +    delete lowState;\n'}
[3.649206] (unitree_guide2) StdoutLine: {'line': b'3: +    delete ioInter;\n'}
[3.649246] (unitree_guide2) StdoutLine: {'line': b'3: +    delete robotModel;\n'}
[3.649287] (unitree_guide2) StdoutLine: {'line': b'3: +    delete waveGen;\n'}
[3.649327] (unitree_guide2) StdoutLine: {'line': b'3: +    delete estimator;\n'}
[3.649367] (unitree_guide2) StdoutLine: {'line': b'3: +    delete balCtrl;\n'}
[3.649407] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41 +42 @@\n'}
[3.649447] (unitree_guide2) StdoutLine: {'line': b'3: -        delete plot;\n'}
[3.649487] (unitree_guide2) StdoutLine: {'line': b'3: +    delete plot;\n'}
[3.649526] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,8 +44,8 @@\n'}
[3.649566] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.649606] (unitree_guide2) StdoutLine: {'line': b'3: -    LowlevelCmd *lowCmd;\n'}
[3.649654] (unitree_guide2) StdoutLine: {'line': b'3: -    LowlevelState *lowState;\n'}
[3.649697] (unitree_guide2) StdoutLine: {'line': b'3: -    IOInterface *ioInter;\n'}
[3.649738] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot *robotModel;\n'}
[3.649778] (unitree_guide2) StdoutLine: {'line': b'3: -    WaveGenerator *waveGen;\n'}
[3.649819] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator *estimator;\n'}
[3.649859] (unitree_guide2) StdoutLine: {'line': b'3: -    BalanceCtrl *balCtrl;\n'}
[3.649899] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.649939] (unitree_guide2) StdoutLine: {'line': b'3: +  LowlevelCmd * lowCmd;\n'}
[3.649979] (unitree_guide2) StdoutLine: {'line': b'3: +  LowlevelState * lowState;\n'}
[3.650019] (unitree_guide2) StdoutLine: {'line': b'3: +  IOInterface * ioInter;\n'}
[3.650059] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * robotModel;\n'}
[3.650099] (unitree_guide2) StdoutLine: {'line': b'3: +  WaveGenerator * waveGen;\n'}
[3.650152] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator * estimator;\n'}
[3.650193] (unitree_guide2) StdoutLine: {'line': b'3: +  BalanceCtrl * balCtrl;\n'}
[3.650234] (unitree_guide2) StdoutLine: {'line': b'3: @@ -53 +54 @@\n'}
[3.650275] (unitree_guide2) StdoutLine: {'line': b'3: -    PyPlot *plot;\n'}
[3.650316] (unitree_guide2) StdoutLine: {'line': b'3: +  PyPlot * plot;\n'}
[3.650357] (unitree_guide2) StdoutLine: {'line': b'3: @@ -56,2 +57,2 @@\n'}
[3.650399] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 *contact;\n'}
[3.650440] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 *phase;\n'}
[3.650482] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * contact;\n'}
[3.650523] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 * phase;\n'}
[3.650569] (unitree_guide2) StdoutLine: {'line': b'3: @@ -59,3 +60,3 @@\n'}
[3.650614] (unitree_guide2) StdoutLine: {'line': b'3: -    double dt;\n'}
[3.650656] (unitree_guide2) StdoutLine: {'line': b'3: -    bool *running;\n'}
[3.650697] (unitree_guide2) StdoutLine: {'line': b'3: -    CtrlPlatform ctrlPlatform;\n'}
[3.650738] (unitree_guide2) StdoutLine: {'line': b'3: +  double dt;\n'}
[3.650779] (unitree_guide2) StdoutLine: {'line': b'3: +  bool * running;\n'}
[3.650820] (unitree_guide2) StdoutLine: {'line': b'3: +  CtrlPlatform ctrlPlatform;\n'}
[3.650861] (unitree_guide2) StdoutLine: {'line': b'3: @@ -63,3 +64,4 @@\n'}
[3.650902] (unitree_guide2) StdoutLine: {'line': b'3: -    void sendRecv(){\n'}
[3.650943] (unitree_guide2) StdoutLine: {'line': b'3: -        ioInter->sendRecv(lowCmd, lowState);\n'}
[3.650985] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.651027] (unitree_guide2) StdoutLine: {'line': b'3: +  void sendRecv()\n'}
[3.651069] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.651111] (unitree_guide2) StdoutLine: {'line': b'3: +    ioInter->sendRecv(lowCmd, lowState);\n'}
[3.651153] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.651195] (unitree_guide2) StdoutLine: {'line': b'3: @@ -67,3 +69,4 @@\n'}
[3.651236] (unitree_guide2) StdoutLine: {'line': b'3: -    void runWaveGen(){\n'}
[3.651278] (unitree_guide2) StdoutLine: {'line': b'3: -        waveGen->calcContactPhase(*phase, *contact, _waveStatus);\n'}
[3.651320] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.651361] (unitree_guide2) StdoutLine: {'line': b'3: +  void runWaveGen()\n'}
[3.651403] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.651444] (unitree_guide2) StdoutLine: {'line': b'3: +    waveGen->calcContactPhase(*phase, *contact, _waveStatus);\n'}
[3.651485] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.651526] (unitree_guide2) StdoutLine: {'line': b'3: @@ -71,3 +74,4 @@\n'}
[3.651567] (unitree_guide2) StdoutLine: {'line': b'3: -    void setAllStance(){\n'}
[3.651636] (unitree_guide2) StdoutLine: {'line': b'3: -        _waveStatus = WaveStatus::STANCE_ALL;\n'}
[3.651679] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.651735] (unitree_guide2) StdoutLine: {'line': b'3: +  void setAllStance()\n'}
[3.651777] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.651837] (unitree_guide2) StdoutLine: {'line': b'3: +    _waveStatus = WaveStatus::STANCE_ALL;\n'}
[3.651880] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.651923] (unitree_guide2) StdoutLine: {'line': b'3: @@ -75,3 +79,4 @@\n'}
[3.651971] (unitree_guide2) StdoutLine: {'line': b'3: -    void setAllSwing(){\n'}
[3.652015] (unitree_guide2) StdoutLine: {'line': b'3: -        _waveStatus = WaveStatus::SWING_ALL;\n'}
[3.652057] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.652100] (unitree_guide2) StdoutLine: {'line': b'3: +  void setAllSwing()\n'}
[3.652142] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.652185] (unitree_guide2) StdoutLine: {'line': b'3: +    _waveStatus = WaveStatus::SWING_ALL;\n'}
[3.652228] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.652270] (unitree_guide2) StdoutLine: {'line': b'3: @@ -79,3 +84,4 @@\n'}
[3.652313] (unitree_guide2) StdoutLine: {'line': b'3: -    void setStartWave(){\n'}
[3.652370] (unitree_guide2) StdoutLine: {'line': b'3: -        _waveStatus = WaveStatus::WAVE_ALL;\n'}
[3.652435] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.652482] (unitree_guide2) StdoutLine: {'line': b'3: +  void setStartWave()\n'}
[3.652529] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.652584] (unitree_guide2) StdoutLine: {'line': b'3: +    _waveStatus = WaveStatus::WAVE_ALL;\n'}
[3.652640] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.652686] (unitree_guide2) StdoutLine: {'line': b'3: @@ -83,3 +89,4 @@\n'}
[3.652731] (unitree_guide2) StdoutLine: {'line': b'3: -    void geneObj(){\n'}
[3.652778] (unitree_guide2) StdoutLine: {'line': b'3: -        estimator = new Estimator(robotModel, lowState, contact, phase, dt);\n'}
[3.652825] (unitree_guide2) StdoutLine: {'line': b'3: -        balCtrl = new BalanceCtrl(robotModel);\n'}
[3.652879] (unitree_guide2) StdoutLine: {'line': b'3: +  void geneObj()\n'}
[3.652926] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.652972] (unitree_guide2) StdoutLine: {'line': b'3: +    estimator = new Estimator(robotModel, lowState, contact, phase, dt);\n'}
[3.653022] (unitree_guide2) StdoutLine: {'line': b'3: +    balCtrl = new BalanceCtrl(robotModel);\n'}
[3.653070] (unitree_guide2) StdoutLine: {'line': b'3: @@ -88,3 +95,3 @@\n'}
[3.653117] (unitree_guide2) StdoutLine: {'line': b'3: -        plot = new PyPlot();\n'}
[3.653165] (unitree_guide2) StdoutLine: {'line': b'3: -        balCtrl->setPyPlot(plot);\n'}
[3.653216] (unitree_guide2) StdoutLine: {'line': b'3: -        estimator->setPyPlot(plot);\n'}
[3.653266] (unitree_guide2) StdoutLine: {'line': b'3: +    plot = new PyPlot();\n'}
[3.653316] (unitree_guide2) StdoutLine: {'line': b'3: +    balCtrl->setPyPlot(plot);\n'}
[3.653366] (unitree_guide2) StdoutLine: {'line': b'3: +    estimator->setPyPlot(plot);\n'}
[3.653414] (unitree_guide2) StdoutLine: {'line': b'3: @@ -92 +99 @@\n'}
[3.653463] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.653511] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.653571] (unitree_guide2) StdoutLine: {'line': b'3: @@ -95 +102 @@\n'}
[3.653620] (unitree_guide2) StdoutLine: {'line': b'3: -    WaveStatus _waveStatus = WaveStatus::SWING_ALL;\n'}
[3.653671] (unitree_guide2) StdoutLine: {'line': b'3: +  WaveStatus _waveStatus = WaveStatus::SWING_ALL;\n'}
[3.653717] (unitree_guide2) StdoutLine: {'line': b'3: @@ -99 +106 @@\n'}
[3.653790] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // CTRLCOMPONENTS_H\n'}
[3.653844] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // CTRLCOMPONENTS_H\n'}
[3.653890] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.653940] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/control/Estimator.h':\n"}
[3.653986] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.654032] (unitree_guide2) StdoutLine: {'line': b'3: --- include/control/Estimator.h\n'}
[3.654080] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/control/Estimator.h.uncrustify\n'}
[3.654129] (unitree_guide2) StdoutLine: {'line': b'3: @@ -37 +37 @@\n'}
[3.654178] (unitree_guide2) StdoutLine: {'line': b'3: -class Estimator{\n'}
[3.654228] (unitree_guide2) StdoutLine: {'line': b'3: +class Estimator {\n'}
[3.654274] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39,10 +39,14 @@\n'}
[3.654324] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, VecInt4 *contact, Vec4 *phase, double dt);\n'}
[3.654380] (unitree_guide2) StdoutLine: {'line': b'3: -    Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, VecInt4 *contact, Vec4 *phase, double dt, Vec18 Qdig, std::string testName);\n'}
[3.654440] (unitree_guide2) StdoutLine: {'line': b'3: -    ~Estimator();\n'}
[3.654489] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3  getPosition();\n'}
[3.654560] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3  getVelocity();\n'}
[3.654634] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3  getFootPos(int i);\n'}
[3.654698] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getFeetPos();\n'}
[3.654752] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getFeetVel();\n'}
[3.654806] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getPosFeet2BGlobal();\n'}
[3.654852] (unitree_guide2) StdoutLine: {'line': b'3: -    void run();\n'}
[3.654902] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator(\n'}
[3.654962] (unitree_guide2) StdoutLine: {'line': b'3: +    QuadrupedRobot * robotModel, LowlevelState * lowState, VecInt4 * contact, Vec4 * phase,\n'}
[3.655007] (unitree_guide2) StdoutLine: {'line': b'3: +    double dt);\n'}
[3.655050] (unitree_guide2) StdoutLine: {'line': b'3: +  Estimator(\n'}
[3.655093] (unitree_guide2) StdoutLine: {'line': b'3: +    QuadrupedRobot * robotModel, LowlevelState * lowState, VecInt4 * contact, Vec4 * phase,\n'}
[3.655171] (unitree_guide2) StdoutLine: {'line': b'3: +    double dt, Vec18 Qdig, std::string testName);\n'}
[3.655218] (unitree_guide2) StdoutLine: {'line': b'3: +  ~Estimator();\n'}
[3.655299] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3  getPosition();\n'}
[3.655345] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3  getVelocity();\n'}
[3.655406] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3  getFootPos(int i);\n'}
[3.655447] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getFeetPos();\n'}
[3.655489] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getFeetVel();\n'}
[3.655554] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getPosFeet2BGlobal();\n'}
[3.655620] (unitree_guide2) StdoutLine: {'line': b'3: +  void run();\n'}
[3.655686] (unitree_guide2) StdoutLine: {'line': b'3: @@ -51 +55 @@\n'}
[3.655750] (unitree_guide2) StdoutLine: {'line': b'3: -    void setPyPlot(PyPlot *plot){_testPlot = plot;}\n'}
[3.655823] (unitree_guide2) StdoutLine: {'line': b'3: +  void setPyPlot(PyPlot * plot) {_testPlot = plot;}\n'}
[3.655893] (unitree_guide2) StdoutLine: {'line': b'3: @@ -55,29 +59,29 @@\n'}
[3.655965] (unitree_guide2) StdoutLine: {'line': b'3: -    void _initSystem();\n'}
[3.656038] (unitree_guide2) StdoutLine: {'line': b'3: -    // Linear System\n'}
[3.656104] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 1>  _xhat;            // The state of estimator, position(3)+velocity(3)+feet position(3x4)\n'}
[3.656172] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _u;                                        // The input of estimator\n'}
[3.656256] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28,  1> _y;               // The measurement value of output y\n'}
[3.656334] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28,  1> _yhat;            // The prediction of output y\n'}
[3.656398] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 18> _A;               // The transtion matrix of estimator\n'}
[3.656462] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 3>  _B;               // The input matrix\n'}
[3.656565] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28, 18> _C;               // The output matrix\n'}
[3.656646] (unitree_guide2) StdoutLine: {'line': b'3: -    // Covariance Matrix\n'}
[3.656691] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 18> _P;               // Prediction covariance\n'}
[3.656750] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 18> _Ppriori;         // Priori prediction covariance\n'}
[3.656792] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 18> _Q;               // Dynamic simulation covariance\n'}
[3.656833] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28, 28> _R;               // Measurement covariance\n'}
[3.656874] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 18> _QInit;           // Initial value of Dynamic simulation covariance\n'}
[3.656916] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28, 28> _RInit;           // Initial value of Measurement covariance\n'}
[3.656958] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec18 _Qdig;                                    // adjustable process noise covariance\n'}
[3.656999] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 _Cu;                                       // The covariance of system input u\n'}
[3.657040] (unitree_guide2) StdoutLine: {'line': b'3: -    // Output Measurement\n'}
[3.657081] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 12, 1>  _feetPos2Body;    // The feet positions to body, in the global coordinate\n'}
[3.657139] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 12, 1>  _feetVel2Body;    // The feet velocity to body, in the global coordinate\n'}
[3.657183] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double,  4, 1>  _feetH;           // The Height of each foot, in the global coordinate\n'}
[3.657239] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28, 28> _S;               // _S = C*P*C.T + R\n'}
[3.657284] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::PartialPivLU<Eigen::Matrix<double, 28, 28>> _Slu;    // _S.lu()\n'}
[3.657327] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28,  1> _Sy;              // _Sy = _S.inv() * (y - yhat)\n'}
[3.657374] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28, 18> _Sc;              // _Sc = _S.inv() * C\n'}
[3.657419] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28, 28> _SR;              // _SR = _S.inv() * R\n'}
[3.657488] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 28, 18> _STC;             // _STC = (_S.transpose()).inv() * C\n'}
[3.657770] (unitree_guide2) StdoutLine: {'line': b'3: -    Eigen::Matrix<double, 18, 18> _IKC;             // _IKC = I - KC\n'}
[3.657840] (unitree_guide2) StdoutLine: {'line': b'3: +  void _initSystem();\n'}
[3.657884] (unitree_guide2) StdoutLine: {'line': b'3: +  // Linear System\n'}
[3.657928] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 1 > _xhat;            // The state of estimator, position(3)+velocity(3)+feet position(3x4)\n'}
[3.657972] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _u;                                          // The input of estimator\n'}
[3.658015] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 1 > _y;               // The measurement value of output y\n'}
[3.658057] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 1 > _yhat;            // The prediction of output y\n'}
[3.658099] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 18 > _A;              // The transtion matrix of estimator\n'}
[3.658154] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 3 > _B;               // The input matrix\n'}
[3.658195] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 18 > _C;              // The output matrix\n'}
[3.658236] (unitree_guide2) StdoutLine: {'line': b'3: +  // Covariance Matrix\n'}
[3.658277] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 18 > _P;              // Prediction covariance\n'}
[3.658319] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 18 > _Ppriori;        // Priori prediction covariance\n'}
[3.658360] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 18 > _Q;              // Dynamic simulation covariance\n'}
[3.658401] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 28 > _R;              // Measurement covariance\n'}
[3.658447] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 18 > _QInit;          // Initial value of Dynamic simulation covariance\n'}
[3.658489] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 28 > _RInit;          // Initial value of Measurement covariance\n'}
[3.658550] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec18 _Qdig;                                      // adjustable process noise covariance\n'}
[3.658606] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 _Cu;                                         // The covariance of system input u\n'}
[3.658648] (unitree_guide2) StdoutLine: {'line': b'3: +  // Output Measurement\n'}
[3.658689] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 12, 1 > _feetPos2Body;    // The feet positions to body, in the global coordinate\n'}
[3.658731] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 12, 1 > _feetVel2Body;    // The feet velocity to body, in the global coordinate\n'}
[3.658773] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 4, 1 > _feetH;            // The Height of each foot, in the global coordinate\n'}
[3.658814] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 28 > _S;              // _S = C*P*C.T + R\n'}
[3.658863] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::PartialPivLU < Eigen::Matrix < double, 28, 28 >> _Slu; // _S.lu()\n'}
[3.658904] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 1 > _Sy;              // _Sy = _S.inv() * (y - yhat)\n'}
[3.658945] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 18 > _Sc;             // _Sc = _S.inv() * C\n'}
[3.658985] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 28 > _SR;             // _SR = _S.inv() * R\n'}
[3.659026] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 28, 18 > _STC;            // _STC = (_S.transpose()).inv() * C\n'}
[3.659067] (unitree_guide2) StdoutLine: {'line': b'3: +  Eigen::Matrix < double, 18, 18 > _IKC;            // _IKC = I - KC\n'}
[3.659108] (unitree_guide2) StdoutLine: {'line': b'3: @@ -85,3 +89,3 @@\n'}
[3.659162] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat _rotMatB2G;                              // Rotate Matrix: from body to global\n'}
[3.659205] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _g;\n'}
[3.659248] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _feetPosGlobalKine, _feetVelGlobalKine;\n'}
[3.659291] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat _rotMatB2G;                                // Rotate Matrix: from body to global\n'}
[3.659333] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _g;\n'}
[3.659376] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _feetPosGlobalKine, _feetVelGlobalKine;\n'}
[3.659423] (unitree_guide2) StdoutLine: {'line': b'3: @@ -89,7 +93,7 @@\n'}
[3.659466] (unitree_guide2) StdoutLine: {'line': b'3: -    LowlevelState* _lowState;\n'}
[3.659508] (unitree_guide2) StdoutLine: {'line': b'3: -    QuadrupedRobot *_robModel;\n'}
[3.659550] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 *_phase;\n'}
[3.659592] (unitree_guide2) StdoutLine: {'line': b'3: -    VecInt4 *_contact;\n'}
[3.659634] (unitree_guide2) StdoutLine: {'line': b'3: -    double _dt;\n'}
[3.659675] (unitree_guide2) StdoutLine: {'line': b'3: -    double _trust;\n'}
[3.659717] (unitree_guide2) StdoutLine: {'line': b'3: -    double _largeVariance;\n'}
[3.659758] (unitree_guide2) StdoutLine: {'line': b'3: +  LowlevelState * _lowState;\n'}
[3.659800] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * _robModel;\n'}
[3.659842] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 * _phase;\n'}
[3.659884] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * _contact;\n'}
[3.659926] (unitree_guide2) StdoutLine: {'line': b'3: +  double _dt;\n'}
[3.659967] (unitree_guide2) StdoutLine: {'line': b'3: +  double _trust;\n'}
[3.660009] (unitree_guide2) StdoutLine: {'line': b'3: +  double _largeVariance;\n'}
[3.660051] (unitree_guide2) StdoutLine: {'line': b'3: @@ -97,2 +101,2 @@\n'}
[3.660093] (unitree_guide2) StdoutLine: {'line': b'3: -    // Low pass filters\n'}
[3.660136] (unitree_guide2) StdoutLine: {'line': b'3: -    LPFilter *_vxFilter, *_vyFilter, *_vzFilter;\n'}
[3.660178] (unitree_guide2) StdoutLine: {'line': b'3: +  // Low pass filters\n'}
[3.660220] (unitree_guide2) StdoutLine: {'line': b'3: +  LPFilter * _vxFilter, * _vyFilter, * _vzFilter;\n'}
[3.660266] (unitree_guide2) StdoutLine: {'line': b'3: @@ -100,4 +104,4 @@\n'}
[3.660308] (unitree_guide2) StdoutLine: {'line': b'3: -    // Tuning\n'}
[3.660349] (unitree_guide2) StdoutLine: {'line': b'3: -    AvgCov *_RCheck;\n'}
[3.660395] (unitree_guide2) StdoutLine: {'line': b'3: -    AvgCov *_uCheck;\n'}
[3.660437] (unitree_guide2) StdoutLine: {'line': b'3: -    std::string _estName;\n'}
[3.660479] (unitree_guide2) StdoutLine: {'line': b'3: +  // Tuning\n'}
[3.660520] (unitree_guide2) StdoutLine: {'line': b'3: +  AvgCov * _RCheck;\n'}
[3.660563] (unitree_guide2) StdoutLine: {'line': b'3: +  AvgCov * _uCheck;\n'}
[3.660606] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string _estName;\n'}
[3.660648] (unitree_guide2) StdoutLine: {'line': b'3: @@ -106 +110 @@\n'}
[3.660690] (unitree_guide2) StdoutLine: {'line': b'3: -    PyPlot *_testPlot;\n'}
[3.660742] (unitree_guide2) StdoutLine: {'line': b'3: +  PyPlot * _testPlot;\n'}
[3.660785] (unitree_guide2) StdoutLine: {'line': b'3: @@ -109,8 +113,8 @@\n'}
[3.660827] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::NodeHandle _nh;\n'}
[3.660869] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::Publisher _pub;\n'}
[3.660911] (unitree_guide2) StdoutLine: {'line': b'3: -    tf::TransformBroadcaster _odomBroadcaster;\n'}
[3.660954] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::Time _currentTime;\n'}
[3.660995] (unitree_guide2) StdoutLine: {'line': b'3: -    geometry_msgs::TransformStamped _odomTF;\n'}
[3.661037] (unitree_guide2) StdoutLine: {'line': b'3: -    nav_msgs::Odometry _odomMsg;\n'}
[3.661078] (unitree_guide2) StdoutLine: {'line': b'3: -    int _count = 0;\n'}
[3.661120] (unitree_guide2) StdoutLine: {'line': b'3: -    double _pubFreq = 10;\n'}
[3.661162] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::NodeHandle _nh;\n'}
[3.661203] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::Publisher _pub;\n'}
[3.661245] (unitree_guide2) StdoutLine: {'line': b'3: +  tf::TransformBroadcaster _odomBroadcaster;\n'}
[3.661287] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::Time _currentTime;\n'}
[3.661328] (unitree_guide2) StdoutLine: {'line': b'3: +  geometry_msgs::TransformStamped _odomTF;\n'}
[3.661374] (unitree_guide2) StdoutLine: {'line': b'3: +  nav_msgs::Odometry _odomMsg;\n'}
[3.661416] (unitree_guide2) StdoutLine: {'line': b'3: +  int _count = 0;\n'}
[3.661458] (unitree_guide2) StdoutLine: {'line': b'3: +  double _pubFreq = 10;\n'}
[3.661501] (unitree_guide2) StdoutLine: {'line': b'3: @@ -118,13 +122,13 @@\n'}
[3.661543] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _velBody, _wBody;\n'}
[3.661585] (unitree_guide2) StdoutLine: {'line': b'3: -    boost::array<double, 36> _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0, \n'}
[3.661629] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 1e-3, 1e-9, 0, 0, 0, \n'}
[3.661671] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 1e6, 0, 0, 0,\n'}
[3.661714] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 1e6, 0, 0, \n'}
[3.661756] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 1e6, 0, \n'}
[3.661798] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 0, 1e-9};\n'}
[3.661839] (unitree_guide2) StdoutLine: {'line': b'3: -    boost::array<double, 36> _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0, \n'}
[3.661882] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 1e-3, 1e-9, 0, 0, 0, \n'}
[3.661924] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 1e6, 0, 0, 0, \n'}
[3.661966] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 1e6, 0, 0, \n'}
[3.662008] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 1e6, 0, \n'}
[3.662050] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 0, 1e-9};\n'}
[3.662092] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _velBody, _wBody;\n'}
[3.662135] (unitree_guide2) StdoutLine: {'line': b'3: +  boost::array < double, 36 > _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0,\n'}
[3.662179] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 1e-3, 1e-9, 0, 0, 0,\n'}
[3.662221] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 1e6, 0, 0, 0,\n'}
[3.662264] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 1e6, 0, 0,\n'}
[3.662307] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 1e6, 0,\n'}
[3.662380] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 0, 1e-9};\n'}
[3.662438] (unitree_guide2) StdoutLine: {'line': b'3: +  boost::array < double, 36 > _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0,\n'}
[3.662480] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 1e-3, 1e-9, 0, 0, 0,\n'}
[3.662526] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 1e6, 0, 0, 0,\n'}
[3.662568] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 1e6, 0, 0,\n'}
[3.662609] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 1e6, 0,\n'}
[3.662650] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 0, 1e-9};\n'}
[3.662692] (unitree_guide2) StdoutLine: {'line': b'3: @@ -134,6 +138,6 @@\n'}
[3.662733] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::Node::SharedPtr _nh;\n'}
[3.662774] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::Publisher<nav_msgs::msg::Odometry>::SharedPtr _pub;\n'}
[3.662816] (unitree_guide2) StdoutLine: {'line': b'3: -    std::shared_ptr<tf2_ros::TransformBroadcaster> _odomBroadcaster;\n'}
[3.662858] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::Time _currentTime;\n'}
[3.662900] (unitree_guide2) StdoutLine: {'line': b'3: -    geometry_msgs::msg::TransformStamped _odomTF;\n'}
[3.662942] (unitree_guide2) StdoutLine: {'line': b'3: -    nav_msgs::msg::Odometry _odomMsg;\n'}
[3.663095] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Node::SharedPtr _nh;\n'}
[3.663147] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Publisher < nav_msgs::msg::Odometry > ::SharedPtr _pub;\n'}
[3.663191] (unitree_guide2) StdoutLine: {'line': b'3: +  std::shared_ptr < tf2_ros::TransformBroadcaster > _odomBroadcaster;\n'}
[3.663234] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Time _currentTime;\n'}
[3.663277] (unitree_guide2) StdoutLine: {'line': b'3: +  geometry_msgs::msg::TransformStamped _odomTF;\n'}
[3.663325] (unitree_guide2) StdoutLine: {'line': b'3: +  nav_msgs::msg::Odometry _odomMsg;\n'}
[3.663368] (unitree_guide2) StdoutLine: {'line': b'3: @@ -141,2 +145,2 @@\n'}
[3.663410] (unitree_guide2) StdoutLine: {'line': b'3: -    int _count = 0;\n'}
[3.663451] (unitree_guide2) StdoutLine: {'line': b'3: -    double _pubFreq = 10;\n'}
[3.663494] (unitree_guide2) StdoutLine: {'line': b'3: +  int _count = 0;\n'}
[3.663535] (unitree_guide2) StdoutLine: {'line': b'3: +  double _pubFreq = 10;\n'}
[3.663577] (unitree_guide2) StdoutLine: {'line': b'3: @@ -144,13 +148,13 @@\n'}
[3.663618] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 _velBody, _wBody;\n'}
[3.663660] (unitree_guide2) StdoutLine: {'line': b'3: -    std::array<double, 36> _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0, \n'}
[3.663703] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 1e-3, 1e-9, 0, 0, 0, \n'}
[3.663745] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 1e6, 0, 0, 0,\n'}
[3.663788] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 1e6, 0, 0, \n'}
[3.663831] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 1e6, 0, \n'}
[3.663882] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 0, 1e-9};\n'}
[3.663926] (unitree_guide2) StdoutLine: {'line': b'3: -    std::array<double, 36> _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0, \n'}
[3.663969] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 1e-3, 1e-9, 0, 0, 0, \n'}
[3.664012] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 1e6, 0, 0, 0, \n'}
[3.664054] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 1e6, 0, 0, \n'}
[3.664097] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 1e6, 0, \n'}
[3.664139] (unitree_guide2) StdoutLine: {'line': b'3: -                                        0, 0, 0, 0, 0, 1e-9};\n'}
[3.664181] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 _velBody, _wBody;\n'}
[3.664223] (unitree_guide2) StdoutLine: {'line': b'3: +  std::array < double, 36 > _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0,\n'}
[3.664266] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 1e-3, 1e-9, 0, 0, 0,\n'}
[3.664313] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 1e6, 0, 0, 0,\n'}
[3.664360] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 1e6, 0, 0,\n'}
[3.664403] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 1e6, 0,\n'}
[3.664446] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 0, 1e-9};\n'}
[3.664488] (unitree_guide2) StdoutLine: {'line': b'3: +  std::array < double, 36 > _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0,\n'}
[3.664531] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 1e-3, 1e-9, 0, 0, 0,\n'}
[3.664573] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 1e6, 0, 0, 0,\n'}
[3.664616] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 1e6, 0, 0,\n'}
[3.664658] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 1e6, 0,\n'}
[3.664701] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 0, 0, 0, 1e-9};\n'}
[3.664744] (unitree_guide2) StdoutLine: {'line': b'3: @@ -161 +165 @@\n'}
[3.664795] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // ESTIMATOR_H\n'}
[3.664839] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // ESTIMATOR_H\n'}
[3.664880] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.664922] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/interface/CmdPanel.h':\n"}
[3.664965] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.665006] (unitree_guide2) StdoutLine: {'line': b'3: --- include/interface/CmdPanel.h\n'}
[3.665049] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/interface/CmdPanel.h.uncrustify\n'}
[3.665090] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,16 +20,18 @@\n'}
[3.665132] (unitree_guide2) StdoutLine: {'line': b'3: -struct UserValue{\n'}
[3.665174] (unitree_guide2) StdoutLine: {'line': b'3: -    float lx;\n'}
[3.665216] (unitree_guide2) StdoutLine: {'line': b'3: -    float ly;\n'}
[3.665261] (unitree_guide2) StdoutLine: {'line': b'3: -    float rx;\n'}
[3.665304] (unitree_guide2) StdoutLine: {'line': b'3: -    float ry;\n'}
[3.665347] (unitree_guide2) StdoutLine: {'line': b'3: -    float L2;\n'}
[3.665389] (unitree_guide2) StdoutLine: {'line': b'3: -    UserValue(){\n'}
[3.665431] (unitree_guide2) StdoutLine: {'line': b'3: -        setZero();\n'}
[3.665474] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.665518] (unitree_guide2) StdoutLine: {'line': b'3: -    void setZero(){\n'}
[3.665560] (unitree_guide2) StdoutLine: {'line': b'3: -        lx = 0;\n'}
[3.665602] (unitree_guide2) StdoutLine: {'line': b'3: -        ly = 0;\n'}
[3.665644] (unitree_guide2) StdoutLine: {'line': b'3: -        rx = 0;\n'}
[3.665686] (unitree_guide2) StdoutLine: {'line': b'3: -        ry = 0;\n'}
[3.665728] (unitree_guide2) StdoutLine: {'line': b'3: -        L2 = 0;\n'}
[3.665771] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.665814] (unitree_guide2) StdoutLine: {'line': b'3: +struct UserValue\n'}
[3.665856] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.665899] (unitree_guide2) StdoutLine: {'line': b'3: +  float lx;\n'}
[3.665941] (unitree_guide2) StdoutLine: {'line': b'3: +  float ly;\n'}
[3.665983] (unitree_guide2) StdoutLine: {'line': b'3: +  float rx;\n'}
[3.666026] (unitree_guide2) StdoutLine: {'line': b'3: +  float ry;\n'}
[3.666068] (unitree_guide2) StdoutLine: {'line': b'3: +  float L2;\n'}
[3.666111] (unitree_guide2) StdoutLine: {'line': b'3: +  UserValue() {\n'}
[3.666154] (unitree_guide2) StdoutLine: {'line': b'3: +    setZero();\n'}
[3.666196] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.666242] (unitree_guide2) StdoutLine: {'line': b'3: +  void setZero()\n'}
[3.666286] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.666328] (unitree_guide2) StdoutLine: {'line': b'3: +    lx = 0;\n'}
[3.666371] (unitree_guide2) StdoutLine: {'line': b'3: +    ly = 0;\n'}
[3.666412] (unitree_guide2) StdoutLine: {'line': b'3: +    rx = 0;\n'}
[3.666454] (unitree_guide2) StdoutLine: {'line': b'3: +    ry = 0;\n'}
[3.666495] (unitree_guide2) StdoutLine: {'line': b'3: +    L2 = 0;\n'}
[3.666537] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.666579] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38 +40 @@\n'}
[3.666627] (unitree_guide2) StdoutLine: {'line': b'3: -class CmdPanel{\n'}
[3.666669] (unitree_guide2) StdoutLine: {'line': b'3: +class CmdPanel {\n'}
[3.666711] (unitree_guide2) StdoutLine: {'line': b'3: @@ -40,6 +42,8 @@\n'}
[3.666754] (unitree_guide2) StdoutLine: {'line': b'3: -    CmdPanel(){}\n'}
[3.666796] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual ~CmdPanel(){}\n'}
[3.667009] (unitree_guide2) StdoutLine: {'line': b'3: -    UserCommand getUserCmd(){return userCmd;}\n'}
[3.667069] (unitree_guide2) StdoutLine: {'line': b'3: -    UserValue getUserValue(){return userValue;}\n'}
[3.667113] (unitree_guide2) StdoutLine: {'line': b'3: -    void setPassive(){userCmd = UserCommand::L2_B;}\n'}
[3.667156] (unitree_guide2) StdoutLine: {'line': b'3: -    void setZero(){userValue.setZero();}\n'}
[3.667289] (unitree_guide2) StdoutLine: {'line': b'3: +  CmdPanel() {\n'}
[3.667348] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.667411] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual ~CmdPanel() {\n'}
[3.667455] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.667502] (unitree_guide2) StdoutLine: {'line': b'3: +  UserCommand getUserCmd() {return userCmd;}\n'}
[3.667547] (unitree_guide2) StdoutLine: {'line': b'3: +  UserValue getUserValue() {return userValue;}\n'}
[3.667590] (unitree_guide2) StdoutLine: {'line': b'3: +  void setPassive() {userCmd = UserCommand::L2_B;}\n'}
[3.667638] (unitree_guide2) StdoutLine: {'line': b'3: +  void setZero() {userValue.setZero();}\n'}
[3.667695] (unitree_guide2) StdoutLine: {'line': b'3: @@ -47 +51 @@\n'}
[3.667737] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual void receiveHandle(UNITREE_LEGGED_SDK::LowState *lowState){};\n'}
[3.667780] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual void receiveHandle(UNITREE_LEGGED_SDK::LowState * lowState) {}\n'}
[3.667821] (unitree_guide2) StdoutLine: {'line': b'3: @@ -48,0 +53 @@\n'}
[3.667865] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.667909] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50,3 +55,3 @@\n'}
[3.667955] (unitree_guide2) StdoutLine: {'line': b'3: -    virtual void* run(void *arg){return NULL;}\n'}
[3.668000] (unitree_guide2) StdoutLine: {'line': b'3: -    UserCommand userCmd;\n'}
[3.668052] (unitree_guide2) StdoutLine: {'line': b'3: -    UserValue userValue;\n'}
[3.668097] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual void * run(void * arg) {return NULL;}\n'}
[3.668141] (unitree_guide2) StdoutLine: {'line': b'3: +  UserCommand userCmd;\n'}
[3.668209] (unitree_guide2) StdoutLine: {'line': b'3: +  UserValue userValue;\n'}
[3.668258] (unitree_guide2) StdoutLine: {'line': b'3: @@ -55 +60 @@\n'}
[3.668304] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // CMDPANEL_H\n'}
[3.668350] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // CMDPANEL_H\n'}
[3.668397] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.668442] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/interface/IOInterface.h':\n"}
[3.668492] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.668537] (unitree_guide2) StdoutLine: {'line': b'3: --- include/interface/IOInterface.h\n'}
[3.668584] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/interface/IOInterface.h.uncrustify\n'}
[3.668637] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12 +12 @@\n'}
[3.668786] (unitree_guide2) StdoutLine: {'line': b'3: -class IOInterface{\n'}
[3.668862] (unitree_guide2) StdoutLine: {'line': b'3: +class IOInterface {\n'}
[3.668917] (unitree_guide2) StdoutLine: {'line': b'3: @@ -14,5 +14,8 @@\n'}
[3.668961] (unitree_guide2) StdoutLine: {'line': b'3: -IOInterface(){}\n'}
[3.669005] (unitree_guide2) StdoutLine: {'line': b'3: -~IOInterface(){delete cmdPanel;}\n'}
[3.669161] (unitree_guide2) StdoutLine: {'line': b'3: -virtual void sendRecv(const LowlevelCmd *cmd, LowlevelState *state) = 0;\n'}
[3.669213] (unitree_guide2) StdoutLine: {'line': b'3: -void zeroCmdPanel(){cmdPanel->setZero();}\n'}
[3.669257] (unitree_guide2) StdoutLine: {'line': b'3: -void setPassive(){cmdPanel->setPassive();}\n'}
[3.669312] (unitree_guide2) StdoutLine: {'line': b'3: +  IOInterface() {\n'}
[3.669355] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.669399] (unitree_guide2) StdoutLine: {'line': b'3: +  ~IOInterface() {\n'}
[3.669442] (unitree_guide2) StdoutLine: {'line': b'3: +    delete cmdPanel;\n'}
[3.669486] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.669528] (unitree_guide2) StdoutLine: {'line': b'3: +  virtual void sendRecv(const LowlevelCmd * cmd, LowlevelState * state) = 0;\n'}
[3.669573] (unitree_guide2) StdoutLine: {'line': b'3: +  void zeroCmdPanel() {cmdPanel->setZero();}\n'}
[3.669626] (unitree_guide2) StdoutLine: {'line': b'3: +  void setPassive() {cmdPanel->setPassive();}\n'}
[3.669671] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21 +24 @@\n'}
[3.669715] (unitree_guide2) StdoutLine: {'line': b'3: -CmdPanel *cmdPanel;\n'}
[3.669759] (unitree_guide2) StdoutLine: {'line': b'3: +  CmdPanel * cmdPanel;\n'}
[3.669803] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24 +27 @@\n'}
[3.669846] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  //IOINTERFACE_H\n'}
[3.669978] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  //IOINTERFACE_H\n'}
[3.670024] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.670067] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/interface/IOROS.h':\n"}
[3.670110] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.670154] (unitree_guide2) StdoutLine: {'line': b'3: --- include/interface/IOROS.h\n'}
[3.670198] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/interface/IOROS.h.uncrustify\n'}
[3.670241] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18 +18 @@\n'}
[3.670285] (unitree_guide2) StdoutLine: {'line': b'3: -class IOROS : public IOInterface{\n'}
[3.670329] (unitree_guide2) StdoutLine: {'line': b'3: +class IOROS: public IOInterface {\n'}
[3.670372] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,3 +20,3 @@\n'}
[3.670416] (unitree_guide2) StdoutLine: {'line': b'3: -IOROS();\n'}
[3.670460] (unitree_guide2) StdoutLine: {'line': b'3: -~IOROS();\n'}
[3.670561] (unitree_guide2) StdoutLine: {'line': b'3: -void sendRecv(const LowlevelCmd *cmd, LowlevelState *state);\n'}
[3.670610] (unitree_guide2) StdoutLine: {'line': b'3: +  IOROS();\n'}
[3.670653] (unitree_guide2) StdoutLine: {'line': b'3: +  ~IOROS();\n'}
[3.670696] (unitree_guide2) StdoutLine: {'line': b'3: +  void sendRecv(const LowlevelCmd * cmd, LowlevelState * state);\n'}
[3.670739] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,8 +25,8 @@\n'}
[3.670782] (unitree_guide2) StdoutLine: {'line': b'3: -void sendCmd(const LowlevelCmd *cmd);\n'}
[3.670824] (unitree_guide2) StdoutLine: {'line': b'3: -void recvState(LowlevelState *state);\n'}
[3.670867] (unitree_guide2) StdoutLine: {'line': b'3: -ros::NodeHandle _nm;\n'}
[3.670910] (unitree_guide2) StdoutLine: {'line': b'3: -ros::Subscriber _servo_sub[12], _imu_sub;\n'}
[3.670953] (unitree_guide2) StdoutLine: {'line': b'3: -ros::Publisher _servo_pub[12];\n'}
[3.670996] (unitree_guide2) StdoutLine: {'line': b'3: -unitree_legged_msgs::LowCmd _lowCmd;\n'}
[3.671038] (unitree_guide2) StdoutLine: {'line': b'3: -unitree_legged_msgs::LowState _lowState;\n'}
[3.671081] (unitree_guide2) StdoutLine: {'line': b'3: -std::string _robot_name;\n'}
[3.671125] (unitree_guide2) StdoutLine: {'line': b'3: +  void sendCmd(const LowlevelCmd * cmd);\n'}
[3.671169] (unitree_guide2) StdoutLine: {'line': b'3: +  void recvState(LowlevelState * state);\n'}
[3.671213] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::NodeHandle _nm;\n'}
[3.671257] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::Subscriber _servo_sub[12], _imu_sub;\n'}
[3.671301] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::Publisher _servo_pub[12];\n'}
[3.671344] (unitree_guide2) StdoutLine: {'line': b'3: +  unitree_legged_msgs::LowCmd _lowCmd;\n'}
[3.671388] (unitree_guide2) StdoutLine: {'line': b'3: +  unitree_legged_msgs::LowState _lowState;\n'}
[3.671431] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string _robot_name;\n'}
[3.671473] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35,2 +35,2 @@\n'}
[3.671533] (unitree_guide2) StdoutLine: {'line': b'3: -void initRecv();\n'}
[3.671614] (unitree_guide2) StdoutLine: {'line': b'3: -void initSend();\n'}
[3.671678] (unitree_guide2) StdoutLine: {'line': b'3: +  void initRecv();\n'}
[3.671745] (unitree_guide2) StdoutLine: {'line': b'3: +  void initSend();\n'}
[3.671804] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39 +39 @@\n'}
[3.671866] (unitree_guide2) StdoutLine: {'line': b'3: -void imuCallback(const sensor_msgs::Imu & msg);\n'}
[3.671929] (unitree_guide2) StdoutLine: {'line': b'3: +  void imuCallback(const sensor_msgs::Imu & msg);\n'}
[3.672016] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41,3 +41,3 @@\n'}
[3.672080] (unitree_guide2) StdoutLine: {'line': b'3: -void FRhipCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.672189] (unitree_guide2) StdoutLine: {'line': b'3: -void FRthighCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.672252] (unitree_guide2) StdoutLine: {'line': b'3: -void FRcalfCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.672316] (unitree_guide2) StdoutLine: {'line': b'3: +  void FRhipCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.672381] (unitree_guide2) StdoutLine: {'line': b'3: +  void FRthighCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.672447] (unitree_guide2) StdoutLine: {'line': b'3: +  void FRcalfCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.672520] (unitree_guide2) StdoutLine: {'line': b'3: @@ -45,3 +45,3 @@\n'}
[3.672592] (unitree_guide2) StdoutLine: {'line': b'3: -void FLhipCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.672660] (unitree_guide2) StdoutLine: {'line': b'3: -void FLthighCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.672725] (unitree_guide2) StdoutLine: {'line': b'3: -void FLcalfCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.672789] (unitree_guide2) StdoutLine: {'line': b'3: +  void FLhipCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.672850] (unitree_guide2) StdoutLine: {'line': b'3: +  void FLthighCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.672909] (unitree_guide2) StdoutLine: {'line': b'3: +  void FLcalfCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.673014] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49,3 +49,3 @@\n'}
[3.673062] (unitree_guide2) StdoutLine: {'line': b'3: -void RRhipCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.673106] (unitree_guide2) StdoutLine: {'line': b'3: -void RRthighCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.673150] (unitree_guide2) StdoutLine: {'line': b'3: -void RRcalfCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.673304] (unitree_guide2) StdoutLine: {'line': b'3: +  void RRhipCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.673358] (unitree_guide2) StdoutLine: {'line': b'3: +  void RRthighCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.673402] (unitree_guide2) StdoutLine: {'line': b'3: +  void RRcalfCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.673446] (unitree_guide2) StdoutLine: {'line': b'3: @@ -53,3 +53,3 @@\n'}
[3.673490] (unitree_guide2) StdoutLine: {'line': b'3: -void RLhipCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.673550] (unitree_guide2) StdoutLine: {'line': b'3: -void RLthighCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.673596] (unitree_guide2) StdoutLine: {'line': b'3: -void RLcalfCallback(const unitree_legged_msgs::MotorState& msg);\n'}
[3.673640] (unitree_guide2) StdoutLine: {'line': b'3: +  void RLhipCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.673683] (unitree_guide2) StdoutLine: {'line': b'3: +  void RLthighCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.673726] (unitree_guide2) StdoutLine: {'line': b'3: +  void RLcalfCallback(const unitree_legged_msgs::MotorState & msg);\n'}
[3.673769] (unitree_guide2) StdoutLine: {'line': b'3: @@ -79 +79 @@\n'}
[3.673814] (unitree_guide2) StdoutLine: {'line': b'3: -class IOROS : public IOInterface{\n'}
[3.673864] (unitree_guide2) StdoutLine: {'line': b'3: +class IOROS: public IOInterface {\n'}
[3.673907] (unitree_guide2) StdoutLine: {'line': b'3: @@ -81,3 +81,3 @@\n'}
[3.673950] (unitree_guide2) StdoutLine: {'line': b'3: -IOROS(rclcpp::Node::SharedPtr node_ptr);\n'}
[3.673995] (unitree_guide2) StdoutLine: {'line': b'3: -~IOROS();\n'}
[3.674039] (unitree_guide2) StdoutLine: {'line': b'3: -void sendRecv(const LowlevelCmd *cmd, LowlevelState *state);\n'}
[3.674084] (unitree_guide2) StdoutLine: {'line': b'3: +  IOROS(rclcpp::Node::SharedPtr node_ptr);\n'}
[3.674128] (unitree_guide2) StdoutLine: {'line': b'3: +  ~IOROS();\n'}
[3.674173] (unitree_guide2) StdoutLine: {'line': b'3: +  void sendRecv(const LowlevelCmd * cmd, LowlevelState * state);\n'}
[3.674218] (unitree_guide2) StdoutLine: {'line': b'3: @@ -86,14 +86,16 @@\n'}
[3.674262] (unitree_guide2) StdoutLine: {'line': b'3: -static void RosShutDown(int sig);\n'}
[3.674306] (unitree_guide2) StdoutLine: {'line': b'3: -void sendCmd(const LowlevelCmd *cmd);\n'}
[3.674350] (unitree_guide2) StdoutLine: {'line': b'3: -void recvState(LowlevelState *state);\n'}
[3.674393] (unitree_guide2) StdoutLine: {'line': b'3: -rclcpp::Node::SharedPtr _nm;\n'}
[3.674437] (unitree_guide2) StdoutLine: {'line': b'3: -rclcpp::Subscription<sensor_msgs::msg::Imu>::SharedPtr _imu_sub;\n'}
[3.674486] (unitree_guide2) StdoutLine: {'line': b'3: -rclcpp::Subscription<sensor_msgs::msg::JointState>::SharedPtr _joint_state_sub;\n'}
[3.674532] (unitree_guide2) StdoutLine: {'line': b'3: -std::vector<rclcpp::Subscription<ros2_unitree_legged_msgs::msg::MotorState>::SharedPtr> _servo_sub;\n'}
[3.674576] (unitree_guide2) StdoutLine: {'line': b'3: -std::vector<rclcpp::Publisher<ros2_unitree_legged_msgs::msg::MotorCmd>::SharedPtr> _servo_pub;\n'}
[3.674619] (unitree_guide2) StdoutLine: {'line': b'3: -rclcpp::Publisher<std_msgs::msg::Float64MultiArray>::SharedPtr _joint_cmd_pub;\n'}
[3.674664] (unitree_guide2) StdoutLine: {'line': b'3: -ros2_unitree_legged_msgs::msg::LowCmd _lowCmd;\n'}
[3.674706] (unitree_guide2) StdoutLine: {'line': b'3: -ros2_unitree_legged_msgs::msg::LowState _lowState;\n'}
[3.674750] (unitree_guide2) StdoutLine: {'line': b'3: -std::string _robot_name;\n'}
[3.674792] (unitree_guide2) StdoutLine: {'line': b'3: -std::unordered_map<std::string, int> joint_index_map;\n'}
[3.674836] (unitree_guide2) StdoutLine: {'line': b'3: -std::thread executor_thread;\n'}
[3.674879] (unitree_guide2) StdoutLine: {'line': b'3: +  static void RosShutDown(int sig);\n'}
[3.674921] (unitree_guide2) StdoutLine: {'line': b'3: +  void sendCmd(const LowlevelCmd * cmd);\n'}
[3.674965] (unitree_guide2) StdoutLine: {'line': b'3: +  void recvState(LowlevelState * state);\n'}
[3.675008] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Node::SharedPtr _nm;\n'}
[3.675052] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Subscription < sensor_msgs::msg::Imu > ::SharedPtr _imu_sub;\n'}
[3.675097] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Subscription < sensor_msgs::msg::JointState > ::SharedPtr _joint_state_sub;\n'}
[3.675141] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < rclcpp::Subscription < ros2_unitree_legged_msgs::msg::MotorState > ::SharedPtr >\n'}
[3.675185] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub;\n'}
[3.675229] (unitree_guide2) StdoutLine: {'line': b'3: +  std::vector < rclcpp::Publisher < ros2_unitree_legged_msgs::msg::MotorCmd > ::SharedPtr >\n'}
[3.675272] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub;\n'}
[3.675315] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Publisher < std_msgs::msg::Float64MultiArray > ::SharedPtr _joint_cmd_pub;\n'}
[3.675358] (unitree_guide2) StdoutLine: {'line': b'3: +  ros2_unitree_legged_msgs::msg::LowCmd _lowCmd;\n'}
[3.675401] (unitree_guide2) StdoutLine: {'line': b'3: +  ros2_unitree_legged_msgs::msg::LowState _lowState;\n'}
[3.675444] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string _robot_name;\n'}
[3.675496] (unitree_guide2) StdoutLine: {'line': b'3: +  std::unordered_map < std::string, int > joint_index_map;\n'}
[3.675544] (unitree_guide2) StdoutLine: {'line': b'3: +  std::thread executor_thread;\n'}
[3.675587] (unitree_guide2) StdoutLine: {'line': b'3: @@ -101,2 +103,2 @@\n'}
[3.675630] (unitree_guide2) StdoutLine: {'line': b'3: -sensor_msgs::msg::JointState _joint_state;\n'}
[3.675672] (unitree_guide2) StdoutLine: {'line': b'3: -std_msgs::msg::Float64MultiArray _joint_cmd;\n'}
[3.675715] (unitree_guide2) StdoutLine: {'line': b'3: +  sensor_msgs::msg::JointState _joint_state;\n'}
[3.675758] (unitree_guide2) StdoutLine: {'line': b'3: +  std_msgs::msg::Float64MultiArray _joint_cmd;\n'}
[3.675808] (unitree_guide2) StdoutLine: {'line': b'3: @@ -105,2 +107,2 @@\n'}
[3.675852] (unitree_guide2) StdoutLine: {'line': b'3: -void initRecv();\n'}
[3.675895] (unitree_guide2) StdoutLine: {'line': b'3: -void initSend();\n'}
[3.675938] (unitree_guide2) StdoutLine: {'line': b'3: +  void initRecv();\n'}
[3.675981] (unitree_guide2) StdoutLine: {'line': b'3: +  void initSend();\n'}
[3.676024] (unitree_guide2) StdoutLine: {'line': b'3: @@ -109 +111 @@\n'}
[3.676067] (unitree_guide2) StdoutLine: {'line': b'3: -void imuCallback(const sensor_msgs::msg::Imu::SharedPtr msg);\n'}
[3.676111] (unitree_guide2) StdoutLine: {'line': b'3: +  void imuCallback(const sensor_msgs::msg::Imu::SharedPtr msg);\n'}
[3.676154] (unitree_guide2) StdoutLine: {'line': b'3: @@ -112,3 +114,3 @@\n'}
[3.676196] (unitree_guide2) StdoutLine: {'line': b'3: -void FRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676240] (unitree_guide2) StdoutLine: {'line': b'3: -void FRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676283] (unitree_guide2) StdoutLine: {'line': b'3: -void FRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676326] (unitree_guide2) StdoutLine: {'line': b'3: +  void FRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676369] (unitree_guide2) StdoutLine: {'line': b'3: +  void FRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676413] (unitree_guide2) StdoutLine: {'line': b'3: +  void FRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676466] (unitree_guide2) StdoutLine: {'line': b'3: @@ -116,3 +118,3 @@\n'}
[3.676510] (unitree_guide2) StdoutLine: {'line': b'3: -void FLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676554] (unitree_guide2) StdoutLine: {'line': b'3: -void FLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676597] (unitree_guide2) StdoutLine: {'line': b'3: -void FLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676640] (unitree_guide2) StdoutLine: {'line': b'3: +  void FLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676683] (unitree_guide2) StdoutLine: {'line': b'3: +  void FLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676727] (unitree_guide2) StdoutLine: {'line': b'3: +  void FLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676770] (unitree_guide2) StdoutLine: {'line': b'3: @@ -120,3 +122,3 @@\n'}
[3.676813] (unitree_guide2) StdoutLine: {'line': b'3: -void RRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676855] (unitree_guide2) StdoutLine: {'line': b'3: -void RRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676898] (unitree_guide2) StdoutLine: {'line': b'3: -void RRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676941] (unitree_guide2) StdoutLine: {'line': b'3: +  void RRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.676983] (unitree_guide2) StdoutLine: {'line': b'3: +  void RRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677026] (unitree_guide2) StdoutLine: {'line': b'3: +  void RRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677073] (unitree_guide2) StdoutLine: {'line': b'3: @@ -124,3 +126,3 @@\n'}
[3.677115] (unitree_guide2) StdoutLine: {'line': b'3: -void RLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677159] (unitree_guide2) StdoutLine: {'line': b'3: -void RLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677202] (unitree_guide2) StdoutLine: {'line': b'3: -void RLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677246] (unitree_guide2) StdoutLine: {'line': b'3: +  void RLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677289] (unitree_guide2) StdoutLine: {'line': b'3: +  void RLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677333] (unitree_guide2) StdoutLine: {'line': b'3: +  void RLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);\n'}
[3.677376] (unitree_guide2) StdoutLine: {'line': b'3: @@ -129,2 +131,2 @@\n'}
[3.677426] (unitree_guide2) StdoutLine: {'line': b'3: -void initializeJointIndexMap();\n'}
[3.677469] (unitree_guide2) StdoutLine: {'line': b'3: -void jointStateCallback(const sensor_msgs::msg::JointState::SharedPtr msg);\n'}
[3.677512] (unitree_guide2) StdoutLine: {'line': b'3: +  void initializeJointIndexMap();\n'}
[3.677555] (unitree_guide2) StdoutLine: {'line': b'3: +  void jointStateCallback(const sensor_msgs::msg::JointState::SharedPtr msg);\n'}
[3.677598] (unitree_guide2) StdoutLine: {'line': b'3: @@ -136 +138 @@\n'}
[3.677640] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // COMPILE_WITH_ROS2_MB\n'}
[3.677683] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // COMPILE_WITH_ROS2_MB\n'}
[3.677726] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.677769] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/interface/IOSDK.h':\n"}
[3.677812] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.677855] (unitree_guide2) StdoutLine: {'line': b'3: --- include/interface/IOSDK.h\n'}
[3.677899] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/interface/IOSDK.h.uncrustify\n'}
[3.677942] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22 +22 @@\n'}
[3.677986] (unitree_guide2) StdoutLine: {'line': b'3: -class IOSDK : public IOInterface{\n'}
[3.678029] (unitree_guide2) StdoutLine: {'line': b'3: +class IOSDK: public IOInterface {\n'}
[3.678072] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24,3 +24,4 @@\n'}
[3.678115] (unitree_guide2) StdoutLine: {'line': b'3: -IOSDK();\n'}
[3.678158] (unitree_guide2) StdoutLine: {'line': b'3: -~IOSDK(){}\n'}
[3.678201] (unitree_guide2) StdoutLine: {'line': b'3: -void sendRecv(const LowlevelCmd *cmd, LowlevelState *state);\n'}
[3.678245] (unitree_guide2) StdoutLine: {'line': b'3: +  IOSDK();\n'}
[3.678287] (unitree_guide2) StdoutLine: {'line': b'3: +  ~IOSDK() {\n'}
[3.678330] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.678373] (unitree_guide2) StdoutLine: {'line': b'3: +  void sendRecv(const LowlevelCmd * cmd, LowlevelState * state);\n'}
[3.678420] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29,4 +30,4 @@\n'}
[3.678462] (unitree_guide2) StdoutLine: {'line': b'3: -UNITREE_LEGGED_SDK::UDP _udp;\n'}
[3.678505] (unitree_guide2) StdoutLine: {'line': b'3: -UNITREE_LEGGED_SDK::Safety _safe;\n'}
[3.678548] (unitree_guide2) StdoutLine: {'line': b'3: -UNITREE_LEGGED_SDK::LowCmd _lowCmd;\n'}
[3.678591] (unitree_guide2) StdoutLine: {'line': b'3: -UNITREE_LEGGED_SDK::LowState _lowState;\n'}
[3.678634] (unitree_guide2) StdoutLine: {'line': b'3: +  UNITREE_LEGGED_SDK::UDP _udp;\n'}
[3.678677] (unitree_guide2) StdoutLine: {'line': b'3: +  UNITREE_LEGGED_SDK::Safety _safe;\n'}
[3.678720] (unitree_guide2) StdoutLine: {'line': b'3: +  UNITREE_LEGGED_SDK::LowCmd _lowCmd;\n'}
[3.678764] (unitree_guide2) StdoutLine: {'line': b'3: +  UNITREE_LEGGED_SDK::LowState _lowState;\n'}
[3.678809] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35,3 +36,3 @@\n'}
[3.678853] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::NodeHandle _nh;\n'}
[3.678902] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::Publisher _pub;\n'}
[3.678945] (unitree_guide2) StdoutLine: {'line': b'3: -    sensor_msgs::JointState _joint_state;\n'}
[3.679103] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::NodeHandle _nh;\n'}
[3.679164] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::Publisher _pub;\n'}
[3.679208] (unitree_guide2) StdoutLine: {'line': b'3: +  sensor_msgs::JointState _joint_state;\n'}
[3.679251] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41,3 +42,3 @@\n'}
[3.679294] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::Node::SharedPtr _nh;\n'}
[3.679336] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::Publisher<sensor_msgs::msg::JointState>::SharedPtr _pub;\n'}
[3.679390] (unitree_guide2) StdoutLine: {'line': b'3: -    sensor_msgs::msg::JointState _joint_state;\n'}
[3.679445] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Node::SharedPtr _nh;\n'}
[3.679489] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::Publisher < sensor_msgs::msg::JointState > ::SharedPtr _pub;\n'}
[3.679533] (unitree_guide2) StdoutLine: {'line': b'3: +  sensor_msgs::msg::JointState _joint_state;\n'}
[3.679576] (unitree_guide2) StdoutLine: {'line': b'3: @@ -48 +49 @@\n'}
[3.679622] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // IOSDK_H\n'}
[3.679666] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // IOSDK_H\n'}
[3.679710] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.679754] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/interface/KeyBoard.h':\n"}
[3.679798] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.679841] (unitree_guide2) StdoutLine: {'line': b'3: --- include/interface/KeyBoard.h\n'}
[3.679884] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/interface/KeyBoard.h.uncrustify\n'}
[3.679927] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17 +17 @@\n'}
[3.679968] (-) TimerEvent: {}
[3.680132] (unitree_guide2) StdoutLine: {'line': b'3: -class KeyBoard : public CmdPanel{\n'}
[3.680190] (unitree_guide2) StdoutLine: {'line': b'3: +class KeyBoard: public CmdPanel {\n'}
[3.680236] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,2 +19,3 @@\n'}
[3.680280] (unitree_guide2) StdoutLine: {'line': b'3: -    KeyBoard();\n'}
[3.680324] (unitree_guide2) StdoutLine: {'line': b'3: -    ~KeyBoard();\n'}
[3.680371] (unitree_guide2) StdoutLine: {'line': b'3: +  KeyBoard();\n'}
[3.680415] (unitree_guide2) StdoutLine: {'line': b'3: +  ~KeyBoard();\n'}
[3.680458] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.680502] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22,4 +23,4 @@\n'}
[3.680546] (unitree_guide2) StdoutLine: {'line': b'3: -    static void* runKeyBoard(void *arg);\n'}
[3.680590] (unitree_guide2) StdoutLine: {'line': b'3: -    void* run(void *arg);\n'}
[3.680633] (unitree_guide2) StdoutLine: {'line': b'3: -    UserCommand checkCmd();\n'}
[3.680676] (unitree_guide2) StdoutLine: {'line': b'3: -    void changeValue();\n'}
[3.680719] (unitree_guide2) StdoutLine: {'line': b'3: +  static void * runKeyBoard(void * arg);\n'}
[3.680762] (unitree_guide2) StdoutLine: {'line': b'3: +  void * run(void * arg);\n'}
[3.680805] (unitree_guide2) StdoutLine: {'line': b'3: +  UserCommand checkCmd();\n'}
[3.680847] (unitree_guide2) StdoutLine: {'line': b'3: +  void changeValue();\n'}
[3.680890] (unitree_guide2) StdoutLine: {'line': b'3: @@ -27,8 +28,8 @@\n'}
[3.680933] (unitree_guide2) StdoutLine: {'line': b'3: -    pthread_t _tid;\n'}
[3.680976] (unitree_guide2) StdoutLine: {'line': b'3: -    float sensitivityLeft = 0.05;\n'}
[3.681019] (unitree_guide2) StdoutLine: {'line': b'3: -    float sensitivityRight = 0.05;\n'}
[3.681062] (unitree_guide2) StdoutLine: {'line': b'3: -    struct termios _oldSettings, _newSettings;\n'}
[3.681105] (unitree_guide2) StdoutLine: {'line': b'3: -    fd_set set;\n'}
[3.681148] (unitree_guide2) StdoutLine: {'line': b'3: -    int res;\n'}
[3.681191] (unitree_guide2) StdoutLine: {'line': b'3: -    int ret;\n'}
[3.681234] (unitree_guide2) StdoutLine: {'line': b'3: -    char _c;\n'}
[3.681286] (unitree_guide2) StdoutLine: {'line': b'3: +  pthread_t _tid;\n'}
[3.681340] (unitree_guide2) StdoutLine: {'line': b'3: +  float sensitivityLeft = 0.05;\n'}
[3.681385] (unitree_guide2) StdoutLine: {'line': b'3: +  float sensitivityRight = 0.05;\n'}
[3.681429] (unitree_guide2) StdoutLine: {'line': b'3: +  struct termios _oldSettings, _newSettings;\n'}
[3.681472] (unitree_guide2) StdoutLine: {'line': b'3: +  fd_set set;\n'}
[3.681515] (unitree_guide2) StdoutLine: {'line': b'3: +  int res;\n'}
[3.681558] (unitree_guide2) StdoutLine: {'line': b'3: +  int ret;\n'}
[3.681601] (unitree_guide2) StdoutLine: {'line': b'3: +  char _c;\n'}
[3.681644] (unitree_guide2) StdoutLine: {'line': b'3: @@ -37 +38 @@\n'}
[3.681687] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // KEYBOARD_H\n'}
[3.681730] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // KEYBOARD_H\n'}
[3.681774] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.681817] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/interface/WirelessHandle.h':\n"}
[3.681861] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.681904] (unitree_guide2) StdoutLine: {'line': b'3: --- include/interface/WirelessHandle.h\n'}
[3.681948] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/interface/WirelessHandle.h.uncrustify\n'}
[3.681992] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11 +11 @@\n'}
[3.682036] (unitree_guide2) StdoutLine: {'line': b'3: -class WirelessHandle : public CmdPanel{\n'}
[3.682079] (unitree_guide2) StdoutLine: {'line': b'3: +class WirelessHandle: public CmdPanel {\n'}
[3.682122] (unitree_guide2) StdoutLine: {'line': b'3: @@ -13,3 +13,5 @@\n'}
[3.682165] (unitree_guide2) StdoutLine: {'line': b'3: -    WirelessHandle();\n'}
[3.682208] (unitree_guide2) StdoutLine: {'line': b'3: -    ~WirelessHandle(){}\n'}
[3.682251] (unitree_guide2) StdoutLine: {'line': b'3: -    void receiveHandle(UNITREE_LEGGED_SDK::LowState *lowState);\n'}
[3.682298] (unitree_guide2) StdoutLine: {'line': b'3: +  WirelessHandle();\n'}
[3.682341] (unitree_guide2) StdoutLine: {'line': b'3: +  ~WirelessHandle() {\n'}
[3.682384] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.682427] (unitree_guide2) StdoutLine: {'line': b'3: +  void receiveHandle(UNITREE_LEGGED_SDK::LowState * lowState);\n'}
[3.682470] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.682513] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17 +19 @@\n'}
[3.682556] (unitree_guide2) StdoutLine: {'line': b'3: -    xRockerBtnDataStruct _keyData;\n'}
[3.682600] (unitree_guide2) StdoutLine: {'line': b'3: +  xRockerBtnDataStruct _keyData;\n'}
[3.682643] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20 +22 @@\n'}
[3.682687] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // WIRELESSHANDLE_H\n'}
[3.682732] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // WIRELESSHANDLE_H\n'}
[3.682776] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.682820] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/message/LowlevelCmd.h':\n"}
[3.682864] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.682907] (unitree_guide2) StdoutLine: {'line': b'3: --- include/message/LowlevelCmd.h\n'}
[3.682950] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/message/LowlevelCmd.h.uncrustify\n'}
[3.682993] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10,7 +10,8 @@\n'}
[3.683037] (unitree_guide2) StdoutLine: {'line': b'3: -struct MotorCmd{\n'}
[3.683081] (unitree_guide2) StdoutLine: {'line': b'3: -    unsigned int mode;\n'}
[3.683124] (unitree_guide2) StdoutLine: {'line': b'3: -    float q;\n'}
[3.683202] (unitree_guide2) StdoutLine: {'line': b'3: -    float dq;\n'}
[3.683245] (unitree_guide2) StdoutLine: {'line': b'3: -    float tau;\n'}
[3.683298] (unitree_guide2) StdoutLine: {'line': b'3: -    float Kp;\n'}
[3.683342] (unitree_guide2) StdoutLine: {'line': b'3: -    float Kd;\n'}
[3.683385] (unitree_guide2) StdoutLine: {'line': b'3: +struct MotorCmd\n'}
[3.683428] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.683471] (unitree_guide2) StdoutLine: {'line': b'3: +  unsigned int mode;\n'}
[3.683521] (unitree_guide2) StdoutLine: {'line': b'3: +  float q;\n'}
[3.683564] (unitree_guide2) StdoutLine: {'line': b'3: +  float dq;\n'}
[3.683607] (unitree_guide2) StdoutLine: {'line': b'3: +  float tau;\n'}
[3.683650] (unitree_guide2) StdoutLine: {'line': b'3: +  float Kp;\n'}
[3.683692] (unitree_guide2) StdoutLine: {'line': b'3: +  float Kd;\n'}
[3.683734] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18,8 +19,8 @@\n'}
[3.683777] (unitree_guide2) StdoutLine: {'line': b'3: -    MotorCmd(){\n'}
[3.683819] (unitree_guide2) StdoutLine: {'line': b'3: -        mode = 0;\n'}
[3.683862] (unitree_guide2) StdoutLine: {'line': b'3: -        q = 0;\n'}
[3.683904] (unitree_guide2) StdoutLine: {'line': b'3: -        dq = 0;\n'}
[3.683946] (unitree_guide2) StdoutLine: {'line': b'3: -        tau = 0;\n'}
[3.683989] (unitree_guide2) StdoutLine: {'line': b'3: -        Kp = 0;\n'}
[3.684031] (unitree_guide2) StdoutLine: {'line': b'3: -        Kd = 0;\n'}
[3.684073] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.684116] (unitree_guide2) StdoutLine: {'line': b'3: +  MotorCmd() {\n'}
[3.684159] (unitree_guide2) StdoutLine: {'line': b'3: +    mode = 0;\n'}
[3.684202] (unitree_guide2) StdoutLine: {'line': b'3: +    q = 0;\n'}
[3.684250] (unitree_guide2) StdoutLine: {'line': b'3: +    dq = 0;\n'}
[3.684294] (unitree_guide2) StdoutLine: {'line': b'3: +    tau = 0;\n'}
[3.684337] (unitree_guide2) StdoutLine: {'line': b'3: +    Kp = 0;\n'}
[3.684379] (unitree_guide2) StdoutLine: {'line': b'3: +    Kd = 0;\n'}
[3.684421] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.684464] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,2 +29,3 @@\n'}
[3.684507] (unitree_guide2) StdoutLine: {'line': b'3: -struct LowlevelCmd{\n'}
[3.684549] (unitree_guide2) StdoutLine: {'line': b'3: -    MotorCmd motorCmd[12];\n'}
[3.684592] (unitree_guide2) StdoutLine: {'line': b'3: +struct LowlevelCmd\n'}
[3.684634] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.684676] (unitree_guide2) StdoutLine: {'line': b'3: +  MotorCmd motorCmd[12];\n'}
[3.684718] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31,4 +33,4 @@\n'}
[3.684760] (unitree_guide2) StdoutLine: {'line': b'3: -    void setQ(Vec12 q){\n'}
[3.684803] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<12; ++i){\n'}
[3.684846] (unitree_guide2) StdoutLine: {'line': b'3: -            motorCmd[i].q = q(i);\n'}
[3.684889] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.684932] (unitree_guide2) StdoutLine: {'line': b'3: +  void setQ(Vec12 q)\n'}
[3.684975] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.685018] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 12; ++i) {\n'}
[3.685065] (unitree_guide2) StdoutLine: {'line': b'3: +      motorCmd[i].q = q(i);\n'}
[3.685109] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36,4 +38,11 @@\n'}
[3.685156] (unitree_guide2) StdoutLine: {'line': b'3: -    void setQ(int legID, Vec3 qi){\n'}
[3.685198] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].q = qi(0);\n'}
[3.685506] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].q = qi(1);\n'}
[3.685609] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].q = qi(2);\n'}
[3.685695] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.685752] (unitree_guide2) StdoutLine: {'line': b'3: +  void setQ(int legID, Vec3 qi)\n'}
[3.685795] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.685838] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].q = qi(0);\n'}
[3.685917] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].q = qi(1);\n'}
[3.685963] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].q = qi(2);\n'}
[3.686007] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.686049] (unitree_guide2) StdoutLine: {'line': b'3: +  void setQd(Vec12 qd)\n'}
[3.686093] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.686136] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 12; ++i) {\n'}
[3.686192] (unitree_guide2) StdoutLine: {'line': b'3: +      motorCmd[i].dq = qd(i);\n'}
[3.686248] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41,4 +50,14 @@\n'}
[3.686292] (unitree_guide2) StdoutLine: {'line': b'3: -    void setQd(Vec12 qd){\n'}
[3.686336] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<12; ++i){\n'}
[3.686379] (unitree_guide2) StdoutLine: {'line': b'3: -            motorCmd[i].dq = qd(i);\n'}
[3.686422] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.686465] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.686508] (unitree_guide2) StdoutLine: {'line': b'3: +  void setQd(int legID, Vec3 qdi)\n'}
[3.686552] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.686594] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].dq = qdi(0);\n'}
[3.686637] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].dq = qdi(1);\n'}
[3.686680] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].dq = qdi(2);\n'}
[3.686723] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.686765] (unitree_guide2) StdoutLine: {'line': b'3: +  void setTau(Vec12 tau, Vec2 torqueLimit = Vec2(-50, 50))\n'}
[3.686817] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.686860] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 12; ++i) {\n'}
[3.686903] (unitree_guide2) StdoutLine: {'line': b'3: +      if (std::isnan(tau(i))) {\n'}
[3.686947] (unitree_guide2) StdoutLine: {'line': b'3: +        printf("[ERROR] The setTau function meets Nan\\n");\n'}
[3.686991] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.687034] (unitree_guide2) StdoutLine: {'line': b'3: +      motorCmd[i].tau = saturation(tau(i), torqueLimit);\n'}
[3.687080] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46,4 +65,11 @@\n'}
[3.687123] (unitree_guide2) StdoutLine: {'line': b'3: -    void setQd(int legID, Vec3 qdi){\n'}
[3.687167] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].dq = qdi(0);\n'}
[3.687217] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].dq = qdi(1);\n'}
[3.687261] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].dq = qdi(2);\n'}
[3.687303] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.687346] (unitree_guide2) StdoutLine: {'line': b'3: +  void setZeroDq(int legID)\n'}
[3.687389] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.687432] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].dq = 0;\n'}
[3.687475] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].dq = 0;\n'}
[3.687518] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].dq = 0;\n'}
[3.687560] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.687602] (unitree_guide2) StdoutLine: {'line': b'3: +  void setZeroDq()\n'}
[3.687645] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.687687] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[3.687730] (unitree_guide2) StdoutLine: {'line': b'3: +      setZeroDq(i);\n'}
[3.687773] (unitree_guide2) StdoutLine: {'line': b'3: @@ -51,7 +77,47 @@\n'}
[3.687816] (unitree_guide2) StdoutLine: {'line': b'3: -    void setTau(Vec12 tau, Vec2 torqueLimit = Vec2(-50, 50)){\n'}
[3.687861] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<12; ++i){\n'}
[3.687904] (unitree_guide2) StdoutLine: {'line': b'3: -            if(std::isnan(tau(i))){\n'}
[3.687948] (unitree_guide2) StdoutLine: {'line': b'3: -                printf("[ERROR] The setTau function meets Nan\\n");\n'}
[3.687992] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[3.688036] (unitree_guide2) StdoutLine: {'line': b'3: -            motorCmd[i].tau = saturation(tau(i), torqueLimit);\n'}
[3.688079] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.688122] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.688175] (unitree_guide2) StdoutLine: {'line': b'3: +  void setZeroTau(int legID)\n'}
[3.688253] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.688306] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].tau = 0;\n'}
[3.688348] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].tau = 0;\n'}
[3.688391] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].tau = 0;\n'}
[3.688433] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.688476] (unitree_guide2) StdoutLine: {'line': b'3: +  void setSimStanceGain(int legID)\n'}
[3.688519] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.688561] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].mode = 10;\n'}
[3.688604] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kp = 180;\n'}
[3.688648] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kd = 8;\n'}
[3.688691] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].mode = 10;\n'}
[3.688734] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kp = 180;\n'}
[3.688778] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kd = 8;\n'}
[3.688821] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].mode = 10;\n'}
[3.688864] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kp = 300;\n'}
[3.688906] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kd = 15;\n'}
[3.688949] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.688992] (unitree_guide2) StdoutLine: {'line': b'3: +  void setRealStanceGain(int legID)\n'}
[3.689034] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.689077] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].mode = 10;\n'}
[3.689120] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kp = 60;\n'}
[3.689166] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kd = 5;\n'}
[3.689209] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].mode = 10;\n'}
[3.689252] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kp = 40;\n'}
[3.689294] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kd = 4;\n'}
[3.689337] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].mode = 10;\n'}
[3.689380] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kp = 80;\n'}
[3.689423] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kd = 7;\n'}
[3.689467] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.689510] (unitree_guide2) StdoutLine: {'line': b'3: +  void setZeroGain(int legID)\n'}
[3.689553] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.689597] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].mode = 10;\n'}
[3.689640] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kp = 0;\n'}
[3.689682] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kd = 0;\n'}
[3.689725] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].mode = 10;\n'}
[3.689768] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kp = 0;\n'}
[3.689814] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kd = 0;\n'}
[3.689858] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].mode = 10;\n'}
[3.689900] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kp = 0;\n'}
[3.689943] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kd = 0;\n'}
[3.689986] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.690029] (unitree_guide2) StdoutLine: {'line': b'3: +  void setZeroGain()\n'}
[3.690072] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.690120] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[3.690165] (unitree_guide2) StdoutLine: {'line': b'3: +      setZeroGain(i);\n'}
[3.690208] (unitree_guide2) StdoutLine: {'line': b'3: @@ -59,4 +125,17 @@\n'}
[3.690252] (unitree_guide2) StdoutLine: {'line': b'3: -    void setZeroDq(int legID){\n'}
[3.690300] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].dq = 0;\n'}
[3.690343] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].dq = 0;\n'}
[3.690386] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].dq = 0;\n'}
[3.690429] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.690471] (unitree_guide2) StdoutLine: {'line': b'3: +  void setStableGain(int legID)\n'}
[3.690514] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.690557] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].mode = 10;\n'}
[3.690599] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kp = 0.8;\n'}
[3.690641] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kd = 0.8;\n'}
[3.690684] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].mode = 10;\n'}
[3.690728] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kp = 0.8;\n'}
[3.690771] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kd = 0.8;\n'}
[3.690814] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].mode = 10;\n'}
[3.690857] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kp = 0.8;\n'}
[3.690900] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kd = 0.8;\n'}
[3.690943] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.690986] (unitree_guide2) StdoutLine: {'line': b'3: +  void setStableGain()\n'}
[3.691029] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.691072] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[3.691119] (unitree_guide2) StdoutLine: {'line': b'3: +      setStableGain(i);\n'}
[3.691162] (unitree_guide2) StdoutLine: {'line': b'3: @@ -64,75 +143,13 @@\n'}
[3.691205] (unitree_guide2) StdoutLine: {'line': b'3: -    void setZeroDq(){\n'}
[3.691247] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<4; ++i){\n'}
[3.691290] (unitree_guide2) StdoutLine: {'line': b'3: -            setZeroDq(i);\n'}
[3.691333] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.691375] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.691417] (unitree_guide2) StdoutLine: {'line': b'3: -    void setZeroTau(int legID){\n'}
[3.691460] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].tau = 0;\n'}
[3.691502] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].tau = 0;\n'}
[3.691546] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].tau = 0;\n'}
[3.691588] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.691632] (unitree_guide2) StdoutLine: {'line': b'3: -    void setSimStanceGain(int legID){\n'}
[3.691675] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].mode = 10;\n'}
[3.691718] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kp = 180;\n'}
[3.691761] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kd = 8;\n'}
[3.691803] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].mode = 10;\n'}
[3.691846] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kp = 180;\n'}
[3.691889] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kd = 8;\n'}
[3.691931] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].mode = 10;\n'}
[3.691973] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kp = 300;\n'}
[3.692016] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kd = 15;\n'}
[3.692061] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.692105] (unitree_guide2) StdoutLine: {'line': b'3: -    void setRealStanceGain(int legID){\n'}
[3.692157] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].mode = 10;\n'}
[3.692201] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kp = 60;\n'}
[3.692244] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kd = 5;\n'}
[3.692291] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].mode = 10;\n'}
[3.692334] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kp = 40;\n'}
[3.692379] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kd = 4;\n'}
[3.692422] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].mode = 10;\n'}
[3.692465] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kp = 80;\n'}
[3.692507] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kd = 7;\n'}
[3.692550] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.692593] (unitree_guide2) StdoutLine: {'line': b'3: -    void setZeroGain(int legID){\n'}
[3.692635] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].mode = 10;\n'}
[3.692678] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kp = 0;\n'}
[3.692721] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kd = 0;\n'}
[3.692763] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].mode = 10;\n'}
[3.692806] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kp = 0;\n'}
[3.692849] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kd = 0;\n'}
[3.692891] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].mode = 10;\n'}
[3.692934] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kp = 0;\n'}
[3.692977] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kd = 0;\n'}
[3.693019] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.693066] (unitree_guide2) StdoutLine: {'line': b'3: -    void setZeroGain(){\n'}
[3.693110] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<4; ++i){\n'}
[3.693155] (unitree_guide2) StdoutLine: {'line': b'3: -            setZeroGain(i);\n'}
[3.693200] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.693244] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.693287] (unitree_guide2) StdoutLine: {'line': b'3: -    void setStableGain(int legID){\n'}
[3.693331] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].mode = 10;\n'}
[3.693374] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kp = 0.8;\n'}
[3.693417] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kd = 0.8;\n'}
[3.693460] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].mode = 10;\n'}
[3.693502] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kp = 0.8;\n'}
[3.693545] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kd = 0.8;\n'}
[3.693588] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].mode = 10;\n'}
[3.693631] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kp = 0.8;\n'}
[3.693673] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kd = 0.8;\n'}
[3.693716] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.693759] (unitree_guide2) StdoutLine: {'line': b'3: -    void setStableGain(){\n'}
[3.693802] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<4; ++i){\n'}
[3.693846] (unitree_guide2) StdoutLine: {'line': b'3: -            setStableGain(i);\n'}
[3.693896] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.693940] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.693984] (unitree_guide2) StdoutLine: {'line': b'3: -    void setSwingGain(int legID){\n'}
[3.694033] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].mode = 10;\n'}
[3.694077] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kp = 3;\n'}
[3.694121] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+0].Kd = 2;\n'}
[3.694163] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].mode = 10;\n'}
[3.694206] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kp = 3;\n'}
[3.694249] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+1].Kd = 2;\n'}
[3.694296] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].mode = 10;\n'}
[3.694338] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kp = 3;\n'}
[3.694380] (unitree_guide2) StdoutLine: {'line': b'3: -        motorCmd[legID*3+2].Kd = 2;\n'}
[3.694422] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.694464] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.694507] (unitree_guide2) StdoutLine: {'line': b'3: +  void setSwingGain(int legID)\n'}
[3.694549] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.694593] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].mode = 10;\n'}
[3.694636] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kp = 3;\n'}
[3.694679] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 0].Kd = 2;\n'}
[3.694722] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].mode = 10;\n'}
[3.694765] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kp = 3;\n'}
[3.694808] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 1].Kd = 2;\n'}
[3.694852] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].mode = 10;\n'}
[3.694895] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kp = 3;\n'}
[3.694937] (unitree_guide2) StdoutLine: {'line': b'3: +    motorCmd[legID * 3 + 2].Kd = 2;\n'}
[3.695059] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.696098] (unitree_guide2) StdoutLine: {'line': b'3: @@ -141 +158 @@\n'}
[3.696155] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  //LOWLEVELCMD_H\n'}
[3.696202] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  //LOWLEVELCMD_H\n'}
[3.696247] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.696291] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/message/LowlevelState.h':\n"}
[3.696336] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.696379] (unitree_guide2) StdoutLine: {'line': b'3: --- include/message/LowlevelState.h\n'}
[3.696423] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/message/LowlevelState.h.uncrustify\n'}
[3.696467] (unitree_guide2) StdoutLine: {'line': b'3: @@ -15,5 +15,5 @@\n'}
[3.696511] (unitree_guide2) StdoutLine: {'line': b'3: -\tunsigned int mode;\n'}
[3.696558] (unitree_guide2) StdoutLine: {'line': b'3: -    float q;\n'}
[3.696601] (unitree_guide2) StdoutLine: {'line': b'3: -    float dq;\n'}
[3.696645] (unitree_guide2) StdoutLine: {'line': b'3: -    float ddq;\n'}
[3.696688] (unitree_guide2) StdoutLine: {'line': b'3: -    float tauEst;\n'}
[3.696732] (unitree_guide2) StdoutLine: {'line': b'3: +  unsigned int mode;\n'}
[3.696775] (unitree_guide2) StdoutLine: {'line': b'3: +  float q;\n'}
[3.696819] (unitree_guide2) StdoutLine: {'line': b'3: +  float dq;\n'}
[3.696861] (unitree_guide2) StdoutLine: {'line': b'3: +  float ddq;\n'}
[3.696904] (unitree_guide2) StdoutLine: {'line': b'3: +  float tauEst;\n'}
[3.696949] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21,6 +21,6 @@\n'}
[3.696993] (unitree_guide2) StdoutLine: {'line': b'3: -    MotorState(){\n'}
[3.697035] (unitree_guide2) StdoutLine: {'line': b'3: -        q = 0;\n'}
[3.697078] (unitree_guide2) StdoutLine: {'line': b'3: -        dq = 0;\n'}
[3.697121] (unitree_guide2) StdoutLine: {'line': b'3: -        ddq = 0;\n'}
[3.697164] (unitree_guide2) StdoutLine: {'line': b'3: -        tauEst = 0;\n'}
[3.697206] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.697249] (unitree_guide2) StdoutLine: {'line': b'3: +  MotorState() {\n'}
[3.697294] (unitree_guide2) StdoutLine: {'line': b'3: +    q = 0;\n'}
[3.697337] (unitree_guide2) StdoutLine: {'line': b'3: +    dq = 0;\n'}
[3.697380] (unitree_guide2) StdoutLine: {'line': b'3: +    ddq = 0;\n'}
[3.697424] (unitree_guide2) StdoutLine: {'line': b'3: +    tauEst = 0;\n'}
[3.697467] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.697510] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31,3 +31,3 @@\n'}
[3.697563] (unitree_guide2) StdoutLine: {'line': b'3: -    float quaternion[4];    // w, x, y, z\n'}
[3.697607] (unitree_guide2) StdoutLine: {'line': b'3: -    float gyroscope[3];\n'}
[3.697650] (unitree_guide2) StdoutLine: {'line': b'3: -    float accelerometer[3];\n'}
[3.697694] (unitree_guide2) StdoutLine: {'line': b'3: +  float quaternion[4];      // w, x, y, z\n'}
[3.697736] (unitree_guide2) StdoutLine: {'line': b'3: +  float gyroscope[3];\n'}
[3.697778] (unitree_guide2) StdoutLine: {'line': b'3: +  float accelerometer[3];\n'}
[3.697821] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35,7 +35,5 @@\n'}
[3.697863] (unitree_guide2) StdoutLine: {'line': b'3: -    IMU(){\n'}
[3.697906] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i = 0; i < 3; i++){\n'}
[3.697956] (unitree_guide2) StdoutLine: {'line': b'3: -            quaternion[i] = 0;\n'}
[3.698000] (unitree_guide2) StdoutLine: {'line': b'3: -            gyroscope[i] = 0;\n'}
[3.698043] (unitree_guide2) StdoutLine: {'line': b'3: -            accelerometer[i] = 0;\n'}
[3.698087] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.698131] (unitree_guide2) StdoutLine: {'line': b'3: -        quaternion[3] = 0;\n'}
[3.698174] (unitree_guide2) StdoutLine: {'line': b'3: +  IMU() {\n'}
[3.698217] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i = 0; i < 3; i++) {\n'}
[3.698261] (unitree_guide2) StdoutLine: {'line': b'3: +      quaternion[i] = 0;\n'}
[3.698304] (unitree_guide2) StdoutLine: {'line': b'3: +      gyroscope[i] = 0;\n'}
[3.698347] (unitree_guide2) StdoutLine: {'line': b'3: +      accelerometer[i] = 0;\n'}
[3.698389] (unitree_guide2) StdoutLine: {'line': b'3: @@ -42,0 +41,2 @@\n'}
[3.698432] (unitree_guide2) StdoutLine: {'line': b'3: +    quaternion[3] = 0;\n'}
[3.698474] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.698516] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44,5 +44,6 @@\n'}
[3.698559] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat getRotMat(){\n'}
[3.698601] (unitree_guide2) StdoutLine: {'line': b'3: -        Quat quat;\n'}
[3.698643] (unitree_guide2) StdoutLine: {'line': b'3: -        quat << quaternion[0], quaternion[1], quaternion[2], quaternion[3];\n'}
[3.698687] (unitree_guide2) StdoutLine: {'line': b'3: -        return quatToRotMat(quat);\n'}
[3.698730] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.698773] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat getRotMat()\n'}
[3.698817] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.698860] (unitree_guide2) StdoutLine: {'line': b'3: +    Quat quat;\n'}
[3.698907] (unitree_guide2) StdoutLine: {'line': b'3: +    quat << quaternion[0], quaternion[1], quaternion[2], quaternion[3];\n'}
[3.698953] (unitree_guide2) StdoutLine: {'line': b'3: +    return quatToRotMat(quat);\n'}
[3.698996] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.699039] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50,5 +51,6 @@\n'}
[3.699082] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getAcc(){\n'}
[3.699124] (unitree_guide2) StdoutLine: {'line': b'3: -        Vec3 acc;\n'}
[3.699175] (unitree_guide2) StdoutLine: {'line': b'3: -        acc << accelerometer[0], accelerometer[1], accelerometer[2];\n'}
[3.699219] (unitree_guide2) StdoutLine: {'line': b'3: -        return acc;\n'}
[3.699262] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.699304] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getAcc()\n'}
[3.699346] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.699389] (unitree_guide2) StdoutLine: {'line': b'3: +    Vec3 acc;\n'}
[3.699432] (unitree_guide2) StdoutLine: {'line': b'3: +    acc << accelerometer[0], accelerometer[1], accelerometer[2];\n'}
[3.699476] (unitree_guide2) StdoutLine: {'line': b'3: +    return acc;\n'}
[3.699519] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.699563] (unitree_guide2) StdoutLine: {'line': b'3: @@ -56,5 +58,6 @@\n'}
[3.699606] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getGyro(){\n'}
[3.699649] (unitree_guide2) StdoutLine: {'line': b'3: -        Vec3 gyro;\n'}
[3.699698] (unitree_guide2) StdoutLine: {'line': b'3: -        gyro << gyroscope[0], gyroscope[1], gyroscope[2];\n'}
[3.699742] (unitree_guide2) StdoutLine: {'line': b'3: -        return gyro;\n'}
[3.699786] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.699829] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getGyro()\n'}
[3.699892] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.699938] (unitree_guide2) StdoutLine: {'line': b'3: +    Vec3 gyro;\n'}
[3.699981] (unitree_guide2) StdoutLine: {'line': b'3: +    gyro << gyroscope[0], gyroscope[1], gyroscope[2];\n'}
[3.700024] (unitree_guide2) StdoutLine: {'line': b'3: +    return gyro;\n'}
[3.700067] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.700110] (unitree_guide2) StdoutLine: {'line': b'3: @@ -62,5 +65,6 @@\n'}
[3.700152] (unitree_guide2) StdoutLine: {'line': b'3: -    Quat getQuat(){\n'}
[3.700195] (unitree_guide2) StdoutLine: {'line': b'3: -        Quat q;\n'}
[3.700237] (unitree_guide2) StdoutLine: {'line': b'3: -        q << quaternion[0], quaternion[1], quaternion[2], quaternion[3];\n'}
[3.700281] (unitree_guide2) StdoutLine: {'line': b'3: -        return q;\n'}
[3.700325] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.700368] (unitree_guide2) StdoutLine: {'line': b'3: +  Quat getQuat()\n'}
[3.700411] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.700454] (unitree_guide2) StdoutLine: {'line': b'3: +    Quat q;\n'}
[3.700497] (unitree_guide2) StdoutLine: {'line': b'3: +    q << quaternion[0], quaternion[1], quaternion[2], quaternion[3];\n'}
[3.700541] (unitree_guide2) StdoutLine: {'line': b'3: +    return q;\n'}
[3.700585] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.700627] (unitree_guide2) StdoutLine: {'line': b'3: @@ -71,4 +75,4 @@\n'}
[3.700669] (unitree_guide2) StdoutLine: {'line': b'3: -    IMU imu;\n'}
[3.700712] (unitree_guide2) StdoutLine: {'line': b'3: -    MotorState motorState[12];\n'}
[3.700754] (unitree_guide2) StdoutLine: {'line': b'3: -    UserCommand userCmd;\n'}
[3.700797] (unitree_guide2) StdoutLine: {'line': b'3: -    UserValue userValue;\n'}
[3.700840] (unitree_guide2) StdoutLine: {'line': b'3: +  IMU imu;\n'}
[3.700882] (unitree_guide2) StdoutLine: {'line': b'3: +  MotorState motorState[12];\n'}
[3.700933] (unitree_guide2) StdoutLine: {'line': b'3: +  UserCommand userCmd;\n'}
[3.700976] (unitree_guide2) StdoutLine: {'line': b'3: +  UserValue userValue;\n'}
[3.701019] (unitree_guide2) StdoutLine: {'line': b'3: @@ -76,8 +80,7 @@\n'}
[3.701063] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getQ(){\n'}
[3.701107] (unitree_guide2) StdoutLine: {'line': b'3: -        Vec34 qLegs;\n'}
[3.701151] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i < 4; ++i){\n'}
[3.701196] (unitree_guide2) StdoutLine: {'line': b'3: -            qLegs.col(i)(0) = motorState[3*i    ].q;\n'}
[3.701240] (unitree_guide2) StdoutLine: {'line': b'3: -            qLegs.col(i)(1) = motorState[3*i + 1].q;\n'}
[3.701284] (unitree_guide2) StdoutLine: {'line': b'3: -            qLegs.col(i)(2) = motorState[3*i + 2].q;\n'}
[3.701327] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.701370] (unitree_guide2) StdoutLine: {'line': b'3: -        return qLegs;\n'}
[3.701413] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getQ()\n'}
[3.701458] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.701502] (unitree_guide2) StdoutLine: {'line': b'3: +    Vec34 qLegs;\n'}
[3.701546] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[3.701590] (unitree_guide2) StdoutLine: {'line': b'3: +      qLegs.col(i)(0) = motorState[3 * i].q;\n'}
[3.701633] (unitree_guide2) StdoutLine: {'line': b'3: +      qLegs.col(i)(1) = motorState[3 * i + 1].q;\n'}
[3.701676] (unitree_guide2) StdoutLine: {'line': b'3: +      qLegs.col(i)(2) = motorState[3 * i + 2].q;\n'}
[3.701719] (unitree_guide2) StdoutLine: {'line': b'3: @@ -84,0 +88,2 @@\n'}
[3.701762] (unitree_guide2) StdoutLine: {'line': b'3: +    return qLegs;\n'}
[3.701807] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.701851] (unitree_guide2) StdoutLine: {'line': b'3: @@ -86,8 +91,7 @@\n'}
[3.702101] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 getQd(){\n'}
[3.702162] (unitree_guide2) StdoutLine: {'line': b'3: -        Vec34 qdLegs;\n'}
[3.702207] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i < 4; ++i){\n'}
[3.702250] (unitree_guide2) StdoutLine: {'line': b'3: -            qdLegs.col(i)(0) = motorState[3*i    ].dq;\n'}
[3.702295] (unitree_guide2) StdoutLine: {'line': b'3: -            qdLegs.col(i)(1) = motorState[3*i + 1].dq;\n'}
[3.702339] (unitree_guide2) StdoutLine: {'line': b'3: -            qdLegs.col(i)(2) = motorState[3*i + 2].dq;\n'}
[3.702383] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.702427] (unitree_guide2) StdoutLine: {'line': b'3: -        return qdLegs;\n'}
[3.702471] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 getQd()\n'}
[3.702513] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.702556] (unitree_guide2) StdoutLine: {'line': b'3: +    Vec34 qdLegs;\n'}
[3.702598] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[3.702641] (unitree_guide2) StdoutLine: {'line': b'3: +      qdLegs.col(i)(0) = motorState[3 * i].dq;\n'}
[3.702684] (unitree_guide2) StdoutLine: {'line': b'3: +      qdLegs.col(i)(1) = motorState[3 * i + 1].dq;\n'}
[3.702727] (unitree_guide2) StdoutLine: {'line': b'3: +      qdLegs.col(i)(2) = motorState[3 * i + 2].dq;\n'}
[3.702769] (unitree_guide2) StdoutLine: {'line': b'3: @@ -94,0 +99,2 @@\n'}
[3.702813] (unitree_guide2) StdoutLine: {'line': b'3: +    return qdLegs;\n'}
[3.702862] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.702907] (unitree_guide2) StdoutLine: {'line': b'3: @@ -96,2 +102,39 @@\n'}
[3.702950] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat getRotMat(){\n'}
[3.702993] (unitree_guide2) StdoutLine: {'line': b'3: -        return imu.getRotMat();\n'}
[3.703036] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat getRotMat()\n'}
[3.703079] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.703122] (unitree_guide2) StdoutLine: {'line': b'3: +    return imu.getRotMat();\n'}
[3.703166] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.703209] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.703251] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getAcc()\n'}
[3.703294] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.703337] (unitree_guide2) StdoutLine: {'line': b'3: +    return imu.getAcc();\n'}
[3.703379] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.703421] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.703464] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getGyro()\n'}
[3.703506] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.703549] (unitree_guide2) StdoutLine: {'line': b'3: +    return imu.getGyro();\n'}
[3.703592] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.703635] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.703678] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getAccGlobal()\n'}
[3.703722] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.703765] (unitree_guide2) StdoutLine: {'line': b'3: +    return getRotMat() * getAcc();\n'}
[3.703808] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.703857] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.703901] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 getGyroGlobal()\n'}
[3.703944] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.703987] (unitree_guide2) StdoutLine: {'line': b'3: +    return getRotMat() * getGyro();\n'}
[3.704030] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.704072] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.704115] (unitree_guide2) StdoutLine: {'line': b'3: +  double getYaw()\n'}
[3.704158] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.704200] (unitree_guide2) StdoutLine: {'line': b'3: +    return rotMatToRPY(getRotMat())(2);\n'}
[3.704243] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.704286] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.704328] (unitree_guide2) StdoutLine: {'line': b'3: +  double getDYaw()\n'}
[3.704382] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.704425] (unitree_guide2) StdoutLine: {'line': b'3: +    return getGyroGlobal()(2);\n'}
[3.704468] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.704512] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.704555] (unitree_guide2) StdoutLine: {'line': b'3: +  void setQ(Vec12 q)\n'}
[3.704598] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.704641] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 12; ++i) {\n'}
[3.704683] (unitree_guide2) StdoutLine: {'line': b'3: +      motorState[i].q = q(i);\n'}
[3.704726] (unitree_guide2) StdoutLine: {'line': b'3: @@ -99,30 +142 @@\n'}
[3.704768] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.704814] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getAcc(){\n'}
[3.704857] (unitree_guide2) StdoutLine: {'line': b'3: -        return imu.getAcc();\n'}
[3.704899] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.704942] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.704984] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getGyro(){\n'}
[3.705026] (unitree_guide2) StdoutLine: {'line': b'3: -        return imu.getGyro();\n'}
[3.705069] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.705111] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.705154] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getAccGlobal(){\n'}
[3.705197] (unitree_guide2) StdoutLine: {'line': b'3: -        return getRotMat() * getAcc();\n'}
[3.705240] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.705283] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.705326] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 getGyroGlobal(){\n'}
[3.705369] (unitree_guide2) StdoutLine: {'line': b'3: -        return getRotMat() * getGyro();\n'}
[3.705412] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.705459] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.705502] (unitree_guide2) StdoutLine: {'line': b'3: -    double getYaw(){\n'}
[3.705544] (unitree_guide2) StdoutLine: {'line': b'3: -        return rotMatToRPY(getRotMat())(2);\n'}
[3.705587] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.705629] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.705672] (unitree_guide2) StdoutLine: {'line': b'3: -    double getDYaw(){\n'}
[3.705714] (unitree_guide2) StdoutLine: {'line': b'3: -        return getGyroGlobal()(2);\n'}
[3.705757] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.705806] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.705849] (unitree_guide2) StdoutLine: {'line': b'3: -    void setQ(Vec12 q){\n'}
[3.705892] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<12; ++i){\n'}
[3.705935] (unitree_guide2) StdoutLine: {'line': b'3: -            motorState[i].q = q(i);\n'}
[3.705979] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.706022] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.706065] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.706108] (unitree_guide2) StdoutLine: {'line': b'3: @@ -131 +145 @@\n'}
[3.706151] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  //LOWLEVELSTATE_HPP\n'}
[3.706195] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  //LOWLEVELSTATE_HPP\n'}
[3.706237] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.706280] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/message/unitree_joystick.h':\n"}
[3.706324] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.706366] (unitree_guide2) StdoutLine: {'line': b'3: --- include/message/unitree_joystick.h\n'}
[3.706409] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/message/unitree_joystick.h.uncrustify\n'}
[3.706452] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10,19 +10,20 @@\n'}
[3.706494] (unitree_guide2) StdoutLine: {'line': b'3: -    struct {\n'}
[3.706537] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t R1          :1;\n'}
[3.706580] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t L1          :1;\n'}
[3.706630] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t start       :1;\n'}
[3.706678] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t select      :1;\n'}
[3.706722] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t R2          :1;\n'}
[3.706769] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t L2          :1;\n'}
[3.706813] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t F1          :1;\n'}
[3.706856] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t F2          :1;\n'}
[3.706900] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t A           :1;\n'}
[3.706943] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t B           :1;\n'}
[3.706987] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t X           :1;\n'}
[3.707029] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t Y           :1;\n'}
[3.707071] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t up          :1;\n'}
[3.707114] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t right       :1;\n'}
[3.707157] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t down        :1;\n'}
[3.707200] (unitree_guide2) StdoutLine: {'line': b'3: -        uint8_t left        :1;\n'}
[3.707242] (unitree_guide2) StdoutLine: {'line': b'3: -    } components;\n'}
[3.707284] (unitree_guide2) StdoutLine: {'line': b'3: -    uint16_t value;\n'}
[3.707328] (unitree_guide2) StdoutLine: {'line': b'3: +  struct\n'}
[3.707371] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.707415] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t R1          : 1;\n'}
[3.707458] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t L1          : 1;\n'}
[3.707502] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t start       : 1;\n'}
[3.707546] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t select      : 1;\n'}
[3.707589] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t R2          : 1;\n'}
[3.707633] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t L2          : 1;\n'}
[3.707677] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t F1          : 1;\n'}
[3.707720] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t F2          : 1;\n'}
[3.707770] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t A           : 1;\n'}
[3.707815] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t B           : 1;\n'}
[3.707857] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t X           : 1;\n'}
[3.707900] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t Y           : 1;\n'}
[3.707943] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t up          : 1;\n'}
[3.707986] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t right       : 1;\n'}
[3.708029] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t down        : 1;\n'}
[3.708072] (unitree_guide2) StdoutLine: {'line': b'3: +    uint8_t left        : 1;\n'}
[3.708114] (unitree_guide2) StdoutLine: {'line': b'3: +  } components;\n'}
[3.708158] (unitree_guide2) StdoutLine: {'line': b'3: +  uint16_t value;\n'}
[3.708201] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32,8 +33,9 @@\n'}
[3.708245] (unitree_guide2) StdoutLine: {'line': b'3: -typedef struct {\n'}
[3.708288] (unitree_guide2) StdoutLine: {'line': b'3: -    uint8_t head[2];\n'}
[3.708331] (unitree_guide2) StdoutLine: {'line': b'3: -    xKeySwitchUnion btn;\n'}
[3.708373] (unitree_guide2) StdoutLine: {'line': b'3: -    float lx;\n'}
[3.708416] (unitree_guide2) StdoutLine: {'line': b'3: -    float rx;\n'}
[3.708460] (unitree_guide2) StdoutLine: {'line': b'3: -    float ry;\n'}
[3.708502] (unitree_guide2) StdoutLine: {'line': b'3: -    float L2;\n'}
[3.708545] (unitree_guide2) StdoutLine: {'line': b'3: -    float ly;\n'}
[3.708588] (unitree_guide2) StdoutLine: {'line': b'3: +typedef struct\n'}
[3.708630] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[3.708673] (unitree_guide2) StdoutLine: {'line': b'3: +  uint8_t head[2];\n'}
[3.708719] (unitree_guide2) StdoutLine: {'line': b'3: +  xKeySwitchUnion btn;\n'}
[3.708762] (unitree_guide2) StdoutLine: {'line': b'3: +  float lx;\n'}
[3.708810] (unitree_guide2) StdoutLine: {'line': b'3: +  float rx;\n'}
[3.708853] (unitree_guide2) StdoutLine: {'line': b'3: +  float ry;\n'}
[3.708896] (unitree_guide2) StdoutLine: {'line': b'3: +  float L2;\n'}
[3.708939] (unitree_guide2) StdoutLine: {'line': b'3: +  float ly;\n'}
[3.708982] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41 +43 @@\n'}
[3.709026] (unitree_guide2) StdoutLine: {'line': b'3: -    uint8_t idle[16];\n'}
[3.709069] (unitree_guide2) StdoutLine: {'line': b'3: +  uint8_t idle[16];\n'}
[3.709112] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44 +46 @@\n'}
[3.709156] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // UNITREE_JOYSTICK_H\n'}
[3.709200] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // UNITREE_JOYSTICK_H\n'}
[3.709244] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.709287] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/thirdParty/matplotlibcpp.h':\n"}
[3.709331] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.709373] (unitree_guide2) StdoutLine: {'line': b'3: --- include/thirdParty/matplotlibcpp.h\n'}
[3.709416] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/thirdParty/matplotlibcpp.h.uncrustify\n'}
[3.709459] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,74 +43,76 @@\n'}
[3.709502] (unitree_guide2) StdoutLine: {'line': b'3: -namespace detail {\n'}
[3.709545] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.709587] (unitree_guide2) StdoutLine: {'line': b'3: -static std::string s_backend;\n'}
[3.709630] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.709673] (unitree_guide2) StdoutLine: {'line': b'3: -struct _interpreter {\n'}
[3.709726] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* s_python_function_arrow;\n'}
[3.709770] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_show;\n'}
[3.709813] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_close;\n'}
[3.709856] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_draw;\n'}
[3.709899] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_pause;\n'}
[3.709943] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_save;\n'}
[3.709987] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_figure;\n'}
[3.710030] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_fignum_exists;\n'}
[3.710074] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_plot;\n'}
[3.710116] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_quiver;\n'}
[3.710159] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* s_python_function_contour;\n'}
[3.710201] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_semilogx;\n'}
[3.710247] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_semilogy;\n'}
[3.710291] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_loglog;\n'}
[3.710334] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_fill;\n'}
[3.710378] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_fill_between;\n'}
[3.710421] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_hist;\n'}
[3.710464] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_imshow;\n'}
[3.710507] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_scatter;\n'}
[3.710550] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_boxplot;\n'}
[3.710593] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_subplot;\n'}
[3.710636] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_subplot2grid;\n'}
[3.710683] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_legend;\n'}
[3.710727] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_xlim;\n'}
[3.710777] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_ion;\n'}
[3.710820] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_ginput;\n'}
[3.710863] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_ylim;\n'}
[3.720808] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_title;\n'}
[3.720907] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_axis;\n'}
[3.720955] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_axvline;\n'}
[3.721000] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_axvspan;\n'}
[3.721043] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_xlabel;\n'}
[3.721086] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_ylabel;\n'}
[3.721128] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_gca;\n'}
[3.721170] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_xticks;\n'}
[3.721211] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_yticks;\n'}
[3.721251] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* s_python_function_margins;\n'}
[3.721292] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_tick_params;\n'}
[3.721333] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_grid;\n'}
[3.721374] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* s_python_function_cla;\n'}
[3.721420] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_clf;\n'}
[3.721461] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_errorbar;\n'}
[3.721502] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_annotate;\n'}
[3.721543] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_tight_layout;\n'}
[3.721583] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_colormap;\n'}
[3.721624] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_empty_tuple;\n'}
[3.721666] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_stem;\n'}
[3.721707] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_xkcd;\n'}
[3.721748] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_text;\n'}
[3.721804] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_suptitle;\n'}
[3.721846] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_bar;\n'}
[3.721887] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_barh;\n'}
[3.721928] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_colorbar;\n'}
[3.721969] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *s_python_function_subplots_adjust;\n'}
[3.722010] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.722051] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.722091] (unitree_guide2) StdoutLine: {'line': b'3: -    /* For now, _interpreter is implemented as a singleton since its currently not possible to have\n'}
[3.722134] (unitree_guide2) StdoutLine: {'line': b'3: -       multiple independent embedded python interpreters without patching the python source code\n'}
[3.722188] (unitree_guide2) StdoutLine: {'line': b'3: -       or starting a separate process for each. [1]\n'}
[3.722231] (unitree_guide2) StdoutLine: {'line': b'3: -       Furthermore, many python objects expect that they are destructed in the same thread as they\n'}
[3.722274] (unitree_guide2) StdoutLine: {'line': b'3: -       were constructed. [2] So for advanced usage, a `kill()` function is provided so that library\n'}
[3.722316] (unitree_guide2) StdoutLine: {'line': b'3: -       users can manually ensure that the interpreter is constructed and destroyed within the\n'}
[3.722359] (unitree_guide2) StdoutLine: {'line': b'3: -       same thread.\n'}
[3.722408] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.722456] (unitree_guide2) StdoutLine: {'line': b'3: -         1: http://bytes.com/topic/python/answers/793370-multiple-independent-python-interpreters-c-c-program\n'}
[3.722500] (unitree_guide2) StdoutLine: {'line': b'3: -         2: https://github.com/lava/matplotlib-cpp/pull/202#issue-436220256\n'}
[3.722544] (unitree_guide2) StdoutLine: {'line': b'3: -       */\n'}
[3.722586] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.722628] (unitree_guide2) StdoutLine: {'line': b'3: -    static _interpreter& get() {\n'}
[3.722670] (unitree_guide2) StdoutLine: {'line': b'3: +  namespace detail {\n'}
[3.722712] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.722754] (unitree_guide2) StdoutLine: {'line': b'3: +    static std::string s_backend;\n'}
[3.722795] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.722837] (unitree_guide2) StdoutLine: {'line': b'3: +    struct _interpreter\n'}
[3.722879] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.722921] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_arrow;\n'}
[3.722963] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_show;\n'}
[3.723005] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_close;\n'}
[3.723047] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_draw;\n'}
[3.723089] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_pause;\n'}
[3.723131] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_save;\n'}
[3.723173] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_figure;\n'}
[3.723216] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_fignum_exists;\n'}
[3.723258] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_plot;\n'}
[3.723301] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_quiver;\n'}
[3.723343] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_contour;\n'}
[3.723389] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_semilogx;\n'}
[3.723433] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_semilogy;\n'}
[3.723478] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_loglog;\n'}
[3.723521] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_fill;\n'}
[3.723563] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_fill_between;\n'}
[3.723605] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_hist;\n'}
[3.723646] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_imshow;\n'}
[3.723688] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_scatter;\n'}
[3.723730] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_boxplot;\n'}
[3.723772] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_subplot;\n'}
[3.723814] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_subplot2grid;\n'}
[3.723857] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_legend;\n'}
[3.723899] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_xlim;\n'}
[3.723942] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_ion;\n'}
[3.723984] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_ginput;\n'}
[3.724027] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_ylim;\n'}
[3.724069] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_title;\n'}
[3.724111] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_axis;\n'}
[3.724153] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_axvline;\n'}
[3.724194] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_axvspan;\n'}
[3.724241] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_xlabel;\n'}
[3.724283] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_ylabel;\n'}
[3.724326] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_gca;\n'}
[3.724393] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_xticks;\n'}
[3.724449] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_yticks;\n'}
[3.724491] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_margins;\n'}
[3.724533] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_tick_params;\n'}
[3.724576] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_grid;\n'}
[3.724618] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_cla;\n'}
[3.724661] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_clf;\n'}
[3.724704] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_errorbar;\n'}
[3.724748] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_annotate;\n'}
[3.724790] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_tight_layout;\n'}
[3.724832] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_colormap;\n'}
[3.724874] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_empty_tuple;\n'}
[3.724916] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_stem;\n'}
[3.724957] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_xkcd;\n'}
[3.724999] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_text;\n'}
[3.725040] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_suptitle;\n'}
[3.725082] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_bar;\n'}
[3.725123] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_barh;\n'}
[3.725164] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_colorbar;\n'}
[3.725206] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * s_python_function_subplots_adjust;\n'}
[3.725248] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.725290] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.725336] (unitree_guide2) StdoutLine: {'line': b'3: +      /* For now, _interpreter is implemented as a singleton since its currently not possible to have\n'}
[3.725380] (unitree_guide2) StdoutLine: {'line': b'3: +         multiple independent embedded python interpreters without patching the python source code\n'}
[3.725422] (unitree_guide2) StdoutLine: {'line': b'3: +         or starting a separate process for each. [1]\n'}
[3.725465] (unitree_guide2) StdoutLine: {'line': b'3: +         Furthermore, many python objects expect that they are destructed in the same thread as they\n'}
[3.725516] (unitree_guide2) StdoutLine: {'line': b'3: +         were constructed. [2] So for advanced usage, a `kill()` function is provided so that library\n'}
[3.725560] (unitree_guide2) StdoutLine: {'line': b'3: +         users can manually ensure that the interpreter is constructed and destroyed within the\n'}
[3.725602] (unitree_guide2) StdoutLine: {'line': b'3: +         same thread.\n'}
[3.725644] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.725686] (unitree_guide2) StdoutLine: {'line': b'3: +           1: http://bytes.com/topic/python/answers/793370-multiple-independent-python-interpreters-c-c-program\n'}
[3.725729] (unitree_guide2) StdoutLine: {'line': b'3: +           2: https://github.com/lava/matplotlib-cpp/pull/202#issue-436220256\n'}
[3.725771] (unitree_guide2) StdoutLine: {'line': b'3: +         */\n'}
[3.725813] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.725855] (unitree_guide2) StdoutLine: {'line': b'3: +      static _interpreter & get()\n'}
[3.725901] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.725943] (unitree_guide2) StdoutLine: {'line': b'3: @@ -118,3 +120,4 @@\n'}
[3.725985] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.726027] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.726069] (unitree_guide2) StdoutLine: {'line': b'3: -    static _interpreter& kill() {\n'}
[3.726111] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.726153] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.726196] (unitree_guide2) StdoutLine: {'line': b'3: +      static _interpreter & kill()\n'}
[3.726239] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.726284] (unitree_guide2) StdoutLine: {'line': b'3: @@ -122,4 +125,5 @@\n'}
[3.726328] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.726370] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.726411] (unitree_guide2) StdoutLine: {'line': b'3: -    // Stores the actual singleton object referenced by `get()` and `kill()`.\n'}
[3.726454] (unitree_guide2) StdoutLine: {'line': b'3: -    static _interpreter& interkeeper(bool should_kill) {\n'}
[3.726496] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.726537] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.726579] (unitree_guide2) StdoutLine: {'line': b'3: +      // Stores the actual singleton object referenced by `get()` and `kill()`.\n'}
[3.726621] (unitree_guide2) StdoutLine: {'line': b'3: +      static _interpreter & interkeeper(bool should_kill)\n'}
[3.726663] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.726705] (unitree_guide2) StdoutLine: {'line': b'3: @@ -127,2 +131,3 @@\n'}
[3.726747] (unitree_guide2) StdoutLine: {'line': b'3: -        if (should_kill)\n'}
[3.726793] (unitree_guide2) StdoutLine: {'line': b'3: -            ctx.~_interpreter();\n'}
[3.726836] (unitree_guide2) StdoutLine: {'line': b'3: +        if (should_kill) {\n'}
[3.726878] (unitree_guide2) StdoutLine: {'line': b'3: +          ctx.~_interpreter();\n'}
[3.726920] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.726962] (unitree_guide2) StdoutLine: {'line': b'3: @@ -130,10 +135,13 @@\n'}
[3.727004] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.733716] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.733786] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* safe_import(PyObject* module, std::string fname) {\n'}
[3.733832] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* fn = PyObject_GetAttrString(module, fname.c_str());\n'}
[3.733876] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.733919] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!fn)\n'}
[3.733962] (unitree_guide2) StdoutLine: {'line': b'3: -            throw std::runtime_error(std::string("Couldn\'t find required function: ") + fname);\n'}
[3.734007] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.734049] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!PyFunction_Check(fn))\n'}
[3.734095] (unitree_guide2) StdoutLine: {'line': b'3: -            throw std::runtime_error(fname + std::string(" is unexpectedly not a PyFunction."));\n'}
[3.734140] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.734183] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.734224] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * safe_import(PyObject * module, std::string fname)\n'}
[3.734267] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.734309] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * fn = PyObject_GetAttrString(module, fname.c_str());\n'}
[3.734352] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.734393] (unitree_guide2) StdoutLine: {'line': b'3: +        if (!fn) {\n'}
[3.734435] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::runtime_error(std::string("Couldn\'t find required function: ") + fname);\n'}
[3.734478] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.734520] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.734563] (unitree_guide2) StdoutLine: {'line': b'3: +        if (!PyFunction_Check(fn)) {\n'}
[3.734605] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::runtime_error(fname + std::string(" is unexpectedly not a PyFunction."));\n'}
[3.734659] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.734702] (unitree_guide2) StdoutLine: {'line': b'3: @@ -142 +150 @@\n'}
[3.734744] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.734787] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.734829] (unitree_guide2) StdoutLine: {'line': b'3: @@ -145 +152,0 @@\n'}
[3.734872] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.734913] (unitree_guide2) StdoutLine: {'line': b'3: @@ -149 +156,2 @@\n'}
[3.734955] (unitree_guide2) StdoutLine: {'line': b'3: -    void *import_numpy() {\n'}
[3.734996] (unitree_guide2) StdoutLine: {'line': b'3: +      void * import_numpy()\n'}
[3.735038] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.735082] (unitree_guide2) StdoutLine: {'line': b'3: @@ -152 +160 @@\n'}
[3.735124] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.735265] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.735322] (unitree_guide2) StdoutLine: {'line': b'3: @@ -156 +164,2 @@\n'}
[3.735366] (unitree_guide2) StdoutLine: {'line': b'3: -    void import_numpy() {\n'}
[3.735409] (unitree_guide2) StdoutLine: {'line': b'3: +      void import_numpy()\n'}
[3.735452] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.735495] (unitree_guide2) StdoutLine: {'line': b'3: @@ -158 +167 @@\n'}
[3.735571] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.735618] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.735662] (unitree_guide2) StdoutLine: {'line': b'3: @@ -163 +172 @@\n'}
[3.735705] (unitree_guide2) StdoutLine: {'line': b'3: -    _interpreter() {\n'}
[3.735748] (unitree_guide2) StdoutLine: {'line': b'3: +      _interpreter() {\n'}
[3.735793] (unitree_guide2) StdoutLine: {'line': b'3: @@ -174,3 +183,3 @@\n'}
[3.735842] (unitree_guide2) StdoutLine: {'line': b'3: -        wchar_t const *dummy_args[] = {L"Python", NULL};  // const is needed because literals must not be modified\n'}
[3.735891] (unitree_guide2) StdoutLine: {'line': b'3: -        wchar_t const **argv = dummy_args;\n'}
[3.735939] (unitree_guide2) StdoutLine: {'line': b'3: -        int             argc = sizeof(dummy_args)/sizeof(dummy_args[0])-1;\n'}
[3.735985] (unitree_guide2) StdoutLine: {'line': b'3: +        wchar_t const * dummy_args[] = {L"Python", NULL};  // const is needed because literals must not be modified\n'}
[3.736046] (unitree_guide2) StdoutLine: {'line': b'3: +        wchar_t const ** argv = dummy_args;\n'}
[3.736123] (unitree_guide2) StdoutLine: {'line': b'3: +        int argc = sizeof(dummy_args) / sizeof(dummy_args[0]) - 1;\n'}
[3.736185] (unitree_guide2) StdoutLine: {'line': b'3: @@ -180 +189 @@\n'}
[3.736240] (unitree_guide2) StdoutLine: {'line': b'3: -        char** argm = (char **)(argv); PySys_SetArgv(argc, argm);\n'}
[3.736282] (unitree_guide2) StdoutLine: {'line': b'3: +        char ** argm = (char **)(argv); PySys_SetArgv(argc, argm);\n'}
[3.736325] (unitree_guide2) StdoutLine: {'line': b'3: @@ -186,4 +195,4 @@\n'}
[3.736366] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* matplotlibname = PyString_FromString("matplotlib");\n'}
[3.736409] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* pyplotname = PyString_FromString("matplotlib.pyplot");\n'}
[3.736450] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* cmname  = PyString_FromString("matplotlib.cm");\n'}
[3.736493] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* pylabname  = PyString_FromString("pylab");\n'}
[3.736535] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * matplotlibname = PyString_FromString("matplotlib");\n'}
[3.736581] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * pyplotname = PyString_FromString("matplotlib.pyplot");\n'}
[3.736627] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * cmname = PyString_FromString("matplotlib.cm");\n'}
[3.736673] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * pylabname = PyString_FromString("pylab");\n'}
[3.736729] (unitree_guide2) StdoutLine: {'line': b'3: @@ -191 +200 @@\n'}
[3.736775] (unitree_guide2) StdoutLine: {'line': b'3: -            throw std::runtime_error("couldnt create string");\n'}
[3.736822] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::runtime_error("couldnt create string");\n'}
[3.737356] (unitree_guide2) StdoutLine: {'line': b'3: @@ -194 +203 @@\n'}
[3.737457] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* matplotlib = PyImport_Import(matplotlibname);\n'}
[3.737512] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * matplotlib = PyImport_Import(matplotlibname);\n'}
[3.737581] (unitree_guide2) StdoutLine: {'line': b'3: @@ -197,2 +206,2 @@\n'}
[3.737631] (unitree_guide2) StdoutLine: {'line': b'3: -            PyErr_Print();\n'}
[3.737678] (unitree_guide2) StdoutLine: {'line': b'3: -            throw std::runtime_error("Error loading module matplotlib!");\n'}
[3.737736] (unitree_guide2) StdoutLine: {'line': b'3: +          PyErr_Print();\n'}
[3.737786] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::runtime_error("Error loading module matplotlib!");\n'}
[3.737834] (unitree_guide2) StdoutLine: {'line': b'3: @@ -204 +213,3 @@\n'}
[3.737883] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject_CallMethod(matplotlib, const_cast<char*>("use"), const_cast<char*>("s"), s_backend.c_str());\n'}
[3.737937] (unitree_guide2) StdoutLine: {'line': b'3: +          PyObject_CallMethod(\n'}
[3.737986] (unitree_guide2) StdoutLine: {'line': b'3: +            matplotlib, const_cast < char * > ("use"),\n'}
[3.738053] (unitree_guide2) StdoutLine: {'line': b'3: +            const_cast < char * > ("s"), s_backend.c_str());\n'}
[3.738102] (unitree_guide2) StdoutLine: {'line': b'3: @@ -207 +218 @@\n'}
[3.738158] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* pymod = PyImport_Import(pyplotname);\n'}
[3.738211] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * pymod = PyImport_Import(pyplotname);\n'}
[3.738265] (unitree_guide2) StdoutLine: {'line': b'3: @@ -209 +220 @@\n'}
[3.738312] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!pymod) { throw std::runtime_error("Error loading module matplotlib.pyplot!"); }\n'}
[3.738366] (unitree_guide2) StdoutLine: {'line': b'3: +        if (!pymod) {throw std::runtime_error("Error loading module matplotlib.pyplot!");}\n'}
[3.738416] (unitree_guide2) StdoutLine: {'line': b'3: @@ -213,3 +224,3 @@\n'}
[3.738466] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!s_python_colormap) { throw std::runtime_error("Error loading module matplotlib.cm!"); }\n'}
[3.738516] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.738566] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* pylabmod = PyImport_Import(pylabname);\n'}
[3.738613] (unitree_guide2) StdoutLine: {'line': b'3: +        if (!s_python_colormap) {throw std::runtime_error("Error loading module matplotlib.cm!");}\n'}
[3.738663] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.738710] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * pylabmod = PyImport_Import(pylabname);\n'}
[3.738768] (unitree_guide2) StdoutLine: {'line': b'3: @@ -217 +228 @@\n'}
[3.738817] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!pylabmod) { throw std::runtime_error("Error loading module pylab!"); }\n'}
[3.738865] (unitree_guide2) StdoutLine: {'line': b'3: +        if (!pylabmod) {throw std::runtime_error("Error loading module pylab!");}\n'}
[3.738914] (unitree_guide2) StdoutLine: {'line': b'3: @@ -234,3 +245,3 @@\n'}
[3.738961] (unitree_guide2) StdoutLine: {'line': b'3: -        s_python_function_hist = safe_import(pymod,"hist");\n'}
[3.739026] (unitree_guide2) StdoutLine: {'line': b'3: -        s_python_function_scatter = safe_import(pymod,"scatter");\n'}
[3.739257] (unitree_guide2) StdoutLine: {'line': b'3: -        s_python_function_boxplot = safe_import(pymod,"boxplot");\n'}
[3.739315] (unitree_guide2) StdoutLine: {'line': b'3: +        s_python_function_hist = safe_import(pymod, "hist");\n'}
[3.739374] (unitree_guide2) StdoutLine: {'line': b'3: +        s_python_function_scatter = safe_import(pymod, "scatter");\n'}
[3.739418] (unitree_guide2) StdoutLine: {'line': b'3: +        s_python_function_boxplot = safe_import(pymod, "boxplot");\n'}
[3.739462] (unitree_guide2) StdoutLine: {'line': b'3: @@ -257 +268 @@\n'}
[3.739505] (unitree_guide2) StdoutLine: {'line': b'3: -        s_python_function_annotate = safe_import(pymod,"annotate");\n'}
[3.739549] (unitree_guide2) StdoutLine: {'line': b'3: +        s_python_function_annotate = safe_import(pymod, "annotate");\n'}
[3.739592] (unitree_guide2) StdoutLine: {'line': b'3: @@ -266 +277 @@\n'}
[3.739635] (unitree_guide2) StdoutLine: {'line': b'3: -        s_python_function_bar = safe_import(pymod,"bar");\n'}
[3.739678] (unitree_guide2) StdoutLine: {'line': b'3: +        s_python_function_bar = safe_import(pymod, "bar");\n'}
[3.739724] (unitree_guide2) StdoutLine: {'line': b'3: @@ -269 +280 @@\n'}
[3.739767] (unitree_guide2) StdoutLine: {'line': b'3: -        s_python_function_subplots_adjust = safe_import(pymod,"subplots_adjust");\n'}
[3.739811] (unitree_guide2) StdoutLine: {'line': b'3: +        s_python_function_subplots_adjust = safe_import(pymod, "subplots_adjust");\n'}
[3.739855] (unitree_guide2) StdoutLine: {'line': b'3: @@ -274,3 +285,3 @@\n'}
[3.739899] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.739943] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.739995] (unitree_guide2) StdoutLine: {'line': b'3: -    ~_interpreter() {\n'}
[3.740039] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.740082] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.740125] (unitree_guide2) StdoutLine: {'line': b'3: +      ~_interpreter() {\n'}
[3.740168] (unitree_guide2) StdoutLine: {'line': b'3: @@ -278,4 +289,4 @@\n'}
[3.740211] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.740254] (unitree_guide2) StdoutLine: {'line': b'3: -};\n'}
[3.740296] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.740338] (unitree_guide2) StdoutLine: {'line': b'3: -} // end namespace detail\n'}
[3.740381] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.740424] (unitree_guide2) StdoutLine: {'line': b'3: +    };\n'}
[3.740467] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.740510] (unitree_guide2) StdoutLine: {'line': b'3: +  } // end namespace detail\n'}
[3.740553] (unitree_guide2) StdoutLine: {'line': b'3: @@ -292,2 +303,2 @@\n'}
[3.740596] (unitree_guide2) StdoutLine: {'line': b'3: -inline void backend(const std::string& name)\n'}
[3.740640] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.740684] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void backend(const std::string & name)\n'}
[3.740728] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.740771] (unitree_guide2) StdoutLine: {'line': b'3: @@ -295,4 +306,4 @@\n'}
[3.740815] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.740858] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.740901] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool annotate(std::string annotation, double x, double y)\n'}
[3.740952] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.740995] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.741039] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.741082] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool annotate(std::string annotation, double x, double y)\n'}
[3.741126] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.741169] (unitree_guide2) StdoutLine: {'line': b'3: @@ -304,4 +315,4 @@\n'}
[3.741213] (unitree_guide2) StdoutLine: {'line': b'3: -    PyTuple_SetItem(xy,0,PyFloat_FromDouble(x));\n'}
[3.741256] (unitree_guide2) StdoutLine: {'line': b'3: -    PyTuple_SetItem(xy,1,PyFloat_FromDouble(y));\n'}
[3.741300] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.741343] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.741387] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(xy, 0, PyFloat_FromDouble(x));\n'}
[3.741431] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(xy, 1, PyFloat_FromDouble(y));\n'}
[3.741481] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.741524] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.741568] (unitree_guide2) StdoutLine: {'line': b'3: @@ -310 +321 @@\n'}
[3.741611] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.741654] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.741696] (unitree_guide2) StdoutLine: {'line': b'3: @@ -313,6 +324,7 @@\n'}
[3.741739] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_annotate, args, kwargs);\n'}
[3.741783] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.741826] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.741869] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.741917] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.741962] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.742006] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.742063] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_annotate, args, kwargs);\n'}
[3.742109] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.742153] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.742196] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.742239] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.742283] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.742326] (unitree_guide2) StdoutLine: {'line': b'3: @@ -321,3 +333,3 @@\n'}
[3.742369] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.742412] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.742455] (unitree_guide2) StdoutLine: {'line': b'3: -namespace detail {\n'}
[3.742498] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.742542] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.742586] (unitree_guide2) StdoutLine: {'line': b'3: +  namespace detail {\n'}
[3.742629] (unitree_guide2) StdoutLine: {'line': b'3: @@ -327,12 +339,12 @@\n'}
[3.742673] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> struct select_npy_type { const static NPY_TYPES type = NPY_NOTYPE; }; //Default\n'}
[3.742717] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<double> { const static NPY_TYPES type = NPY_DOUBLE; };\n'}
[3.743096] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<float> { const static NPY_TYPES type = NPY_FLOAT; };\n'}
[3.743390] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<bool> { const static NPY_TYPES type = NPY_BOOL; };\n'}
[3.743455] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<int8_t> { const static NPY_TYPES type = NPY_INT8; };\n'}
[3.743501] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<int16_t> { const static NPY_TYPES type = NPY_SHORT; };\n'}
[3.743545] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<int32_t> { const static NPY_TYPES type = NPY_INT; };\n'}
[3.743590] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<int64_t> { const static NPY_TYPES type = NPY_INT64; };\n'}
[3.743634] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<uint8_t> { const static NPY_TYPES type = NPY_UINT8; };\n'}
[3.743683] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<uint16_t> { const static NPY_TYPES type = NPY_USHORT; };\n'}
[3.744646] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<uint32_t> { const static NPY_TYPES type = NPY_ULONG; };\n'}
[3.744722] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<uint64_t> { const static NPY_TYPES type = NPY_UINT64; };\n'}
[3.744770] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T > struct select_npy_type { const static NPY_TYPES type = NPY_NOTYPE; }; //Default\n'}
[3.744841] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < double > {const static NPY_TYPES type = NPY_DOUBLE;}\n'}
[3.744953] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < float > {const static NPY_TYPES type = NPY_FLOAT;}\n'}
[3.745007] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < bool > {const static NPY_TYPES type = NPY_BOOL;}\n'}
[3.745052] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < int8_t > {const static NPY_TYPES type = NPY_INT8;}\n'}
[3.745097] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < int16_t > {const static NPY_TYPES type = NPY_SHORT;}\n'}
[3.745141] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < int32_t > {const static NPY_TYPES type = NPY_INT;}\n'}
[3.745190] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < int64_t > {const static NPY_TYPES type = NPY_INT64;}\n'}
[3.745234] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < uint8_t > {const static NPY_TYPES type = NPY_UINT8;}\n'}
[3.745278] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < uint16_t > {const static NPY_TYPES type = NPY_USHORT;}\n'}
[3.745325] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < uint32_t > {const static NPY_TYPES type = NPY_ULONG;}\n'}
[3.745370] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < uint64_t > {const static NPY_TYPES type = NPY_UINT64;}\n'}
[3.745417] (unitree_guide2) StdoutLine: {'line': b'3: @@ -342,4 +354,5 @@\n'}
[3.745463] (unitree_guide2) StdoutLine: {'line': b'3: -static_assert(sizeof(long long) == 8);\n'}
[3.745508] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<long long> { const static NPY_TYPES type = NPY_INT64; };\n'}
[3.745552] (unitree_guide2) StdoutLine: {'line': b'3: -static_assert(sizeof(unsigned long long) == 8);\n'}
[3.745597] (unitree_guide2) StdoutLine: {'line': b'3: -template <> struct select_npy_type<unsigned long long> { const static NPY_TYPES type = NPY_UINT64; };\n'}
[3.745642] (unitree_guide2) StdoutLine: {'line': b'3: +    static_assert(sizeof(long long) == 8);\n'}
[3.745688] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < long long > {const static NPY_TYPES type = NPY_INT64;}\n'}
[3.745732] (unitree_guide2) StdoutLine: {'line': b'3: +    static_assert(sizeof(unsigned long long) == 8);\n'}
[3.745789] (unitree_guide2) StdoutLine: {'line': b'3: +    template < > struct select_npy_type < unsigned long long >\n'}
[3.745904] (unitree_guide2) StdoutLine: {'line': b'3: +    {const static NPY_TYPES type = NPY_UINT64;}\n'}
[3.746003] (unitree_guide2) StdoutLine: {'line': b'3: @@ -348,12 +361,13 @@\n'}
[3.746050] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.746094] (unitree_guide2) StdoutLine: {'line': b'3: -PyObject* get_array(const std::vector<Numeric>& v)\n'}
[3.746151] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.746192] (unitree_guide2) StdoutLine: {'line': b'3: -    npy_intp vsize = v.size();\n'}
[3.746234] (unitree_guide2) StdoutLine: {'line': b'3: -    NPY_TYPES type = select_npy_type<Numeric>::type;\n'}
[3.746275] (unitree_guide2) StdoutLine: {'line': b'3: -    if (type == NPY_NOTYPE) {\n'}
[3.746316] (unitree_guide2) StdoutLine: {'line': b'3: -        size_t memsize = v.size()*sizeof(double);\n'}
[3.746357] (unitree_guide2) StdoutLine: {'line': b'3: -        double* dp = static_cast<double*>(::malloc(memsize));\n'}
[3.746407] (unitree_guide2) StdoutLine: {'line': b'3: -        for (size_t i=0; i<v.size(); ++i)\n'}
[3.746449] (unitree_guide2) StdoutLine: {'line': b'3: -            dp[i] = v[i];\n'}
[3.746490] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* varray = PyArray_SimpleNewFromData(1, &vsize, NPY_DOUBLE, dp);\n'}
[3.746535] (unitree_guide2) StdoutLine: {'line': b'3: -        PyArray_UpdateFlags(reinterpret_cast<PyArrayObject*>(varray), NPY_ARRAY_OWNDATA);\n'}
[3.746577] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename Numeric >\n'}
[3.746618] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * get_array(const std::vector < Numeric > & v)\n'}
[3.746660] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.746701] (unitree_guide2) StdoutLine: {'line': b'3: +      npy_intp vsize = v.size();\n'}
[3.746743] (unitree_guide2) StdoutLine: {'line': b'3: +      NPY_TYPES type = select_npy_type < Numeric > ::type;\n'}
[3.746786] (unitree_guide2) StdoutLine: {'line': b'3: +      if (type == NPY_NOTYPE) {\n'}
[3.746959] (unitree_guide2) StdoutLine: {'line': b'3: +        size_t memsize = v.size() * sizeof(double);\n'}
[3.747024] (unitree_guide2) StdoutLine: {'line': b'3: +        double * dp = static_cast < double * > (::malloc(memsize));\n'}
[3.747089] (unitree_guide2) StdoutLine: {'line': b'3: +        for (size_t i = 0; i < v.size(); ++i) {\n'}
[3.747179] (unitree_guide2) StdoutLine: {'line': b'3: +          dp[i] = v[i];\n'}
[3.747221] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.747263] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * varray = PyArray_SimpleNewFromData(1, &vsize, NPY_DOUBLE, dp);\n'}
[3.747305] (unitree_guide2) StdoutLine: {'line': b'3: +        PyArray_UpdateFlags(reinterpret_cast < PyArrayObject * > (varray), NPY_ARRAY_OWNDATA);\n'}
[3.747368] (unitree_guide2) StdoutLine: {'line': b'3: @@ -361,16 +375,16 @@\n'}
[3.747431] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.747551] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[3.747596] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* varray = PyArray_SimpleNewFromData(1, &vsize, type, (void*)(v.data()));\n'}
[3.747639] (unitree_guide2) StdoutLine: {'line': b'3: -    return varray;\n'}
[3.747701] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.747744] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.747825] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.747882] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.747924] (unitree_guide2) StdoutLine: {'line': b'3: -PyObject* get_2darray(const std::vector<::std::vector<Numeric>>& v)\n'}
[3.748004] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.748112] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v.size() < 1) throw std::runtime_error("get_2d_array v too small");\n'}
[3.748180] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.748238] (unitree_guide2) StdoutLine: {'line': b'3: -    npy_intp vsize[2] = {static_cast<npy_intp>(v.size()),\n'}
[3.748281] (unitree_guide2) StdoutLine: {'line': b'3: -                         static_cast<npy_intp>(v[0].size())};\n'}
[3.748323] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.748364] (unitree_guide2) StdoutLine: {'line': b'3: -    PyArrayObject *varray =\n'}
[3.748406] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.748448] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.748489] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * varray = PyArray_SimpleNewFromData(1, &vsize, type, (void *)(v.data()));\n'}
[3.748531] (unitree_guide2) StdoutLine: {'line': b'3: +      return varray;\n'}
[3.748572] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.748612] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.748653] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.748693] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename Numeric >\n'}
[3.748735] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * get_2darray(const std::vector < ::std::vector < Numeric >> & v)\n'}
[3.748801] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.748855] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v.size() < 1) {throw std::runtime_error("get_2d_array v too small");}\n'}
[3.748928] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.748979] (unitree_guide2) StdoutLine: {'line': b'3: +      npy_intp vsize[2] = {static_cast < npy_intp > (v.size()),\n'}
[3.749021] (unitree_guide2) StdoutLine: {'line': b'3: +        static_cast < npy_intp > (v[0].size())};\n'}
[3.749062] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.749103] (unitree_guide2) StdoutLine: {'line': b'3: +      PyArrayObject * varray =\n'}
[3.749145] (unitree_guide2) StdoutLine: {'line': b'3: @@ -379,11 +393,12 @@\n'}
[3.749186] (unitree_guide2) StdoutLine: {'line': b'3: -    double *vd_begin = static_cast<double *>(PyArray_DATA(varray));\n'}
[3.749241] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.749284] (unitree_guide2) StdoutLine: {'line': b'3: -    for (const ::std::vector<Numeric> &v_row : v) {\n'}
[3.749326] (unitree_guide2) StdoutLine: {'line': b'3: -      if (v_row.size() != static_cast<size_t>(vsize[1]))\n'}
[3.749369] (unitree_guide2) StdoutLine: {'line': b'3: -        throw std::runtime_error("Missmatched array size");\n'}
[3.749411] (unitree_guide2) StdoutLine: {'line': b'3: -      std::copy(v_row.begin(), v_row.end(), vd_begin);\n'}
[3.749452] (unitree_guide2) StdoutLine: {'line': b'3: -      vd_begin += vsize[1];\n'}
[3.749494] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.749535] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.749577] (unitree_guide2) StdoutLine: {'line': b'3: -    return reinterpret_cast<PyObject *>(varray);\n'}
[3.749618] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.749660] (unitree_guide2) StdoutLine: {'line': b'3: +      double * vd_begin = static_cast < double * > (PyArray_DATA(varray));\n'}
[3.749702] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.749774] (unitree_guide2) StdoutLine: {'line': b'3: +      for (const ::std::vector < Numeric > & v_row : v) {\n'}
[3.749831] (unitree_guide2) StdoutLine: {'line': b'3: +        if (v_row.size() != static_cast < size_t > (vsize[1])) {\n'}
[3.749874] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::runtime_error("Missmatched array size");\n'}
[3.749917] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.749959] (unitree_guide2) StdoutLine: {'line': b'3: +        std::copy(v_row.begin(), v_row.end(), vd_begin);\n'}
[3.750002] (unitree_guide2) StdoutLine: {'line': b'3: +        vd_begin += vsize[1];\n'}
[3.750045] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.750105] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.750225] (unitree_guide2) StdoutLine: {'line': b'3: +      return reinterpret_cast < PyObject * > (varray);\n'}
[3.750272] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.750314] (unitree_guide2) StdoutLine: {'line': b'3: @@ -393,5 +408,5 @@\n'}
[3.750355] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.750396] (unitree_guide2) StdoutLine: {'line': b'3: -PyObject* get_array(const std::vector<Numeric>& v)\n'}
[3.750437] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.750477] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* list = PyList_New(v.size());\n'}
[3.750649] (unitree_guide2) StdoutLine: {'line': b'3: -    for(size_t i = 0; i < v.size(); ++i) {\n'}
[3.750731] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename Numeric >\n'}
[3.750792] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * get_array(const std::vector < Numeric > & v)\n'}
[3.750834] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.750874] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * list = PyList_New(v.size());\n'}
[3.750935] (unitree_guide2) StdoutLine: {'line': b'3: +      for (size_t i = 0; i < v.size(); ++i) {\n'}
[3.751108] (unitree_guide2) StdoutLine: {'line': b'3: @@ -399,3 +414,3 @@\n'}
[3.751202] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.751278] (unitree_guide2) StdoutLine: {'line': b'3: -    return list;\n'}
[3.751384] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.751429] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.751488] (unitree_guide2) StdoutLine: {'line': b'3: +      return list;\n'}
[3.751554] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.751595] (unitree_guide2) StdoutLine: {'line': b'3: @@ -406,8 +421,8 @@\n'}
[3.751638] (unitree_guide2) StdoutLine: {'line': b'3: -inline PyObject * get_array(const std::vector<std::string>& strings)\n'}
[3.751727] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.751818] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject* list = PyList_New(strings.size());\n'}
[3.752034] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::size_t i = 0; i < strings.size(); ++i) {\n'}
[3.752110] (unitree_guide2) StdoutLine: {'line': b'3: -    PyList_SetItem(list, i, PyString_FromString(strings[i].c_str()));\n'}
[3.752173] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.752237] (unitree_guide2) StdoutLine: {'line': b'3: -  return list;\n'}
[3.752355] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.752441] (unitree_guide2) StdoutLine: {'line': b'3: +    inline PyObject * get_array(const std::vector < std::string > & strings)\n'}
[3.752488] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.752532] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * list = PyList_New(strings.size());\n'}
[3.752689] (unitree_guide2) StdoutLine: {'line': b'3: +      for (std::size_t i = 0; i < strings.size(); ++i) {\n'}
[3.752742] (unitree_guide2) StdoutLine: {'line': b'3: +        PyList_SetItem(list, i, PyString_FromString(strings[i].c_str()));\n'}
[3.752791] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.752836] (unitree_guide2) StdoutLine: {'line': b'3: +      return list;\n'}
[3.752973] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.753041] (unitree_guide2) StdoutLine: {'line': b'3: @@ -416,11 +431,11 @@\n'}
[3.753089] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.753135] (unitree_guide2) StdoutLine: {'line': b'3: -PyObject* get_listlist(const std::vector<std::vector<Numeric>>& ll)\n'}
[3.753184] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.753230] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject* listlist = PyList_New(ll.size());\n'}
[3.753277] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::size_t i = 0; i < ll.size(); ++i) {\n'}
[3.753325] (unitree_guide2) StdoutLine: {'line': b'3: -    PyList_SetItem(listlist, i, get_array(ll[i]));\n'}
[3.753373] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.753418] (unitree_guide2) StdoutLine: {'line': b'3: -  return listlist;\n'}
[3.753469] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.753516] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.753562] (unitree_guide2) StdoutLine: {'line': b'3: -} // namespace detail\n'}
[3.753614] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename Numeric >\n'}
[3.753682] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * get_listlist(const std::vector < std::vector < Numeric >> & ll)\n'}
[3.753743] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.753793] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * listlist = PyList_New(ll.size());\n'}
[3.753848] (unitree_guide2) StdoutLine: {'line': b'3: +      for (std::size_t i = 0; i < ll.size(); ++i) {\n'}
[3.753908] (unitree_guide2) StdoutLine: {'line': b'3: +        PyList_SetItem(listlist, i, get_array(ll[i]));\n'}
[3.754260] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.754337] (unitree_guide2) StdoutLine: {'line': b'3: +      return listlist;\n'}
[3.754384] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.754453] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.754506] (unitree_guide2) StdoutLine: {'line': b'3: +  } // namespace detail\n'}
[3.754554] (unitree_guide2) StdoutLine: {'line': b'3: @@ -429 +444 @@\n'}
[3.754868] (unitree_guide2) StdoutLine: {'line': b'3: -/// \n'}
[3.755064] (unitree_guide2) StdoutLine: {'line': b'3: +///\n'}
[3.755136] (unitree_guide2) StdoutLine: {'line': b'3: @@ -431,3 +446,5 @@\n'}
[3.755192] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.755243] (unitree_guide2) StdoutLine: {'line': b'3: -bool plot(const std::vector<Numeric> &x, const std::vector<Numeric> &y, const std::map<std::string, std::string>& keywords)\n'}
[3.755360] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.755407] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.755624] (unitree_guide2) StdoutLine: {'line': b'3: +  bool plot(\n'}
[3.755698] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,\n'}
[3.755741] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords)\n'}
[3.755831] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.756061] (unitree_guide2) StdoutLine: {'line': b'3: @@ -439,2 +456,2 @@\n'}
[3.756137] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.756242] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.756320] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.756383] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.756445] (unitree_guide2) StdoutLine: {'line': b'3: @@ -443 +460 @@\n'}
[3.756505] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(2);\n'}
[3.756581] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(2);\n'}
[3.756643] (unitree_guide2) StdoutLine: {'line': b'3: @@ -448,11 +465,13 @@\n'}
[3.756705] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.756766] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.756830] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.756876] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.756919] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.756961] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.757002] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, args, kwargs);\n'}
[3.757045] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.757086] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.757127] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.757169] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.757224] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.757266] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.757310] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.757352] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.757395] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.757438] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.757481] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.757525] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.757573] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_Call(detail::_interpreter::get().s_python_function_plot, args, kwargs);\n'}
[3.757658] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.757707] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.757750] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.757793] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.757844] (unitree_guide2) StdoutLine: {'line': b'3: @@ -461 +480 @@\n'}
[3.757888] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.757930] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.757972] (unitree_guide2) StdoutLine: {'line': b'3: @@ -466,183 +485,31 @@\n'}
[3.758015] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename Numeric>\n'}
[3.758061] (unitree_guide2) StdoutLine: {'line': b'3: -void plot_surface(const std::vector<::std::vector<Numeric>> &x,\n'}
[3.758105] (unitree_guide2) StdoutLine: {'line': b'3: -                  const std::vector<::std::vector<Numeric>> &y,\n'}
[3.758148] (unitree_guide2) StdoutLine: {'line': b'3: -                  const std::vector<::std::vector<Numeric>> &z,\n'}
[3.758190] (unitree_guide2) StdoutLine: {'line': b'3: -                  const std::map<std::string, std::string> &keywords =\n'}
[3.758247] (unitree_guide2) StdoutLine: {'line': b'3: -                      std::map<std::string, std::string>())\n'}
[3.758292] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.758337] (unitree_guide2) StdoutLine: {'line': b'3: -  detail::_interpreter::get();\n'}
[3.758380] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.758425] (unitree_guide2) StdoutLine: {'line': b'3: -  // We lazily load the modules here the first time this function is called\n'}
[3.758470] (unitree_guide2) StdoutLine: {'line': b'3: -  // because I\'m not sure that we can assume "matplotlib installed" implies\n'}
[3.758520] (unitree_guide2) StdoutLine: {'line': b'3: -  // "mpl_toolkits installed" on all platforms, and we don\'t want to require\n'}
[3.758630] (unitree_guide2) StdoutLine: {'line': b"3: -  // it for people who don't need 3d plots.\n"}
[3.758699] (unitree_guide2) StdoutLine: {'line': b'3: -  static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;\n'}
[3.758745] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!mpl_toolkitsmod) {\n'}
[3.758790] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.758838] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.758885] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");\n'}
[3.758935] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");\n'}
[3.758984] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }\n'}
[3.759049] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.759152] (unitree_guide2) StdoutLine: {'line': b'3: -    mpl_toolkitsmod = PyImport_Import(mpl_toolkits);\n'}
[3.759229] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(mpl_toolkits);\n'}
[3.759277] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }\n'}
[3.759325] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.759371] (unitree_guide2) StdoutLine: {'line': b'3: -    axis3dmod = PyImport_Import(axis3d);\n'}
[3.759418] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(axis3d);\n'}
[3.759464] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }\n'}
[3.759520] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.759600] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.759648] (unitree_guide2) StdoutLine: {'line': b'3: -  assert(x.size() == y.size());\n'}
[3.759695] (unitree_guide2) StdoutLine: {'line': b'3: -  assert(y.size() == z.size());\n'}
[3.759741] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.759787] (unitree_guide2) StdoutLine: {'line': b'3: -  // using numpy arrays\n'}
[3.759833] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *xarray = detail::get_2darray(x);\n'}
[3.759878] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *yarray = detail::get_2darray(y);\n'}
[3.759923] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *zarray = detail::get_2darray(z);\n'}
[3.759968] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.760015] (unitree_guide2) StdoutLine: {'line': b'3: -  // construct positional args\n'}
[3.760060] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *args = PyTuple_New(3);\n'}
[3.760106] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(args, 0, xarray);\n'}
[3.760152] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(args, 1, yarray);\n'}
[3.760219] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(args, 2, zarray);\n'}
[3.760266] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.760314] (unitree_guide2) StdoutLine: {'line': b'3: -  // Build up the kw args.\n'}
[3.760361] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *kwargs = PyDict_New();\n'}
[3.760409] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(kwargs, "rstride", PyInt_FromLong(1));\n'}
[3.760459] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(kwargs, "cstride", PyInt_FromLong(1));\n'}
[3.760510] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.760557] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *python_colormap_coolwarm = PyObject_GetAttrString(\n'}
[3.760605] (unitree_guide2) StdoutLine: {'line': b'3: -      detail::_interpreter::get().s_python_colormap, "coolwarm");\n'}
[3.760652] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.760698] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(kwargs, "cmap", python_colormap_coolwarm);\n'}
[3.760744] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.760791] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::map<std::string, std::string>::const_iterator it = keywords.begin();\n'}
[3.760837] (unitree_guide2) StdoutLine: {'line': b'3: -       it != keywords.end(); ++it) {\n'}
[3.760892] (unitree_guide2) StdoutLine: {'line': b'3: -    PyDict_SetItemString(kwargs, it->first.c_str(),\n'}
[3.760939] (unitree_guide2) StdoutLine: {'line': b'3: -                         PyString_FromString(it->second.c_str()));\n'}
[3.760987] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.761033] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.761079] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.761126] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *fig =\n'}
[3.761173] (unitree_guide2) StdoutLine: {'line': b'3: -      PyObject_CallObject(detail::_interpreter::get().s_python_function_figure,\n'}
[3.761236] (unitree_guide2) StdoutLine: {'line': b'3: -                          detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.761284] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!fig) throw std::runtime_error("Call to figure() failed.");\n'}
[3.761333] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.761381] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *gca_kwargs = PyDict_New();\n'}
[3.761429] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));\n'}
[3.761482] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.761529] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *gca = PyObject_GetAttrString(fig, "gca");\n'}
[3.761578] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!gca) throw std::runtime_error("No gca");\n'}
[3.761626] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_INCREF(gca);\n'}
[3.761673] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *axis = PyObject_Call(\n'}
[3.761722] (unitree_guide2) StdoutLine: {'line': b'3: -      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);\n'}
[3.761770] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.761818] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!axis) throw std::runtime_error("No axis");\n'}
[3.761870] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_INCREF(axis);\n'}
[3.761920] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.761969] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(gca);\n'}
[3.762018] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(gca_kwargs);\n'}
[3.762066] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.762114] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *plot_surface = PyObject_GetAttrString(axis, "plot_surface");\n'}
[3.762162] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!plot_surface) throw std::runtime_error("No surface");\n'}
[3.762210] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_INCREF(plot_surface);\n'}
[3.762258] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *res = PyObject_Call(plot_surface, args, kwargs);\n'}
[3.762311] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!res) throw std::runtime_error("failed surface");\n'}
[3.762359] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(plot_surface);\n'}
[3.762408] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.762459] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(axis);\n'}
[3.762506] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(args);\n'}
[3.762554] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(kwargs);\n'}
[3.762603] (unitree_guide2) StdoutLine: {'line': b'3: -  if (res) Py_DECREF(res);\n'}
[3.762651] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.762699] (unitree_guide2) StdoutLine: {'line': b'3: -#endif // WITHOUT_NUMPY\n'}
[3.762747] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.762796] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename Numeric>\n'}
[3.762845] (unitree_guide2) StdoutLine: {'line': b'3: -void plot3(const std::vector<Numeric> &x,\n'}
[3.762894] (unitree_guide2) StdoutLine: {'line': b'3: -                  const std::vector<Numeric> &y,\n'}
[3.762943] (unitree_guide2) StdoutLine: {'line': b'3: -                  const std::vector<Numeric> &z,\n'}
[3.762992] (unitree_guide2) StdoutLine: {'line': b'3: -                  const std::map<std::string, std::string> &keywords =\n'}
[3.763040] (unitree_guide2) StdoutLine: {'line': b'3: -                      std::map<std::string, std::string>())\n'}
[3.763089] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.763137] (unitree_guide2) StdoutLine: {'line': b'3: -  detail::_interpreter::get();\n'}
[3.763185] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.763246] (unitree_guide2) StdoutLine: {'line': b'3: -  // Same as with plot_surface: We lazily load the modules here the first time \n'}
[3.763294] (unitree_guide2) StdoutLine: {'line': b'3: -  // this function is called because I\'m not sure that we can assume "matplotlib \n'}
[3.763340] (unitree_guide2) StdoutLine: {'line': b'3: -  // installed" implies "mpl_toolkits installed" on all platforms, and we don\'t \n'}
[3.763390] (unitree_guide2) StdoutLine: {'line': b"3: -  // want to require it for people who don't need 3d plots.\n"}
[3.763439] (unitree_guide2) StdoutLine: {'line': b'3: -  static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;\n'}
[3.763485] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!mpl_toolkitsmod) {\n'}
[3.763532] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.763579] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.763625] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");\n'}
[3.763672] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");\n'}
[3.763720] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }\n'}
[3.763767] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.763814] (unitree_guide2) StdoutLine: {'line': b'3: -    mpl_toolkitsmod = PyImport_Import(mpl_toolkits);\n'}
[3.763861] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(mpl_toolkits);\n'}
[3.763907] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }\n'}
[3.763955] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.764001] (unitree_guide2) StdoutLine: {'line': b'3: -    axis3dmod = PyImport_Import(axis3d);\n'}
[3.764047] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(axis3d);\n'}
[3.764093] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }\n'}
[3.764140] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.764199] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.764243] (unitree_guide2) StdoutLine: {'line': b'3: -  assert(x.size() == y.size());\n'}
[3.764293] (unitree_guide2) StdoutLine: {'line': b'3: -  assert(y.size() == z.size());\n'}
[3.764338] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.764387] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *xarray = detail::get_array(x);\n'}
[3.764433] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *yarray = detail::get_array(y);\n'}
[3.764478] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *zarray = detail::get_array(z);\n'}
[3.764524] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.764569] (unitree_guide2) StdoutLine: {'line': b'3: -  // construct positional args\n'}
[3.764615] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *args = PyTuple_New(3);\n'}
[3.764660] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(args, 0, xarray);\n'}
[3.764706] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(args, 1, yarray);\n'}
[3.764752] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(args, 2, zarray);\n'}
[3.764797] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.764842] (unitree_guide2) StdoutLine: {'line': b'3: -  // Build up the kw args.\n'}
[3.764887] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *kwargs = PyDict_New();\n'}
[3.764933] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.764978] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::map<std::string, std::string>::const_iterator it = keywords.begin();\n'}
[3.765024] (unitree_guide2) StdoutLine: {'line': b'3: -       it != keywords.end(); ++it) {\n'}
[3.765070] (unitree_guide2) StdoutLine: {'line': b'3: -    PyDict_SetItemString(kwargs, it->first.c_str(),\n'}
[3.765115] (unitree_guide2) StdoutLine: {'line': b'3: -                         PyString_FromString(it->second.c_str()));\n'}
[3.765161] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.765218] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.765262] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *fig =\n'}
[3.765307] (unitree_guide2) StdoutLine: {'line': b'3: -      PyObject_CallObject(detail::_interpreter::get().s_python_function_figure,\n'}
[3.765357] (unitree_guide2) StdoutLine: {'line': b'3: -                          detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.765403] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!fig) throw std::runtime_error("Call to figure() failed.");\n'}
[3.765448] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.765493] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *gca_kwargs = PyDict_New();\n'}
[3.765537] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));\n'}
[3.765582] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.765627] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *gca = PyObject_GetAttrString(fig, "gca");\n'}
[3.765678] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!gca) throw std::runtime_error("No gca");\n'}
[3.765724] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_INCREF(gca);\n'}
[3.765768] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *axis = PyObject_Call(\n'}
[3.765815] (unitree_guide2) StdoutLine: {'line': b'3: -      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);\n'}
[3.765861] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.765905] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!axis) throw std::runtime_error("No axis");\n'}
[3.765949] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_INCREF(axis);\n'}
[3.765993] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.766037] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(gca);\n'}
[3.766082] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(gca_kwargs);\n'}
[3.766126] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.766170] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *plot3 = PyObject_GetAttrString(axis, "plot");\n'}
[3.766215] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!plot3) throw std::runtime_error("No 3D line plot");\n'}
[3.766272] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_INCREF(plot3);\n'}
[3.766318] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject *res = PyObject_Call(plot3, args, kwargs);\n'}
[3.766366] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!res) throw std::runtime_error("Failed 3D line plot");\n'}
[3.766409] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(plot3);\n'}
[3.766452] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.766495] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(axis);\n'}
[3.766538] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(args);\n'}
[3.766580] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(kwargs);\n'}
[3.766623] (unitree_guide2) StdoutLine: {'line': b'3: -  if (res) Py_DECREF(res);\n'}
[3.766666] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.766709] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.766753] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.766797] (unitree_guide2) StdoutLine: {'line': b'3: -bool stem(const std::vector<Numeric> &x, const std::vector<Numeric> &y, const std::map<std::string, std::string>& keywords)\n'}
[3.766841] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.766884] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.766928] (unitree_guide2) StdoutLine: {'line': b'3: +  void plot_surface(\n'}
[3.766971] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < ::std::vector < Numeric >> & x,\n'}
[3.767014] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < ::std::vector < Numeric >> & y,\n'}
[3.767058] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < ::std::vector < Numeric >> & z,\n'}
[3.767101] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords =\n'}
[3.767145] (unitree_guide2) StdoutLine: {'line': b'3: +    std::map < std::string, std::string > ())\n'}
[3.767246] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.767289] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.767339] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.767382] (unitree_guide2) StdoutLine: {'line': b'3: +    // We lazily load the modules here the first time this function is called\n'}
[3.767426] (unitree_guide2) StdoutLine: {'line': b'3: +    // because I\'m not sure that we can assume "matplotlib installed" implies\n'}
[3.767469] (unitree_guide2) StdoutLine: {'line': b'3: +    // "mpl_toolkits installed" on all platforms, and we don\'t want to require\n'}
[3.767512] (unitree_guide2) StdoutLine: {'line': b"3: +    // it for people who don't need 3d plots.\n"}
[3.767555] (unitree_guide2) StdoutLine: {'line': b'3: +    static PyObject * mpl_toolkitsmod = nullptr, * axis3dmod = nullptr;\n'}
[3.767599] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!mpl_toolkitsmod) {\n'}
[3.767642] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get();\n'}
[3.767686] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.767729] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * mpl_toolkits = PyString_FromString("mpl_toolkits");\n'}
[3.767772] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * axis3d = PyString_FromString("mpl_toolkits.mplot3d");\n'}
[3.767815] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!mpl_toolkits || !axis3d) {throw std::runtime_error("couldnt create string");}\n'}
[3.767859] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.767902] (unitree_guide2) StdoutLine: {'line': b'3: +      mpl_toolkitsmod = PyImport_Import(mpl_toolkits);\n'}
[3.767944] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(mpl_toolkits);\n'}
[3.767987] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!mpl_toolkitsmod) {throw std::runtime_error("Error loading module mpl_toolkits!");}\n'}
[3.768031] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.768073] (unitree_guide2) StdoutLine: {'line': b'3: +      axis3dmod = PyImport_Import(axis3d);\n'}
[3.768116] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(axis3d);\n'}
[3.768159] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!axis3dmod) {throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!");}\n'}
[3.768213] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.768256] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.768323] (unitree_guide2) StdoutLine: {'line': b'3: @@ -650,2 +517 @@\n'}
[3.768391] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.768494] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.768561] (unitree_guide2) StdoutLine: {'line': b'3: +    assert(y.size() == z.size());\n'}
[3.768638] (unitree_guide2) StdoutLine: {'line': b'3: @@ -654,2 +520,3 @@\n'}
[3.768717] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.768800] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.768874] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_2darray(x);\n'}
[3.768957] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_2darray(y);\n'}
[3.769040] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * zarray = detail::get_2darray(z);\n'}
[3.769122] (unitree_guide2) StdoutLine: {'line': b'3: @@ -658 +525 @@\n'}
[3.769203] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(2);\n'}
[3.769288] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(3);\n'}
[3.769372] (unitree_guide2) StdoutLine: {'line': b'3: @@ -661,23 +528,87 @@\n'}
[3.769465] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.769554] (unitree_guide2) StdoutLine: {'line': b'3: -    // construct keyword args\n'}
[3.769642] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.769723] (unitree_guide2) StdoutLine: {'line': b'3: -    for (std::map<std::string, std::string>::const_iterator it =\n'}
[3.769799] (unitree_guide2) StdoutLine: {'line': b'3: -            keywords.begin(); it != keywords.end(); ++it) {\n'}
[3.769880] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(),\n'}
[3.769926] (unitree_guide2) StdoutLine: {'line': b'3: -                PyString_FromString(it->second.c_str()));\n'}
[3.769971] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.770015] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.770058] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(\n'}
[3.770123] (unitree_guide2) StdoutLine: {'line': b'3: -            detail::_interpreter::get().s_python_function_stem, args, kwargs);\n'}
[3.770197] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.770262] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.770307] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.770351] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res)\n'}
[3.770437] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(res);\n'}
[3.770541] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.770584] (unitree_guide2) StdoutLine: {'line': b'3: -    return res;\n'}
[3.770628] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.770672] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.770715] (unitree_guide2) StdoutLine: {'line': b'3: -template< typename Numeric >\n'}
[3.770760] (unitree_guide2) StdoutLine: {'line': b'3: -bool fill(const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::map<std::string, std::string>& keywords)\n'}
[3.770809] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.770883] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(args, 2, zarray);\n'}
[3.770967] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.771046] (unitree_guide2) StdoutLine: {'line': b'3: +    // Build up the kw args.\n'}
[3.771118] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.771189] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(kwargs, "rstride", PyInt_FromLong(1));\n'}
[3.771247] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(kwargs, "cstride", PyInt_FromLong(1));\n'}
[3.771345] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.771389] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * python_colormap_coolwarm = PyObject_GetAttrString(\n'}
[3.771434] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_colormap, "coolwarm");\n'}
[3.771478] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.771522] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(kwargs, "cmap", python_colormap_coolwarm);\n'}
[3.771577] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.771623] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.771669] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.771715] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.771777] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(\n'}
[3.771826] (unitree_guide2) StdoutLine: {'line': b'3: +        kwargs, it->first.c_str(),\n'}
[3.771872] (unitree_guide2) StdoutLine: {'line': b'3: +        PyString_FromString(it->second.c_str()));\n'}
[3.771917] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.771961] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.772006] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.772050] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * fig =\n'}
[3.772105] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_CallObject(\n'}
[3.772156] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_figure,\n'}
[3.772205] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.772250] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!fig) {throw std::runtime_error("Call to figure() failed.");}\n'}
[3.772308] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.772362] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * gca_kwargs = PyDict_New();\n'}
[3.772411] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));\n'}
[3.772457] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.772533] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * gca = PyObject_GetAttrString(fig, "gca");\n'}
[3.772578] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!gca) {throw std::runtime_error("No gca");}\n'}
[3.772624] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_INCREF(gca);\n'}
[3.772669] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * axis = PyObject_Call(\n'}
[3.772716] (unitree_guide2) StdoutLine: {'line': b'3: +      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);\n'}
[3.772795] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.772867] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!axis) {throw std::runtime_error("No axis");}\n'}
[3.772979] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_INCREF(axis);\n'}
[3.773041] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.773106] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(gca);\n'}
[3.773173] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(gca_kwargs);\n'}
[3.773240] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.773315] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_surface = PyObject_GetAttrString(axis, "plot_surface");\n'}
[3.773397] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!plot_surface) {throw std::runtime_error("No surface");}\n'}
[3.773471] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_INCREF(plot_surface);\n'}
[3.773541] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(plot_surface, args, kwargs);\n'}
[3.773621] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("failed surface");}\n'}
[3.773705] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(plot_surface);\n'}
[3.773844] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.773938] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(axis);\n'}
[3.774105] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.774184] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.774254] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.774365] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.774423] (unitree_guide2) StdoutLine: {'line': b'3: +#endif // WITHOUT_NUMPY\n'}
[3.774471] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.774516] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.774560] (unitree_guide2) StdoutLine: {'line': b'3: +  void plot3(\n'}
[3.774616] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & x,\n'}
[3.774662] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y,\n'}
[3.774707] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & z,\n'}
[3.774750] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords =\n'}
[3.774795] (unitree_guide2) StdoutLine: {'line': b'3: +    std::map < std::string, std::string > ())\n'}
[3.774840] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.774884] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.774930] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.774974] (unitree_guide2) StdoutLine: {'line': b'3: +    // Same as with plot_surface: We lazily load the modules here the first time\n'}
[3.775020] (unitree_guide2) StdoutLine: {'line': b'3: +    // this function is called because I\'m not sure that we can assume "matplotlib\n'}
[3.775341] (unitree_guide2) StdoutLine: {'line': b'3: +    // installed" implies "mpl_toolkits installed" on all platforms, and we don\'t\n'}
[3.775404] (unitree_guide2) StdoutLine: {'line': b"3: +    // want to require it for people who don't need 3d plots.\n"}
[3.775460] (unitree_guide2) StdoutLine: {'line': b'3: +    static PyObject * mpl_toolkitsmod = nullptr, * axis3dmod = nullptr;\n'}
[3.775506] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!mpl_toolkitsmod) {\n'}
[3.775551] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get();\n'}
[3.775594] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.775637] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * mpl_toolkits = PyString_FromString("mpl_toolkits");\n'}
[3.775680] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * axis3d = PyString_FromString("mpl_toolkits.mplot3d");\n'}
[3.775724] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!mpl_toolkits || !axis3d) {throw std::runtime_error("couldnt create string");}\n'}
[3.775793] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.775838] (unitree_guide2) StdoutLine: {'line': b'3: +      mpl_toolkitsmod = PyImport_Import(mpl_toolkits);\n'}
[3.775882] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(mpl_toolkits);\n'}
[3.775926] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!mpl_toolkitsmod) {throw std::runtime_error("Error loading module mpl_toolkits!");}\n'}
[3.775970] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.776013] (unitree_guide2) StdoutLine: {'line': b'3: +      axis3dmod = PyImport_Import(axis3d);\n'}
[3.776057] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(axis3d);\n'}
[3.776100] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!axis3dmod) {throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!");}\n'}
[3.776145] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.776189] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.776256] (unitree_guide2) StdoutLine: {'line': b'3: @@ -685,6 +616,5 @@\n'}
[3.776312] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.776357] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.776402] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.776447] (unitree_guide2) StdoutLine: {'line': b'3: -    // using numpy arrays\n'}
[3.776491] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.776545] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.776590] (unitree_guide2) StdoutLine: {'line': b'3: +    assert(y.size() == z.size());\n'}
[3.776635] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.776680] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.776724] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.776770] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * zarray = detail::get_array(z);\n'}
[3.776814] (unitree_guide2) StdoutLine: {'line': b'3: @@ -693 +623 @@\n'}
[3.776858] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(2);\n'}
[3.776903] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(3);\n'}
[3.776947] (unitree_guide2) StdoutLine: {'line': b'3: @@ -695,0 +626,64 @@\n'}
[3.776992] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(args, 2, zarray);\n'}
[3.777038] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.777083] (unitree_guide2) StdoutLine: {'line': b'3: +    // Build up the kw args.\n'}
[3.777129] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.777174] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.777238] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.777285] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.777331] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.777376] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(\n'}
[3.777422] (unitree_guide2) StdoutLine: {'line': b'3: +        kwargs, it->first.c_str(),\n'}
[3.777467] (unitree_guide2) StdoutLine: {'line': b'3: +        PyString_FromString(it->second.c_str()));\n'}
[3.777512] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.777557] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.777602] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * fig =\n'}
[3.777647] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_CallObject(\n'}
[3.777705] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_figure,\n'}
[3.777751] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.777798] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!fig) {throw std::runtime_error("Call to figure() failed.");}\n'}
[3.777845] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.777891] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * gca_kwargs = PyDict_New();\n'}
[3.777937] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));\n'}
[3.777986] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.778032] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * gca = PyObject_GetAttrString(fig, "gca");\n'}
[3.778078] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!gca) {throw std::runtime_error("No gca");}\n'}
[3.778123] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_INCREF(gca);\n'}
[3.778168] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * axis = PyObject_Call(\n'}
[3.778236] (unitree_guide2) StdoutLine: {'line': b'3: +      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);\n'}
[3.778286] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.778332] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!axis) {throw std::runtime_error("No axis");}\n'}
[3.778380] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_INCREF(axis);\n'}
[3.778426] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.778473] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(gca);\n'}
[3.778520] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(gca_kwargs);\n'}
[3.778567] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.778615] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot3 = PyObject_GetAttrString(axis, "plot");\n'}
[3.778674] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!plot3) {throw std::runtime_error("No 3D line plot");}\n'}
[3.778721] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_INCREF(plot3);\n'}
[3.778769] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(plot3, args, kwargs);\n'}
[3.778817] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Failed 3D line plot");}\n'}
[3.778864] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(plot3);\n'}
[3.778911] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.778958] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(axis);\n'}
[3.779005] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.779051] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.779098] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.779144] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.779211] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.779257] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.779303] (unitree_guide2) StdoutLine: {'line': b'3: +  bool stem(\n'}
[3.779348] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,\n'}
[3.779395] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords)\n'}
[3.779441] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.779488] (unitree_guide2) StdoutLine: {'line': b'3: +    assert(x.size() == y.size());\n'}
[3.779534] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.779580] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.779627] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.779673] (unitree_guide2) StdoutLine: {'line': b'3: +    // using numpy arrays\n'}
[3.779719] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.779765] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.779811] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.779857] (unitree_guide2) StdoutLine: {'line': b'3: +    // construct positional args\n'}
[3.779901] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(2);\n'}
[3.779947] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(args, 0, xarray);\n'}
[3.779990] (-) TimerEvent: {}
[3.780230] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(args, 1, yarray);\n'}
[3.780303] (unitree_guide2) StdoutLine: {'line': b'3: @@ -698 +692,41 @@\n'}
[3.780352] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.780414] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.780466] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it =\n'}
[3.780514] (unitree_guide2) StdoutLine: {'line': b'3: +      keywords.begin(); it != keywords.end(); ++it)\n'}
[3.780562] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.780609] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(\n'}
[3.780655] (unitree_guide2) StdoutLine: {'line': b'3: +        kwargs, it->first.c_str(),\n'}
[3.780702] (unitree_guide2) StdoutLine: {'line': b'3: +        PyString_FromString(it->second.c_str()));\n'}
[3.780749] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.780795] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.780841] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.780888] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_stem, args, kwargs);\n'}
[3.780935] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.780982] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.781029] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.781085] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {\n'}
[3.781140] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(res);\n'}
[3.781207] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.781257] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.781306] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[3.781355] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.781403] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.781452] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.781501] (unitree_guide2) StdoutLine: {'line': b'3: +  bool fill(\n'}
[3.781549] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,\n'}
[3.781598] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords)\n'}
[3.781647] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.781696] (unitree_guide2) StdoutLine: {'line': b'3: +    assert(x.size() == y.size());\n'}
[3.781744] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.781792] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.781842] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.781891] (unitree_guide2) StdoutLine: {'line': b'3: +    // using numpy arrays\n'}
[3.781941] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.781991] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.782041] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.782093] (unitree_guide2) StdoutLine: {'line': b'3: +    // construct positional args\n'}
[3.782167] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(2);\n'}
[3.782259] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(args, 0, xarray);\n'}
[3.782310] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(args, 1, yarray);\n'}
[3.782359] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.782407] (unitree_guide2) StdoutLine: {'line': b'3: +    // construct keyword args\n'}
[3.782455] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.782503] (unitree_guide2) StdoutLine: {'line': b'3: @@ -700,9 +734,10 @@\n'}
[3.782551] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.782600] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.782647] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.782695] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_fill, args, kwargs);\n'}
[3.782745] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.782792] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.782840] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.782887] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.782934] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.782983] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.783033] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.783084] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.783134] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.783195] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_Call(detail::_interpreter::get().s_python_function_fill, args, kwargs);\n'}
[3.783246] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.783296] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.783345] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.783392] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.783441] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.783489] (unitree_guide2) StdoutLine: {'line': b'3: @@ -711,5 +746,8 @@\n'}
[3.783556] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.783604] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.783652] (unitree_guide2) StdoutLine: {'line': b'3: -template< typename Numeric >\n'}
[3.783701] (unitree_guide2) StdoutLine: {'line': b'3: -bool fill_between(const std::vector<Numeric>& x, const std::vector<Numeric>& y1, const std::vector<Numeric>& y2, const std::map<std::string, std::string>& keywords)\n'}
[3.783770] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.783826] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.783876] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.783925] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.783975] (unitree_guide2) StdoutLine: {'line': b'3: +  bool fill_between(\n'}
[3.784046] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y1,\n'}
[3.784103] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y2, const std::map < std::string,\n'}
[3.784153] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords)\n'}
[3.784201] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.784264] (unitree_guide2) StdoutLine: {'line': b'3: @@ -722,3 +760,3 @@\n'}
[3.784315] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.784365] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* y1array = detail::get_array(y1);\n'}
[3.784415] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* y2array = detail::get_array(y2);\n'}
[3.784465] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.784515] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * y1array = detail::get_array(y1);\n'}
[3.784565] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * y2array = detail::get_array(y2);\n'}
[3.784615] (unitree_guide2) StdoutLine: {'line': b'3: @@ -727 +765 @@\n'}
[3.784664] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(3);\n'}
[3.784713] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(3);\n'}
[3.784763] (unitree_guide2) StdoutLine: {'line': b'3: @@ -733,10 +771,13 @@\n'}
[3.784813] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.784863] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it) {\n'}
[3.784914] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.784966] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.785016] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.785089] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_fill_between, args, kwargs);\n'}
[3.785166] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.785218] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.785268] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.785320] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.785370] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.785421] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.785470] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.785522] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.785572] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.785625] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.785677] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.785729] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.785779] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_fill_between, args, kwargs);\n'}
[3.785852] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.785904] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.785955] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.786012] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.786318] (unitree_guide2) StdoutLine: {'line': b'3: @@ -745,11 +786,13 @@\n'}
[3.786427] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.786477] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.786525] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename Numeric>\n'}
[3.786573] (unitree_guide2) StdoutLine: {'line': b'3: -bool arrow(Numeric x, Numeric y, Numeric end_x, Numeric end_y, const std::string& fc = "r",\n'}
[3.786622] (unitree_guide2) StdoutLine: {'line': b'3: -           const std::string ec = "k", Numeric head_length = 0.25, Numeric head_width = 0.1625) {\n'}
[3.786671] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* obj_x = PyFloat_FromDouble(x);\n'}
[3.786719] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* obj_y = PyFloat_FromDouble(y);\n'}
[3.786766] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* obj_end_x = PyFloat_FromDouble(end_x);\n'}
[3.786814] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* obj_end_y = PyFloat_FromDouble(end_y);\n'}
[3.786862] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.786910] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.786960] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.787014] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.787064] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.787113] (unitree_guide2) StdoutLine: {'line': b'3: +  bool arrow(\n'}
[3.787162] (unitree_guide2) StdoutLine: {'line': b'3: +    Numeric x, Numeric y, Numeric end_x, Numeric end_y, const std::string & fc = "r",\n'}
[3.787210] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string ec = "k", Numeric head_length = 0.25, Numeric head_width = 0.1625)\n'}
[3.787273] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.787323] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * obj_x = PyFloat_FromDouble(x);\n'}
[3.787372] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * obj_y = PyFloat_FromDouble(y);\n'}
[3.787421] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * obj_end_x = PyFloat_FromDouble(end_x);\n'}
[3.787470] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * obj_end_y = PyFloat_FromDouble(end_y);\n'}
[3.787520] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.787568] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.787618] (unitree_guide2) StdoutLine: {'line': b'3: @@ -761 +804 @@\n'}
[3.787668] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(4);\n'}
[3.787718] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(4);\n'}
[3.787768] (unitree_guide2) StdoutLine: {'line': b'3: @@ -767,2 +810,2 @@\n'}
[3.787817] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res =\n'}
[3.787867] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject_Call(detail::_interpreter::get().s_python_function_arrow, plot_args, kwargs);\n'}
[3.787918] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.787968] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_Call(detail::_interpreter::get().s_python_function_arrow, plot_args, kwargs);\n'}
[3.788026] (unitree_guide2) StdoutLine: {'line': b'3: @@ -772,2 +815,3 @@\n'}
[3.788076] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res)\n'}
[3.788126] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(res);\n'}
[3.788176] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {\n'}
[3.788225] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(res);\n'}
[3.788274] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.788342] (unitree_guide2) StdoutLine: {'line': b'3: @@ -776,11 +820,12 @@\n'}
[3.788392] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.788440] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.788490] (unitree_guide2) StdoutLine: {'line': b'3: -template< typename Numeric>\n'}
[3.788540] (unitree_guide2) StdoutLine: {'line': b'3: -bool hist(const std::vector<Numeric>& y, long bins=10,std::string color="b",\n'}
[3.788590] (unitree_guide2) StdoutLine: {'line': b'3: -          double alpha=1.0, bool cumulative=false)\n'}
[3.788642] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.788692] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.788742] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.788792] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.788842] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.788891] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.788941] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.789003] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.789052] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.789102] (unitree_guide2) StdoutLine: {'line': b'3: +  bool hist(\n'}
[3.789151] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y, long bins = 10, std::string color = "b",\n'}
[3.789201] (unitree_guide2) StdoutLine: {'line': b'3: +    double alpha = 1.0, bool cumulative = false)\n'}
[3.789250] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.789298] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.789347] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.789397] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.789446] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.789496] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.789546] (unitree_guide2) StdoutLine: {'line': b'3: @@ -792 +837 @@\n'}
[3.789595] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(1);\n'}
[3.789645] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(1);\n'}
[3.789694] (unitree_guide2) StdoutLine: {'line': b'3: @@ -797 +842,2 @@\n'}
[3.789744] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);\n'}
[3.789808] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.789859] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);\n'}
[3.789909] (unitree_guide2) StdoutLine: {'line': b'3: @@ -802 +848 @@\n'}
[3.789963] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.790017] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.790067] (unitree_guide2) StdoutLine: {'line': b'3: @@ -805 +851 @@\n'}
[3.790116] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.790165] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.790214] (unitree_guide2) StdoutLine: {'line': b'3: @@ -808,18 +854,22 @@\n'}
[3.790264] (unitree_guide2) StdoutLine: {'line': b'3: -namespace detail {\n'}
[3.790314] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.790364] (unitree_guide2) StdoutLine: {'line': b'3: -inline void imshow(void *ptr, const NPY_TYPES type, const int rows, const int columns, const int colors, const std::map<std::string, std::string> &keywords, PyObject** out)\n'}
[3.790417] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.790467] (unitree_guide2) StdoutLine: {'line': b'3: -    assert(type == NPY_UINT8 || type == NPY_FLOAT);\n'}
[3.790517] (unitree_guide2) StdoutLine: {'line': b'3: -    assert(colors == 1 || colors == 3 || colors == 4);\n'}
[3.790567] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.790616] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.790677] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.790726] (unitree_guide2) StdoutLine: {'line': b'3: -    // construct args\n'}
[3.790776] (unitree_guide2) StdoutLine: {'line': b'3: -    npy_intp dims[3] = { rows, columns, colors };\n'}
[3.790825] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *args = PyTuple_New(1);\n'}
[3.790874] (unitree_guide2) StdoutLine: {'line': b'3: -    PyTuple_SetItem(args, 0, PyArray_SimpleNewFromData(colors == 1 ? 2 : 3, dims, type, ptr));\n'}
[3.790934] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.790984] (unitree_guide2) StdoutLine: {'line': b'3: -    // construct keyword args\n'}
[3.791035] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.792211] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.792304] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.792367] (unitree_guide2) StdoutLine: {'line': b'3: +  namespace detail {\n'}
[3.792419] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.792470] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void imshow(\n'}
[3.792521] (unitree_guide2) StdoutLine: {'line': b'3: +      void * ptr, const NPY_TYPES type, const int rows, const int columns,\n'}
[3.792571] (unitree_guide2) StdoutLine: {'line': b'3: +      const int colors, const std::map < std::string, std::string > & keywords,\n'}
[3.792622] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject ** out)\n'}
[3.792671] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.792720] (unitree_guide2) StdoutLine: {'line': b'3: +      assert(type == NPY_UINT8 || type == NPY_FLOAT);\n'}
[3.792769] (unitree_guide2) StdoutLine: {'line': b'3: +      assert(colors == 1 || colors == 3 || colors == 4);\n'}
[3.792818] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.792874] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get();\n'}
[3.792992] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.793052] (unitree_guide2) StdoutLine: {'line': b'3: +      // construct args\n'}
[3.793103] (unitree_guide2) StdoutLine: {'line': b'3: +      npy_intp dims[3] = {rows, columns, colors};\n'}
[3.793153] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * args = PyTuple_New(1);\n'}
[3.793203] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 0, PyArray_SimpleNewFromData(colors == 1 ? 2 : 3, dims, type, ptr));\n'}
[3.793254] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.793303] (unitree_guide2) StdoutLine: {'line': b'3: +      // construct keyword args\n'}
[3.793354] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * kwargs = PyDict_New();\n'}
[3.793404] (unitree_guide2) StdoutLine: {'line': b'3: +      for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.793455] (unitree_guide2) StdoutLine: {'line': b'3: +        it != keywords.end(); ++it)\n'}
[3.793505] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.793555] (unitree_guide2) StdoutLine: {'line': b'3: @@ -827,6 +877,7 @@\n'}
[3.793605] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.793655] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.793706] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_Call(detail::_interpreter::get().s_python_function_imshow, args, kwargs);\n'}
[3.793758] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.793808] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.793865] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res)\n'}
[3.793915] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.793964] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.794013] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * res = PyObject_Call(\n'}
[3.794063] (unitree_guide2) StdoutLine: {'line': b'3: +        detail::_interpreter::get().s_python_function_imshow, args, kwargs);\n'}
[3.794114] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(args);\n'}
[3.794184] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(kwargs);\n'}
[3.794295] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!res) {\n'}
[3.794385] (unitree_guide2) StdoutLine: {'line': b'3: @@ -834 +885,2 @@\n'}
[3.794436] (unitree_guide2) StdoutLine: {'line': b'3: -    if (out)\n'}
[3.794490] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.794549] (unitree_guide2) StdoutLine: {'line': b'3: +      if (out) {\n'}
[3.794609] (unitree_guide2) StdoutLine: {'line': b'3: @@ -836 +888 @@\n'}
[3.794664] (unitree_guide2) StdoutLine: {'line': b'3: -    else\n'}
[3.794717] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[3.794771] (unitree_guide2) StdoutLine: {'line': b'3: @@ -838,6 +890,10 @@\n'}
[3.794846] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.794907] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.794957] (unitree_guide2) StdoutLine: {'line': b'3: -} // namespace detail\n'}
[3.795006] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.795055] (unitree_guide2) StdoutLine: {'line': b'3: -inline void imshow(const unsigned char *ptr, const int rows, const int columns, const int colors, const std::map<std::string, std::string> &keywords = {}, PyObject** out = nullptr)\n'}
[3.795108] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.795216] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.795266] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.795316] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.795365] (unitree_guide2) StdoutLine: {'line': b'3: +  } // namespace detail\n'}
[3.795414] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.795463] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void imshow(\n'}
[3.795513] (unitree_guide2) StdoutLine: {'line': b'3: +    const unsigned char * ptr, const int rows, const int columns, const int colors,\n'}
[3.795564] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {},\n'}
[3.795614] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject ** out = nullptr)\n'}
[3.795666] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.795715] (unitree_guide2) StdoutLine: {'line': b'3: @@ -845,4 +901,7 @@\n'}
[3.795765] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.795821] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.795870] (unitree_guide2) StdoutLine: {'line': b'3: -inline void imshow(const float *ptr, const int rows, const int columns, const int colors, const std::map<std::string, std::string> &keywords = {}, PyObject** out = nullptr)\n'}
[3.795922] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.795971] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.796020] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.796069] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void imshow(\n'}
[3.796119] (unitree_guide2) StdoutLine: {'line': b'3: +    const float * ptr, const int rows, const int columns, const int colors,\n'}
[3.796171] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {},\n'}
[3.796236] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject ** out = nullptr)\n'}
[3.796287] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.796337] (unitree_guide2) StdoutLine: {'line': b'3: @@ -850 +909 @@\n'}
[3.796387] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.796438] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.796487] (unitree_guide2) StdoutLine: {'line': b'3: @@ -853,2 +912,2 @@\n'}
[3.796536] (unitree_guide2) StdoutLine: {'line': b'3: -void imshow(const cv::Mat &image, const std::map<std::string, std::string> &keywords = {})\n'}
[3.796586] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.796635] (unitree_guide2) StdoutLine: {'line': b'3: +  void imshow(const cv::Mat & image, const std::map < std::string, std::string > & keywords = {})\n'}
[3.796684] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.796734] (unitree_guide2) StdoutLine: {'line': b'3: @@ -859 +918 @@\n'}
[3.796796] (unitree_guide2) StdoutLine: {'line': b'3: -    case CV_8U:\n'}
[3.796846] (unitree_guide2) StdoutLine: {'line': b'3: +      case CV_8U:\n'}
[3.796896] (unitree_guide2) StdoutLine: {'line': b'3: @@ -862 +921 @@\n'}
[3.796945] (unitree_guide2) StdoutLine: {'line': b'3: -    case CV_32F:\n'}
[3.796995] (unitree_guide2) StdoutLine: {'line': b'3: +      case CV_32F:\n'}
[3.797044] (unitree_guide2) StdoutLine: {'line': b'3: @@ -866 +925 @@\n'}
[3.797094] (unitree_guide2) StdoutLine: {'line': b'3: -    default:\n'}
[3.797143] (unitree_guide2) StdoutLine: {'line': b'3: +      default:\n'}
[3.797192] (unitree_guide2) StdoutLine: {'line': b'3: @@ -872 +931 @@\n'}
[3.797255] (unitree_guide2) StdoutLine: {'line': b'3: -    case 3:\n'}
[3.797303] (unitree_guide2) StdoutLine: {'line': b'3: +      case 3:\n'}
[3.797352] (unitree_guide2) StdoutLine: {'line': b'3: @@ -875 +934 @@\n'}
[3.797399] (unitree_guide2) StdoutLine: {'line': b'3: -    case 4:\n'}
[3.797446] (unitree_guide2) StdoutLine: {'line': b'3: +      case 4:\n'}
[3.797493] (unitree_guide2) StdoutLine: {'line': b'3: @@ -880 +939 @@\n'}
[3.797551] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.797599] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.797646] (unitree_guide2) StdoutLine: {'line': b'3: @@ -884,6 +943,7 @@\n'}
[3.797693] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY>\n'}
[3.797746] (unitree_guide2) StdoutLine: {'line': b'3: -bool scatter(const std::vector<NumericX>& x,\n'}
[3.797797] (unitree_guide2) StdoutLine: {'line': b'3: -             const std::vector<NumericY>& y,\n'}
[3.797845] (unitree_guide2) StdoutLine: {'line': b'3: -             const double s=1.0, // The marker size in points**2\n'}
[3.797893] (unitree_guide2) StdoutLine: {'line': b'3: -             const std::map<std::string, std::string> & keywords = {})\n'}
[3.797942] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.797990] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY >\n'}
[3.798038] (unitree_guide2) StdoutLine: {'line': b'3: +  bool scatter(\n'}
[3.798087] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x,\n'}
[3.798135] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericY > & y,\n'}
[3.798202] (unitree_guide2) StdoutLine: {'line': b'3: +    const double s = 1.0,        // The marker size in points**2\n'}
[3.798253] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.798303] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.798352] (unitree_guide2) StdoutLine: {'line': b'3: @@ -894,4 +954,4 @@\n'}
[3.798401] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.798450] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.798499] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.798548] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.798596] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.798645] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.798694] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.798748] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.798798] (unitree_guide2) StdoutLine: {'line': b'3: @@ -899,6 +959,5 @@\n'}
[3.798848] (unitree_guide2) StdoutLine: {'line': b'3: -    for (const auto& it : keywords)\n'}
[3.798899] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.798949] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));\n'}
[3.799001] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.799051] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.799101] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(2);\n'}
[3.799151] (unitree_guide2) StdoutLine: {'line': b'3: +    for (const auto & it : keywords) {\n'}
[3.799210] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));\n'}
[3.799261] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.799310] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.799360] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(2);\n'}
[3.799410] (unitree_guide2) StdoutLine: {'line': b'3: @@ -908 +967,2 @@\n'}
[3.799460] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_scatter, plot_args, kwargs);\n'}
[3.799510] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.799559] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_scatter, plot_args, kwargs);\n'}
[3.799610] (unitree_guide2) StdoutLine: {'line': b'3: @@ -912 +972 @@\n'}
[3.799661] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.799722] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.799774] (unitree_guide2) StdoutLine: {'line': b'3: @@ -915,11 +975,12 @@\n'}
[3.799824] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.799874] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.799924] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.799974] (unitree_guide2) StdoutLine: {'line': b'3: -bool boxplot(const std::vector<std::vector<Numeric>>& data,\n'}
[3.800024] (unitree_guide2) StdoutLine: {'line': b'3: -             const std::vector<std::string>& labels = {},\n'}
[3.800074] (unitree_guide2) StdoutLine: {'line': b'3: -             const std::map<std::string, std::string> & keywords = {})\n'}
[3.800123] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.800172] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.800221] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.800270] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* listlist = detail::get_listlist(data);\n'}
[3.800319] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.800369] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.800420] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.800469] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.800519] (unitree_guide2) StdoutLine: {'line': b'3: +  bool boxplot(\n'}
[3.800569] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < std::vector < Numeric >> & data,\n'}
[3.800619] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < std::string > & labels = {},\n'}
[3.800670] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.800723] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.800774] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.800825] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.800875] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * listlist = detail::get_listlist(data);\n'}
[3.800924] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.800973] (unitree_guide2) StdoutLine: {'line': b'3: @@ -928 +989 @@\n'}
[3.801023] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.801082] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.801132] (unitree_guide2) StdoutLine: {'line': b'3: @@ -932 +993 @@\n'}
[3.801181] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, "labels", detail::get_array(labels));\n'}
[3.801242] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, "labels", detail::get_array(labels));\n'}
[3.801293] (unitree_guide2) StdoutLine: {'line': b'3: @@ -936,11 +997,11 @@\n'}
[3.801342] (unitree_guide2) StdoutLine: {'line': b'3: -    for (const auto& it : keywords)\n'}
[3.801404] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.801454] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));\n'}
[3.801506] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.801557] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.801606] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_boxplot, args, kwargs);\n'}
[3.801657] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.801707] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.801757] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.801807] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.801856] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.801906] (unitree_guide2) StdoutLine: {'line': b'3: +    for (const auto & it : keywords) {\n'}
[3.801957] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));\n'}
[3.802007] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.802057] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.802106] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.802155] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_boxplot, args, kwargs);\n'}
[3.802227] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.802277] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.802327] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.802376] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.802425] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.802474] (unitree_guide2) StdoutLine: {'line': b'3: @@ -949,10 +1010,11 @@\n'}
[3.802523] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.802571] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.802620] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.802671] (unitree_guide2) StdoutLine: {'line': b'3: -bool boxplot(const std::vector<Numeric>& data,\n'}
[3.802720] (unitree_guide2) StdoutLine: {'line': b'3: -             const std::map<std::string, std::string> & keywords = {})\n'}
[3.802768] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.802817] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.802865] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.802914] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* vector = detail::get_array(data);\n'}
[3.802962] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.803011] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.803061] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.803118] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.803178] (unitree_guide2) StdoutLine: {'line': b'3: +  bool boxplot(\n'}
[3.803249] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & data,\n'}
[3.803303] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.803375] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.803427] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.803477] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.803528] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * vector = detail::get_array(data);\n'}
[3.803580] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.803629] (unitree_guide2) StdoutLine: {'line': b'3: @@ -961,12 +1023,12 @@\n'}
[3.803680] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.803729] (unitree_guide2) StdoutLine: {'line': b'3: -    for (const auto& it : keywords)\n'}
[3.803779] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.803829] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));\n'}
[3.803888] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.803937] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.803986] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_boxplot, args, kwargs);\n'}
[3.804036] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.804085] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.804134] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.804184] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.804246] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.804305] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.804354] (unitree_guide2) StdoutLine: {'line': b'3: +    for (const auto & it : keywords) {\n'}
[3.804404] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));\n'}
[3.804453] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.804502] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.804551] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.804609] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_boxplot, args, kwargs);\n'}
[3.804665] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.804714] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.804762] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.804811] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.804858] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.804906] (unitree_guide2) StdoutLine: {'line': b'3: @@ -975,67 +1037,17 @@\n'}
[3.804953] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.805001] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.805048] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename Numeric>\n'}
[3.805097] (unitree_guide2) StdoutLine: {'line': b'3: -bool bar(const std::vector<Numeric> &               x,\n'}
[3.805146] (unitree_guide2) StdoutLine: {'line': b'3: -         const std::vector<Numeric> &               y,\n'}
[3.805195] (unitree_guide2) StdoutLine: {'line': b'3: -         std::string                                ec       = "black",\n'}
[3.805257] (unitree_guide2) StdoutLine: {'line': b'3: -         std::string                                ls       = "-",\n'}
[3.805305] (unitree_guide2) StdoutLine: {'line': b'3: -         double                                     lw       = 1.0,\n'}
[3.805352] (unitree_guide2) StdoutLine: {'line': b'3: -         const std::map<std::string, std::string> & keywords = {})\n'}
[3.805400] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.805447] (unitree_guide2) StdoutLine: {'line': b'3: -  detail::_interpreter::get();\n'}
[3.805494] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.805540] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject * xarray = detail::get_array(x);\n'}
[3.805588] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject * yarray = detail::get_array(y);\n'}
[3.805644] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.805692] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject * kwargs = PyDict_New();\n'}
[3.805738] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.805785] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(kwargs, "ec", PyString_FromString(ec.c_str()));\n'}
[3.805845] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(kwargs, "ls", PyString_FromString(ls.c_str()));\n'}
[3.805892] (unitree_guide2) StdoutLine: {'line': b'3: -  PyDict_SetItemString(kwargs, "lw", PyFloat_FromDouble(lw));\n'}
[3.805940] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.805987] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::map<std::string, std::string>::const_iterator it =\n'}
[3.806036] (unitree_guide2) StdoutLine: {'line': b'3: -         keywords.begin();\n'}
[3.806089] (unitree_guide2) StdoutLine: {'line': b'3: -       it != keywords.end();\n'}
[3.806144] (unitree_guide2) StdoutLine: {'line': b'3: -       ++it) {\n'}
[3.806192] (unitree_guide2) StdoutLine: {'line': b'3: -    PyDict_SetItemString(\n'}
[3.806239] (unitree_guide2) StdoutLine: {'line': b'3: -      kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.806299] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.806344] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.806389] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject * plot_args = PyTuple_New(2);\n'}
[3.806437] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(plot_args, 0, xarray);\n'}
[3.806490] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(plot_args, 1, yarray);\n'}
[3.806541] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.806591] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject * res = PyObject_Call(\n'}
[3.806636] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get().s_python_function_bar, plot_args, kwargs);\n'}
[3.806683] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.806729] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(plot_args);\n'}
[3.806775] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(kwargs);\n'}
[3.806821] (unitree_guide2) StdoutLine: {'line': b'3: -  if (res) Py_DECREF(res);\n'}
[3.806867] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.806913] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[3.806959] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.807004] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.807062] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename Numeric>\n'}
[3.815041] (unitree_guide2) StdoutLine: {'line': b'3: -bool bar(const std::vector<Numeric> &               y,\n'}
[3.815124] (unitree_guide2) StdoutLine: {'line': b'3: -         std::string                                ec       = "black",\n'}
[3.815178] (unitree_guide2) StdoutLine: {'line': b'3: -         std::string                                ls       = "-",\n'}
[3.815243] (unitree_guide2) StdoutLine: {'line': b'3: -         double                                     lw       = 1.0,\n'}
[3.815293] (unitree_guide2) StdoutLine: {'line': b'3: -         const std::map<std::string, std::string> & keywords = {})\n'}
[3.815342] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.815390] (unitree_guide2) StdoutLine: {'line': b'3: -  using T = typename std::remove_reference<decltype(y)>::type::value_type;\n'}
[3.815439] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.815488] (unitree_guide2) StdoutLine: {'line': b'3: -  detail::_interpreter::get();\n'}
[3.815537] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.815586] (unitree_guide2) StdoutLine: {'line': b'3: -  std::vector<T> x;\n'}
[3.815636] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::size_t i = 0; i < y.size(); i++) { x.push_back(i); }\n'}
[3.815685] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.815741] (unitree_guide2) StdoutLine: {'line': b'3: -  return bar(x, y, ec, ls, lw, keywords);\n'}
[3.815845] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.815897] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.815944] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.815991] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.816038] (unitree_guide2) StdoutLine: {'line': b'3: -bool barh(const std::vector<Numeric> &x, const std::vector<Numeric> &y, std::string ec = "black", std::string ls = "-", double lw = 1.0, const std::map<std::string, std::string> &keywords = { }) {\n'}
[3.816088] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *xarray = detail::get_array(x);\n'}
[3.816136] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *yarray = detail::get_array(y);\n'}
[3.816183] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.816229] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *kwargs = PyDict_New();\n'}
[3.816308] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.816357] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.816406] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.816456] (unitree_guide2) StdoutLine: {'line': b'3: +  bool bar(\n'}
[3.816506] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & x,\n'}
[3.816555] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y,\n'}
[3.816604] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string ec = "black",\n'}
[3.816654] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string ls = "-",\n'}
[3.816712] (unitree_guide2) StdoutLine: {'line': b'3: +    double lw = 1.0,\n'}
[3.816761] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.816811] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.816860] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.816909] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.816957] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.817004] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.817051] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.817098] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.817160] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1047,5 +1059,10 @@\n'}
[3.817224] (unitree_guide2) StdoutLine: {'line': b'3: -    for (std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it) {\n'}
[3.817275] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.817325] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.817375] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.817424] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *plot_args = PyTuple_New(2);\n'}
[3.817474] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it =\n'}
[3.817525] (unitree_guide2) StdoutLine: {'line': b'3: +      keywords.begin();\n'}
[3.817575] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end();\n'}
[3.817624] (unitree_guide2) StdoutLine: {'line': b'3: +      ++it)\n'}
[3.817681] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.817732] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(\n'}
[3.817781] (unitree_guide2) StdoutLine: {'line': b'3: +        kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.817831] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.817880] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.817929] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(2);\n'}
[3.817978] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1055 +1072,2 @@\n'}
[3.818028] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_Call(detail::_interpreter::get().s_python_function_barh, plot_args, kwargs);\n'}
[3.818079] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.818128] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_bar, plot_args, kwargs);\n'}
[3.818178] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1059 +1077 @@\n'}
[3.818242] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.818302] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.818355] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1062,18 +1080,50 @@\n'}
[3.818409] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.818463] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.818515] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.818566] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool subplots_adjust(const std::map<std::string, double>& keywords = {})\n'}
[3.818626] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.818682] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.818733] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.818784] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.818834] (unitree_guide2) StdoutLine: {'line': b'3: -    for (std::map<std::string, double>::const_iterator it =\n'}
[3.818886] (unitree_guide2) StdoutLine: {'line': b'3: -            keywords.begin(); it != keywords.end(); ++it) {\n'}
[3.818937] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(),\n'}
[3.818989] (unitree_guide2) StdoutLine: {'line': b'3: -                             PyFloat_FromDouble(it->second));\n'}
[3.819040] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.819093] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.819145] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.819196] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(0);\n'}
[3.819262] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.819311] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_subplots_adjust, plot_args, kwargs);\n'}
[3.819361] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.819411] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.819460] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.819509] (unitree_guide2) StdoutLine: {'line': b'3: +  bool bar(\n'}
[3.819559] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y,\n'}
[3.819609] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string ec = "black",\n'}
[3.819661] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string ls = "-",\n'}
[3.819711] (unitree_guide2) StdoutLine: {'line': b'3: +    double lw = 1.0,\n'}
[3.819761] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.819811] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.819861] (unitree_guide2) StdoutLine: {'line': b'3: +    using T = typename std::remove_reference < decltype(y) > ::type::value_type;\n'}
[3.819911] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.819962] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.820012] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.820062] (unitree_guide2) StdoutLine: {'line': b'3: +    std::vector < T > x;\n'}
[3.820114] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::size_t i = 0; i < y.size(); i++) {\n'}
[3.820165] (unitree_guide2) StdoutLine: {'line': b'3: +      x.push_back(i);\n'}
[3.820229] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.820280] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.820332] (unitree_guide2) StdoutLine: {'line': b'3: +    return bar(x, y, ec, ls, lw, keywords);\n'}
[3.820383] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.820434] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.820484] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.820534] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.820586] (unitree_guide2) StdoutLine: {'line': b'3: +  bool barh(\n'}
[3.820640] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,\n'}
[3.820692] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string ec = "black", std::string ls = "-", double lw = 1.0,\n'}
[3.820745] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.820797] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.820849] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.820901] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.820952] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.821003] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.821067] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.821119] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(kwargs, "ec", PyString_FromString(ec.c_str()));\n'}
[3.821171] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(kwargs, "ls", PyString_FromString(ls.c_str()));\n'}
[3.821222] (unitree_guide2) StdoutLine: {'line': b'3: +    PyDict_SetItemString(kwargs, "lw", PyFloat_FromDouble(lw));\n'}
[3.821273] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.821324] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.821376] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.821427] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.821478] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.821529] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.821585] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.821637] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(2);\n'}
[3.821689] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(plot_args, 0, xarray);\n'}
[3.821741] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(plot_args, 1, yarray);\n'}
[3.821792] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.821843] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.821894] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_barh, plot_args, kwargs);\n'}
[3.821946] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1083 +1133 @@\n'}
[3.821998] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.822048] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.822099] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1086,10 +1136,39 @@\n'}
[3.822149] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.822212] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.822260] (unitree_guide2) StdoutLine: {'line': b'3: -template< typename Numeric>\n'}
[3.822310] (unitree_guide2) StdoutLine: {'line': b'3: -bool named_hist(std::string label,const std::vector<Numeric>& y, long bins=10, std::string color="b", double alpha=1.0)\n'}
[3.822359] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.822409] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.822459] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.822508] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.822566] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.822618] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.822667] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.822717] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.822767] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.822816] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool subplots_adjust(const std::map < std::string, double > & keywords = {})\n'}
[3.822867] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.822916] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.822965] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.823013] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.823063] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, double > ::const_iterator it =\n'}
[3.833817] (unitree_guide2) StdoutLine: {'line': b'3: +      keywords.begin(); it != keywords.end(); ++it)\n'}
[3.834036] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.834344] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(\n'}
[3.834427] (unitree_guide2) StdoutLine: {'line': b'3: +        kwargs, it->first.c_str(),\n'}
[3.834480] (unitree_guide2) StdoutLine: {'line': b'3: +        PyFloat_FromDouble(it->second));\n'}
[3.834545] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.834593] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.834641] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.834689] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(0);\n'}
[3.834737] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.834785] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.834833] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_subplots_adjust, plot_args, kwargs);\n'}
[3.834884] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.834931] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(plot_args);\n'}
[3.834977] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.835023] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.835070] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.835118] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[3.835165] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.835212] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.835286] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.835532] (unitree_guide2) StdoutLine: {'line': b'3: +  bool named_hist(\n'}
[3.835606] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string label, const std::vector < Numeric > & y, long bins = 10,\n'}
[3.835655] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string color = "b", double alpha = 1.0)\n'}
[3.835701] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.835748] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.835794] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.835840] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.835886] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.835932] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.835978] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1102 +1181 @@\n'}
[3.836024] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(1);\n'}
[3.836071] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(1);\n'}
[3.836117] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1105 +1184,2 @@\n'}
[3.836163] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);\n'}
[3.836214] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.836401] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);\n'}
[3.836552] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1109 +1189 @@\n'}
[3.836605] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.836650] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.836694] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1112,5 +1192,7 @@\n'}
[3.836738] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.836781] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.836825] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY>\n'}
[3.836871] (unitree_guide2) StdoutLine: {'line': b'3: -bool plot(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")\n'}
[3.836920] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.836963] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.837007] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.837051] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY >\n'}
[3.837095] (unitree_guide2) StdoutLine: {'line': b'3: +  bool plot(\n'}
[3.837139] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.837186] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & s = "")\n'}
[3.837279] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.837326] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1121,6 +1203,6 @@\n'}
[3.837371] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.837416] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.837461] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.837505] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(s.c_str());\n'}
[3.837550] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.837595] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.837639] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.837684] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.837728] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.837774] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(s.c_str());\n'}
[3.837819] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.837863] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.837907] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1131 +1213,2 @@\n'}
[3.837952] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_plot, plot_args);\n'}
[3.837998] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.838042] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_plot, plot_args);\n'}
[3.838087] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1134 +1217 @@\n'}
[3.838131] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.838183] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.838244] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1137,6 +1220,8 @@\n'}
[3.838289] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.838334] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.838379] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename NumericX, typename NumericY, typename NumericZ>\n'}
[3.838425] (unitree_guide2) StdoutLine: {'line': b'3: -bool contour(const std::vector<NumericX>& x, const std::vector<NumericY>& y,\n'}
[3.838470] (unitree_guide2) StdoutLine: {'line': b'3: -             const std::vector<NumericZ>& z,\n'}
[3.838516] (unitree_guide2) StdoutLine: {'line': b'3: -             const std::map<std::string, std::string>& keywords = {}) {\n'}
[3.838562] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.838850] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.838962] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY, typename NumericZ >\n'}
[3.839012] (unitree_guide2) StdoutLine: {'line': b'3: +  bool contour(\n'}
[3.839059] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.839143] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericZ > & z,\n'}
[3.839278] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.839330] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.839376] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1145,5 +1230,5 @@\n'}
[3.839422] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = get_array(x);\n'}
[3.839467] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = get_array(y);\n'}
[3.839512] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* zarray = get_array(z);\n'}
[3.839557] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.839601] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.839670] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = get_array(x);\n'}
[3.839722] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = get_array(y);\n'}
[3.839767] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * zarray = get_array(z);\n'}
[3.839812] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.839856] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.839900] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1155,8 +1240,9 @@\n'}
[3.839945] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.839990] (unitree_guide2) StdoutLine: {'line': b'3: -    for (std::map<std::string, std::string>::const_iterator it = keywords.begin();\n'}
[3.840036] (unitree_guide2) StdoutLine: {'line': b'3: -         it != keywords.end(); ++it) {\n'}
[3.840082] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.840135] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.840182] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.840227] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res =\n'}
[3.840286] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject_Call(detail::_interpreter::get().s_python_function_contour, plot_args, kwargs);\n'}
[3.840332] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.840390] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.840741] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.840801] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.840852] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.840905] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.840955] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.841004] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.841054] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_Call(detail::_interpreter::get().s_python_function_contour, plot_args, kwargs);\n'}
[3.841114] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1166,2 +1252,3 @@\n'}
[3.841241] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res)\n'}
[3.841333] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(res);\n'}
[3.841403] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {\n'}
[3.841466] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(res);\n'}
[3.841537] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.841636] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1170,5 +1257,8 @@\n'}
[3.841705] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.841763] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.841849] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY, typename NumericU, typename NumericW>\n'}
[3.841923] (unitree_guide2) StdoutLine: {'line': b'3: -bool quiver(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::vector<NumericU>& u, const std::vector<NumericW>& w, const std::map<std::string, std::string>& keywords = {})\n'}
[3.842015] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.842089] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.842267] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.842343] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY, typename NumericU, typename NumericW >\n'}
[3.842412] (unitree_guide2) StdoutLine: {'line': b'3: +  bool quiver(\n'}
[3.842481] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.842550] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericU > & u, const std::vector < NumericW > & w,\n'}
[3.842619] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords = {})\n'}
[3.842691] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.842811] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1179,6 +1269,6 @@\n'}
[3.842881] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.842953] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.843025] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* uarray = detail::get_array(u);\n'}
[3.843176] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* warray = detail::get_array(w);\n'}
[3.843342] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.843418] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(4);\n'}
[3.843485] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.843554] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.843621] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * uarray = detail::get_array(u);\n'}
[3.843687] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * warray = detail::get_array(w);\n'}
[3.843755] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.843825] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(4);\n'}
[3.843893] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1191,8 +1281,9 @@\n'}
[3.843966] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.844048] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.844132] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.844206] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.844295] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.844487] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.844572] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(\n'}
[3.844649] (unitree_guide2) StdoutLine: {'line': b'3: -            detail::_interpreter::get().s_python_function_quiver, plot_args, kwargs);\n'}
[3.844731] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.844813] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.844895] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.844976] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.845057] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.845138] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.845228] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.845313] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.845394] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_quiver, plot_args, kwargs);\n'}
[3.845545] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1202,2 +1293,3 @@\n'}
[3.845665] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res)\n'}
[3.845750] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(res);\n'}
[3.845833] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {\n'}
[3.845915] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(res);\n'}
[3.846000] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.846083] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1206,5 +1298,7 @@\n'}
[3.846192] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.846290] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.846375] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY>\n'}
[3.846461] (unitree_guide2) StdoutLine: {'line': b'3: -bool stem(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")\n'}
[3.846544] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.846649] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.846732] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.846811] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY >\n'}
[3.846901] (unitree_guide2) StdoutLine: {'line': b'3: +  bool stem(\n'}
[3.846984] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.847072] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & s = "")\n'}
[3.847155] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.847255] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1215,6 +1309,6 @@\n'}
[3.847340] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.847424] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.847508] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.847592] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(s.c_str());\n'}
[3.847679] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.847763] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.847848] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.847935] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.848023] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.848111] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(s.c_str());\n'}
[3.848198] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.848303] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.848391] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1225,2 +1319,2 @@\n'}
[3.848483] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(\n'}
[3.848575] (unitree_guide2) StdoutLine: {'line': b'3: -            detail::_interpreter::get().s_python_function_stem, plot_args);\n'}
[3.848668] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.848759] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_stem, plot_args);\n'}
[3.848852] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1229,2 +1323,3 @@\n'}
[3.848942] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res)\n'}
[3.849034] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(res);\n'}
[3.849126] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {\n'}
[3.849215] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(res);\n'}
[3.849305] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.849394] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1233,5 +1328,7 @@\n'}
[3.849485] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.849575] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.849661] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY>\n'}
[3.849751] (unitree_guide2) StdoutLine: {'line': b'3: -bool semilogx(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")\n'}
[3.849872] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.849959] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.850044] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.850131] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY >\n'}
[3.850235] (unitree_guide2) StdoutLine: {'line': b'3: +  bool semilogx(\n'}
[3.850321] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.850410] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & s = "")\n'}
[3.850500] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.850591] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1242,6 +1339,6 @@\n'}
[3.850681] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.850783] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.850870] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.850955] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(s.c_str());\n'}
[3.851043] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.851131] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.851219] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.851323] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.851414] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.851500] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(s.c_str());\n'}
[3.851590] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.851677] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.851775] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1252 +1349,2 @@\n'}
[3.851856] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_semilogx, plot_args);\n'}
[3.851944] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.852026] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_semilogx, plot_args);\n'}
[3.852104] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1255 +1353 @@\n'}
[3.852184] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.852280] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.852376] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1258,5 +1356,7 @@\n'}
[3.852463] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.852543] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.852620] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY>\n'}
[3.852703] (unitree_guide2) StdoutLine: {'line': b'3: -bool semilogy(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")\n'}
[3.852797] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.852883] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.852965] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.853057] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY >\n'}
[3.853157] (unitree_guide2) StdoutLine: {'line': b'3: +  bool semilogy(\n'}
[3.853254] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.853377] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & s = "")\n'}
[3.853483] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.853586] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1267,6 +1367,6 @@\n'}
[3.853705] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.854244] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.855414] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.855977] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(s.c_str());\n'}
[3.856135] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.856226] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.856331] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.856420] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.856511] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.856604] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(s.c_str());\n'}
[3.856719] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.856817] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.856908] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1277 +1377,2 @@\n'}
[3.857012] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_semilogy, plot_args);\n'}
[3.857104] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.857191] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_semilogy, plot_args);\n'}
[3.857278] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1280 +1381 @@\n'}
[3.857364] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.857444] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.857528] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1283,5 +1384,7 @@\n'}
[3.857619] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.857708] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.858036] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY>\n'}
[3.858152] (unitree_guide2) StdoutLine: {'line': b'3: -bool loglog(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")\n'}
[3.858249] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.858349] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.858436] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.858522] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY >\n'}
[3.858609] (unitree_guide2) StdoutLine: {'line': b'3: +  bool loglog(\n'}
[3.858693] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.858777] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & s = "")\n'}
[3.858860] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.858942] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1292,6 +1395,6 @@\n'}
[3.859029] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.859115] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.859198] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.859272] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(s.c_str());\n'}
[3.859353] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.859414] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.859465] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.859515] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.859564] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.859613] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(s.c_str());\n'}
[3.859661] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.859710] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.859761] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1302 +1405,2 @@\n'}
[3.859810] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_loglog, plot_args);\n'}
[3.859861] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.859910] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_loglog, plot_args);\n'}
[3.859962] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1305 +1409 @@\n'}
[3.860021] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.860074] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.860123] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1308,5 +1412,8 @@\n'}
[3.860172] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.860234] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.860285] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename NumericX, typename NumericY>\n'}
[3.860335] (unitree_guide2) StdoutLine: {'line': b'3: -bool errorbar(const std::vector<NumericX> &x, const std::vector<NumericY> &y, const std::vector<NumericX> &yerr, const std::map<std::string, std::string> &keywords = {})\n'}
[3.860408] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.860459] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.860509] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.860559] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename NumericX, typename NumericY >\n'}
[3.860610] (unitree_guide2) StdoutLine: {'line': b'3: +  bool errorbar(\n'}
[3.860661] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,\n'}
[3.860713] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < NumericX > & yerr, const std::map < std::string,\n'}
[3.860765] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.860816] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.860866] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1317,3 +1424,3 @@\n'}
[3.860917] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.860986] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.861063] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yerrarray = detail::get_array(yerr);\n'}
[3.861118] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.861170] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.861220] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yerrarray = detail::get_array(yerr);\n'}
[3.861271] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1322,4 +1429,5 @@\n'}
[3.861321] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.861372] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.861426] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.861477] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.861528] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.861578] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.861629] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.861679] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.861729] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.861780] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1330 +1438 @@\n'}
[3.861830] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *plot_args = PyTuple_New(2);\n'}
[3.861880] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(2);\n'}
[3.861936] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1334 +1442,2 @@\n'}
[3.862083] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_Call(detail::_interpreter::get().s_python_function_errorbar, plot_args, kwargs);\n'}
[3.862185] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.862249] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_errorbar, plot_args, kwargs);\n'}
[3.862303] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1339,4 +1448,5 @@\n'}
[3.862354] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res)\n'}
[3.862405] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(res);\n'}
[3.862455] (unitree_guide2) StdoutLine: {'line': b'3: -    else\n'}
[3.862505] (unitree_guide2) StdoutLine: {'line': b'3: -        throw std::runtime_error("Call to errorbar() failed.");\n'}
[3.862557] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {\n'}
[3.862606] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(res);\n'}
[3.862666] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[3.862718] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::runtime_error("Call to errorbar() failed.");\n'}
[3.862769] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.862820] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1345,8 +1455,10 @@\n'}
[3.862871] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.862928] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.862980] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.863032] (unitree_guide2) StdoutLine: {'line': b'3: -bool named_plot(const std::string& name, const std::vector<Numeric>& y, const std::string& format = "")\n'}
[3.863085] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.863136] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.863187] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.863237] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.863288] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.863338] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.863388] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.863439] (unitree_guide2) StdoutLine: {'line': b'3: +  bool named_plot(\n'}
[3.863489] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & name, const std::vector < Numeric > & y,\n'}
[3.863540] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & format = "")\n'}
[3.863592] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.863643] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.863694] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.863744] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.863795] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1355,5 +1467,5 @@\n'}
[3.863845] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.863901] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.863953] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(format.c_str());\n'}
[3.864005] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.864055] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(2);\n'}
[3.864107] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.864158] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.864209] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(format.c_str());\n'}
[3.864260] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.864310] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(2);\n'}
[3.864361] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1364 +1476,2 @@\n'}
[3.864411] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);\n'}
[3.864463] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.864514] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);\n'}
[3.864568] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1368 +1481 @@\n'}
[3.864620] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.864672] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.864723] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1371,8 +1484,10 @@\n'}
[3.864775] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.864826] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.864881] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.864932] (unitree_guide2) StdoutLine: {'line': b'3: -bool named_plot(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")\n'}
[3.864984] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.865046] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.865097] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.865147] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.865198] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.865248] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.865298] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.865350] (unitree_guide2) StdoutLine: {'line': b'3: +  bool named_plot(\n'}
[3.865401] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & name, const std::vector < Numeric > & x,\n'}
[3.865567] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y, const std::string & format = "")\n'}
[3.865643] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.865695] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.865747] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.865799] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.865862] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1381,6 +1496,6 @@\n'}
[3.865978] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.866034] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.866086] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.866142] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(format.c_str());\n'}
[3.866198] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.866254] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.866310] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.866365] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.866419] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.866479] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(format.c_str());\n'}
[3.866541] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.866598] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.866653] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1391 +1506,2 @@\n'}
[3.866709] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);\n'}
[3.866766] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.866833] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);\n'}
[3.866917] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1395 +1511 @@\n'}
[3.866971] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.867022] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.867074] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1398,8 +1514,10 @@\n'}
[3.867126] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.867178] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.867243] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.867293] (unitree_guide2) StdoutLine: {'line': b'3: -bool named_semilogx(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")\n'}
[3.867349] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.867400] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.867456] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.867519] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.867574] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.867628] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.867682] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.867735] (unitree_guide2) StdoutLine: {'line': b'3: +  bool named_semilogx(\n'}
[3.867808] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & name, const std::vector < Numeric > & x,\n'}
[3.867943] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y, const std::string & format = "")\n'}
[3.868005] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.868056] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.868108] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.868158] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.868208] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1408,6 +1526,6 @@\n'}
[3.868258] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.868308] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.868358] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.868408] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(format.c_str());\n'}
[3.868458] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.868508] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.868557] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.868606] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.868656] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.868706] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(format.c_str());\n'}
[3.868761] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.868813] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.868863] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1418 +1536,2 @@\n'}
[3.868913] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_semilogx, plot_args, kwargs);\n'}
[3.868966] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.869018] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_semilogx, plot_args, kwargs);\n'}
[3.869070] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1422 +1541 @@\n'}
[3.869121] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.869173] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.869224] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1425,8 +1544,10 @@\n'}
[3.869275] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.869325] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.869376] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.869426] (unitree_guide2) StdoutLine: {'line': b'3: -bool named_semilogy(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")\n'}
[3.869479] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.869529] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.869579] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.869629] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.869679] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.869731] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.869785] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.869836] (unitree_guide2) StdoutLine: {'line': b'3: +  bool named_semilogy(\n'}
[3.869887] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & name, const std::vector < Numeric > & x,\n'}
[3.869938] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y, const std::string & format = "")\n'}
[3.869990] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.870040] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.870090] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.870140] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.870211] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1435,6 +1556,6 @@\n'}
[3.870261] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.870311] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.870360] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.870409] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(format.c_str());\n'}
[3.870460] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.870510] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.870561] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.870612] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.870665] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.870725] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(format.c_str());\n'}
[3.870778] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.870828] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.870878] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1445 +1566,2 @@\n'}
[3.870928] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_semilogy, plot_args, kwargs);\n'}
[3.870978] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.871037] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_semilogy, plot_args, kwargs);\n'}
[3.871107] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1449 +1571 @@\n'}
[3.871729] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.871925] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.872007] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1452,8 +1574,10 @@\n'}
[3.872082] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.872167] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.872254] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.872330] (unitree_guide2) StdoutLine: {'line': b'3: -bool named_loglog(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")\n'}
[3.872417] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.872491] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.872561] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.872615] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.872676] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.872731] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.872784] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.872836] (unitree_guide2) StdoutLine: {'line': b'3: +  bool named_loglog(\n'}
[3.872888] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & name, const std::vector < Numeric > & x,\n'}
[3.872941] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y, const std::string & format = "")\n'}
[3.872994] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.873045] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.873095] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.873146] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.873219] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1462,6 +1586,6 @@\n'}
[3.873272] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* xarray = detail::get_array(x);\n'}
[3.873323] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* yarray = detail::get_array(y);\n'}
[3.873373] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.873424] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystring = PyString_FromString(format.c_str());\n'}
[3.873483] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.873535] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* plot_args = PyTuple_New(3);\n'}
[3.873587] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * xarray = detail::get_array(x);\n'}
[3.873644] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * yarray = detail::get_array(y);\n'}
[3.873710] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.873762] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystring = PyString_FromString(format.c_str());\n'}
[3.873814] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.873866] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * plot_args = PyTuple_New(3);\n'}
[3.873917] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1471 +1595,2 @@\n'}
[3.873968] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_loglog, plot_args, kwargs);\n'}
[3.874030] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.874081] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_loglog, plot_args, kwargs);\n'}
[3.874133] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1475 +1600 @@\n'}
[3.874183] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.874234] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.874284] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1478,23 +1603,31 @@\n'}
[3.874336] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.874387] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.874438] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.874488] (unitree_guide2) StdoutLine: {'line': b'3: -bool plot(const std::vector<Numeric>& y, const std::string& format = "")\n'}
[3.874540] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.874592] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<Numeric> x(y.size());\n'}
[3.874655] (unitree_guide2) StdoutLine: {'line': b'3: -    for(size_t i=0; i<x.size(); ++i) x.at(i) = i;\n'}
[3.874709] (unitree_guide2) StdoutLine: {'line': b'3: -    return plot(x,y,format);\n'}
[3.874762] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.874814] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.874866] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.874917] (unitree_guide2) StdoutLine: {'line': b'3: -bool plot(const std::vector<Numeric>& y, const std::map<std::string, std::string>& keywords)\n'}
[3.874969] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.875021] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<Numeric> x(y.size());\n'}
[3.875072] (unitree_guide2) StdoutLine: {'line': b'3: -    for(size_t i=0; i<x.size(); ++i) x.at(i) = i;\n'}
[3.875123] (unitree_guide2) StdoutLine: {'line': b'3: -    return plot(x,y,keywords);\n'}
[3.875173] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.875223] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.875287] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.875336] (unitree_guide2) StdoutLine: {'line': b'3: -bool stem(const std::vector<Numeric>& y, const std::string& format = "")\n'}
[3.875387] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.875436] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<Numeric> x(y.size());\n'}
[3.875486] (unitree_guide2) StdoutLine: {'line': b'3: -    for (size_t i = 0; i < x.size(); ++i) x.at(i) = i;\n'}
[3.875536] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.875586] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.875643] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.875695] (unitree_guide2) StdoutLine: {'line': b'3: +  bool plot(const std::vector < Numeric > & y, const std::string & format = "")\n'}
[3.875746] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.875798] (unitree_guide2) StdoutLine: {'line': b'3: +    std::vector < Numeric > x(y.size());\n'}
[3.875861] (unitree_guide2) StdoutLine: {'line': b'3: +    for (size_t i = 0; i < x.size(); ++i) {\n'}
[3.875911] (unitree_guide2) StdoutLine: {'line': b'3: +      x.at(i) = i;\n'}
[3.875961] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.876010] (unitree_guide2) StdoutLine: {'line': b'3: +    return plot(x, y, format);\n'}
[3.876059] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.876108] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.876158] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.876206] (unitree_guide2) StdoutLine: {'line': b'3: +  bool plot(\n'}
[3.876256] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & y, const std::map < std::string,\n'}
[3.876307] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords)\n'}
[3.876358] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.876407] (unitree_guide2) StdoutLine: {'line': b'3: +    std::vector < Numeric > x(y.size());\n'}
[3.876457] (unitree_guide2) StdoutLine: {'line': b'3: +    for (size_t i = 0; i < x.size(); ++i) {\n'}
[3.876507] (unitree_guide2) StdoutLine: {'line': b'3: +      x.at(i) = i;\n'}
[3.876585] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.876648] (unitree_guide2) StdoutLine: {'line': b'3: +    return plot(x, y, keywords);\n'}
[3.876698] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.876747] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.876797] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.876847] (unitree_guide2) StdoutLine: {'line': b'3: +  bool stem(const std::vector < Numeric > & y, const std::string & format = "")\n'}
[3.876897] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.876946] (unitree_guide2) StdoutLine: {'line': b'3: +    std::vector < Numeric > x(y.size());\n'}
[3.876996] (unitree_guide2) StdoutLine: {'line': b'3: +    for (size_t i = 0; i < x.size(); ++i) {\n'}
[3.877045] (unitree_guide2) StdoutLine: {'line': b'3: +      x.at(i) = i;\n'}
[3.877094] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.877144] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1502,8 +1635,8 @@\n'}
[3.877194] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.877244] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.877329] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.877383] (unitree_guide2) StdoutLine: {'line': b'3: -void text(Numeric x, Numeric y, const std::string& s = "")\n'}
[3.877436] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.877487] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.877540] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.877601] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(3);\n'}
[3.877653] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.877703] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.877753] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.877805] (unitree_guide2) StdoutLine: {'line': b'3: +  void text(Numeric x, Numeric y, const std::string & s = "")\n'}
[3.877856] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.877907] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.877957] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.878008] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(3);\n'}
[3.878059] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1514,15 +1647,19 @@\n'}
[3.878110] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_text, args);\n'}
[3.878162] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to text() failed.");\n'}
[3.878213] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.878264] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.878329] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.878396] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.878452] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.878502] (unitree_guide2) StdoutLine: {'line': b'3: -inline void colorbar(PyObject* mappable = NULL, const std::map<std::string, float>& keywords = {})\n'}
[3.878558] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.878608] (unitree_guide2) StdoutLine: {'line': b'3: -    if (mappable == NULL)\n'}
[3.878658] (unitree_guide2) StdoutLine: {'line': b'3: -        throw std::runtime_error("Must call colorbar with PyObject* returned from an image, contour, surface, etc.");\n'}
[3.878709] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.878759] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.878808] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.878857] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.878907] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_text, args);\n'}
[3.878958] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to text() failed.");}\n'}
[3.879007] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.879056] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.879106] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.879156] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.879205] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.879268] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void colorbar(\n'}
[3.879320] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * mappable = NULL, const std::map < std::string,\n'}
[3.879371] (unitree_guide2) StdoutLine: {'line': b'3: +    float > & keywords = {})\n'}
[3.879423] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.879474] (unitree_guide2) StdoutLine: {'line': b'3: +    if (mappable == NULL) {\n'}
[3.879530] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::runtime_error(\n'}
[3.879581] (unitree_guide2) StdoutLine: {'line': b'3: +        "Must call colorbar with PyObject* returned from an image, contour, surface, etc.");\n'}
[3.879633] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.879683] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.879734] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.879785] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.879835] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.879886] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1531,38 +1668,42 @@\n'}
[3.879938] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.879988] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, float>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.880038] (-) TimerEvent: {}
[3.880265] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.880339] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(it->second));\n'}
[3.880395] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.880446] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.880503] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_colorbar, args, kwargs);\n'}
[3.880555] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to colorbar() failed.");\n'}
[3.880628] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.880679] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.880730] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.880781] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.880832] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.880884] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.880934] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.880985] (unitree_guide2) StdoutLine: {'line': b'3: -inline long figure(long number = -1)\n'}
[3.881042] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.881094] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.881145] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.881196] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res;\n'}
[3.881247] (unitree_guide2) StdoutLine: {'line': b'3: -    if (number == -1)\n'}
[3.881298] (unitree_guide2) StdoutLine: {'line': b'3: -        res = PyObject_CallObject(detail::_interpreter::get().s_python_function_figure, detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.881350] (unitree_guide2) StdoutLine: {'line': b'3: -    else {\n'}
[3.881400] (unitree_guide2) StdoutLine: {'line': b'3: -        assert(number > 0);\n'}
[3.881455] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.881508] (unitree_guide2) StdoutLine: {'line': b'3: -        // Make sure interpreter is initialised\n'}
[3.881559] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get();\n'}
[3.881609] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.881659] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject *args = PyTuple_New(1);\n'}
[3.881709] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(args, 0, PyLong_FromLong(number));\n'}
[3.881759] (unitree_guide2) StdoutLine: {'line': b'3: -        res = PyObject_CallObject(detail::_interpreter::get().s_python_function_figure, args);\n'}
[3.881810] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(args);\n'}
[3.881861] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.881911] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.881963] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to figure() failed.");\n'}
[3.882015] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.882066] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* num = PyObject_GetAttrString(res, "number");\n'}
[3.882118] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!num) throw std::runtime_error("Could not get number attribute of figure object");\n'}
[3.882169] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.882221] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, float > ::const_iterator it = keywords.begin();\n'}
[3.882273] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.882322] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.882372] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(it->second));\n'}
[3.882426] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.882482] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.882532] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.882582] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_colorbar, args, kwargs);\n'}
[3.882633] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to colorbar() failed.");}\n'}
[3.882683] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.882733] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.882784] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.882835] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.882886] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.882937] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.882987] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.883038] (unitree_guide2) StdoutLine: {'line': b'3: +  inline long figure(long number = -1)\n'}
[3.883089] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.883139] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.883190] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.883240] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res;\n'}
[3.883326] (unitree_guide2) StdoutLine: {'line': b'3: +    if (number == -1) {\n'}
[3.883385] (unitree_guide2) StdoutLine: {'line': b'3: +      res = PyObject_CallObject(\n'}
[3.883440] (unitree_guide2) StdoutLine: {'line': b'3: +        detail::_interpreter::get().s_python_function_figure,\n'}
[3.883496] (unitree_guide2) StdoutLine: {'line': b'3: +        detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.883549] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[3.883600] (unitree_guide2) StdoutLine: {'line': b'3: +      assert(number > 0);\n'}
[3.883651] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.883701] (unitree_guide2) StdoutLine: {'line': b'3: +      // Make sure interpreter is initialised\n'}
[3.883752] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get();\n'}
[3.883804] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.883854] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * args = PyTuple_New(1);\n'}
[3.883905] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 0, PyLong_FromLong(number));\n'}
[3.883956] (unitree_guide2) StdoutLine: {'line': b'3: +      res = PyObject_CallObject(detail::_interpreter::get().s_python_function_figure, args);\n'}
[3.884007] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(args);\n'}
[3.884059] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.884110] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.884161] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to figure() failed.");}\n'}
[3.884213] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.884263] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * num = PyObject_GetAttrString(res, "number");\n'}
[3.884314] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!num) {throw std::runtime_error("Could not get number attribute of figure object");}\n'}
[3.884382] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1575,7 +1716,7 @@\n'}
[3.884433] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.884481] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.884529] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool fignum_exists(long number)\n'}
[3.884578] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.884628] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.884677] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.884726] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *args = PyTuple_New(1);\n'}
[3.884776] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.884825] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.884874] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool fignum_exists(long number)\n'}
[3.884924] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.884972] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.885022] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.885070] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.885119] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1583,2 +1724,3 @@\n'}
[3.885168] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_CallObject(detail::_interpreter::get().s_python_function_fignum_exists, args);\n'}
[3.885218] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to fignum_exists() failed.");\n'}
[3.885268] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.885318] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_fignum_exists, args);\n'}
[3.885370] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to fignum_exists() failed.");}\n'}
[3.885421] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1591,4 +1733,4 @@\n'}
[3.885470] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.885520] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.885583] (unitree_guide2) StdoutLine: {'line': b'3: -inline void figure_size(size_t w, size_t h)\n'}
[3.885632] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.885688] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.885736] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.885785] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void figure_size(size_t w, size_t h)\n'}
[3.885833] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.885881] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1598 +1740 @@\n'}
[3.885929] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* size = PyTuple_New(2);\n'}
[3.885978] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * size = PyTuple_New(2);\n'}
[3.886026] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1602 +1744 @@\n'}
[3.886073] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.886120] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.886167] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1606,43 +1748,49 @@\n'}
[3.886215] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_figure,\n'}
[3.886264] (unitree_guide2) StdoutLine: {'line': b'3: -            detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.886313] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.886381] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.886431] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.886480] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to figure_size() failed.");\n'}
[3.886531] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.886581] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.886630] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.886679] (unitree_guide2) StdoutLine: {'line': b'3: -inline void legend()\n'}
[3.886728] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.886776] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.886835] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.886883] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_legend, detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.886934] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to legend() failed.");\n'}
[3.886982] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.887031] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.887079] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.887248] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.887357] (unitree_guide2) StdoutLine: {'line': b'3: -inline void legend(const std::map<std::string, std::string>& keywords)\n'}
[3.887409] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.887458] (unitree_guide2) StdoutLine: {'line': b'3: -  detail::_interpreter::get();\n'}
[3.887508] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.887558] (unitree_guide2) StdoutLine: {'line': b'3: -  // construct keyword args\n'}
[3.887608] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject* kwargs = PyDict_New();\n'}
[3.887658] (unitree_guide2) StdoutLine: {'line': b'3: -  for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.887709] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[3.887759] (unitree_guide2) StdoutLine: {'line': b'3: -    PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.887809] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.887858] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.887907] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_legend, detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.887957] (unitree_guide2) StdoutLine: {'line': b'3: -  if(!res) throw std::runtime_error("Call to legend() failed.");\n'}
[3.888007] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.888056] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(kwargs);\n'}
[3.888118] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(res);  \n'}
[3.888169] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.888218] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.888269] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.888334] (unitree_guide2) StdoutLine: {'line': b'3: -void ylim(Numeric left, Numeric right)\n'}
[3.888386] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.888436] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.888487] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.888537] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* list = PyList_New(2);\n'}
[3.888587] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.888637] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_figure,\n'}
[3.888689] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.888739] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.888788] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.888837] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.888886] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to figure_size() failed.");}\n'}
[3.888936] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.888986] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.889035] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.889084] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void legend()\n'}
[3.889133] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.889182] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.889230] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.889291] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.889343] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_legend,\n'}
[3.889393] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.889443] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to legend() failed.");}\n'}
[3.889493] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.889542] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.889591] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.889641] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.889690] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void legend(const std::map < std::string, std::string > & keywords)\n'}
[3.889740] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.889788] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.889838] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.889886] (unitree_guide2) StdoutLine: {'line': b'3: +    // construct keyword args\n'}
[3.889935] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.889984] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.890033] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.890081] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.890130] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.890180] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.890229] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.890282] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.890332] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_legend,\n'}
[3.890382] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.890432] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to legend() failed.");}\n'}
[3.890488] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.890537] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.890586] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.890635] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.890683] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.890732] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.890781] (unitree_guide2) StdoutLine: {'line': b'3: +  void ylim(Numeric left, Numeric right)\n'}
[3.890830] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.890879] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.890928] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.890977] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * list = PyList_New(2);\n'}
[3.891027] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1652 +1800 @@\n'}
[3.891076] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.891126] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.891176] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1655,13 +1803,13 @@\n'}
[3.891230] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);\n'}
[3.891283] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to ylim() failed.");\n'}
[3.891333] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.891382] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.891431] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.891480] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.891529] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.891577] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.891627] (unitree_guide2) StdoutLine: {'line': b'3: -void xlim(Numeric left, Numeric right)\n'}
[3.891676] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.891725] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.891774] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.891822] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* list = PyList_New(2);\n'}
[3.891872] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);\n'}
[3.891922] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to ylim() failed.");}\n'}
[3.891972] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.892022] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.892071] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.892121] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.892170] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.892224] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.892273] (unitree_guide2) StdoutLine: {'line': b'3: +  void xlim(Numeric left, Numeric right)\n'}
[3.892323] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.892371] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.892420] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.892469] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * list = PyList_New(2);\n'}
[3.892518] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1671 +1819 @@\n'}
[3.892567] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.892616] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.892665] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1674,18 +1822,18 @@\n'}
[3.892715] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);\n'}
[3.892765] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to xlim() failed.");\n'}
[3.892824] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.892875] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.892926] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.892976] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.893026] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.893076] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.893159] (unitree_guide2) StdoutLine: {'line': b'3: -inline double* xlim()\n'}
[3.893213] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.893263] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.893312] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.893361] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(0);\n'}
[3.893415] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);\n'}
[3.893465] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* left = PyTuple_GetItem(res,0);\n'}
[3.893515] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* right = PyTuple_GetItem(res,1);\n'}
[3.893564] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.893613] (unitree_guide2) StdoutLine: {'line': b'3: -    double* arr = new double[2];\n'}
[3.893663] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);\n'}
[3.893714] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to xlim() failed.");}\n'}
[3.893765] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.893816] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.893867] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.893917] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.893967] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.894017] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.894066] (unitree_guide2) StdoutLine: {'line': b'3: +  inline double * xlim()\n'}
[3.894116] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.894169] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.894219] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.894268] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(0);\n'}
[3.894318] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);\n'}
[3.894368] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * left = PyTuple_GetItem(res, 0);\n'}
[3.894418] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * right = PyTuple_GetItem(res, 1);\n'}
[3.894467] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.894517] (unitree_guide2) StdoutLine: {'line': b'3: +    double * arr = new double[2];\n'}
[3.894567] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1695 +1843 @@\n'}
[3.894616] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to xlim() failed.");\n'}
[3.894667] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to xlim() failed.");}\n'}
[3.894717] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1699,13 +1847,13 @@\n'}
[3.894767] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.894817] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.894866] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.894914] (unitree_guide2) StdoutLine: {'line': b'3: -inline double* ylim()\n'}
[3.894963] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.895012] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.895061] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.895110] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(0);\n'}
[3.895163] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);\n'}
[3.895220] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* left = PyTuple_GetItem(res,0);\n'}
[3.895270] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* right = PyTuple_GetItem(res,1);\n'}
[3.895319] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.895368] (unitree_guide2) StdoutLine: {'line': b'3: -    double* arr = new double[2];\n'}
[3.895418] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.895468] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.895517] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.895566] (unitree_guide2) StdoutLine: {'line': b'3: +  inline double * ylim()\n'}
[3.895616] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.895665] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.895715] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.895764] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(0);\n'}
[3.895813] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);\n'}
[3.895862] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * left = PyTuple_GetItem(res, 0);\n'}
[3.895911] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * right = PyTuple_GetItem(res, 1);\n'}
[3.895961] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.896010] (unitree_guide2) StdoutLine: {'line': b'3: +    double * arr = new double[2];\n'}
[3.896060] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1715 +1863 @@\n'}
[3.896112] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to ylim() failed.");\n'}
[3.896162] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to ylim() failed.");}\n'}
[3.896211] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1719,5 +1867,8 @@\n'}
[3.896260] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.896309] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.896359] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.896409] (unitree_guide2) StdoutLine: {'line': b'3: -inline void xticks(const std::vector<Numeric> &ticks, const std::vector<std::string> &labels = {}, const std::map<std::string, std::string>& keywords = {})\n'}
[3.896462] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.896511] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.896560] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.896609] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.896658] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void xticks(\n'}
[3.896707] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & ticks,\n'}
[3.896756] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < std::string > & labels = {}, const std::map < std::string,\n'}
[3.896806] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.896856] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.896904] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1729,7 +1880,7 @@\n'}
[3.896953] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* ticksarray = detail::get_array(ticks);\n'}
[3.897003] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.897052] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args;\n'}
[3.897106] (unitree_guide2) StdoutLine: {'line': b'3: -    if(labels.size() == 0) {\n'}
[3.897157] (unitree_guide2) StdoutLine: {'line': b'3: -        // construct positional args\n'}
[3.897209] (unitree_guide2) StdoutLine: {'line': b'3: -        args = PyTuple_New(1);\n'}
[3.897261] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.897311] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * ticksarray = detail::get_array(ticks);\n'}
[3.897362] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.897412] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args;\n'}
[3.897461] (unitree_guide2) StdoutLine: {'line': b'3: +    if (labels.size() == 0) {\n'}
[3.897516] (unitree_guide2) StdoutLine: {'line': b'3: +      // construct positional args\n'}
[3.897566] (unitree_guide2) StdoutLine: {'line': b'3: +      args = PyTuple_New(1);\n'}
[3.897614] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.897664] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1737,9 +1888,10 @@\n'}
[3.897713] (unitree_guide2) StdoutLine: {'line': b'3: -        // make tuple of tick labels\n'}
[3.897762] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* labelstuple = PyTuple_New(labels.size());\n'}
[3.897812] (unitree_guide2) StdoutLine: {'line': b'3: -        for (size_t i = 0; i < labels.size(); i++)\n'}
[3.897862] (unitree_guide2) StdoutLine: {'line': b'3: -            PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));\n'}
[3.897911] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.897964] (unitree_guide2) StdoutLine: {'line': b'3: -        // construct positional args\n'}
[3.898015] (unitree_guide2) StdoutLine: {'line': b'3: -        args = PyTuple_New(2);\n'}
[3.898070] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.898122] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(args, 1, labelstuple);\n'}
[3.898171] (unitree_guide2) StdoutLine: {'line': b'3: +      // make tuple of tick labels\n'}
[3.898221] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * labelstuple = PyTuple_New(labels.size());\n'}
[3.898271] (unitree_guide2) StdoutLine: {'line': b'3: +      for (size_t i = 0; i < labels.size(); i++) {\n'}
[3.898322] (unitree_guide2) StdoutLine: {'line': b'3: +        PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));\n'}
[3.898371] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.898420] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.898469] (unitree_guide2) StdoutLine: {'line': b'3: +      // construct positional args\n'}
[3.898519] (unitree_guide2) StdoutLine: {'line': b'3: +      args = PyTuple_New(2);\n'}
[3.898569] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.898618] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 1, labelstuple);\n'}
[3.898667] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1749,18 +1901,22 @@\n'}
[3.898717] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.898766] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.898827] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.898877] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.898927] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.898977] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.899028] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_xticks, args, kwargs);\n'}
[3.899085] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.899135] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.899185] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.899235] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to xticks() failed");\n'}
[3.899287] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.899335] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.899385] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.899434] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.899482] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.899531] (unitree_guide2) StdoutLine: {'line': b'3: -inline void xticks(const std::vector<Numeric> &ticks, const std::map<std::string, std::string>& keywords)\n'}
[3.899581] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.899636] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.899685] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.899735] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.899784] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.899834] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.899884] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.899933] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.899982] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.900038] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_xticks, args, kwargs);\n'}
[3.900088] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.900137] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.900186] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.900234] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to xticks() failed");}\n'}
[3.900284] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.900332] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.900381] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.900430] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.900478] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.900527] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void xticks(\n'}
[3.900576] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & ticks, const std::map < std::string,\n'}
[3.900626] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords)\n'}
[3.900676] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.900725] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1768,5 +1924,8 @@\n'}
[3.900775] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.900824] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.900874] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.900923] (unitree_guide2) StdoutLine: {'line': b'3: -inline void yticks(const std::vector<Numeric> &ticks, const std::vector<std::string> &labels = {}, const std::map<std::string, std::string>& keywords = {})\n'}
[3.900974] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.901023] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.901072] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.901120] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.901169] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void yticks(\n'}
[3.901218] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & ticks,\n'}
[3.901267] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < std::string > & labels = {}, const std::map < std::string,\n'}
[3.901318] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.901367] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.901417] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1778,7 +1937,7 @@\n'}
[3.901466] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* ticksarray = detail::get_array(ticks);\n'}
[3.901521] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.901580] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args;\n'}
[3.901631] (unitree_guide2) StdoutLine: {'line': b'3: -    if(labels.size() == 0) {\n'}
[3.901681] (unitree_guide2) StdoutLine: {'line': b'3: -        // construct positional args\n'}
[3.901735] (unitree_guide2) StdoutLine: {'line': b'3: -        args = PyTuple_New(1);\n'}
[3.901786] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.901837] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * ticksarray = detail::get_array(ticks);\n'}
[3.901887] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.901958] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args;\n'}
[3.902009] (unitree_guide2) StdoutLine: {'line': b'3: +    if (labels.size() == 0) {\n'}
[3.902059] (unitree_guide2) StdoutLine: {'line': b'3: +      // construct positional args\n'}
[3.902108] (unitree_guide2) StdoutLine: {'line': b'3: +      args = PyTuple_New(1);\n'}
[3.902157] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.902206] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1786,9 +1945,10 @@\n'}
[3.902256] (unitree_guide2) StdoutLine: {'line': b'3: -        // make tuple of tick labels\n'}
[3.902306] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* labelstuple = PyTuple_New(labels.size());\n'}
[3.902358] (unitree_guide2) StdoutLine: {'line': b'3: -        for (size_t i = 0; i < labels.size(); i++)\n'}
[3.902408] (unitree_guide2) StdoutLine: {'line': b'3: -            PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));\n'}
[3.902469] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.902531] (unitree_guide2) StdoutLine: {'line': b'3: -        // construct positional args\n'}
[3.902582] (unitree_guide2) StdoutLine: {'line': b'3: -        args = PyTuple_New(2);\n'}
[3.902645] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.902694] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(args, 1, labelstuple);\n'}
[3.902742] (unitree_guide2) StdoutLine: {'line': b'3: +      // make tuple of tick labels\n'}
[3.902790] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * labelstuple = PyTuple_New(labels.size());\n'}
[3.904297] (unitree_guide2) StdoutLine: {'line': b'3: +      for (size_t i = 0; i < labels.size(); i++) {\n'}
[3.904392] (unitree_guide2) StdoutLine: {'line': b'3: +        PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));\n'}
[3.904454] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.904507] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.904556] (unitree_guide2) StdoutLine: {'line': b'3: +      // construct positional args\n'}
[3.904606] (unitree_guide2) StdoutLine: {'line': b'3: +      args = PyTuple_New(2);\n'}
[3.904657] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 0, ticksarray);\n'}
[3.904706] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(args, 1, labelstuple);\n'}
[3.904754] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1798,18 +1958,22 @@\n'}
[3.904803] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.904851] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.904902] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.904949] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.904999] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.905046] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.905094] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_yticks, args, kwargs);\n'}
[3.905142] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.905190] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.905251] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.905301] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to yticks() failed");\n'}
[3.905352] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.905401] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.905460] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.905512] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.905561] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.905612] (unitree_guide2) StdoutLine: {'line': b'3: -inline void yticks(const std::vector<Numeric> &ticks, const std::map<std::string, std::string>& keywords)\n'}
[3.905684] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.905735] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.905785] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.905846] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.905895] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.905944] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.905994] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.906044] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.906093] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.906142] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_yticks, args, kwargs);\n'}
[3.906192] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.906255] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.906303] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.906354] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to yticks() failed");}\n'}
[3.906408] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.906458] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.906508] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.906557] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.906606] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.906656] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void yticks(\n'}
[3.906705] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < Numeric > & ticks, const std::map < std::string,\n'}
[3.906755] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords)\n'}
[3.906803] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.906852] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1817,4 +1981,4 @@\n'}
[3.906900] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.906959] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.907058] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename Numeric> inline void margins(Numeric margin)\n'}
[3.907155] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.907237] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.907331] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.907415] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric > inline void margins(Numeric margin)\n'}
[3.907492] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.907542] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1822 +1986 @@\n'}
[3.907592] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.907643] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.907692] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1825,11 +1989,12 @@\n'}
[3.907742] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res =\n'}
[3.907792] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);\n'}
[3.907843] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res)\n'}
[3.907892] (unitree_guide2) StdoutLine: {'line': b'3: -        throw std::runtime_error("Call to margins() failed.");\n'}
[3.907943] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.907993] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.908043] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.908092] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.908142] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.908192] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename Numeric> inline void margins(Numeric margin_x, Numeric margin_y)\n'}
[3.908248] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.908382] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.908465] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);\n'}
[3.908546] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {\n'}
[3.908624] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::runtime_error("Call to margins() failed.");\n'}
[3.908705] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.908783] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.908860] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.908938] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.909018] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.909096] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.909175] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric > inline void margins(Numeric margin_x, Numeric margin_y)\n'}
[3.909255] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.909367] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1837 +2002 @@\n'}
[3.909450] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(2);\n'}
[3.909532] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(2);\n'}
[3.909615] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1841,40 +2006,17 @@\n'}
[3.909697] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res =\n'}
[3.909779] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);\n'}
[3.909862] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res)\n'}
[3.909942] (unitree_guide2) StdoutLine: {'line': b'3: -        throw std::runtime_error("Call to margins() failed.");\n'}
[3.910024] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.910105] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.910185] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.910266] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.910343] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.910396] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.910447] (unitree_guide2) StdoutLine: {'line': b'3: -inline void tick_params(const std::map<std::string, std::string>& keywords, const std::string axis = "both")\n'}
[3.910501] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.910551] (unitree_guide2) StdoutLine: {'line': b'3: -  detail::_interpreter::get();\n'}
[3.910602] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.910655] (unitree_guide2) StdoutLine: {'line': b'3: -  // construct positional args\n'}
[3.910706] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject* args;\n'}
[3.910757] (unitree_guide2) StdoutLine: {'line': b'3: -  args = PyTuple_New(1);\n'}
[3.910807] (unitree_guide2) StdoutLine: {'line': b'3: -  PyTuple_SetItem(args, 0, PyString_FromString(axis.c_str()));\n'}
[3.910857] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.910906] (unitree_guide2) StdoutLine: {'line': b'3: -  // construct keyword args\n'}
[3.910955] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject* kwargs = PyDict_New();\n'}
[3.911005] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.911055] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[3.911105] (unitree_guide2) StdoutLine: {'line': b'3: -    PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.911155] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[3.911205] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.911254] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.911308] (unitree_guide2) StdoutLine: {'line': b'3: -  PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_tick_params, args, kwargs);\n'}
[3.911360] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.911410] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(args);\n'}
[3.911481] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(kwargs);\n'}
[3.911532] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!res) throw std::runtime_error("Call to tick_params() failed");\n'}
[3.911583] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.911634] (unitree_guide2) StdoutLine: {'line': b'3: -  Py_DECREF(res);\n'}
[3.911684] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.911733] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.911783] (unitree_guide2) StdoutLine: {'line': b'3: -inline void subplot(long nrows, long ncols, long plot_number)\n'}
[3.911834] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.911883] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.911934] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[3.911985] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.912035] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);\n'}
[3.912087] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {\n'}
[3.912140] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::runtime_error("Call to margins() failed.");\n'}
[3.912242] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.912328] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.912379] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.912429] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.912493] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.912600] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.912680] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.912747] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void tick_params(\n'}
[3.912798] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords,\n'}
[3.912850] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string axis = "both")\n'}
[3.912900] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.912949] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.913000] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.913050] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1882 +2024,29 @@\n'}
[3.913099] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(3);\n'}
[3.913149] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args;\n'}
[3.913198] (unitree_guide2) StdoutLine: {'line': b'3: +    args = PyTuple_New(1);\n'}
[3.913252] (unitree_guide2) StdoutLine: {'line': b'3: +    PyTuple_SetItem(args, 0, PyString_FromString(axis.c_str()));\n'}
[3.913316] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.913364] (unitree_guide2) StdoutLine: {'line': b'3: +    // construct keyword args\n'}
[3.913413] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.913462] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.913512] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.913561] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.913609] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.913683] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.913732] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.913780] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.913828] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.913877] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_tick_params, args, kwargs);\n'}
[3.913954] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.914048] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.914100] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.914148] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to tick_params() failed");}\n'}
[3.914212] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.914262] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.914323] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.914370] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.914416] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void subplot(long nrows, long ncols, long plot_number)\n'}
[3.914463] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.914510] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.914557] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.914604] (unitree_guide2) StdoutLine: {'line': b'3: +    // construct positional args\n'}
[3.914650] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(3);\n'}
[3.914697] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1887,12 +2057,15 @@\n'}
[3.914743] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_subplot, args);\n'}
[3.914790] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to subplot() failed.");\n'}
[3.914836] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.914881] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.914927] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.914972] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.915017] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.915068] (unitree_guide2) StdoutLine: {'line': b'3: -inline void subplot2grid(long nrows, long ncols, long rowid=0, long colid=0, long rowspan=1, long colspan=1)\n'}
[3.915117] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.915163] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.915213] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.915274] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* shape = PyTuple_New(2);\n'}
[3.915322] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.915369] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_CallObject(detail::_interpreter::get().s_python_function_subplot, args);\n'}
[3.915419] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to subplot() failed.");}\n'}
[3.915467] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.915513] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.915560] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.915607] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.915654] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.915700] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void subplot2grid(\n'}
[3.915747] (unitree_guide2) StdoutLine: {'line': b'3: +    long nrows, long ncols, long rowid = 0, long colid = 0, long rowspan = 1,\n'}
[3.915795] (unitree_guide2) StdoutLine: {'line': b'3: +    long colspan = 1)\n'}
[3.915841] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.915888] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.915934] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.915980] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * shape = PyTuple_New(2);\n'}
[3.916028] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1902 +2075 @@\n'}
[3.916075] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* loc = PyTuple_New(2);\n'}
[3.916122] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * loc = PyTuple_New(2);\n'}
[3.916174] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1906 +2079 @@\n'}
[3.916222] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(4);\n'}
[3.916269] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(4);\n'}
[3.916331] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1912,2 +2085,3 @@\n'}
[3.916381] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_subplot2grid, args);\n'}
[3.916437] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to subplot2grid() failed.");\n'}
[3.916486] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.916534] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_subplot2grid, args);\n'}
[3.916583] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to subplot2grid() failed.");}\n'}
[3.916632] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1919,8 +2093,10 @@\n'}
[3.916679] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.916728] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.916776] (unitree_guide2) StdoutLine: {'line': b'3: -inline void title(const std::string &titlestr, const std::map<std::string, std::string> &keywords = {})\n'}
[3.916826] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.916873] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.916922] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.916971] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pytitlestr = PyString_FromString(titlestr.c_str());\n'}
[3.917021] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.917069] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.917117] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.917170] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void title(\n'}
[3.917218] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & titlestr, const std::map < std::string,\n'}
[3.917267] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.917331] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.917380] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.917430] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.917480] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pytitlestr = PyString_FromString(titlestr.c_str());\n'}
[3.917530] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.917579] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1929 +2105 @@\n'}
[3.917630] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.917680] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.917731] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1931,17 +2107,20 @@\n'}
[3.917782] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.917834] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.917884] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.917934] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_title, args, kwargs);\n'}
[3.917985] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to title() failed.");\n'}
[3.918037] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.918088] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.918147] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.918198] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.918248] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.918310] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.918359] (unitree_guide2) StdoutLine: {'line': b'3: -inline void suptitle(const std::string &suptitlestr, const std::map<std::string, std::string> &keywords = {})\n'}
[3.918417] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.918482] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.918668] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[3.918725] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pysuptitlestr = PyString_FromString(suptitlestr.c_str());\n'}
[3.918775] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.918841] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.918892] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.918941] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.918990] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res =\n'}
[3.919039] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_Call(detail::_interpreter::get().s_python_function_title, args, kwargs);\n'}
[3.919091] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to title() failed.");}\n'}
[3.919151] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.919201] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.924417] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.924560] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.924625] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.924680] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.924732] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void suptitle(\n'}
[3.924783] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & suptitlestr, const std::map < std::string,\n'}
[3.924837] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.924945] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.925009] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.925069] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.925121] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pysuptitlestr = PyString_FromString(suptitlestr.c_str());\n'}
[3.925174] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.925227] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1950 +2129 @@\n'}
[3.925277] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.925342] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.925392] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1952,17 +2131,18 @@\n'}
[3.925441] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.925491] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.925541] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.925590] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_suptitle, args, kwargs);\n'}
[3.925642] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to suptitle() failed.");\n'}
[3.925690] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.925738] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.925787] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.925838] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.925918] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.926072] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.926199] (unitree_guide2) StdoutLine: {'line': b'3: -inline void axis(const std::string &axisstr)\n'}
[3.926298] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.926390] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.926483] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.926560] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* str = PyString_FromString(axisstr.c_str());\n'}
[3.926650] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.926721] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.926774] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.926840] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.926896] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.926981] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_suptitle, args, kwargs);\n'}
[3.927030] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to suptitle() failed.");}\n'}
[3.927077] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.927123] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.927404] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.927468] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.927516] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.927562] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.927608] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void axis(const std::string & axisstr)\n'}
[3.927656] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.927703] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.927750] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.927797] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * str = PyString_FromString(axisstr.c_str());\n'}
[3.927846] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.927901] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1971,9 +2151,11 @@\n'}
[3.927953] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_axis, args);\n'}
[3.928003] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to title() failed.");\n'}
[3.928050] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.928096] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.928143] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.928189] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.928237] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.928285] (unitree_guide2) StdoutLine: {'line': b'3: -inline void axvline(double x, double ymin = 0., double ymax = 1., const std::map<std::string, std::string>& keywords = std::map<std::string, std::string>())\n'}
[3.928350] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.928397] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_axis, args);\n'}
[3.928447] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to title() failed.");}\n'}
[3.928495] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.928542] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.928588] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.928635] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.928681] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.928728] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void axvline(\n'}
[3.928776] (unitree_guide2) StdoutLine: {'line': b'3: +    double x, double ymin = 0., double ymax = 1., const std::map < std::string,\n'}
[3.928825] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = std::map < std::string, std::string > ())\n'}
[3.928890] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.928975] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1983 +2165 @@\n'}
[3.929057] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(3);\n'}
[3.929138] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(3);\n'}
[3.929220] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1989,16 +2171,21 @@\n'}
[3.929293] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.929342] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.929389] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.929434] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.929510] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.929557] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.929602] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_axvline, args, kwargs);\n'}
[3.929648] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.929693] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.929737] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.929781] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.929825] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.929880] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.929924] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.929968] (unitree_guide2) StdoutLine: {'line': b'3: -inline void axvspan(double xmin, double xmax, double ymin = 0., double ymax = 1., const std::map<std::string, std::string>& keywords = std::map<std::string, std::string>())\n'}
[3.930014] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.930058] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.930102] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.930149] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.930205] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.930250] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.930297] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.930343] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.930388] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.930435] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_axvline, args, kwargs);\n'}
[3.930483] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.930529] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.930574] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.930619] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.930663] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.930708] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.930753] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.930798] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void axvspan(\n'}
[3.930859] (unitree_guide2) StdoutLine: {'line': b'3: +    double xmin, double xmax, double ymin = 0., double ymax = 1.,\n'}
[3.930915] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string,\n'}
[3.930959] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = std::map < std::string, std::string > ())\n'}
[3.931004] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.931049] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2006 +2193 @@\n'}
[3.931094] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(4);\n'}
[3.931140] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(4);\n'}
[3.931252] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2013,22 +2200,27 @@\n'}
[3.931373] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.931469] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.931566] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.931648] (unitree_guide2) StdoutLine: {'line': b'3: -    if (it->first == "linewidth" || it->first == "alpha")\n'}
[3.931736] (unitree_guide2) StdoutLine: {'line': b'3: -            PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(std::stod(it->second)));\n'}
[3.931849] (unitree_guide2) StdoutLine: {'line': b'3: -    else\n'}
[3.931942] (unitree_guide2) StdoutLine: {'line': b'3: -            PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.932048] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.932097] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.932145] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_axvspan, args, kwargs);\n'}
[3.932193] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.932242] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.932290] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.932338] (unitree_guide2) StdoutLine: {'line': b'3: -    if(res) Py_DECREF(res);\n'}
[3.932386] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.932432] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.932480] (unitree_guide2) StdoutLine: {'line': b'3: -inline void xlabel(const std::string &str, const std::map<std::string, std::string> &keywords = {})\n'}
[3.932527] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.932573] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.932622] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.932668] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystr = PyString_FromString(str.c_str());\n'}
[3.932720] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.932791] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.932842] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.932890] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.932957] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.933042] (unitree_guide2) StdoutLine: {'line': b'3: +      if (it->first == "linewidth" || it->first == "alpha") {\n'}
[3.933095] (unitree_guide2) StdoutLine: {'line': b'3: +        PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(std::stod(it->second)));\n'}
[3.933144] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[3.933218] (unitree_guide2) StdoutLine: {'line': b'3: +        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));\n'}
[3.933273] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.933320] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.933366] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.933413] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.933485] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_axvspan, args, kwargs);\n'}
[3.933538] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.933585] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.933632] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.933679] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.933726] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.933780] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.933830] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void xlabel(\n'}
[3.933878] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & str, const std::map < std::string,\n'}
[3.933952] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.934036] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.934087] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.934133] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.934178] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystr = PyString_FromString(str.c_str());\n'}
[3.934224] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.934269] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2037 +2229 @@\n'}
[3.934328] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.934372] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.934438] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2039,17 +2231,20 @@\n'}
[3.934483] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.934529] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.934573] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.934618] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_xlabel, args, kwargs);\n'}
[3.934663] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to xlabel() failed.");\n'}
[3.934709] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.934763] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.934809] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.934853] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.934899] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.934943] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.934988] (unitree_guide2) StdoutLine: {'line': b'3: -inline void ylabel(const std::string &str, const std::map<std::string, std::string>& keywords = {})\n'}
[3.935038] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.935082] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.935399] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.935458] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystr = PyString_FromString(str.c_str());\n'}
[3.935503] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.935547] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.935594] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.935639] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.935684] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.935737] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_xlabel, args, kwargs);\n'}
[3.935792] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to xlabel() failed.");}\n'}
[3.935842] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.935894] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.935943] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.935993] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.936042] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.936091] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.936138] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void ylabel(\n'}
[3.936187] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & str, const std::map < std::string,\n'}
[3.936235] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.936307] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.936357] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.936406] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.936456] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystr = PyString_FromString(str.c_str());\n'}
[3.936504] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.936553] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2058 +2253 @@\n'}
[3.936603] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.936651] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.936706] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2060,18 +2255,21 @@\n'}
[3.936756] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.936815] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.936866] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.936935] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_ylabel, args, kwargs);\n'}
[3.936985] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to ylabel() failed.");\n'}
[3.937036] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.937087] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.937136] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.937186] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.937234] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.937288] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.937359] (unitree_guide2) StdoutLine: {'line': b'3: -inline void set_zlabel(const std::string &str, const std::map<std::string, std::string>& keywords = {})\n'}
[3.937411] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.937462] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.937514] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.937563] (unitree_guide2) StdoutLine: {'line': b'3: -    // Same as with plot_surface: We lazily load the modules here the first time \n'}
[3.937628] (unitree_guide2) StdoutLine: {'line': b'3: -    // this function is called because I\'m not sure that we can assume "matplotlib \n'}
[3.937691] (unitree_guide2) StdoutLine: {'line': b'3: -    // installed" implies "mpl_toolkits installed" on all platforms, and we don\'t \n'}
[3.937744] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.937794] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.937854] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.937906] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.937956] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_ylabel, args, kwargs);\n'}
[3.938008] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to ylabel() failed.");}\n'}
[3.938060] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.938110] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.938161] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.938210] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.938275] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.938329] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.938387] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void set_zlabel(\n'}
[3.938440] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & str, const std::map < std::string,\n'}
[3.938493] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.938544] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.938596] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.938654] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.938705] (unitree_guide2) StdoutLine: {'line': b'3: +    // Same as with plot_surface: We lazily load the modules here the first time\n'}
[3.938759] (unitree_guide2) StdoutLine: {'line': b'3: +    // this function is called because I\'m not sure that we can assume "matplotlib\n'}
[3.938812] (unitree_guide2) StdoutLine: {'line': b'3: +    // installed" implies "mpl_toolkits installed" on all platforms, and we don\'t\n'}
[3.938872] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2079 +2277 @@\n'}
[3.938925] (unitree_guide2) StdoutLine: {'line': b'3: -    static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;\n'}
[3.938979] (unitree_guide2) StdoutLine: {'line': b'3: +    static PyObject * mpl_toolkitsmod = nullptr, * axis3dmod = nullptr;\n'}
[3.939032] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2081,15 +2279,15 @@\n'}
[3.939084] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");\n'}
[3.939153] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");\n'}
[3.939207] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }\n'}
[3.939261] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.939329] (unitree_guide2) StdoutLine: {'line': b'3: -        mpl_toolkitsmod = PyImport_Import(mpl_toolkits);\n'}
[3.939390] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(mpl_toolkits);\n'}
[3.939448] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }\n'}
[3.939504] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.939558] (unitree_guide2) StdoutLine: {'line': b'3: -        axis3dmod = PyImport_Import(axis3d);\n'}
[3.939620] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(axis3d);\n'}
[3.939679] (unitree_guide2) StdoutLine: {'line': b'3: -        if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }\n'}
[3.939744] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.939799] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.939853] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pystr = PyString_FromString(str.c_str());\n'}
[3.939916] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.939971] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * mpl_toolkits = PyString_FromString("mpl_toolkits");\n'}
[3.940027] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * axis3d = PyString_FromString("mpl_toolkits.mplot3d");\n'}
[3.940084] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!mpl_toolkits || !axis3d) {throw std::runtime_error("couldnt create string");}\n'}
[3.940139] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.940193] (unitree_guide2) StdoutLine: {'line': b'3: +      mpl_toolkitsmod = PyImport_Import(mpl_toolkits);\n'}
[3.940248] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(mpl_toolkits);\n'}
[3.940317] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!mpl_toolkitsmod) {throw std::runtime_error("Error loading module mpl_toolkits!");}\n'}
[3.940370] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.940429] (unitree_guide2) StdoutLine: {'line': b'3: +      axis3dmod = PyImport_Import(axis3d);\n'}
[3.940486] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(axis3d);\n'}
[3.940540] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!axis3dmod) {throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!");}\n'}
[3.940595] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.940648] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.940700] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pystr = PyString_FromString(str.c_str());\n'}
[3.940752] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.940804] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2098 +2296 @@\n'}
[3.940857] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.940909] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.940970] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2100,5 +2298,6 @@\n'}
[3.941025] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.941077] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.941130] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.941184] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *ax =\n'}
[3.941237] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject_CallObject(detail::_interpreter::get().s_python_function_gca,\n'}
[3.941306] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.941362] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.941430] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.941493] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * ax =\n'}
[3.941552] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject_CallObject(\n'}
[3.941616] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_gca,\n'}
[3.941670] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2106 +2305 @@\n'}
[3.941725] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!ax) throw std::runtime_error("Call to gca() failed.");\n'}
[3.941779] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!ax) {throw std::runtime_error("Call to gca() failed.");}\n'}
[3.941833] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2109,2 +2308,2 @@\n'}
[3.941886] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *zlabel = PyObject_GetAttrString(ax, "set_zlabel");\n'}
[3.941941] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!zlabel) throw std::runtime_error("Attribute set_zlabel not found.");\n'}
[3.942004] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * zlabel = PyObject_GetAttrString(ax, "set_zlabel");\n'}
[3.942060] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!zlabel) {throw std::runtime_error("Attribute set_zlabel not found.");}\n'}
[3.942112] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2113,2 +2312,2 @@\n'}
[3.942166] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_Call(zlabel, args, kwargs);\n'}
[3.942221] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to set_zlabel() failed.");\n'}
[3.942275] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(zlabel, args, kwargs);\n'}
[3.942333] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to set_zlabel() failed.");}\n'}
[3.942406] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2120,8 +2319,8 @@\n'}
[3.942463] (unitree_guide2) StdoutLine: {'line': b'3: -    if (res) Py_DECREF(res);\n'}
[3.942526] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.942594] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.942650] (unitree_guide2) StdoutLine: {'line': b'3: -inline void grid(bool flag)\n'}
[3.942706] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.942758] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.942813] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.942867] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pyflag = flag ? Py_True : Py_False;\n'}
[3.942921] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res) {Py_DECREF(res);}\n'}
[3.942976] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.943037] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.943095] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void grid(bool flag)\n'}
[3.943339] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.943397] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.943447] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.943496] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pyflag = flag ? Py_True : Py_False;\n'}
[3.943562] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2130 +2329 @@\n'}
[3.943613] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.943775] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.943830] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2133,68 +2332,15 @@\n'}
[3.943880] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_grid, args);\n'}
[3.943995] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to grid() failed.");\n'}
[3.944078] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.944129] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.944179] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.944229] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.944278] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.944367] (unitree_guide2) StdoutLine: {'line': b'3: -inline void show(const bool block = true)\n'}
[3.944416] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.944464] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.944526] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.944575] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res;\n'}
[3.944622] (unitree_guide2) StdoutLine: {'line': b'3: -    if(block)\n'}
[3.944670] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.944717] (unitree_guide2) StdoutLine: {'line': b'3: -        res = PyObject_CallObject(\n'}
[3.944764] (unitree_guide2) StdoutLine: {'line': b'3: -                detail::_interpreter::get().s_python_function_show,\n'}
[3.944813] (unitree_guide2) StdoutLine: {'line': b'3: -                detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.944874] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.944924] (unitree_guide2) StdoutLine: {'line': b'3: -    else\n'}
[3.944973] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.945020] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject *kwargs = PyDict_New();\n'}
[3.945068] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, "block", Py_False);\n'}
[3.945117] (unitree_guide2) StdoutLine: {'line': b'3: -        res = PyObject_Call( detail::_interpreter::get().s_python_function_show, detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.945171] (unitree_guide2) StdoutLine: {'line': b'3: -       Py_DECREF(kwargs);\n'}
[3.945219] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.945281] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.945330] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.945379] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to show() failed.");\n'}
[3.945429] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.945491] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.945654] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.945761] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.945810] (unitree_guide2) StdoutLine: {'line': b'3: -inline void close()\n'}
[3.945858] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.945908] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.945957] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.946006] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(\n'}
[3.946057] (unitree_guide2) StdoutLine: {'line': b'3: -            detail::_interpreter::get().s_python_function_close,\n'}
[3.946110] (unitree_guide2) StdoutLine: {'line': b'3: -            detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.946160] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.946209] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to close() failed.");\n'}
[3.946259] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.946323] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.946374] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.946423] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.946486] (unitree_guide2) StdoutLine: {'line': b'3: -inline void xkcd() {\n'}
[3.946679] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.946743] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.946793] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res;\n'}
[3.946843] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *kwargs = PyDict_New();\n'}
[3.946893] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.946942] (unitree_guide2) StdoutLine: {'line': b'3: -    res = PyObject_Call(detail::_interpreter::get().s_python_function_xkcd,\n'}
[3.946993] (unitree_guide2) StdoutLine: {'line': b'3: -            detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.947044] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.947094] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.947172] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.947221] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res)\n'}
[3.947271] (unitree_guide2) StdoutLine: {'line': b'3: -        throw std::runtime_error("Call to show() failed.");\n'}
[3.947336] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.947385] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.947444] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.947579] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.947684] (unitree_guide2) StdoutLine: {'line': b'3: -inline void draw()\n'}
[3.947733] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.947781] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.947828] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.947876] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(\n'}
[3.947924] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_function_draw,\n'}
[3.947973] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_grid, args);\n'}
[3.948023] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to grid() failed.");}\n'}
[3.948073] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.948121] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.948169] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.948220] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.948283] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.948334] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void show(const bool block = true)\n'}
[3.948388] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.948448] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.948500] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.948551] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res;\n'}
[3.948601] (unitree_guide2) StdoutLine: {'line': b'3: +    if (block) {\n'}
[3.948655] (unitree_guide2) StdoutLine: {'line': b'3: +      res = PyObject_CallObject(\n'}
[3.948705] (unitree_guide2) StdoutLine: {'line': b'3: +        detail::_interpreter::get().s_python_function_show,\n'}
[3.948755] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2202,12 +2348,67 @@\n'}
[3.948804] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.948853] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to draw() failed.");\n'}
[3.948904] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.948954] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.949004] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.949055] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.949104] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename Numeric>\n'}
[3.949156] (unitree_guide2) StdoutLine: {'line': b'3: -inline void pause(Numeric interval)\n'}
[3.949208] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.949260] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.949324] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.949380] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.949445] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[3.949496] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * kwargs = PyDict_New();\n'}
[3.949547] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, "block", Py_False);\n'}
[3.949597] (unitree_guide2) StdoutLine: {'line': b'3: +      res = PyObject_Call(\n'}
[3.949647] (unitree_guide2) StdoutLine: {'line': b'3: +        detail::_interpreter::get().s_python_function_show,\n'}
[3.949701] (unitree_guide2) StdoutLine: {'line': b'3: +        detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.949752] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(kwargs);\n'}
[3.949852] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.949904] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.949956] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.950006] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to show() failed.");}\n'}
[3.950057] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.950108] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.950160] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.950213] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.950265] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void close()\n'}
[3.950331] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.950395] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.950448] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.950503] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.950557] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_close,\n'}
[3.950609] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.950680] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.951151] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to close() failed.");}\n'}
[3.951470] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.951552] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.951606] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.951657] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.951709] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void xkcd()\n'}
[3.951760] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.951828] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.951880] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.951931] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res;\n'}
[3.952152] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.952250] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.952401] (unitree_guide2) StdoutLine: {'line': b'3: +    res = PyObject_Call(\n'}
[3.952523] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_xkcd,\n'}
[3.952620] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple, kwargs);\n'}
[3.952716] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.952800] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.952853] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.952996] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {\n'}
[3.953054] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::runtime_error("Call to show() failed.");\n'}
[3.953106] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.953155] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.953203] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.953252] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.953331] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.953402] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void draw()\n'}
[3.953484] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.953568] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.953651] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.953730] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.953808] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_draw,\n'}
[3.953880] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.953957] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.954033] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to draw() failed.");}\n'}
[3.954113] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.954248] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.954345] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.954434] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.954520] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename Numeric >\n'}
[3.954592] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void pause(Numeric interval)\n'}
[3.954664] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.954734] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.954814] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.954903] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.954987] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2216,14 +2417,14 @@\n'}
[3.955073] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_pause, args);\n'}
[3.955157] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!res) throw std::runtime_error("Call to pause() failed.");\n'}
[3.955237] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.955291] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.955352] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.955400] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.955447] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.955495] (unitree_guide2) StdoutLine: {'line': b'3: -inline void save(const std::string& filename)\n'}
[3.955542] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.955589] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.955636] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.955682] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* pyfilename = PyString_FromString(filename.c_str());\n'}
[3.955730] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.955776] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* args = PyTuple_New(1);\n'}
[3.955824] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_pause, args);\n'}
[3.955872] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to pause() failed.");}\n'}
[3.955919] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.955966] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.956014] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.956067] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.956162] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.956236] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void save(const std::string & filename)\n'}
[3.956285] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.956334] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.956382] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.956429] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * pyfilename = PyString_FromString(filename.c_str());\n'}
[3.956478] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.956554] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.956640] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2232,48 +2433,56 @@\n'}
[3.956690] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_save, args);\n'}
[3.956740] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to save() failed.");\n'}
[3.956788] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.956837] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.956884] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.956932] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.956980] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.957028] (unitree_guide2) StdoutLine: {'line': b'3: -inline void clf() {\n'}
[3.957078] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.957192] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.957242] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_CallObject(\n'}
[3.957292] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_function_clf,\n'}
[3.957340] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.957390] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.957440] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to clf() failed.");\n'}
[3.957489] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.957540] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.957588] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.957636] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.957714] (unitree_guide2) StdoutLine: {'line': b'3: -inline void cla() {\n'}
[3.957837] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.957945] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.957999] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_cla,\n'}
[3.958078] (unitree_guide2) StdoutLine: {'line': b'3: -                                        detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.958172] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.958251] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res)\n'}
[3.958306] (unitree_guide2) StdoutLine: {'line': b'3: -        throw std::runtime_error("Call to cla() failed.");\n'}
[3.958388] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.958481] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.958571] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.958658] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.958755] (unitree_guide2) StdoutLine: {'line': b'3: -inline void ion() {\n'}
[3.958850] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.958941] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.959035] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_CallObject(\n'}
[3.959090] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_function_ion,\n'}
[3.959140] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.959218] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.959267] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to ion() failed.");\n'}
[3.959331] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.959380] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.959437] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.959486] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.959537] (unitree_guide2) StdoutLine: {'line': b'3: -inline std::vector<std::array<double, 2>> ginput(const int numClicks = 1, const std::map<std::string, std::string>& keywords = {})\n'}
[3.959588] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.959637] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.959687] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.959736] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *args = PyTuple_New(1);\n'}
[3.959806] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_save, args);\n'}
[3.959947] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to save() failed.");}\n'}
[3.960068] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.960134] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.960191] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.960250] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.960333] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.960425] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void clf()\n'}
[3.960594] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.960701] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.960815] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.960911] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.961008] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_clf,\n'}
[3.961096] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.961188] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.961292] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to clf() failed.");}\n'}
[3.961443] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.961553] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.961658] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.961732] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.961816] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void cla()\n'}
[3.961899] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.961983] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.962047] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.962109] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.962197] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_cla,\n'}
[3.962305] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.962397] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.962491] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {\n'}
[3.962583] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::runtime_error("Call to cla() failed.");\n'}
[3.962675] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.962775] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.962839] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.962889] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.962938] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.962986] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void ion()\n'}
[3.963034] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.963082] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.963139] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.963212] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.963299] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_ion,\n'}
[3.963377] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.963446] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.963534] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to ion() failed.");}\n'}
[3.963629] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.963726] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.963815] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.963871] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.963943] (unitree_guide2) StdoutLine: {'line': b'3: +  inline std::vector < std::array < double, 2 >> ginput(\n'}
[3.964032] (unitree_guide2) StdoutLine: {'line': b'3: +    const int numClicks = 1,\n'}
[3.964129] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string,\n'}
[3.964230] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string > & keywords = {})\n'}
[3.964347] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.964439] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.964526] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.964614] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * args = PyTuple_New(1);\n'}
[3.964717] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2283,12 +2492,13 @@\n'}
[3.964861] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* kwargs = PyDict_New();\n'}
[3.964967] (unitree_guide2) StdoutLine: {'line': b'3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)\n'}
[3.965044] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.965094] (unitree_guide2) StdoutLine: {'line': b'3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.965149] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.965239] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.965348] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* res = PyObject_Call(\n'}
[3.965423] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_function_ginput, args, kwargs);\n'}
[3.965472] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.965523] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(kwargs);\n'}
[3.965604] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(args);\n'}
[3.965654] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to ginput() failed.");\n'}
[3.965700] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * kwargs = PyDict_New();\n'}
[3.965746] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();\n'}
[3.965791] (unitree_guide2) StdoutLine: {'line': b'3: +      it != keywords.end(); ++it)\n'}
[3.965835] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.965881] (unitree_guide2) StdoutLine: {'line': b'3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));\n'}
[3.965932] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.965978] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.966023] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_Call(\n'}
[3.966068] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_ginput, args, kwargs);\n'}
[3.966129] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.966212] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(kwargs);\n'}
[3.966324] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(args);\n'}
[3.966415] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to ginput() failed.");}\n'}
[3.966505] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2297 +2507 @@\n'}
[3.966596] (unitree_guide2) StdoutLine: {'line': b'3: -    std::vector<std::array<double, 2>> out;\n'}
[3.966690] (unitree_guide2) StdoutLine: {'line': b'3: +    std::vector < std::array < double, 2 >> out;\n'}
[3.966783] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2300,5 +2510,5 @@\n'}
[3.966878] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject *current = PyList_GetItem(res, i);\n'}
[3.967022] (unitree_guide2) StdoutLine: {'line': b'3: -        std::array<double, 2> position;\n'}
[3.967127] (unitree_guide2) StdoutLine: {'line': b'3: -        position[0] = PyFloat_AsDouble(PyTuple_GetItem(current, 0));\n'}
[3.967220] (unitree_guide2) StdoutLine: {'line': b'3: -        position[1] = PyFloat_AsDouble(PyTuple_GetItem(current, 1));\n'}
[3.967653] (unitree_guide2) StdoutLine: {'line': b'3: -        out.push_back(position);\n'}
[3.967722] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * current = PyList_GetItem(res, i);\n'}
[3.967771] (unitree_guide2) StdoutLine: {'line': b'3: +      std::array < double, 2 > position;\n'}
[3.967820] (unitree_guide2) StdoutLine: {'line': b'3: +      position[0] = PyFloat_AsDouble(PyTuple_GetItem(current, 0));\n'}
[3.967905] (unitree_guide2) StdoutLine: {'line': b'3: +      position[1] = PyFloat_AsDouble(PyTuple_GetItem(current, 1));\n'}
[3.967988] (unitree_guide2) StdoutLine: {'line': b'3: +      out.push_back(position);\n'}
[3.968070] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2309 +2519 @@\n'}
[3.968160] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.968399] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.968575] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2312,11 +2522,12 @@\n'}
[3.968676] (unitree_guide2) StdoutLine: {'line': b'3: -inline void tight_layout() {\n'}
[3.968731] (unitree_guide2) StdoutLine: {'line': b'3: -    detail::_interpreter::get();\n'}
[3.968793] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.968874] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject *res = PyObject_CallObject(\n'}
[3.968948] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_function_tight_layout,\n'}
[3.969305] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.969523] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.969714] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!res) throw std::runtime_error("Call to tight_layout() failed.");\n'}
[3.969876] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.969990] (unitree_guide2) StdoutLine: {'line': b'3: -    Py_DECREF(res);\n'}
[3.970102] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.970193] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void tight_layout()\n'}
[3.970280] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.970408] (unitree_guide2) StdoutLine: {'line': b'3: +    detail::_interpreter::get();\n'}
[3.970533] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.970637] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * res = PyObject_CallObject(\n'}
[3.970753] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_function_tight_layout,\n'}
[3.970861] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get().s_python_empty_tuple);\n'}
[3.970950] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.971041] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!res) {throw std::runtime_error("Call to tight_layout() failed.");}\n'}
[3.971143] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.971258] (unitree_guide2) StdoutLine: {'line': b'3: +    Py_DECREF(res);\n'}
[3.971369] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.971459] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2326,27 +2537,28 @@\n'}
[3.971563] (unitree_guide2) StdoutLine: {'line': b'3: -namespace detail {\n'}
[3.971685] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.971786] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[3.971884] (unitree_guide2) StdoutLine: {'line': b'3: -using is_function = typename std::is_function<std::remove_pointer<std::remove_reference<T>>>::type;\n'}
[3.971993] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.972098] (unitree_guide2) StdoutLine: {'line': b'3: -template<bool obj, typename T>\n'}
[3.972197] (unitree_guide2) StdoutLine: {'line': b'3: -struct is_callable_impl;\n'}
[3.972299] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.972444] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[3.972587] (unitree_guide2) StdoutLine: {'line': b'3: -struct is_callable_impl<false, T>\n'}
[3.972699] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.972802] (unitree_guide2) StdoutLine: {'line': b'3: -    typedef is_function<T> type;\n'}
[3.973118] (unitree_guide2) StdoutLine: {'line': b'3: -}; // a non-object is callable iff it is a function\n'}
[3.973253] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.973374] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[3.973473] (unitree_guide2) StdoutLine: {'line': b'3: -struct is_callable_impl<true, T>\n'}
[3.973572] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.973674] (unitree_guide2) StdoutLine: {'line': b'3: -    struct Fallback { void operator()(); };\n'}
[3.973776] (unitree_guide2) StdoutLine: {'line': b'3: -    struct Derived : T, Fallback { };\n'}
[3.973846] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.973894] (unitree_guide2) StdoutLine: {'line': b'3: -    template<typename U, U> struct Check;\n'}
[3.973942] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.973987] (unitree_guide2) StdoutLine: {'line': b'3: -    template<typename U>\n'}
[3.974065] (unitree_guide2) StdoutLine: {'line': b'3: -    static std::true_type test( ... ); // use a variadic function to make sure (1) it accepts everything and (2) its always the worst match\n'}
[3.974120] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.974206] (unitree_guide2) StdoutLine: {'line': b'3: -    template<typename U>\n'}
[3.974270] (unitree_guide2) StdoutLine: {'line': b'3: -    static std::false_type test( Check<void(Fallback::*)(), &U::operator()>* );\n'}
[3.974320] (unitree_guide2) StdoutLine: {'line': b'3: +  namespace detail {\n'}
[3.974381] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.974429] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[3.974477] (unitree_guide2) StdoutLine: {'line': b'3: +    using is_function = typename std::is_function < std::remove_pointer < std::remove_reference <\n'}
[3.974526] (unitree_guide2) StdoutLine: {'line': b'3: +      T >> > ::type;\n'}
[3.974573] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.974621] (unitree_guide2) StdoutLine: {'line': b'3: +    template < bool obj, typename T >\n'}
[3.974702] (unitree_guide2) StdoutLine: {'line': b'3: +    struct is_callable_impl;\n'}
[3.975108] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.975246] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[3.975333] (unitree_guide2) StdoutLine: {'line': b'3: +    struct is_callable_impl < false, T >\n'}
[3.975527] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.975676] (unitree_guide2) StdoutLine: {'line': b'3: +      typedef is_function < T > type;\n'}
[3.975772] (unitree_guide2) StdoutLine: {'line': b'3: +    } // a non-object is callable iff it is a function\n'}
[3.975881] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.975980] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[3.976147] (unitree_guide2) StdoutLine: {'line': b'3: +    struct is_callable_impl < true, T >\n'}
[3.976351] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.976451] (unitree_guide2) StdoutLine: {'line': b'3: +      struct Fallback { void operator()(); };\n'}
[3.976540] (unitree_guide2) StdoutLine: {'line': b'3: +      struct Derived : T, Fallback {};\n'}
[3.976634] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.976720] (unitree_guide2) StdoutLine: {'line': b'3: +      template < typename U, U > struct Check;\n'}
[3.976805] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.977059] (unitree_guide2) StdoutLine: {'line': b'3: +      template < typename U >\n'}
[3.977118] (unitree_guide2) StdoutLine: {'line': b'3: +      static std::true_type test(...); // use a variadic function to make sure (1) it accepts everything and (2) its always the worst match\n'}
[3.977204] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.977300] (unitree_guide2) StdoutLine: {'line': b'3: +      template < typename U >\n'}
[3.977392] (unitree_guide2) StdoutLine: {'line': b'3: +      static std::false_type test(Check < void (Fallback::*)(), & U::operator() > *);\n'}
[3.977515] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2355,21 +2567,21 @@\n'}
[3.977596] (unitree_guide2) StdoutLine: {'line': b'3: -    typedef decltype(test<Derived>(nullptr)) type;\n'}
[3.977651] (unitree_guide2) StdoutLine: {'line': b'3: -    typedef decltype(&Fallback::operator()) dtype;\n'}
[3.977700] (unitree_guide2) StdoutLine: {'line': b'3: -    static constexpr bool value = type::value;\n'}
[3.977752] (unitree_guide2) StdoutLine: {'line': b'3: -}; // an object is callable iff it defines operator()\n'}
[3.977803] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.977852] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[3.977922] (unitree_guide2) StdoutLine: {'line': b'3: -struct is_callable\n'}
[3.978128] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.978186] (unitree_guide2) StdoutLine: {'line': b'3: -    // dispatch to is_callable_impl<true, T> or is_callable_impl<false, T> depending on whether T is of class type or not\n'}
[3.978242] (unitree_guide2) StdoutLine: {'line': b'3: -    typedef typename is_callable_impl<std::is_class<T>::value, T>::type type;\n'}
[3.978318] (unitree_guide2) StdoutLine: {'line': b'3: -};\n'}
[3.978372] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.978425] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename IsYDataCallable>\n'}
[3.978475] (unitree_guide2) StdoutLine: {'line': b'3: -struct plot_impl { };\n'}
[3.978523] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.978572] (unitree_guide2) StdoutLine: {'line': b'3: -template<>\n'}
[3.978623] (unitree_guide2) StdoutLine: {'line': b'3: -struct plot_impl<std::false_type>\n'}
[3.978672] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.978721] (unitree_guide2) StdoutLine: {'line': b'3: -    template<typename IterableX, typename IterableY>\n'}
[3.978770] (unitree_guide2) StdoutLine: {'line': b'3: -    bool operator()(const IterableX& x, const IterableY& y, const std::string& format)\n'}
[3.978826] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.978877] (unitree_guide2) StdoutLine: {'line': b'3: +      typedef decltype(test < Derived > (nullptr)) type;\n'}
[3.978931] (unitree_guide2) StdoutLine: {'line': b'3: +      typedef decltype( & Fallback::operator ()) dtype;\n'}
[3.978981] (unitree_guide2) StdoutLine: {'line': b'3: +      static constexpr bool value = type::value;\n'}
[3.979034] (unitree_guide2) StdoutLine: {'line': b'3: +    } // an object is callable iff it defines operator()\n'}
[3.979111] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.979200] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[3.979258] (unitree_guide2) StdoutLine: {'line': b'3: +    struct is_callable\n'}
[3.979322] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.979380] (unitree_guide2) StdoutLine: {'line': b'3: +      // dispatch to is_callable_impl<true, T> or is_callable_impl<false, T> depending on whether T is of class type or not\n'}
[3.979441] (unitree_guide2) StdoutLine: {'line': b'3: +      typedef typename is_callable_impl < std::is_class < T > ::value, T > ::type type;\n'}
[3.979494] (unitree_guide2) StdoutLine: {'line': b'3: +    };\n'}
[3.979545] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.979595] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename IsYDataCallable >\n'}
[3.979646] (unitree_guide2) StdoutLine: {'line': b'3: +    struct plot_impl {};\n'}
[3.979697] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.979748] (unitree_guide2) StdoutLine: {'line': b'3: +    template < >\n'}
[3.979800] (unitree_guide2) StdoutLine: {'line': b'3: +    struct plot_impl < std::false_type >\n'}
[3.979852] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.979903] (unitree_guide2) StdoutLine: {'line': b'3: +      template < typename IterableX, typename IterableY >\n'}
[3.979956] (unitree_guide2) StdoutLine: {'line': b'3: +      bool operator()(const IterableX & x, const IterableY & y, const std::string & format)\n'}
[3.980009] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.980059] (-) TimerEvent: {}
[3.980728] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2387,3 +2599,3 @@\n'}
[3.981255] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* xlist = PyList_New(xs);\n'}
[3.981454] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* ylist = PyList_New(ys);\n'}
[3.981529] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* pystring = PyString_FromString(format.c_str());\n'}
[3.981633] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * xlist = PyList_New(xs);\n'}
[3.981707] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * ylist = PyList_New(ys);\n'}
[3.981761] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * pystring = PyString_FromString(format.c_str());\n'}
[3.981813] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2392,3 +2604,3 @@\n'}
[3.981865] (unitree_guide2) StdoutLine: {'line': b'3: -        for(size_t i = 0; i < xs; ++i) {\n'}
[3.981920] (unitree_guide2) StdoutLine: {'line': b'3: -            PyList_SetItem(xlist, i, PyFloat_FromDouble(*itx++));\n'}
[3.982013] (unitree_guide2) StdoutLine: {'line': b'3: -            PyList_SetItem(ylist, i, PyFloat_FromDouble(*ity++));\n'}
[3.982066] (unitree_guide2) StdoutLine: {'line': b'3: +        for (size_t i = 0; i < xs; ++i) {\n'}
[3.982117] (unitree_guide2) StdoutLine: {'line': b'3: +          PyList_SetItem(xlist, i, PyFloat_FromDouble(*itx++));\n'}
[3.982170] (unitree_guide2) StdoutLine: {'line': b'3: +          PyList_SetItem(ylist, i, PyFloat_FromDouble(*ity++));\n'}
[3.982220] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2397 +2609 @@\n'}
[3.982273] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* plot_args = PyTuple_New(3);\n'}
[3.982341] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * plot_args = PyTuple_New(3);\n'}
[3.982643] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2402 +2614,2 @@\n'}
[3.982720] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_plot, plot_args);\n'}
[3.982777] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * res = PyObject_CallObject(\n'}
[3.982830] (unitree_guide2) StdoutLine: {'line': b'3: +          detail::_interpreter::get().s_python_function_plot, plot_args);\n'}
[3.982884] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2405 +2618 @@\n'}
[3.982936] (unitree_guide2) StdoutLine: {'line': b'3: -        if(res) Py_DECREF(res);\n'}
[3.982986] (unitree_guide2) StdoutLine: {'line': b'3: +        if (res) {Py_DECREF(res);}\n'}
[3.983037] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2408,10 +2621,10 @@\n'}
[3.983087] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.983138] (unitree_guide2) StdoutLine: {'line': b'3: -};\n'}
[3.983190] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.983241] (unitree_guide2) StdoutLine: {'line': b'3: -template<>\n'}
[3.983540] (unitree_guide2) StdoutLine: {'line': b'3: -struct plot_impl<std::true_type>\n'}
[3.983622] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.983688] (unitree_guide2) StdoutLine: {'line': b'3: -    template<typename Iterable, typename Callable>\n'}
[3.983779] (unitree_guide2) StdoutLine: {'line': b'3: -    bool operator()(const Iterable& ticks, const Callable& f, const std::string& format)\n'}
[3.983874] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[3.983972] (unitree_guide2) StdoutLine: {'line': b'3: -        if(begin(ticks) == end(ticks)) return true;\n'}
[3.984061] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.984115] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.984165] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.984414] (unitree_guide2) StdoutLine: {'line': b'3: +    template < >\n'}
[3.984512] (unitree_guide2) StdoutLine: {'line': b'3: +    struct plot_impl < std::true_type >\n'}
[3.984595] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.984647] (unitree_guide2) StdoutLine: {'line': b'3: +      template < typename Iterable, typename Callable >\n'}
[3.984700] (unitree_guide2) StdoutLine: {'line': b'3: +      bool operator()(const Iterable & ticks, const Callable & f, const std::string & format)\n'}
[3.984754] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[3.984805] (unitree_guide2) StdoutLine: {'line': b'3: +        if (begin(ticks) == end(ticks)) {return true;}\n'}
[3.984855] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2421,7 +2634,9 @@\n'}
[3.984906] (unitree_guide2) StdoutLine: {'line': b'3: -        std::vector<double> y;\n'}
[3.985011] (unitree_guide2) StdoutLine: {'line': b'3: -        for(auto x : ticks) y.push_back(f(x));\n'}
[3.985104] (unitree_guide2) StdoutLine: {'line': b'3: -        return plot_impl<std::false_type>()(ticks,y,format);\n'}
[3.985157] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.985207] (unitree_guide2) StdoutLine: {'line': b'3: -};\n'}
[3.985269] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.985319] (unitree_guide2) StdoutLine: {'line': b'3: -} // end namespace detail\n'}
[3.985368] (unitree_guide2) StdoutLine: {'line': b'3: +        std::vector < double > y;\n'}
[3.985418] (unitree_guide2) StdoutLine: {'line': b'3: +        for (auto x : ticks) {\n'}
[3.985489] (unitree_guide2) StdoutLine: {'line': b'3: +          y.push_back(f(x));\n'}
[3.985538] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.985587] (unitree_guide2) StdoutLine: {'line': b'3: +        return plot_impl < std::false_type > ()(ticks, y, format);\n'}
[3.985673] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.985778] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.985847] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.985910] (unitree_guide2) StdoutLine: {'line': b'3: +  } // end namespace detail\n'}
[3.986002] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2430,8 +2645,9 @@\n'}
[3.986076] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename... Args>\n'}
[3.986138] (unitree_guide2) StdoutLine: {'line': b'3: -bool plot() { return true; }\n'}
[3.986188] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.986274] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename A, typename B, typename... Args>\n'}
[3.986329] (unitree_guide2) StdoutLine: {'line': b'3: -bool plot(const A& a, const B& b, const std::string& format, Args... args)\n'}
[3.986382] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.986445] (unitree_guide2) StdoutLine: {'line': b'3: -    return detail::plot_impl<typename detail::is_callable<B>::type>()(a,b,format) && plot(args...);\n'}
[3.986516] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.986565] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename ... Args >\n'}
[3.986664] (unitree_guide2) StdoutLine: {'line': b'3: +  bool plot() {return true;}\n'}
[3.986718] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.986766] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename A, typename B, typename ... Args >\n'}
[3.986815] (unitree_guide2) StdoutLine: {'line': b'3: +  bool plot(const A & a, const B & b, const std::string & format, Args... args)\n'}
[3.986936] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.987029] (unitree_guide2) StdoutLine: {'line': b'3: +    return detail::plot_impl < typename detail::is_callable < B > ::type > ()(a, b, format) && plot(\n'}
[3.987084] (unitree_guide2) StdoutLine: {'line': b'3: +      args ...);\n'}
[3.987135] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.987187] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2443,11 +2659,18 @@\n'}
[3.987246] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool plot(const std::vector<double>& x, const std::vector<double>& y, const std::string& format = "") {\n'}
[3.987304] (unitree_guide2) StdoutLine: {'line': b'3: -    return plot<double,double>(x,y,format);\n'}
[3.987356] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.987406] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.987457] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool plot(const std::vector<double>& y, const std::string& format = "") {\n'}
[3.987511] (unitree_guide2) StdoutLine: {'line': b'3: -    return plot<double>(y,format);\n'}
[3.987562] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.987612] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.987662] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool plot(const std::vector<double>& x, const std::vector<double>& y, const std::map<std::string, std::string>& keywords) {\n'}
[3.987718] (unitree_guide2) StdoutLine: {'line': b'3: -    return plot<double>(x,y,keywords);\n'}
[3.987767] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[3.987817] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool plot(\n'}
[3.987930] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < double > & x, const std::vector < double > & y,\n'}
[3.988015] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::string & format = "")\n'}
[3.988066] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.988115] (unitree_guide2) StdoutLine: {'line': b'3: +    return plot < double, double > (x, y, format);\n'}
[3.988170] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.988239] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.988349] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool plot(const std::vector < double > & y, const std::string & format = "")\n'}
[3.988405] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.988456] (unitree_guide2) StdoutLine: {'line': b'3: +    return plot < double > (y, format);\n'}
[3.988507] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.988558] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.988608] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool plot(\n'}
[3.988658] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::vector < double > & x, const std::vector < double > & y,\n'}
[3.988709] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::map < std::string, std::string > & keywords)\n'}
[3.988763] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.988817] (unitree_guide2) StdoutLine: {'line': b'3: +    return plot < double > (x, y, keywords);\n'}
[3.988871] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[3.988923] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2458,2 +2681,2 @@\n'}
[3.988974] (unitree_guide2) StdoutLine: {'line': b'3: -class Plot\n'}
[3.989024] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[3.989074] (unitree_guide2) StdoutLine: {'line': b'3: +  class Plot\n'}
[3.989124] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[3.989191] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2462,16 +2685,56 @@\n'}
[3.989243] (unitree_guide2) StdoutLine: {'line': b'3: -    template<typename Numeric>\n'}
[3.989295] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "") {\n'}
[3.989350] (unitree_guide2) StdoutLine: {'line': b'3: -        detail::_interpreter::get();\n'}
[3.989401] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.989452] (unitree_guide2) StdoutLine: {'line': b'3: -        assert(x.size() == y.size());\n'}
[3.989503] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.989553] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* kwargs = PyDict_New();\n'}
[3.989605] (unitree_guide2) StdoutLine: {'line': b'3: -        if(name != "")\n'}
[3.989656] (unitree_guide2) StdoutLine: {'line': b'3: -            PyDict_SetItemString(kwargs, "label", PyString_FromString(name.c_str()));\n'}
[3.989709] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.989760] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* xarray = detail::get_array(x);\n'}
[3.989810] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* yarray = detail::get_array(y);\n'}
[3.989860] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.989909] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* pystring = PyString_FromString(format.c_str());\n'}
[3.989965] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.990042] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* plot_args = PyTuple_New(3);\n'}
[3.990108] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename Numeric >\n'}
[3.990181] (unitree_guide2) StdoutLine: {'line': b'3: +    Plot(\n'}
[3.990233] (unitree_guide2) StdoutLine: {'line': b'3: +      const std::string & name, const std::vector < Numeric > &x,\n'}
[3.990286] (unitree_guide2) StdoutLine: {'line': b'3: +      const std::vector < Numeric > &y, const std::string & format = "") {\n'}
[3.990338] (unitree_guide2) StdoutLine: {'line': b'3: +      detail::_interpreter::get();\n'}
[3.990389] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.990440] (unitree_guide2) StdoutLine: {'line': b'3: +      assert(x.size() == y.size());\n'}
[3.990492] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.990543] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * kwargs = PyDict_New();\n'}
[3.990593] (unitree_guide2) StdoutLine: {'line': b'3: +      if (name != "") {\n'}
[3.990642] (unitree_guide2) StdoutLine: {'line': b'3: +        PyDict_SetItemString(kwargs, "label", PyString_FromString(name.c_str()));\n'}
[3.990692] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.990755] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.990806] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * xarray = detail::get_array(x);\n'}
[3.990856] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * yarray = detail::get_array(y);\n'}
[3.990905] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.990955] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * pystring = PyString_FromString(format.c_str());\n'}
[3.991006] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.991056] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * plot_args = PyTuple_New(3);\n'}
[3.991115] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(plot_args, 0, xarray);\n'}
[3.991167] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(plot_args, 1, yarray);\n'}
[3.991219] (unitree_guide2) StdoutLine: {'line': b'3: +      PyTuple_SetItem(plot_args, 2, pystring);\n'}
[3.991270] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.991337] (unitree_guide2) StdoutLine: {'line': b'3: +      PyObject * res = PyObject_Call(\n'}
[3.991390] (unitree_guide2) StdoutLine: {'line': b'3: +        detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);\n'}
[3.991445] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.991497] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(kwargs);\n'}
[3.991548] (unitree_guide2) StdoutLine: {'line': b'3: +      Py_DECREF(plot_args);\n'}
[3.991599] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.991650] (unitree_guide2) StdoutLine: {'line': b'3: +      if (res) {\n'}
[3.991701] (unitree_guide2) StdoutLine: {'line': b'3: +        line = PyList_GetItem(res, 0);\n'}
[3.991752] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.991803] (unitree_guide2) StdoutLine: {'line': b'3: +        if (line) {\n'}
[3.991855] (unitree_guide2) StdoutLine: {'line': b'3: +          set_data_fct = PyObject_GetAttrString(line, "set_data");\n'}
[3.991909] (unitree_guide2) StdoutLine: {'line': b'3: +        } else {\n'}
[3.991960] (unitree_guide2) StdoutLine: {'line': b'3: +          Py_DECREF(line);\n'}
[3.992012] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[3.992064] (unitree_guide2) StdoutLine: {'line': b'3: +        Py_DECREF(res);\n'}
[3.992129] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.992187] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.992242] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.992295] (unitree_guide2) StdoutLine: {'line': b'3: +    // shorter initialization with name or format only\n'}
[3.992349] (unitree_guide2) StdoutLine: {'line': b'3: +    // basically calls line, = plot([], [])\n'}
[3.992403] (unitree_guide2) StdoutLine: {'line': b'3: +    Plot(const std::string & name = "", const std::string & format = "")\n'}
[3.992458] (unitree_guide2) StdoutLine: {'line': b'3: +      : Plot(name, std::vector < double > (), std::vector < double > (), format) {\n'}
[3.992514] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.992567] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.992619] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename Numeric >\n'}
[3.992671] (unitree_guide2) StdoutLine: {'line': b'3: +    bool update(const std::vector < Numeric > & x, const std::vector < Numeric > & y)\n'}
[3.992726] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.992777] (unitree_guide2) StdoutLine: {'line': b'3: +      assert(x.size() == y.size());\n'}
[3.992833] (unitree_guide2) StdoutLine: {'line': b'3: +      if (set_data_fct) {\n'}
[3.992905] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * xarray = detail::get_array(x);\n'}
[3.992983] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * yarray = detail::get_array(y);\n'}
[3.993070] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.993157] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * plot_args = PyTuple_New(2);\n'}
[3.993265] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2480,41 +2743,6 @@\n'}
[3.993352] (unitree_guide2) StdoutLine: {'line': b'3: -        PyTuple_SetItem(plot_args, 2, pystring);\n'}
[3.993497] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.993589] (unitree_guide2) StdoutLine: {'line': b'3: -        PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);\n'}
[3.993680] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.993753] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(kwargs);\n'}
[3.993847] (unitree_guide2) StdoutLine: {'line': b'3: -        Py_DECREF(plot_args);\n'}
[3.993945] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.994023] (unitree_guide2) StdoutLine: {'line': b'3: -        if(res)\n'}
[3.994168] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[3.994265] (unitree_guide2) StdoutLine: {'line': b'3: -            line= PyList_GetItem(res, 0);\n'}
[3.994366] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.994452] (unitree_guide2) StdoutLine: {'line': b'3: -            if(line)\n'}
[3.994526] (unitree_guide2) StdoutLine: {'line': b'3: -                set_data_fct = PyObject_GetAttrString(line,"set_data");\n'}
[3.994594] (unitree_guide2) StdoutLine: {'line': b'3: -            else\n'}
[3.994650] (unitree_guide2) StdoutLine: {'line': b'3: -                Py_DECREF(line);\n'}
[3.994703] (unitree_guide2) StdoutLine: {'line': b'3: -            Py_DECREF(res);\n'}
[3.994755] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.994807] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.994860] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.994913] (unitree_guide2) StdoutLine: {'line': b'3: -    // shorter initialization with name or format only\n'}
[3.994967] (unitree_guide2) StdoutLine: {'line': b'3: -    // basically calls line, = plot([], [])\n'}
[3.995029] (unitree_guide2) StdoutLine: {'line': b'3: -    Plot(const std::string& name = "", const std::string& format = "")\n'}
[3.995085] (unitree_guide2) StdoutLine: {'line': b'3: -        : Plot(name, std::vector<double>(), std::vector<double>(), format) {}\n'}
[3.995136] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.995187] (unitree_guide2) StdoutLine: {'line': b'3: -    template<typename Numeric>\n'}
[3.995238] (unitree_guide2) StdoutLine: {'line': b'3: -    bool update(const std::vector<Numeric>& x, const std::vector<Numeric>& y) {\n'}
[3.995292] (unitree_guide2) StdoutLine: {'line': b'3: -        assert(x.size() == y.size());\n'}
[3.995343] (unitree_guide2) StdoutLine: {'line': b'3: -        if(set_data_fct)\n'}
[3.995393] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[3.995444] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject* xarray = detail::get_array(x);\n'}
[3.995495] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject* yarray = detail::get_array(y);\n'}
[3.995547] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.995598] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject* plot_args = PyTuple_New(2);\n'}
[3.995651] (unitree_guide2) StdoutLine: {'line': b'3: -            PyTuple_SetItem(plot_args, 0, xarray);\n'}
[3.995726] (unitree_guide2) StdoutLine: {'line': b'3: -            PyTuple_SetItem(plot_args, 1, yarray);\n'}
[3.995781] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.995831] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject* res = PyObject_CallObject(set_data_fct, plot_args);\n'}
[3.995884] (unitree_guide2) StdoutLine: {'line': b'3: -            if (res) Py_DECREF(res);\n'}
[3.995935] (unitree_guide2) StdoutLine: {'line': b'3: -            return res;\n'}
[3.995990] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.996050] (unitree_guide2) StdoutLine: {'line': b'3: -        return false;\n'}
[3.996101] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.996151] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * res = PyObject_CallObject(set_data_fct, plot_args);\n'}
[3.996202] (unitree_guide2) StdoutLine: {'line': b'3: +        if (res) {Py_DECREF(res);}\n'}
[3.996252] (unitree_guide2) StdoutLine: {'line': b'3: +        return res;\n'}
[3.996303] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.996383] (unitree_guide2) StdoutLine: {'line': b'3: +      return false;\n'}
[3.996434] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2524,2 +2752,3 @@\n'}
[3.996486] (unitree_guide2) StdoutLine: {'line': b'3: -    bool clear() {\n'}
[3.996536] (unitree_guide2) StdoutLine: {'line': b'3: -        return update(std::vector<double>(), std::vector<double>());\n'}
[3.996588] (unitree_guide2) StdoutLine: {'line': b'3: +    bool clear()\n'}
[3.996639] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.996690] (unitree_guide2) StdoutLine: {'line': b'3: +      return update(std::vector < double > (), std::vector < double > ());\n'}
[3.996742] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2529,9 +2758,9 @@\n'}
[3.996792] (unitree_guide2) StdoutLine: {'line': b'3: -    void remove() {\n'}
[3.996842] (unitree_guide2) StdoutLine: {'line': b'3: -        if(line)\n'}
[3.996893] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[3.996945] (unitree_guide2) StdoutLine: {'line': b'3: -            auto remove_fct = PyObject_GetAttrString(line,"remove");\n'}
[3.997019] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject* args = PyTuple_New(0);\n'}
[3.997072] (unitree_guide2) StdoutLine: {'line': b'3: -            PyObject* res = PyObject_CallObject(remove_fct, args);\n'}
[3.997125] (unitree_guide2) StdoutLine: {'line': b'3: -            if (res) Py_DECREF(res);\n'}
[3.997176] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[3.997227] (unitree_guide2) StdoutLine: {'line': b'3: -        decref();\n'}
[3.997278] (unitree_guide2) StdoutLine: {'line': b'3: +    void remove()\n'}
[3.997330] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.997381] (unitree_guide2) StdoutLine: {'line': b'3: +      if (line) {\n'}
[3.997433] (unitree_guide2) StdoutLine: {'line': b'3: +        auto remove_fct = PyObject_GetAttrString(line, "remove");\n'}
[3.997486] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * args = PyTuple_New(0);\n'}
[3.997537] (unitree_guide2) StdoutLine: {'line': b'3: +        PyObject * res = PyObject_CallObject(remove_fct, args);\n'}
[3.997590] (unitree_guide2) StdoutLine: {'line': b'3: +        if (res) {Py_DECREF(res);}\n'}
[3.997642] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.997694] (unitree_guide2) StdoutLine: {'line': b'3: +      decref();\n'}
[3.997745] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2541,2 +2770,3 @@\n'}
[3.997797] (unitree_guide2) StdoutLine: {'line': b'3: -        decref();\n'}
[3.997848] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.997898] (unitree_guide2) StdoutLine: {'line': b'3: +      decref();\n'}
[3.997957] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.998009] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.998060] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2544,12 +2774,14 @@\n'}
[3.998111] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.998162] (unitree_guide2) StdoutLine: {'line': b'3: -    void decref() {\n'}
[3.998213] (unitree_guide2) StdoutLine: {'line': b'3: -        if(line)\n'}
[3.998264] (unitree_guide2) StdoutLine: {'line': b'3: -            Py_DECREF(line);\n'}
[3.998316] (unitree_guide2) StdoutLine: {'line': b'3: -        if(set_data_fct)\n'}
[3.998368] (unitree_guide2) StdoutLine: {'line': b'3: -            Py_DECREF(set_data_fct);\n'}
[3.998420] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[3.998471] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.998523] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[3.998574] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* line = nullptr;\n'}
[3.998625] (unitree_guide2) StdoutLine: {'line': b'3: -    PyObject* set_data_fct = nullptr;\n'}
[3.998676] (unitree_guide2) StdoutLine: {'line': b'3: -};\n'}
[3.998727] (unitree_guide2) StdoutLine: {'line': b'3: +    void decref()\n'}
[3.998777] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[3.998827] (unitree_guide2) StdoutLine: {'line': b'3: +      if (line) {\n'}
[3.998877] (unitree_guide2) StdoutLine: {'line': b'3: +        Py_DECREF(line);\n'}
[3.998945] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.998996] (unitree_guide2) StdoutLine: {'line': b'3: +      if (set_data_fct) {\n'}
[3.999046] (unitree_guide2) StdoutLine: {'line': b'3: +        Py_DECREF(set_data_fct);\n'}
[3.999097] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[3.999148] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[3.999200] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.999250] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[3.999503] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * line = nullptr;\n'}
[3.999611] (unitree_guide2) StdoutLine: {'line': b'3: +    PyObject * set_data_fct = nullptr;\n'}
[3.999667] (unitree_guide2) StdoutLine: {'line': b'3: +  };\n'}
[3.999722] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.999778] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/thirdParty/quadProgpp/Array.hh':\n"}
[3.999893] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[3.999963] (unitree_guide2) StdoutLine: {'line': b'3: --- include/thirdParty/quadProgpp/Array.hh\n'}
[4.000016] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/thirdParty/quadProgpp/Array.hh.uncrustify\n'}
[4.000068] (unitree_guide2) StdoutLine: {'line': b'3: @@ -4 +4 @@\n'}
[4.000120] (unitree_guide2) StdoutLine: {'line': b'3: -// Copyright (C) 2001--2008 Andrea Schaerf, Luca Di Gaspero. \n'}
[4.000172] (unitree_guide2) StdoutLine: {'line': b'3: +// Copyright (C) 2001--2008 Andrea Schaerf, Luca Di Gaspero.\n'}
[4.000223] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21,113 +21,121 @@\n'}
[4.000273] (unitree_guide2) StdoutLine: {'line': b'3: -enum MType { DIAG };\n'}
[4.000323] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.000374] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.000425] (unitree_guide2) StdoutLine: {'line': b'3: -class Vector\n'}
[4.000475] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.000525] (unitree_guide2) StdoutLine: {'line': b'3: -public: \n'}
[4.000576] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector(); \n'}
[4.000626] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector(const unsigned int n);  \n'}
[4.000676] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector(const T& a, const unsigned int n); //initialize to constant value \n'}
[4.000728] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector(const T* a, const unsigned int n); // Initialize to array \n'}
[4.000780] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector(const Vector &rhs); // copy constructor \n'}
[4.000831] (unitree_guide2) StdoutLine: {'line': b'3: -  ~Vector(); // destructor\n'}
[4.000953] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.001013] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void set(const T* a, const unsigned int n);\n'}
[4.001065] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> extract(const std::set<unsigned int>& indexes) const;\n'}
[4.001117] (unitree_guide2) StdoutLine: {'line': b'3: -  inline T& operator[](const unsigned int& i); //i-th element \n'}
[4.001169] (unitree_guide2) StdoutLine: {'line': b'3: -  inline const T& operator[](const unsigned int& i) const; \n'}
[4.001220] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.001270] (unitree_guide2) StdoutLine: {'line': b'3: -  inline unsigned int size() const;\n'}
[4.001322] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void resize(const unsigned int n);\n'}
[4.001372] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void resize(const T& a, const unsigned int n);\n'}
[4.001438] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.001490] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T>& operator=(const Vector<T>& rhs); //assignment \n'}
[4.001540] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T>& operator=(const T& a); //assign a to every element \n'}
[4.001591] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator+=(const Vector<T>& rhs);\n'}
[4.001642] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator-=(const Vector<T>& rhs);\n'}
[4.001701] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator*=(const Vector<T>& rhs);\n'}
[4.001753] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator/=(const Vector<T>& rhs);\n'}
[4.001805] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator^=(const Vector<T>& rhs);\n'}
[4.001859] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator+=(const T& a);\n'}
[4.002023] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator-=(const T& a);\n'}
[4.002085] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator*=(const T& a);\n'}
[4.002137] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator/=(const T& a);\n'}
[4.002190] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T>& operator^=(const T& a);\n'}
[4.002250] (unitree_guide2) StdoutLine: {'line': b'3: -private: \n'}
[4.002306] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n; // size of array. upper index is n-1 \n'}
[4.002362] (unitree_guide2) StdoutLine: {'line': b'3: -  T* v; // storage for data\n'}
[4.002420] (unitree_guide2) StdoutLine: {'line': b'3: -}; \n'}
[4.002472] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.002528] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.002585] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T>::Vector() \n'}
[4.002645] (unitree_guide2) StdoutLine: {'line': b'3: -  : n(0), v(0) \n'}
[4.002704] (unitree_guide2) StdoutLine: {'line': b'3: -{} \n'}
[4.002766] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.002833] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.002921] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T>::Vector(const unsigned int n) \n'}
[4.002993] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T[n]) \n'}
[4.003054] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.003123] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n;\n'}
[4.003183] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.003245] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.003301] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.003379] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T>::Vector(const T& a, const unsigned int n) \n'}
[4.003440] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T[n])\n'}
[4.003502] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.003561] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n;\n'}
[4.003626] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++) \n'}
[4.003687] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = a; \n'}
[4.003749] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.003813] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.003904] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.003999] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T>::Vector(const T* a, const unsigned int n) \n'}
[4.004066] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T[n])\n'}
[4.004127] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.004185] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n;\n'}
[4.004249] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++) \n'}
[4.004327] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = *a++; \n'}
[4.004389] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.004454] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.004515] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.004575] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T>::Vector(const Vector<T>& rhs) \n'}
[4.004638] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T[rhs.n])\n'}
[4.004697] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.004775] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = rhs.n;\n'}
[4.004844] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int\ti = 0; i < n; i++) \n'}
[4.004909] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = rhs[i]; \n'}
[4.005028] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.005085] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.005149] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.005203] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T>::~Vector() \n'}
[4.005258] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.005313] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v != 0) \n'}
[4.005365] (unitree_guide2) StdoutLine: {'line': b'3: -    delete[] (v); \n'}
[4.005420] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.005472] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.005525] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.005577] (unitree_guide2) StdoutLine: {'line': b'3: -void Vector<T>::resize(const unsigned int n) \n'}
[4.005644] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.005697] (unitree_guide2) StdoutLine: {'line': b'3: -  if (n == this->n)\n'}
[4.005747] (unitree_guide2) StdoutLine: {'line': b'3: -    return;\n'}
[4.005803] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v != 0) \n'}
[4.005856] (unitree_guide2) StdoutLine: {'line': b'3: -    delete[] (v); \n'}
[4.005906] (unitree_guide2) StdoutLine: {'line': b'3: -  v = new T[n];\n'}
[4.005956] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n;\n'}
[4.006006] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.006056] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.006107] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.006158] (unitree_guide2) StdoutLine: {'line': b'3: -void Vector<T>::resize(const T& a, const unsigned int n) \n'}
[4.006209] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.006260] (unitree_guide2) StdoutLine: {'line': b'3: -  resize(n);\n'}
[4.006324] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.006374] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = a;\n'}
[4.006424] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.006474] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.006524] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.006573] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.006622] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator=(const Vector<T>& rhs) \n'}
[4.006672] (unitree_guide2) StdoutLine: {'line': b'3: -// postcondition: normal assignment via copying has been performed; \n'}
[4.006721] (unitree_guide2) StdoutLine: {'line': b'3: -// if vector and rhs were different sizes, vector \n'}
[4.006777] (unitree_guide2) StdoutLine: {'line': b'3: -// has been resized to match the size of rhs \n'}
[4.006830] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.006879] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this != &rhs) \n'}
[4.006927] (unitree_guide2) StdoutLine: {'line': b'3: -    { \n'}
[4.006977] (unitree_guide2) StdoutLine: {'line': b'3: +  enum MType { DIAG };\n'}
[4.007026] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.007075] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.007124] (unitree_guide2) StdoutLine: {'line': b'3: +  class Vector\n'}
[4.007174] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.007222] (unitree_guide2) StdoutLine: {'line': b'3: +public:\n'}
[4.007273] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector();\n'}
[4.007323] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector(const unsigned int n);\n'}
[4.007373] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector(const T & a, const unsigned int n); //initialize to constant value\n'}
[4.007424] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector(const T * a, const unsigned int n); // Initialize to array\n'}
[4.007474] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector(const Vector & rhs); // copy constructor\n'}
[4.007523] (unitree_guide2) StdoutLine: {'line': b'3: +    ~Vector(); // destructor\n'}
[4.007573] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.007622] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void set(const T * a, const unsigned int n);\n'}
[4.007683] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > extract(const std::set < unsigned int > &indexes) const;\n'}
[4.007732] (unitree_guide2) StdoutLine: {'line': b'3: +    inline T & operator[] (const unsigned int & i); //i-th element\n'}
[4.007789] (unitree_guide2) StdoutLine: {'line': b'3: +    inline const T & operator[] (const unsigned int & i) const;\n'}
[4.007848] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.007899] (unitree_guide2) StdoutLine: {'line': b'3: +    inline unsigned int size() const;\n'}
[4.007948] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void resize(const unsigned int n);\n'}
[4.007997] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void resize(const T & a, const unsigned int n);\n'}
[4.008047] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.008097] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > & operator = (const Vector < T > &rhs); //assignment\n'}
[4.008146] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > & operator = (const T & a); //assign a to every element\n'}
[4.008196] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator += (const Vector < T > &rhs);\n'}
[4.008245] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator -= (const Vector < T > &rhs);\n'}
[4.008309] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator *= (const Vector < T > &rhs);\n'}
[4.008359] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator /= (const Vector < T > &rhs);\n'}
[4.008410] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator ^= (const Vector < T > &rhs);\n'}
[4.008460] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator += (const T & a);\n'}
[4.008510] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator -= (const T & a);\n'}
[4.008561] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator *= (const T & a);\n'}
[4.008612] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator /= (const T & a);\n'}
[4.008662] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > & operator ^= (const T & a);\n'}
[4.008715] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.008770] (unitree_guide2) StdoutLine: {'line': b'3: +private:\n'}
[4.008821] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n; // size of array. upper index is n-1\n'}
[4.008871] (unitree_guide2) StdoutLine: {'line': b'3: +    T * v; // storage for data\n'}
[4.008923] (unitree_guide2) StdoutLine: {'line': b'3: +  };\n'}
[4.008974] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.009025] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.009077] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > ::Vector()\n'}
[4.009129] (unitree_guide2) StdoutLine: {'line': b'3: +    : n(0), v(0)\n'}
[4.009180] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.009231] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.009282] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.009345] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.009393] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > ::Vector(const unsigned int n)\n'}
[4.009443] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T[n])\n'}
[4.009493] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.009541] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n;\n'}
[4.009590] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.009639] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.009688] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.009762] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > ::Vector(const T & a, const unsigned int n)\n'}
[4.009814] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T[n])\n'}
[4.009865] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.009916] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n;\n'}
[4.009986] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.010037] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = a;\n'}
[4.010087] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.010137] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.010186] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.010237] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.010287] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > ::Vector(const T * a, const unsigned int n)\n'}
[4.010336] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T[n])\n'}
[4.010386] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.010435] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n;\n'}
[4.010485] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.010535] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = *a++;\n'}
[4.010587] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.010637] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.010692] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.010742] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.010793] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > ::Vector(const Vector < T > &rhs)\n'}
[4.010843] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T[rhs.n])\n'}
[4.010893] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.010943] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = rhs.n;\n'}
[4.010994] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.011044] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = rhs[i];\n'}
[4.011093] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.011142] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.011192] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.011241] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.011291] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > ::~Vector()\n'}
[4.011341] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.011391] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v != 0) {\n'}
[4.011444] (unitree_guide2) StdoutLine: {'line': b'3: +      delete[] (v);\n'}
[4.011495] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.011544] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.011594] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.011647] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.011699] (unitree_guide2) StdoutLine: {'line': b'3: +  void Vector < T > ::resize(const unsigned int n)\n'}
[4.011749] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.011799] (unitree_guide2) StdoutLine: {'line': b'3: +    if (n == this->n) {\n'}
[4.011849] (unitree_guide2) StdoutLine: {'line': b'3: +      return;\n'}
[4.011898] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.011948] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v != 0) {\n'}
[4.011998] (unitree_guide2) StdoutLine: {'line': b'3: +      delete[] (v);\n'}
[4.012047] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.012096] (unitree_guide2) StdoutLine: {'line': b'3: +    v = new T[n];\n'}
[4.012146] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n;\n'}
[4.012196] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.012250] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.012306] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.012435] (unitree_guide2) StdoutLine: {'line': b'3: +  void Vector < T > ::resize(const T & a, const unsigned int n)\n'}
[4.012541] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.012609] (unitree_guide2) StdoutLine: {'line': b'3: +    resize(n);\n'}
[4.012667] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.012741] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = a;\n'}
[4.012834] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.012908] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.012957] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.013006] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.013054] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.013105] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator = (const Vector < T > &rhs)\n'}
[4.013168] (unitree_guide2) StdoutLine: {'line': b'3: +// postcondition: normal assignment via copying has been performed;\n'}
[4.013218] (unitree_guide2) StdoutLine: {'line': b'3: +// if vector and rhs were different sizes, vector\n'}
[4.013269] (unitree_guide2) StdoutLine: {'line': b'3: +// has been resized to match the size of rhs\n'}
[4.013332] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.013383] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this != &rhs) {\n'}
[4.013434] (unitree_guide2) StdoutLine: {'line': b'3: @@ -135,47 +143,51 @@\n'}
[4.013486] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < n; i++) \n'}
[4.013536] (unitree_guide2) StdoutLine: {'line': b'3: -\tv[i] = rhs[i]; \n'}
[4.013588] (unitree_guide2) StdoutLine: {'line': b'3: -    } \n'}
[4.013649] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this; \n'}
[4.013720] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.013776] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.013828] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.013882] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> & Vector<T>::operator=(const T& a) //assign a to every element \n'}
[4.013941] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.014000] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++) \n'}
[4.014092] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = a; \n'}
[4.014204] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this; \n'}
[4.014295] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.014370] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.014422] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.014471] (unitree_guide2) StdoutLine: {'line': b'3: -inline T & Vector<T>::operator[](const unsigned int& i) //subscripting \n'}
[4.014522] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.014571] (unitree_guide2) StdoutLine: {'line': b'3: -  return v[i]; \n'}
[4.014625] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.014675] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.014750] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.014825] (unitree_guide2) StdoutLine: {'line': b'3: -inline const T& Vector<T>::operator[](const unsigned int& i) const //subscripting \n'}
[4.014911] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.014996] (unitree_guide2) StdoutLine: {'line': b'3: -  return v[i]; \n'}
[4.015427] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.015536] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.015617] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.015668] (unitree_guide2) StdoutLine: {'line': b'3: -inline unsigned int Vector<T>::size() const \n'}
[4.015717] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.015785] (unitree_guide2) StdoutLine: {'line': b'3: -  return n; \n'}
[4.015849] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.015899] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.015948] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.015996] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Vector<T>::set(const T* a, unsigned int n) \n'}
[4.016062] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.016111] (unitree_guide2) StdoutLine: {'line': b'3: -  resize(n);\n'}
[4.016254] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++) \n'}
[4.016334] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = a[i]; \n'}
[4.016389] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.016447] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.016553] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.016605] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> Vector<T>::extract(const std::set<unsigned int>& indexes) const\n'}
[4.016658] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.016708] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(indexes.size());\n'}
[4.016759] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int i = 0;\n'}
[4.016848] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.016937] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)\n'}
[4.017121] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < n; i++) {\n'}
[4.017188] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i] = rhs[i];\n'}
[4.017246] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.017300] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.017350] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.017400] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.017450] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.017505] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.017566] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator = (const T & a) //assign a to every element\n'}
[4.017620] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.017671] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.017722] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = a;\n'}
[4.017773] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.017824] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.017875] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.017925] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.017976] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.018027] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T & Vector < T > ::operator[] (const unsigned int & i) //subscripting\n'}
[4.018079] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.018129] (unitree_guide2) StdoutLine: {'line': b'3: +    return v[i];\n'}
[4.018179] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.018230] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.018281] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.018334] (unitree_guide2) StdoutLine: {'line': b'3: +  inline const T & Vector < T > ::operator[] (const unsigned int & i) const //subscripting\n'}
[4.018392] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.018442] (unitree_guide2) StdoutLine: {'line': b'3: +    return v[i];\n'}
[4.018507] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.018755] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.018825] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.018877] (unitree_guide2) StdoutLine: {'line': b'3: +  inline unsigned int Vector < T > ::size() const\n'}
[4.018928] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.018979] (unitree_guide2) StdoutLine: {'line': b'3: +    return n;\n'}
[4.019032] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.019083] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.019134] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.019186] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Vector < T > ::set(const T * a, unsigned int n)\n'}
[4.019238] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.019287] (unitree_guide2) StdoutLine: {'line': b'3: +    resize(n);\n'}
[4.019749] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.019843] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = a[i];\n'}
[4.020002] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.020060] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.020112] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.020163] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.020244] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > Vector < T > ::extract(const std::set < unsigned int > &indexes) const\n'}
[4.020296] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.020346] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(indexes.size());\n'}
[4.020396] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int i = 0;\n'}
[4.020454] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.020573] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();\n'}
[4.020667] (unitree_guide2) StdoutLine: {'line': b'3: +      el++)\n'}
[4.020755] (unitree_guide2) StdoutLine: {'line': b'3: @@ -183,2 +195,3 @@\n'}
[4.020864] (unitree_guide2) StdoutLine: {'line': b'3: -      if (*el >= n)\n'}
[4.021038] (unitree_guide2) StdoutLine: {'line': b'3: -\tthrow std::logic_error("Error extracting subvector: the indexes are out of vector bounds");\n'}
[4.021138] (unitree_guide2) StdoutLine: {'line': b'3: +      if (*el >= n) {\n'}
[4.021241] (unitree_guide2) StdoutLine: {'line': b'3: +        throw std::logic_error("Error extracting subvector: the indexes are out of vector bounds");\n'}
[4.021356] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.021469] (unitree_guide2) StdoutLine: {'line': b'3: @@ -187,345 +200,398 @@\n'}
[4.021577] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.021657] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.021741] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.021849] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.021991] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.022090] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator+=(const Vector<T>& rhs)\n'}
[4.022192] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.022289] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->size() != rhs.size())\n'}
[4.022370] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator+=: vectors have different sizes");\n'}
[4.022466] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.022561] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] += rhs[i];\n'}
[4.022705] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.022770] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.022841] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.022900] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.022956] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.023013] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.023067] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator+=(const T& a)\n'}
[4.023134] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.023190] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.023248] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] += a;\n'}
[4.023346] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.023454] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.023551] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.023653] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.023759] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.023852] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator+(const Vector<T>& rhs)\n'}
[4.023948] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.024054] (unitree_guide2) StdoutLine: {'line': b'3: -  return rhs;\n'}
[4.024157] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.024280] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.024414] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.024527] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator+(const Vector<T>& lhs, const Vector<T>& rhs)\n'}
[4.024653] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.024889] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.size() != rhs.size())\n'}
[4.025005] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator+: vectors have different sizes");\n'}
[4.025123] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.025213] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.025312] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] + rhs[i];\n'}
[4.025381] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.025439] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.025495] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.025552] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.025610] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.025669] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator+(const Vector<T>& lhs, const T& a)\n'}
[4.025727] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.025796] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.025853] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.025910] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] + a;\n'}
[4.025968] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.026026] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.026082] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.026139] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.026195] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.026255] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator+(const T& a, const Vector<T>& rhs)\n'}
[4.026327] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.026384] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(rhs.size());\n'}
[4.026438] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.size(); i++)\n'}
[4.026495] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = a + rhs[i];\n'}
[4.026705] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.026857] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.026986] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.027041] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.027117] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.027216] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator-=(const Vector<T>& rhs)\n'}
[4.027287] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.027396] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->size() != rhs.size())\n'}
[4.027493] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator-=: vectors have different sizes");\n'}
[4.027551] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.027604] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] -= rhs[i];\n'}
[4.027657] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.027709] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.027762] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.027816] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.027868] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.027921] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.027973] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator-=(const T& a)\n'}
[4.028031] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.028081] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.028134] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] -= a;\n'}
[4.028186] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.028238] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.028307] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.028360] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.028411] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.028501] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator-(const Vector<T>& rhs)\n'}
[4.028555] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.028606] (unitree_guide2) StdoutLine: {'line': b'3: -  return (T)(-1) * rhs;\n'}
[4.028658] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.028710] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.028764] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.028815] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator-(const Vector<T>& lhs, const Vector<T>& rhs)\n'}
[4.028870] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.028922] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.size() != rhs.size())\n'}
[4.028973] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator-: vectors have different sizes");\n'}
[4.029026] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.029077] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.029128] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] - rhs[i];\n'}
[4.029180] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.029237] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.029290] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.029354] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.029405] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.029455] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator-(const Vector<T>& lhs, const T& a)\n'}
[4.029507] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.029557] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.029609] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.029662] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] - a;\n'}
[4.029712] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.029762] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.029812] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.029861] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.029910] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.029960] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator-(const T& a, const Vector<T>& rhs)\n'}
[4.030010] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.030060] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(rhs.size());\n'}
[4.030110] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.size(); i++)\n'}
[4.030160] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = a - rhs[i];\n'}
[4.030217] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.030268] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.030319] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.030370] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.030421] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.030471] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator*=(const Vector<T>& rhs)\n'}
[4.030522] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.030572] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->size() != rhs.size())\n'}
[4.030623] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator*=: vectors have different sizes");\n'}
[4.030674] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.030725] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] *= rhs[i];\n'}
[4.030775] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.030824] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.030886] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.030937] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.030985] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.031034] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.031084] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator*=(const T& a)\n'}
[4.031143] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.031283] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.031451] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] *= a;\n'}
[4.031512] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.031568] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.031625] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.031682] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.031741] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.031805] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator*(const Vector<T>& lhs, const Vector<T>& rhs)\n'}
[4.031866] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.031921] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.size() != rhs.size())\n'}
[4.031977] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator*: vectors have different sizes");\n'}
[4.032034] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.032087] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.032145] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] * rhs[i];\n'}
[4.032210] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.032271] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.032332] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.032388] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.032443] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.032500] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator*(const Vector<T>& lhs, const T& a)\n'}
[4.032557] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.032613] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.032668] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.032725] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] * a;\n'}
[4.032787] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.032849] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.032906] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.032960] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.033030] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.033084] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator*(const T& a, const Vector<T>& rhs)\n'}
[4.033144] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.033200] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(rhs.size());\n'}
[4.033256] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.size(); i++)\n'}
[4.033320] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = a * rhs[i];\n'}
[4.033376] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.033432] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.033488] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.033544] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.033599] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.033655] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator/=(const Vector<T>& rhs)\n'}
[4.033713] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.033770] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->size() != rhs.size())\n'}
[4.033837] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator/=: vectors have different sizes");\n'}
[4.033898] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.033954] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] /= rhs[i];\n'}
[4.034114] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.034282] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.034410] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.034572] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.034744] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.034834] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.034890] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator/=(const T& a)\n'}
[4.034942] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.034994] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.035054] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] /= a;\n'}
[4.035125] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.035187] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.035239] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.035291] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.035357] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.035407] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator/(const Vector<T>& lhs, const Vector<T>& rhs)\n'}
[4.035458] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.035508] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.size() != rhs.size())\n'}
[4.035612] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator/: vectors have different sizes");\n'}
[4.035665] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.035719] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.035771] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] / rhs[i];\n'}
[4.035822] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.035875] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.035929] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.035985] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.036039] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.036106] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator/(const Vector<T>& lhs, const T& a)\n'}
[4.036167] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.036227] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.036285] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.036342] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = lhs[i] / a;\n'}
[4.036416] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.036475] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.036532] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.036589] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.036647] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.036707] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator/(const T& a, const Vector<T>& rhs)\n'}
[4.036763] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.036817] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(rhs.size());\n'}
[4.036874] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.size(); i++)\n'}
[4.036933] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = a / rhs[i];\n'}
[4.036990] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.037056] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.037116] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.037176] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.037239] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.037306] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator^(const Vector<T>& lhs, const Vector<T>& rhs)\n'}
[4.037382] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.037437] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.size() != rhs.size())\n'}
[4.037497] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator^: vectors have different sizes");\n'}
[4.037555] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.037617] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.037723] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = pow(lhs[i], rhs[i]);\n'}
[4.037783] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.037839] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.037898] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.037959] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.038025] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.038125] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator^(const Vector<T>& lhs, const T& a)\n'}
[4.038192] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.038253] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(lhs.size());\n'}
[4.038313] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.size(); i++)\n'}
[4.038371] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = pow(lhs[i], a);\n'}
[4.038427] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.038509] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.038567] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.038621] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.038674] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.038725] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> operator^(const T& a, const Vector<T>& rhs)\n'}
[4.038777] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.038828] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(rhs.size());\n'}
[4.038881] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.size(); i++)\n'}
[4.038936] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = pow(a, rhs[i]);\n'}
[4.038995] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.039050] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.039102] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.039153] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.039204] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.039255] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator^=(const Vector<T>& rhs)\n'}
[4.039308] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.039374] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->size() != rhs.size())\n'}
[4.039425] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator^=: vectors have different sizes");\n'}
[4.039477] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.039527] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = pow(v[i], rhs[i]);\n'}
[4.039577] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.039627] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.039677] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.039727] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.039778] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.039829] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T>& Vector<T>::operator^=(const T& a)\n'}
[4.039880] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.039930] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.039995] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = pow(v[i], a);\n'}
[4.040073] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.040159] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.040272] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.040379] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.040468] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.040534] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator==(const Vector<T>& v, const Vector<T>& w)\n'}
[4.040645] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.040699] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v.size() != w.size())\n'}
[4.040752] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.040804] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < v.size(); i++)\n'}
[4.040882] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] != w[i])\n'}
[4.040980] (unitree_guide2) StdoutLine: {'line': b'3: -      return false;\n'}
[4.041099] (unitree_guide2) StdoutLine: {'line': b'3: -  return true;\n'}
[4.041194] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.041248] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.041342] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.041440] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator!=(const Vector<T>& v, const Vector<T>& w)\n'}
[4.041528] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.041622] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v.size() != w.size())\n'}
[4.041711] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.041763] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < v.size(); i++)\n'}
[4.041831] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] != w[i])\n'}
[4.041881] (unitree_guide2) StdoutLine: {'line': b'3: -      return true;\n'}
[4.041952] (unitree_guide2) StdoutLine: {'line': b'3: -  return false;\n'}
[4.042031] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.042119] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.042190] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.042258] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator<(const Vector<T>& v, const Vector<T>& w)\n'}
[4.042323] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.042373] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v.size() != w.size())\n'}
[4.042431] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.042513] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < v.size(); i++)\n'}
[4.042570] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] >= w[i])\n'}
[4.042621] (unitree_guide2) StdoutLine: {'line': b'3: -      return false;\n'}
[4.042690] (unitree_guide2) StdoutLine: {'line': b'3: -  return true;\n'}
[4.042742] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.042792] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.042841] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.042893] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator<=(const Vector<T>& v, const Vector<T>& w)\n'}
[4.043181] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.043334] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v.size() != w.size())\n'}
[4.043439] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.043543] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < v.size(); i++)\n'}
[4.043644] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] > w[i])\n'}
[4.043748] (unitree_guide2) StdoutLine: {'line': b'3: -      return false;\n'}
[4.043852] (unitree_guide2) StdoutLine: {'line': b'3: -  return true;\n'}
[4.043946] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.044001] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.044052] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.044103] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator>(const Vector<T>& v, const Vector<T>& w)\n'}
[4.044154] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.044204] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v.size() != w.size())\n'}
[4.044254] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.044305] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < v.size(); i++)\n'}
[4.044355] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] <= w[i])\n'}
[4.044406] (unitree_guide2) StdoutLine: {'line': b'3: -      return false;\n'}
[4.044456] (unitree_guide2) StdoutLine: {'line': b'3: -  return true;\n'}
[4.044529] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.044579] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.044630] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.044680] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator>=(const Vector<T>& v, const Vector<T>& w)\n'}
[4.044730] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.044780] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v.size() != w.size())\n'}
[4.044829] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.044883] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < v.size(); i++)\n'}
[4.044934] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] < w[i])\n'}
[4.044994] (unitree_guide2) StdoutLine: {'line': b'3: -      return false;\n'}
[4.045044] (unitree_guide2) StdoutLine: {'line': b'3: -  return true;\n'}
[4.045094] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.045144] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.045193] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.045243] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.045292] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.045343] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.045393] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator += (const Vector < T > &rhs)\n'}
[4.045444] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.045494] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->size() != rhs.size()) {\n'}
[4.045544] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator+=: vectors have different sizes");\n'}
[4.045596] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.045651] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.045705] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] += rhs[i];\n'}
[4.045756] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.045806] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.045859] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.045911] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.045960] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.046010] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.046059] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.046109] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator += (const T & a)\n'}
[4.046160] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.046211] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.046261] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] += a;\n'}
[4.046311] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.046361] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.046411] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.046460] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.046510] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.046558] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.046608] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator + (const Vector < T > &rhs)\n'}
[4.046659] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.046708] (unitree_guide2) StdoutLine: {'line': b'3: +    return rhs;\n'}
[4.046757] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.046806] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.046864] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.046914] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator + (const Vector < T > &lhs, const Vector < T > &rhs)\n'}
[4.046966] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.047015] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.size() != rhs.size()) {\n'}
[4.047067] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator+: vectors have different sizes");\n'}
[4.047128] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.047178] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.047228] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.047277] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] + rhs[i];\n'}
[4.047327] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.047559] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.047616] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.047666] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.047715] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.047764] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.047820] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator + (const Vector < T > &lhs, const T & a)\n'}
[4.047872] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.047922] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.047971] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.048020] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] + a;\n'}
[4.048070] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.048120] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.048169] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.048220] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.048269] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.048319] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.048382] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator + (const T & a, const Vector < T > &rhs)\n'}
[4.048431] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.048480] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(rhs.size());\n'}
[4.048528] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.size(); i++) {\n'}
[4.048576] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = a + rhs[i];\n'}
[4.048623] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.048671] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.048718] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.048769] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.048972] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.049081] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.049131] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator -= (const Vector < T > &rhs)\n'}
[4.049181] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.049230] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->size() != rhs.size()) {\n'}
[4.049278] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator-=: vectors have different sizes");\n'}
[4.049327] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.049388] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.049435] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] -= rhs[i];\n'}
[4.049525] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.049581] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.049628] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.049676] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.049723] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.049798] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.049861] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.049909] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator -= (const T & a)\n'}
[4.049957] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.050004] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.050051] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] -= a;\n'}
[4.050113] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.050159] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.050206] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.050253] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.050299] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.050361] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.050409] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator - (const Vector < T > &rhs)\n'}
[4.050458] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.050506] (unitree_guide2) StdoutLine: {'line': b'3: +    return (T)(-1) * rhs;\n'}
[4.050555] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.050603] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.050650] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.050698] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator - (const Vector < T > &lhs, const Vector < T > &rhs)\n'}
[4.050753] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.050802] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.size() != rhs.size()) {\n'}
[4.050850] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator-: vectors have different sizes");\n'}
[4.050898] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.050946] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.050993] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.051042] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] - rhs[i];\n'}
[4.051089] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.051137] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.051185] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.051233] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.051282] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.051330] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.051391] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator - (const Vector < T > &lhs, const T & a)\n'}
[4.051439] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.051486] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.051533] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.051580] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] - a;\n'}
[4.051626] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.051673] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.051725] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.051808] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.051889] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.051979] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.052038] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator - (const T & a, const Vector < T > &rhs)\n'}
[4.052109] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.052161] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(rhs.size());\n'}
[4.052210] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.size(); i++) {\n'}
[4.052259] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = a - rhs[i];\n'}
[4.052307] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.052355] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.052416] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.052464] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.052509] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.052554] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.052599] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator *= (const Vector < T > &rhs)\n'}
[4.052647] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.052706] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->size() != rhs.size()) {\n'}
[4.052753] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator*=: vectors have different sizes");\n'}
[4.052799] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.052844] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.052891] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] *= rhs[i];\n'}
[4.052936] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.052982] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.053029] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.053075] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.053122] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.053168] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.053214] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.053261] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator *= (const T & a)\n'}
[4.053308] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.053353] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.053426] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] *= a;\n'}
[4.053472] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.053516] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.053561] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.053605] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.053650] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.053709] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.053755] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator * (const Vector < T > &lhs, const Vector < T > &rhs)\n'}
[4.053803] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.053853] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.size() != rhs.size()) {\n'}
[4.053901] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator*: vectors have different sizes");\n'}
[4.053948] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.053995] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.054040] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.054086] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] * rhs[i];\n'}
[4.054130] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.054175] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.054220] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.054282] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.054347] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.054429] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.054490] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator * (const Vector < T > &lhs, const T & a)\n'}
[4.054558] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.054621] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.054694] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.054762] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] * a;\n'}
[4.054834] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.054905] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.054971] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.055042] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.055122] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.055197] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.055275] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator * (const T & a, const Vector < T > &rhs)\n'}
[4.055370] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.055437] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(rhs.size());\n'}
[4.055566] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.size(); i++) {\n'}
[4.055647] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = a * rhs[i];\n'}
[4.055732] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.055780] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.055826] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.055871] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.055915] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.055959] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.056004] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator /= (const Vector < T > &rhs)\n'}
[4.056049] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.056094] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->size() != rhs.size()) {\n'}
[4.056140] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator/=: vectors have different sizes");\n'}
[4.056186] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.056231] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.056277] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] /= rhs[i];\n'}
[4.056321] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.056381] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.056426] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.056471] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.056516] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.056562] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.056611] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.056657] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator /= (const T & a)\n'}
[4.056703] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.056748] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.056794] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] /= a;\n'}
[4.056840] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.056886] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.056931] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.056976] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.057023] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.057068] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.057114] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator / (const Vector < T > &lhs, const Vector < T > &rhs)\n'}
[4.057161] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.057207] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.size() != rhs.size()) {\n'}
[4.057252] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator/: vectors have different sizes");\n'}
[4.057298] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.057358] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.057404] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.057451] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] / rhs[i];\n'}
[4.057497] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.057543] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.057599] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.057647] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.057695] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.057745] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.057793] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator / (const Vector < T > &lhs, const T & a)\n'}
[4.057842] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.057891] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.057938] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.058002] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = lhs[i] / a;\n'}
[4.058055] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.058103] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.058150] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.058198] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.058244] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.058291] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.058351] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator / (const T & a, const Vector < T > &rhs)\n'}
[4.058397] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.058442] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(rhs.size());\n'}
[4.058488] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.size(); i++) {\n'}
[4.058534] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = a / rhs[i];\n'}
[4.058591] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.058637] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.058683] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.058729] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.058775] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.058822] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.058896] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator ^ (const Vector < T > &lhs, const Vector < T > &rhs)\n'}
[4.058967] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.059014] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.size() != rhs.size()) {\n'}
[4.059061] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator^: vectors have different sizes");\n'}
[4.059108] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.059155] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.059201] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.059246] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = pow(lhs[i], rhs[i]);\n'}
[4.059295] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.059341] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.059403] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.059452] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.059500] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.059561] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.059612] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator ^ (const Vector < T > &lhs, const T & a)\n'}
[4.059661] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.059709] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(lhs.size());\n'}
[4.059758] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.size(); i++) {\n'}
[4.059807] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = pow(lhs[i], a);\n'}
[4.059856] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.059908] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.059956] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.060022] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.060128] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.060237] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.060361] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > operator ^ (const T & a, const Vector < T > &rhs)\n'}
[4.060450] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.060501] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(rhs.size());\n'}
[4.060586] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.size(); i++) {\n'}
[4.060678] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = pow(a, rhs[i]);\n'}
[4.060765] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.060847] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.060986] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.061090] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.061185] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.061270] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.061373] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator ^= (const Vector < T > &rhs)\n'}
[4.061463] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.061553] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->size() != rhs.size()) {\n'}
[4.061644] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator^=: vectors have different sizes");\n'}
[4.061728] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.061809] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.061895] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = pow(v[i], rhs[i]);\n'}
[4.061981] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.062064] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.062156] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.062302] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.062411] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.062501] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.062591] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > & Vector < T > ::operator ^= (const T & a)\n'}
[4.062683] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.062771] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.062863] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = pow(v[i], a);\n'}
[4.062952] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.063039] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.063120] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.063198] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.063278] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.063327] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.063513] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator == (const Vector < T > &v, const Vector < T > &w)\n'}
[4.063579] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.063645] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v.size() != w.size()) {\n'}
[4.063691] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.063737] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.063781] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < v.size(); i++) {\n'}
[4.063833] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] != w[i]) {\n'}
[4.063879] (unitree_guide2) StdoutLine: {'line': b'3: +        return false;\n'}
[4.064153] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.064377] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.064540] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.064613] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.064691] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.064755] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.064801] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator != (const Vector < T > &v, const Vector < T > &w)\n'}
[4.064851] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.064897] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v.size() != w.size()) {\n'}
[4.064945] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.064992] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.065047] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < v.size(); i++) {\n'}
[4.065096] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] != w[i]) {\n'}
[4.065144] (unitree_guide2) StdoutLine: {'line': b'3: +        return true;\n'}
[4.065217] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.065266] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.065315] (unitree_guide2) StdoutLine: {'line': b'3: +    return false;\n'}
[4.065372] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.065446] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.065504] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.065560] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator < (const Vector < T > &v, const Vector < T > &w)\n'}
[4.065611] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.065660] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v.size() != w.size()) {\n'}
[4.065708] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.065758] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.065835] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < v.size(); i++) {\n'}
[4.065948] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] >= w[i]) {\n'}
[4.066033] (unitree_guide2) StdoutLine: {'line': b'3: +        return false;\n'}
[4.066091] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.066140] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.066187] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.066237] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.066284] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.066340] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.066435] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator <= (const Vector < T > &v, const Vector < T > &w)\n'}
[4.066513] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.066675] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v.size() != w.size()) {\n'}
[4.066740] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.066786] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.066829] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < v.size(); i++) {\n'}
[4.066874] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] > w[i]) {\n'}
[4.066917] (unitree_guide2) StdoutLine: {'line': b'3: +        return false;\n'}
[4.066961] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.067005] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.067049] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.067093] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.067136] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.067181] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.067224] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator > (const Vector < T > &v, const Vector < T > &w)\n'}
[4.067268] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.067311] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v.size() != w.size()) {\n'}
[4.067355] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.067402] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.067448] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < v.size(); i++) {\n'}
[4.067493] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] <= w[i]) {\n'}
[4.067537] (unitree_guide2) StdoutLine: {'line': b'3: +        return false;\n'}
[4.067580] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.067623] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.067667] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.067711] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.067754] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.067799] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.067844] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator >= (const Vector < T > &v, const Vector < T > &w)\n'}
[4.067917] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.067963] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v.size() != w.size()) {\n'}
[4.068012] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Vectors of different size are not confrontable");\n'}
[4.068058] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.068101] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < v.size(); i++) {\n'}
[4.068145] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] < w[i]) {\n'}
[4.068189] (unitree_guide2) StdoutLine: {'line': b'3: +        return false;\n'}
[4.068233] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.068276] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.068336] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.068389] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.068441] (unitree_guide2) StdoutLine: {'line': b'3: @@ -534 +600 @@\n'}
[4.068485] (unitree_guide2) StdoutLine: {'line': b'3: -   Input/Output \n'}
[4.068543] (unitree_guide2) StdoutLine: {'line': b'3: +   Input/Output\n'}
[4.068610] (unitree_guide2) StdoutLine: {'line': b'3: @@ -536,35 +602,37 @@\n'}
[4.068654] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.068701] (unitree_guide2) StdoutLine: {'line': b'3: -inline std::ostream& operator<<(std::ostream& os, const Vector<T>& v)\n'}
[4.068748] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.068792] (unitree_guide2) StdoutLine: {'line': b'3: -  os << std::endl << v.size() << std::endl;\n'}
[4.068838] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size() - 1; i++)\n'}
[4.068883] (unitree_guide2) StdoutLine: {'line': b'3: -    os << std::setw(20) << std::setprecision(16) << v[i] << ", ";\n'}
[4.068931] (unitree_guide2) StdoutLine: {'line': b'3: -  os << std::setw(20) << std::setprecision(16) << v[v.size() - 1] << std::endl;\n'}
[4.068976] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.069054] (unitree_guide2) StdoutLine: {'line': b'3: -  return os;\n'}
[4.069101] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.069144] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.069187] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.069230] (unitree_guide2) StdoutLine: {'line': b'3: -std::istream& operator>>(std::istream& is, Vector<T>& v)\n'}
[4.069275] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.069318] (unitree_guide2) StdoutLine: {'line': b'3: -  int elements;\n'}
[4.069370] (unitree_guide2) StdoutLine: {'line': b'3: -  char comma;\n'}
[4.069419] (unitree_guide2) StdoutLine: {'line': b'3: -  is >> elements;\n'}
[4.069463] (unitree_guide2) StdoutLine: {'line': b'3: -  v.resize(elements);\n'}
[4.069508] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < elements; i++)\n'}
[4.069553] (unitree_guide2) StdoutLine: {'line': b'3: -    is >> v[i] >> comma;\n'}
[4.069599] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.069644] (unitree_guide2) StdoutLine: {'line': b'3: -  return is;\n'}
[4.069689] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.069740] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.069783] (unitree_guide2) StdoutLine: {'line': b'3: -/**\n'}
[4.069827] (unitree_guide2) StdoutLine: {'line': b'3: -   Index utilities\n'}
[4.069870] (unitree_guide2) StdoutLine: {'line': b'3: -*/\n'}
[4.069913] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.069957] (unitree_guide2) StdoutLine: {'line': b'3: -std::set<unsigned int> seq(unsigned int s, unsigned int e);\n'}
[4.070004] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.070049] (unitree_guide2) StdoutLine: {'line': b'3: -std::set<unsigned int> singleton(unsigned int i);\n'}
[4.070095] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.070140] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.070186] (unitree_guide2) StdoutLine: {'line': b'3: -class CanonicalBaseVector : public Vector<T>\n'}
[4.070232] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.070300] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.070353] (unitree_guide2) StdoutLine: {'line': b'3: +  inline std::ostream & operator << (std::ostream & os, const Vector < T > &v)\n'}
[4.070605] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.070664] (unitree_guide2) StdoutLine: {'line': b'3: +      os << std::endl << v.size() << std::endl;\n'}
[4.070723] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < v.size() - 1; i++) {\n'}
[4.070778] (unitree_guide2) StdoutLine: {'line': b'3: +        os << std::setw(20) << std::setprecision(16) << v[i] << ", ";\n'}
[4.070824] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.070868] (unitree_guide2) StdoutLine: {'line': b'3: +      os << std::setw(20) << std::setprecision(16) << v[v.size() - 1] << std::endl;\n'}
[4.070939] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.070986] (unitree_guide2) StdoutLine: {'line': b'3: +      return os;\n'}
[4.071031] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.071099] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.071149] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[4.071193] (unitree_guide2) StdoutLine: {'line': b'3: +    std::istream & operator >> (std::istream & is, Vector < T > &v)\n'}
[4.071238] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.071280] (unitree_guide2) StdoutLine: {'line': b'3: +      int elements;\n'}
[4.071334] (unitree_guide2) StdoutLine: {'line': b'3: +      char comma;\n'}
[4.071395] (unitree_guide2) StdoutLine: {'line': b'3: +      is >> elements;\n'}
[4.071440] (unitree_guide2) StdoutLine: {'line': b'3: +      v.resize(elements);\n'}
[4.071485] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < elements; i++) {\n'}
[4.071530] (unitree_guide2) StdoutLine: {'line': b'3: +        is >> v[i] >> comma;\n'}
[4.071575] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.071620] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.071665] (unitree_guide2) StdoutLine: {'line': b'3: +      return is;\n'}
[4.071725] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.071771] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.071817] (unitree_guide2) StdoutLine: {'line': b'3: +    /**\n'}
[4.071863] (unitree_guide2) StdoutLine: {'line': b'3: +       Index utilities\n'}
[4.071907] (unitree_guide2) StdoutLine: {'line': b'3: +    */\n'}
[4.071952] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.071997] (unitree_guide2) StdoutLine: {'line': b'3: +    std::set < unsigned int > seq(unsigned int s, unsigned int e);\n'}
[4.072044] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.072089] (unitree_guide2) StdoutLine: {'line': b'3: +  std::set < unsigned int > singleton(unsigned int i);\n'}
[4.072135] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.072181] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.072247] (unitree_guide2) StdoutLine: {'line': b'3: +  class CanonicalBaseVector: public Vector < T >\n'}
[4.072298] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.072358] (unitree_guide2) StdoutLine: {'line': b'3: @@ -572,2 +640,3 @@\n'}
[4.072403] (unitree_guide2) StdoutLine: {'line': b'3: -  CanonicalBaseVector(unsigned int i, unsigned int n);\n'}
[4.072446] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void reset(unsigned int i);\n'}
[4.072490] (unitree_guide2) StdoutLine: {'line': b'3: +    CanonicalBaseVector(unsigned int i, unsigned int n);\n'}
[4.072534] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void reset(unsigned int i);\n'}
[4.072578] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.072622] (unitree_guide2) StdoutLine: {'line': b'3: @@ -575,15 +644,17 @@\n'}
[4.072665] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int e;\n'}
[4.072708] (unitree_guide2) StdoutLine: {'line': b'3: -};\n'}
[4.072750] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.072792] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.072836] (unitree_guide2) StdoutLine: {'line': b'3: -CanonicalBaseVector<T>::CanonicalBaseVector(unsigned int i, unsigned int n)\n'}
[4.072897] (unitree_guide2) StdoutLine: {'line': b'3: -  : Vector<T>((T)0, n), e(i)\n'}
[4.072944] (unitree_guide2) StdoutLine: {'line': b'3: -{ (*this)[e] = (T)1; }\n'}
[4.072990] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.073094] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.073160] (unitree_guide2) StdoutLine: {'line': b'3: -inline void CanonicalBaseVector<T>::reset(unsigned int i)\n'}
[4.073205] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.073249] (unitree_guide2) StdoutLine: {'line': b'3: -  (*this)[e] = (T)0; \n'}
[4.073297] (unitree_guide2) StdoutLine: {'line': b'3: -  e = i; \n'}
[4.073340] (unitree_guide2) StdoutLine: {'line': b'3: -  (*this)[e] = (T)1;\n'}
[4.073398] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.073442] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int e;\n'}
[4.073486] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.073530] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.073575] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.073619] (unitree_guide2) StdoutLine: {'line': b'3: +  CanonicalBaseVector < T > ::CanonicalBaseVector(unsigned int i, unsigned int n)\n'}
[4.073664] (unitree_guide2) StdoutLine: {'line': b'3: +    : Vector < T > ((T)0, n), e(i)\n'}
[4.073709] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.073752] (unitree_guide2) StdoutLine: {'line': b'3: +    (*this)[e] = (T)1;\n'}
[4.073796] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.073839] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.073886] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.074058] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void CanonicalBaseVector < T > ::reset(unsigned int i)\n'}
[4.074156] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.074201] (unitree_guide2) StdoutLine: {'line': b'3: +    (*this)[e] = (T)0;\n'}
[4.074253] (unitree_guide2) StdoutLine: {'line': b'3: +    e = i;\n'}
[4.074367] (unitree_guide2) StdoutLine: {'line': b'3: +    (*this)[e] = (T)1;\n'}
[4.074412] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.074455] (unitree_guide2) StdoutLine: {'line': b'3: @@ -593,52 +664,55 @@\n'}
[4.074498] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.074542] (unitree_guide2) StdoutLine: {'line': b'3: -inline T sum(const Vector<T>& v)\n'}
[4.074586] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.074629] (unitree_guide2) StdoutLine: {'line': b'3: -  T tmp = (T)0;\n'}
[4.074672] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.074725] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp += v[i];\n'}
[4.074769] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.074814] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.074860] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.074905] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.074953] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.075000] (unitree_guide2) StdoutLine: {'line': b'3: -inline T prod(const Vector<T>& v)\n'}
[4.075046] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.075091] (unitree_guide2) StdoutLine: {'line': b'3: -  T tmp = (T)1;\n'}
[4.075136] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.075180] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp *= v[i];\n'}
[4.075229] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.075275] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.075319] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.075372] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.075428] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.075504] (unitree_guide2) StdoutLine: {'line': b'3: -inline T mean(const Vector<T>& v)\n'}
[4.075638] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.075689] (unitree_guide2) StdoutLine: {'line': b'3: -  T sum = (T)0;\n'}
[4.075757] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.075805] (unitree_guide2) StdoutLine: {'line': b'3: -    sum += v[i];\n'}
[4.075852] (unitree_guide2) StdoutLine: {'line': b'3: -  return sum / v.size();\n'}
[4.075899] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.075953] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.076001] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.076049] (unitree_guide2) StdoutLine: {'line': b'3: -inline T median(const Vector<T>& v)\n'}
[4.076096] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.076143] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp = sort(v);\n'}
[4.076196] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v.size() % 2 == 1) // it is an odd-sized vector\n'}
[4.076421] (unitree_guide2) StdoutLine: {'line': b'3: -    return tmp[v.size() / 2];\n'}
[4.076474] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.076519] (unitree_guide2) StdoutLine: {'line': b'3: -    return 0.5 * (tmp[v.size() / 2 - 1] + tmp[v.size() / 2]);\n'}
[4.076564] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.076607] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.076650] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.076694] (unitree_guide2) StdoutLine: {'line': b'3: -inline T stdev(const Vector<T>& v, bool sample_correction = false)\n'}
[4.076737] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.076779] (unitree_guide2) StdoutLine: {'line': b'3: -  return sqrt(var(v, sample_correction));\n'}
[4.076822] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.076866] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.076909] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.076952] (unitree_guide2) StdoutLine: {'line': b'3: -inline T var(const Vector<T>& v, bool sample_correction = false)\n'}
[4.076996] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.077039] (unitree_guide2) StdoutLine: {'line': b'3: -  T sum = (T)0, ssum = (T)0;\n'}
[4.077083] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = v.size();\n'}
[4.077125] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.077173] (unitree_guide2) StdoutLine: {'line': b'3: -    {\t\n'}
[4.077217] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.077262] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T sum(const Vector < T > & v)\n'}
[4.077305] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.077348] (unitree_guide2) StdoutLine: {'line': b'3: +    T tmp = (T)0;\n'}
[4.077391] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.077434] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp += v[i];\n'}
[4.077476] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.077519] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.077561] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.077604] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.077646] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.077689] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.077732] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T prod(const Vector < T > & v)\n'}
[4.077775] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.077818] (unitree_guide2) StdoutLine: {'line': b'3: +    T tmp = (T)1;\n'}
[4.077861] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.077919] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp *= v[i];\n'}
[4.077963] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.078006] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.078048] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.078090] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.078132] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.078179] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.078227] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T mean(const Vector < T > & v)\n'}
[4.078270] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.078312] (unitree_guide2) StdoutLine: {'line': b'3: +    T sum = (T)0;\n'}
[4.078354] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.078411] (unitree_guide2) StdoutLine: {'line': b'3: +      sum += v[i];\n'}
[4.078455] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.078498] (unitree_guide2) StdoutLine: {'line': b'3: +    return sum / v.size();\n'}
[4.078542] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.078586] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.078630] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.078674] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T median(const Vector < T > & v)\n'}
[4.078719] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.078762] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp = sort(v);\n'}
[4.078806] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v.size() % 2 == 1) { // it is an odd-sized vector\n'}
[4.078851] (unitree_guide2) StdoutLine: {'line': b'3: +      return tmp[v.size() / 2];\n'}
[4.078895] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.078939] (unitree_guide2) StdoutLine: {'line': b'3: +      return 0.5 * (tmp[v.size() / 2 - 1] + tmp[v.size() / 2]);\n'}
[4.078983] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.079026] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.079069] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.079115] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.079168] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T stdev(const Vector < T > & v, bool sample_correction = false)\n'}
[4.079213] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.079257] (unitree_guide2) StdoutLine: {'line': b'3: +    return sqrt(var(v, sample_correction));\n'}
[4.079302] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.079393] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.079511] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.079561] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T var(const Vector < T > & v, bool sample_correction = false)\n'}
[4.079608] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.079654] (unitree_guide2) StdoutLine: {'line': b'3: +    T sum = (T)0, ssum = (T)0;\n'}
[4.079699] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = v.size();\n'}
[4.079744] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.079789] (unitree_guide2) StdoutLine: {'line': b'3: @@ -648,60 +722,69 @@\n'}
[4.079835] (unitree_guide2) StdoutLine: {'line': b'3: -  if (!sample_correction)\n'}
[4.079880] (unitree_guide2) StdoutLine: {'line': b'3: -    return (ssum / n) - (sum / n) * (sum / n);\n'}
[4.079925] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.079969] (unitree_guide2) StdoutLine: {'line': b'3: -    return n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);\n'}
[4.080015] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.080058] (-) TimerEvent: {}
[4.080231] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.080356] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.080422] (unitree_guide2) StdoutLine: {'line': b'3: -inline T max(const Vector<T>& v)\n'}
[4.080470] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.080518] (unitree_guide2) StdoutLine: {'line': b'3: -  T value = v[0];\n'}
[4.080565] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < v.size(); i++)\n'}
[4.080612] (unitree_guide2) StdoutLine: {'line': b'3: -    value = std::max(v[i], value);\n'}
[4.080659] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.080705] (unitree_guide2) StdoutLine: {'line': b'3: -  return value;\n'}
[4.080750] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.080796] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.080842] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.080897] (unitree_guide2) StdoutLine: {'line': b'3: -inline T min(const Vector<T>& v)\n'}
[4.080944] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.080990] (unitree_guide2) StdoutLine: {'line': b'3: -  T value = v[0];\n'}
[4.081036] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < v.size(); i++)\n'}
[4.081087] (unitree_guide2) StdoutLine: {'line': b'3: -    value = std::min(v[i], value);\n'}
[4.081134] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.081181] (unitree_guide2) StdoutLine: {'line': b'3: -  return value;\n'}
[4.081227] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.081274] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.081335] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.081384] (unitree_guide2) StdoutLine: {'line': b'3: -inline unsigned int index_max(const Vector<T>& v)\n'}
[4.081432] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.081479] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int max = 0;\n'}
[4.081526] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < v.size(); i++)\n'}
[4.081574] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] > v[max])\n'}
[4.081621] (unitree_guide2) StdoutLine: {'line': b'3: -      max = i;\n'}
[4.081669] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.081715] (unitree_guide2) StdoutLine: {'line': b'3: -  return max;\n'}
[4.081762] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.081810] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.081857] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.081905] (unitree_guide2) StdoutLine: {'line': b'3: -inline unsigned int index_min(const Vector<T>& v)\n'}
[4.081952] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.082001] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int min = 0;\n'}
[4.082054] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < v.size(); i++)\n'}
[4.082108] (unitree_guide2) StdoutLine: {'line': b'3: -    if (v[i] < v[min])\n'}
[4.082157] (unitree_guide2) StdoutLine: {'line': b'3: -      min = i;\n'}
[4.082205] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.082254] (unitree_guide2) StdoutLine: {'line': b'3: -  return min;\n'}
[4.082301] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.082363] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.082412] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.082460] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.082510] (unitree_guide2) StdoutLine: {'line': b'3: -inline T dot_prod(const Vector<T>& a, const Vector<T>& b)\n'}
[4.082559] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.082609] (unitree_guide2) StdoutLine: {'line': b'3: -  T sum = (T)0;\n'}
[4.082659] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.size() != b.size())\n'}
[4.082709] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Dotprod error: the vectors are not the same size");\n'}
[4.082760] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < a.size(); i++)\n'}
[4.082811] (unitree_guide2) StdoutLine: {'line': b'3: -    sum += a[i] * b[i];\n'}
[4.082861] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.082911] (unitree_guide2) StdoutLine: {'line': b'3: -  return sum;\n'}
[4.082960] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.083010] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!sample_correction) {\n'}
[4.083064] (unitree_guide2) StdoutLine: {'line': b'3: +      return (ssum / n) - (sum / n) * (sum / n);\n'}
[4.083114] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.083163] (unitree_guide2) StdoutLine: {'line': b'3: +      return n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);\n'}
[4.083213] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.083262] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.083310] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.083359] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.083418] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T max(const Vector < T > & v)\n'}
[4.083467] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.083515] (unitree_guide2) StdoutLine: {'line': b'3: +    T value = v[0];\n'}
[4.083565] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < v.size(); i++) {\n'}
[4.083614] (unitree_guide2) StdoutLine: {'line': b'3: +      value = std::max(v[i], value);\n'}
[4.083663] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.083713] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.083763] (unitree_guide2) StdoutLine: {'line': b'3: +    return value;\n'}
[4.083813] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.083863] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.083913] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.083962] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T min(const Vector < T > & v)\n'}
[4.084021] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.084073] (unitree_guide2) StdoutLine: {'line': b'3: +    T value = v[0];\n'}
[4.084122] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < v.size(); i++) {\n'}
[4.084171] (unitree_guide2) StdoutLine: {'line': b'3: +      value = std::min(v[i], value);\n'}
[4.084220] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.084269] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.084318] (unitree_guide2) StdoutLine: {'line': b'3: +    return value;\n'}
[4.084367] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.084416] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.084464] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.084513] (unitree_guide2) StdoutLine: {'line': b'3: +  inline unsigned int index_max(const Vector < T > & v)\n'}
[4.084563] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.084613] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int max = 0;\n'}
[4.084662] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < v.size(); i++) {\n'}
[4.084712] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] > v[max]) {\n'}
[4.084762] (unitree_guide2) StdoutLine: {'line': b'3: +        max = i;\n'}
[4.084811] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.084861] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.084910] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.084958] (unitree_guide2) StdoutLine: {'line': b'3: +    return max;\n'}
[4.085013] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.085062] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.085111] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.085160] (unitree_guide2) StdoutLine: {'line': b'3: +  inline unsigned int index_min(const Vector < T > & v)\n'}
[4.085209] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.085257] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int min = 0;\n'}
[4.085306] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < v.size(); i++) {\n'}
[4.085356] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v[i] < v[min]) {\n'}
[4.085417] (unitree_guide2) StdoutLine: {'line': b'3: +        min = i;\n'}
[4.085465] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.085513] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.085561] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.085608] (unitree_guide2) StdoutLine: {'line': b'3: +    return min;\n'}
[4.085657] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.085704] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.085750] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.085797] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.085844] (unitree_guide2) StdoutLine: {'line': b'3: +  inline T dot_prod(const Vector < T > & a, const Vector < T > & b)\n'}
[4.085892] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.085939] (unitree_guide2) StdoutLine: {'line': b'3: +    T sum = (T)0;\n'}
[4.085990] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.size() != b.size()) {\n'}
[4.086045] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Dotprod error: the vectors are not the same size");\n'}
[4.086093] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.086141] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < a.size(); i++) {\n'}
[4.086189] (unitree_guide2) StdoutLine: {'line': b'3: +      sum += a[i] * b[i];\n'}
[4.086236] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.086284] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.086332] (unitree_guide2) StdoutLine: {'line': b'3: +    return sum;\n'}
[4.086393] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.086442] (unitree_guide2) StdoutLine: {'line': b'3: @@ -713,67 +796,72 @@\n'}
[4.086491] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.086540] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> exp(const Vector<T>& v)\n'}
[4.086589] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.086638] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v.size());\n'}
[4.086685] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.086734] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = exp(v[i]);\n'}
[4.086782] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.086831] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.086880] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.086933] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.086984] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.087033] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> log(const Vector<T>& v)\n'}
[4.087083] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.087133] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v.size());\n'}
[4.087181] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.087230] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = log(v[i]);\n'}
[4.087279] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.087327] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.087404] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.087452] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.087500] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.087550] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> vec_sqrt(const Vector<T>& v)\n'}
[4.087598] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.087646] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v.size());\n'}
[4.087704] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.087754] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = sqrt(v[i]);\n'}
[4.087803] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.087852] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.087902] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.087957] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.088007] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.088056] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> pow(const Vector<T>& v, double a)\n'}
[4.088105] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.088154] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v.size());\n'}
[4.088203] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.088252] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = pow(v[i], a);\n'}
[4.088300] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.088348] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.088396] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.088444] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.088492] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.088540] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> abs(const Vector<T>& v)\n'}
[4.088597] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.088646] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v.size());\n'}
[4.088695] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.088744] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = (T)fabs(v[i]);\n'}
[4.088793] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.088842] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.088895] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.089055] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.089110] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.089161] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> sign(const Vector<T>& v)\n'}
[4.089210] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.089259] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v.size());\n'}
[4.089308] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < v.size(); i++)\n'}
[4.089357] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = v[i] > 0 ? +1 : v[i] == 0 ? 0 : -1;\n'}
[4.089406] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.089454] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.089516] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.089563] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.089609] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.089657] (unitree_guide2) StdoutLine: {'line': b'3: -inline unsigned int partition(Vector<T>& v, unsigned int begin, unsigned int end)\n'}
[4.089705] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.089753] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int i = begin + 1, j = begin + 1;\n'}
[4.089802] (unitree_guide2) StdoutLine: {'line': b'3: -  T pivot = v[begin];\n'}
[4.089850] (unitree_guide2) StdoutLine: {'line': b'3: -  while (j <= end) \n'}
[4.089903] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.089951] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.089999] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > exp(const Vector < T > &v)\n'}
[4.090047] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.090095] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v.size());\n'}
[4.090143] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.090199] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = exp(v[i]);\n'}
[4.090247] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.090295] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.090342] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.090389] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.090436] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.090499] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.090548] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > log(const Vector < T > &v)\n'}
[4.090597] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.090740] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v.size());\n'}
[4.090811] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.090905] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = log(v[i]);\n'}
[4.090962] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.091012] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.091062] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.091112] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.091162] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.091211] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.091261] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > vec_sqrt(const Vector < T > &v)\n'}
[4.091311] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.091360] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v.size());\n'}
[4.091417] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.091481] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = sqrt(v[i]);\n'}
[4.091528] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.091576] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.091623] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.091670] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.091717] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.091765] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.091814] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > pow(const Vector < T > &v, double a)\n'}
[4.091900] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.091969] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v.size());\n'}
[4.092020] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.092069] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = pow(v[i], a);\n'}
[4.092118] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.092166] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.092215] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.092263] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.092311] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.092359] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.092406] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > abs(const Vector < T > &v)\n'}
[4.092454] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.092501] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v.size());\n'}
[4.092548] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.092610] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = (T)fabs(v[i]);\n'}
[4.092656] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.092702] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.092748] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.092800] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.092890] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.092938] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.092986] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > sign(const Vector < T > &v)\n'}
[4.093034] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.093080] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v.size());\n'}
[4.093128] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < v.size(); i++) {\n'}
[4.093174] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = v[i] > 0 ? +1 : v[i] == 0 ? 0 : -1;\n'}
[4.093220] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.093266] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.093312] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.093358] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.093404] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.093450] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.093496] (unitree_guide2) StdoutLine: {'line': b'3: +  inline unsigned int partition(Vector < T > & v, unsigned int begin, unsigned int end)\n'}
[4.093545] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.093591] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int i = begin + 1, j = begin + 1;\n'}
[4.093637] (unitree_guide2) StdoutLine: {'line': b'3: +    T pivot = v[begin];\n'}
[4.093700] (unitree_guide2) StdoutLine: {'line': b'3: +    while (j <= end) {\n'}
[4.093746] (unitree_guide2) StdoutLine: {'line': b'3: @@ -781,2 +869,2 @@\n'}
[4.093795] (unitree_guide2) StdoutLine: {'line': b'3: -\tstd::swap(v[i], v[j]);\n'}
[4.093857] (unitree_guide2) StdoutLine: {'line': b'3: -\ti++;\n'}
[4.093979] (unitree_guide2) StdoutLine: {'line': b'3: +        std::swap(v[i], v[j]);\n'}
[4.094034] (unitree_guide2) StdoutLine: {'line': b'3: +        i++;\n'}
[4.094091] (unitree_guide2) StdoutLine: {'line': b'3: @@ -786,11 +874,10 @@\n'}
[4.094137] (unitree_guide2) StdoutLine: {'line': b'3: -  v[begin] = v[i - 1];\n'}
[4.094183] (unitree_guide2) StdoutLine: {'line': b'3: -  v[i - 1] = pivot;\n'}
[4.094228] (unitree_guide2) StdoutLine: {'line': b'3: -  return i - 2;\n'}
[4.094273] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.094318] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.094363] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.094408] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.094456] (unitree_guide2) StdoutLine: {'line': b'3: -inline void quicksort(Vector<T>& v, unsigned int begin, unsigned int end)\n'}
[4.094507] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.094553] (unitree_guide2) StdoutLine: {'line': b'3: -  if (end > begin)\n'}
[4.094603] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.094651] (unitree_guide2) StdoutLine: {'line': b'3: +    v[begin] = v[i - 1];\n'}
[4.094703] (unitree_guide2) StdoutLine: {'line': b'3: +    v[i - 1] = pivot;\n'}
[4.094760] (unitree_guide2) StdoutLine: {'line': b'3: +    return i - 2;\n'}
[4.094835] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.094893] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.094939] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.094985] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.095031] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void quicksort(Vector < T > & v, unsigned int begin, unsigned int end)\n'}
[4.095077] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.095122] (unitree_guide2) StdoutLine: {'line': b'3: +    if (end > begin) {\n'}
[4.095168] (unitree_guide2) StdoutLine: {'line': b'3: @@ -801,19 +888,341 @@\n'}
[4.095213] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.095257] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.095301] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.095346] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> sort(const Vector<T>& v)\n'}
[4.095438] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.095515] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v);\n'}
[4.095560] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.095603] (unitree_guide2) StdoutLine: {'line': b'3: -  quicksort<T>(tmp, 0, tmp.size() - 1);\n'}
[4.095647] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.095691] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.095739] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.095783] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.095827] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.095871] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<double> rank(const Vector<T>& v)\n'}
[4.095915] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.095959] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v);\n'}
[4.096003] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<double> tmp_rank(0.0, v.size());\t\n'}
[4.096046] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.096089] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < tmp.size(); i++)\n'}
[4.096132] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.096176] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.096219] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.096262] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > sort(const Vector < T > &v)\n'}
[4.096306] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.096349] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v);\n'}
[4.096392] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.096436] (unitree_guide2) StdoutLine: {'line': b'3: +    quicksort < T > (tmp, 0, tmp.size() - 1);\n'}
[4.096507] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.096554] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.096598] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.096651] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.096700] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.096751] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < double > rank(const Vector < T > &v)\n'}
[4.096797] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.096842] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v);\n'}
[4.096887] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > tmp_rank(0.0, v.size());\n'}
[4.096931] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.096976] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < tmp.size(); i++) {\n'}
[4.097021] (unitree_guide2) StdoutLine: {'line': b'3: +      unsigned int smaller = 0, equal = 0;\n'}
[4.097066] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < tmp.size(); j++) {\n'}
[4.097110] (unitree_guide2) StdoutLine: {'line': b'3: +        if (i == j) {\n'}
[4.097155] (unitree_guide2) StdoutLine: {'line': b'3: +          continue;\n'}
[4.097199] (unitree_guide2) StdoutLine: {'line': b'3: +        } else if (tmp[j] < tmp[i]) {\n'}
[4.097243] (unitree_guide2) StdoutLine: {'line': b'3: +          smaller++;\n'}
[4.097288] (unitree_guide2) StdoutLine: {'line': b'3: +        } else if (tmp[j] == tmp[i]) {\n'}
[4.097333] (unitree_guide2) StdoutLine: {'line': b'3: +          equal++;\n'}
[4.097378] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.097423] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.097482] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp_rank[i] = smaller + 1;\n'}
[4.097529] (unitree_guide2) StdoutLine: {'line': b'3: +      if (equal > 0) {\n'}
[4.097575] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int j = 1; j <= equal; j++) {\n'}
[4.097621] (unitree_guide2) StdoutLine: {'line': b'3: +          tmp_rank[i] += smaller + 1 + j;\n'}
[4.097668] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.097719] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp_rank[i] /= (double)(equal + 1);\n'}
[4.097765] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.097810] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.097856] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.097902] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp_rank;\n'}
[4.097948] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.097994] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.098041] (unitree_guide2) StdoutLine: {'line': b'3: +//enum MType { DIAG };\n'}
[4.098087] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.098134] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.098180] (unitree_guide2) StdoutLine: {'line': b'3: +  class Matrix\n'}
[4.098227] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.098273] (unitree_guide2) StdoutLine: {'line': b'3: +public:\n'}
[4.098320] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix(); // Default constructor\n'}
[4.098366] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix(const unsigned int n, const unsigned int m); // Construct a n x m matrix\n'}
[4.098413] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix(const T & a, const unsigned int n, const unsigned int m); // Initialize the content to constant a\n'}
[4.098459] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix(MType t, const T & a, const T & o, const unsigned int n, const unsigned int m);\n'}
[4.098505] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix(MType t, const Vector < T > &v, const T & o, const unsigned int n, const unsigned int m);\n'}
[4.098551] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix(const T * a, const unsigned int n, const unsigned int m); // Initialize to array\n'}
[4.098597] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix(const Matrix < T > &rhs); // Copy constructor\n'}
[4.098663] (unitree_guide2) StdoutLine: {'line': b'3: +    ~Matrix(); // destructor\n'}
[4.098712] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.098760] (unitree_guide2) StdoutLine: {'line': b'3: +    inline T * operator[] (const unsigned int & i) {return v[i];} // Subscripting: row i\n'}
[4.098814] (unitree_guide2) StdoutLine: {'line': b'3: +    inline const T * operator[] (const unsigned int & i) const {return v[i];} // const subsctipting\n'}
[4.098863] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.098911] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void resize(const unsigned int n, const unsigned int m);\n'}
[4.098960] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void resize(const T & a, const unsigned int n, const unsigned int m);\n'}
[4.099008] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.099056] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.099104] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > extractRow(const unsigned int i) const;\n'}
[4.099153] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > extractColumn(const unsigned int j) const;\n'}
[4.099202] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Vector < T > extractDiag() const;\n'}
[4.099250] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > extractRows(const std::set < unsigned int > &indexes) const;\n'}
[4.099298] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > extractColumns(const std::set < unsigned int > &indexes) const;\n'}
[4.099346] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > extract(\n'}
[4.099394] (unitree_guide2) StdoutLine: {'line': b'3: +      const std::set < unsigned int > &r_indexes,\n'}
[4.099441] (unitree_guide2) StdoutLine: {'line': b'3: +      const std::set < unsigned int > &c_indexes) const;\n'}
[4.099502] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.099552] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void set(const T * a, unsigned int n, unsigned int m);\n'}
[4.099601] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void set(\n'}
[4.099660] (unitree_guide2) StdoutLine: {'line': b'3: +      const std::set < unsigned int > & r_indexes,\n'}
[4.099710] (unitree_guide2) StdoutLine: {'line': b'3: +      const std::set < unsigned int > & c_indexes, const Matrix < T > & m);\n'}
[4.099760] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void setRow(const unsigned int index, const Vector < T > & v);\n'}
[4.099810] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void setRow(const unsigned int index, const Matrix < T > & v);\n'}
[4.099859] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void setRows(const std::set < unsigned int > & indexes, const Matrix < T > & m);\n'}
[4.099908] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void setColumn(const unsigned int index, const Vector < T > & v);\n'}
[4.099958] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void setColumn(const unsigned int index, const Matrix < T > & v);\n'}
[4.100007] (unitree_guide2) StdoutLine: {'line': b'3: +    inline void setColumns(const std::set < unsigned int > & indexes, const Matrix < T > & m);\n'}
[4.100056] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.100104] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.100152] (unitree_guide2) StdoutLine: {'line': b'3: +    inline unsigned int nrows() const {return n;} // number of rows\n'}
[4.100201] (unitree_guide2) StdoutLine: {'line': b'3: +    inline unsigned int ncols() const {return m;} // number of columns\n'}
[4.100251] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.100299] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator = (const Matrix < T > &rhs); // Assignment operator\n'}
[4.100352] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator = (const T & a); // Assign to every element value a\n'}
[4.100402] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator += (const Matrix < T > &rhs);\n'}
[4.100451] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator -= (const Matrix < T > &rhs);\n'}
[4.100500] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator *= (const Matrix < T > &rhs);\n'}
[4.100558] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator /= (const Matrix < T > &rhs);\n'}
[4.100611] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator ^= (const Matrix < T > &rhs);\n'}
[4.100662] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator += (const T & a);\n'}
[4.100712] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator -= (const T & a);\n'}
[4.100770] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator *= (const T & a);\n'}
[4.100819] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator /= (const T & a);\n'}
[4.100868] (unitree_guide2) StdoutLine: {'line': b'3: +    inline Matrix < T > & operator ^= (const T & a);\n'}
[4.100918] (unitree_guide2) StdoutLine: {'line': b'3: +    inline operator Vector < T > ();\n'}
[4.100967] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.101015] (unitree_guide2) StdoutLine: {'line': b'3: +private:\n'}
[4.101064] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n; // number of rows\n'}
[4.101113] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int m; // number of columns\n'}
[4.101161] (unitree_guide2) StdoutLine: {'line': b'3: +    T ** v; // storage for data\n'}
[4.101210] (unitree_guide2) StdoutLine: {'line': b'3: +  };\n'}
[4.101258] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.101307] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.101356] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::Matrix()\n'}
[4.101404] (unitree_guide2) StdoutLine: {'line': b'3: +    : n(0), m(0), v(0)\n'}
[4.101453] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.101502] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.101551] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.101600] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.101649] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::Matrix(unsigned int n, unsigned int m)\n'}
[4.101699] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T *[n])\n'}
[4.101749] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.101798] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n; this->m = m;\n'}
[4.101847] (unitree_guide2) StdoutLine: {'line': b'3: +    v[0] = new T[m * n];\n'}
[4.101896] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.101945] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = v[i - 1] + m;\n'}
[4.101994] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.102042] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.102091] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.102146] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.102196] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::Matrix(const T & a, unsigned int n, unsigned int m)\n'}
[4.102246] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T *[n])\n'}
[4.102294] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.102343] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n; this->m = m;\n'}
[4.102393] (unitree_guide2) StdoutLine: {'line': b'3: +    v[0] = new T[m * n];\n'}
[4.102441] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.102491] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = v[i - 1] + m;\n'}
[4.102553] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.102601] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.102648] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.102696] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = a;\n'}
[4.102743] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.102789] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.102836] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.102883] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.102936] (unitree_guide2) StdoutLine: {'line': b'3: +  template < class T >\n'}
[4.102983] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::Matrix(const T * a, unsigned int n, unsigned int m)\n'}
[4.103031] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T *[n])\n'}
[4.103078] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.103129] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n; this->m = m;\n'}
[4.103178] (unitree_guide2) StdoutLine: {'line': b'3: +    v[0] = new T[m * n];\n'}
[4.103226] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.103274] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = v[i - 1] + m;\n'}
[4.103322] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.103370] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.103418] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.103466] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = *a++;\n'}
[4.103513] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.103560] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.103608] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.103655] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.103703] (unitree_guide2) StdoutLine: {'line': b'3: +  template < class T >\n'}
[4.103750] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::Matrix(MType t, const T & a, const T & o, unsigned int n, unsigned int m)\n'}
[4.103798] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T *[n])\n'}
[4.103846] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.103893] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n; this->m = m;\n'}
[4.103940] (unitree_guide2) StdoutLine: {'line': b'3: +    v[0] = new T[m * n];\n'}
[4.103988] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.104036] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = v[i - 1] + m;\n'}
[4.104092] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.104142] (unitree_guide2) StdoutLine: {'line': b'3: +    switch (t) {\n'}
[4.104191] (unitree_guide2) StdoutLine: {'line': b'3: +      case DIAG:\n'}
[4.104239] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int i = 0; i < n; i++) {\n'}
[4.104287] (unitree_guide2) StdoutLine: {'line': b'3: +          for (unsigned int j = 0; j < m; j++) {\n'}
[4.104335] (unitree_guide2) StdoutLine: {'line': b'3: +            if (i != j) {\n'}
[4.104383] (unitree_guide2) StdoutLine: {'line': b'3: +              v[i][j] = o;\n'}
[4.104431] (unitree_guide2) StdoutLine: {'line': b'3: +            } else {\n'}
[4.104478] (unitree_guide2) StdoutLine: {'line': b'3: +              v[i][j] = a;\n'}
[4.104727] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.104801] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.104853] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.104905] (unitree_guide2) StdoutLine: {'line': b'3: +        break;\n'}
[4.104954] (unitree_guide2) StdoutLine: {'line': b'3: +      default:\n'}
[4.105005] (unitree_guide2) StdoutLine: {'line': b'3: +        throw std::logic_error("Matrix type not supported");\n'}
[4.105065] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.105157] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.105208] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.105254] (unitree_guide2) StdoutLine: {'line': b'3: +  template < class T >\n'}
[4.105301] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::Matrix(MType t, const Vector < T > &a, const T & o, unsigned int n, unsigned int m)\n'}
[4.105349] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T *[n])\n'}
[4.105395] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.105442] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n; this->m = m;\n'}
[4.105489] (unitree_guide2) StdoutLine: {'line': b'3: +    v[0] = new T[m * n];\n'}
[4.105545] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.105600] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = v[i - 1] + m;\n'}
[4.105653] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.105718] (unitree_guide2) StdoutLine: {'line': b'3: +    switch (t) {\n'}
[4.105767] (unitree_guide2) StdoutLine: {'line': b'3: +      case DIAG:\n'}
[4.105817] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int i = 0; i < n; i++) {\n'}
[4.105864] (unitree_guide2) StdoutLine: {'line': b'3: +          for (unsigned int j = 0; j < m; j++) {\n'}
[4.105914] (unitree_guide2) StdoutLine: {'line': b'3: +            if (i != j) {\n'}
[4.105961] (unitree_guide2) StdoutLine: {'line': b'3: +              v[i][j] = o;\n'}
[4.106019] (unitree_guide2) StdoutLine: {'line': b'3: +            } else {\n'}
[4.106120] (unitree_guide2) StdoutLine: {'line': b'3: +              v[i][j] = a[i];\n'}
[4.106171] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.106217] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.106262] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.106307] (unitree_guide2) StdoutLine: {'line': b'3: +        break;\n'}
[4.106353] (unitree_guide2) StdoutLine: {'line': b'3: +      default:\n'}
[4.106398] (unitree_guide2) StdoutLine: {'line': b'3: +        throw std::logic_error("Matrix type not supported");\n'}
[4.106460] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.106508] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.106558] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.106605] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.106654] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::Matrix(const Matrix < T > &rhs)\n'}
[4.106701] (unitree_guide2) StdoutLine: {'line': b'3: +    : v(new T *[rhs.n])\n'}
[4.106755] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.106808] (unitree_guide2) StdoutLine: {'line': b'3: +    n = rhs.n; m = rhs.m;\n'}
[4.106856] (unitree_guide2) StdoutLine: {'line': b'3: +    v[0] = new T[m * n];\n'}
[4.106904] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.106951] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = v[i - 1] + m;\n'}
[4.107003] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.107053] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.107139] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.107188] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = rhs[i][j];\n'}
[4.107233] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.107277] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.107322] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.107366] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.107411] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.107455] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > ::~Matrix()\n'}
[4.107500] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.107544] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v != 0) {\n'}
[4.107593] (unitree_guide2) StdoutLine: {'line': b'3: +      delete[] (v[0]);\n'}
[4.107639] (unitree_guide2) StdoutLine: {'line': b'3: +      delete[] (v);\n'}
[4.107723] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.107773] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.107819] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.107879] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.107931] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator = (const Matrix < T > &rhs)\n'}
[4.107981] (unitree_guide2) StdoutLine: {'line': b'3: +// postcondition: normal assignment via copying has been performed;\n'}
[4.108034] (unitree_guide2) StdoutLine: {'line': b'3: +// if matrix and rhs were different sizes, matrix\n'}
[4.108078] (unitree_guide2) StdoutLine: {'line': b'3: +// has been resized to match the size of rhs\n'}
[4.108136] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.108179] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this != &rhs) {\n'}
[4.108223] (unitree_guide2) StdoutLine: {'line': b'3: +      resize(rhs.n, rhs.m);\n'}
[4.108268] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < n; i++) {\n'}
[4.108326] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int j = 0; j < m; j++) {\n'}
[4.108371] (unitree_guide2) StdoutLine: {'line': b'3: +          v[i][j] = rhs[i][j];\n'}
[4.108415] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.108460] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.108505] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.108549] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.108594] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.108638] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.108682] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.108776] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator = (const T & a) // assign a to every element\n'}
[4.108823] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.108866] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.108910] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.108957] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = a;\n'}
[4.109002] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.109046] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.109090] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.109134] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.109178] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.109223] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.109267] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.109312] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::resize(const unsigned int n, const unsigned int m)\n'}
[4.109358] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.109403] (unitree_guide2) StdoutLine: {'line': b'3: +    if (n == this->n && m == this->m) {\n'}
[4.109459] (unitree_guide2) StdoutLine: {'line': b'3: +      return;\n'}
[4.109500] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.109541] (unitree_guide2) StdoutLine: {'line': b'3: +    if (v != 0) {\n'}
[4.109581] (unitree_guide2) StdoutLine: {'line': b'3: +      delete[] (v[0]);\n'}
[4.109622] (unitree_guide2) StdoutLine: {'line': b'3: +      delete[] (v);\n'}
[4.109663] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.109703] (unitree_guide2) StdoutLine: {'line': b'3: +    this->n = n; this->m = m;\n'}
[4.109745] (unitree_guide2) StdoutLine: {'line': b'3: +    v = new T *[n];\n'}
[4.109786] (unitree_guide2) StdoutLine: {'line': b'3: +    v[0] = new T[m * n];\n'}
[4.109827] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.109868] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i] = v[i - 1] + m;\n'}
[4.109908] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.109955] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.109997] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.110038] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.110080] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::resize(const T & a, const unsigned int n, const unsigned int m)\n'}
[4.110124] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.110165] (unitree_guide2) StdoutLine: {'line': b'3: +    resize(n, m);\n'}
[4.110206] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.110247] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.110288] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = a;\n'}
[4.110329] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.110380] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.110420] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.110461] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.110502] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.110542] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.110583] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > Matrix < T > ::extractRow(const unsigned int i) const\n'}
[4.110624] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.110664] (unitree_guide2) StdoutLine: {'line': b'3: +    if (i >= n) {\n'}
[4.110706] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");\n'}
[4.110748] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.110789] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(v[i], m);\n'}
[4.110830] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.110871] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.110918] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.110961] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.111002] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.111042] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > Matrix < T > ::extractColumn(const unsigned int j) const\n'}
[4.111083] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.111123] (unitree_guide2) StdoutLine: {'line': b'3: +    if (j >= m) {\n'}
[4.111163] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");\n'}
[4.111205] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.111246] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(n);\n'}
[4.111286] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.111327] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.111368] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = v[i][j];\n'}
[4.111572] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.111627] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.111669] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.111740] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.111785] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.111829] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.111883] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Vector < T > Matrix < T > ::extractDiag() const\n'}
[4.111956] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.112049] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int d = std::min(n, m);\n'}
[4.112094] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.112136] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp(d);\n'}
[4.112178] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.112219] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < d; i++) {\n'}
[4.112260] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp[i] = v[i][i];\n'}
[4.112301] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.112342] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.112382] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.112423] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.112463] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.112504] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.112544] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.112585] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > Matrix < T > ::extractRows(const std::set < unsigned int > &indexes) const\n'}
[4.112628] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.112670] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(indexes.size(), m);\n'}
[4.112717] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int i = 0;\n'}
[4.112762] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.112824] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();\n'}
[4.112914] (unitree_guide2) StdoutLine: {'line': b'3: +      el++)\n'}
[4.112961] (unitree_guide2) StdoutLine: {'line': b'3: @@ -821,132 +1230,20 @@\n'}
[4.113004] (unitree_guide2) StdoutLine: {'line': b'3: -      unsigned int smaller = 0, equal = 0;\n'}
[4.113046] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 0; j < tmp.size(); j++)\n'}
[4.113087] (unitree_guide2) StdoutLine: {'line': b'3: -\tif (i == j)\n'}
[4.113128] (unitree_guide2) StdoutLine: {'line': b'3: -\t  continue;\n'}
[4.113168] (unitree_guide2) StdoutLine: {'line': b'3: -\telse\n'}
[4.113209] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (tmp[j] < tmp[i])\n'}
[4.113249] (unitree_guide2) StdoutLine: {'line': b'3: -\t    smaller++;\n'}
[4.113290] (unitree_guide2) StdoutLine: {'line': b'3: -\t  else if (tmp[j] == tmp[i])\n'}
[4.113331] (unitree_guide2) StdoutLine: {'line': b'3: -\t    equal++;\n'}
[4.113371] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp_rank[i] = smaller + 1;\n'}
[4.113412] (unitree_guide2) StdoutLine: {'line': b'3: -      if (equal > 0)\n'}
[4.113453] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.113494] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (unsigned int j = 1; j <= equal; j++)\n'}
[4.113535] (unitree_guide2) StdoutLine: {'line': b'3: -\t    tmp_rank[i] += smaller + 1 + j;\n'}
[4.113576] (unitree_guide2) StdoutLine: {'line': b'3: -\t  tmp_rank[i] /= (double)(equal + 1);\n'}
[4.113617] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.113658] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.113700] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.113741] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp_rank;\n'}
[4.113782] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.113823] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.113866] (unitree_guide2) StdoutLine: {'line': b'3: -//enum MType { DIAG };\n'}
[4.113907] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.113947] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.113988] (unitree_guide2) StdoutLine: {'line': b'3: -class Matrix \n'}
[4.114029] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.114069] (unitree_guide2) StdoutLine: {'line': b'3: -public:\n'}
[4.114110] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix(); // Default constructor\n'}
[4.114151] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix(const unsigned int n, const unsigned int m); // Construct a n x m matrix\n'}
[4.114193] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix(const T& a, const unsigned int n, const unsigned int m); // Initialize the content to constant a\n'}
[4.114234] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix(MType t, const T& a, const T& o, const unsigned int n, const unsigned int m);\n'}
[4.114276] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix(MType t, const Vector<T>& v, const T& o, const unsigned int n, const unsigned int m);\n'}
[4.114317] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix(const T* a, const unsigned int n, const unsigned int m); // Initialize to array \n'}
[4.114358] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix(const Matrix<T>& rhs); // Copy constructor\n'}
[4.114399] (unitree_guide2) StdoutLine: {'line': b'3: -  ~Matrix(); // destructor\n'}
[4.114440] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.114481] (unitree_guide2) StdoutLine: {'line': b'3: -  inline T* operator[](const unsigned int& i) { return v[i]; } // Subscripting: row i\n'}
[4.114522] (unitree_guide2) StdoutLine: {'line': b'3: -  inline const T* operator[](const unsigned int& i) const { return v[i]; }; // const subsctipting\n'}
[4.114575] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.114617] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void resize(const unsigned int n, const unsigned int m);\n'}
[4.114657] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void resize(const T& a, const unsigned int n, const unsigned int m);\n'}
[4.114704] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.114744] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.114787] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T> extractRow(const unsigned int i) const; \n'}
[4.114835] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T> extractColumn(const unsigned int j) const;\n'}
[4.114877] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Vector<T> extractDiag() const;\n'}
[4.114919] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T> extractRows(const std::set<unsigned int>& indexes) const;\n'}
[4.114960] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T> extractColumns(const std::set<unsigned int>& indexes) const;\n'}
[4.115002] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T> extract(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes) const;\n'}
[4.115044] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.115085] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void set(const T* a, unsigned int n, unsigned int m);\n'}
[4.115127] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void set(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes, const Matrix<T>& m);\n'}
[4.115176] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void setRow(const unsigned int index, const Vector<T>& v);\n'}
[4.115219] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void setRow(const unsigned int index, const Matrix<T>& v);\n'}
[4.115260] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void setRows(const std::set<unsigned int>& indexes, const Matrix<T>& m);\n'}
[4.115301] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void setColumn(const unsigned int index, const Vector<T>& v);\n'}
[4.115342] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void setColumn(const unsigned int index, const Matrix<T>& v);\n'}
[4.115383] (unitree_guide2) StdoutLine: {'line': b'3: -  inline void setColumns(const std::set<unsigned int>& indexes, const Matrix<T>& m);\n'}
[4.115424] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.115464] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.115505] (unitree_guide2) StdoutLine: {'line': b'3: -  inline unsigned int nrows() const { return n; } // number of rows\n'}
[4.115546] (unitree_guide2) StdoutLine: {'line': b'3: -  inline unsigned int ncols() const { return m; } // number of columns\n'}
[4.115587] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.115628] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator=(const Matrix<T>& rhs); // Assignment operator\n'}
[4.115669] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator=(const T& a); // Assign to every element value a\n'}
[4.115711] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator+=(const Matrix<T>& rhs);\n'}
[4.115753] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator-=(const Matrix<T>& rhs);\n'}
[4.115798] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator*=(const Matrix<T>& rhs);\n'}
[4.115840] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator/=(const Matrix<T>& rhs);\n'}
[4.115881] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator^=(const Matrix<T>& rhs);\n'}
[4.115922] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator+=(const T& a);\n'}
[4.115964] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator-=(const T& a);\n'}
[4.116005] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator*=(const T& a);\n'}
[4.116046] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator/=(const T& a);\n'}
[4.116086] (unitree_guide2) StdoutLine: {'line': b'3: -  inline Matrix<T>& operator^=(const T& a);\n'}
[4.116127] (unitree_guide2) StdoutLine: {'line': b'3: -  inline operator Vector<T>();\n'}
[4.116167] (unitree_guide2) StdoutLine: {'line': b'3: -private:\n'}
[4.116213] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n; // number of rows\n'}
[4.116253] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int m; // number of columns\n'}
[4.116294] (unitree_guide2) StdoutLine: {'line': b'3: -  T **v; // storage for data\n'}
[4.116335] (unitree_guide2) StdoutLine: {'line': b'3: -};\n'}
[4.116375] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.116416] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.116457] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::Matrix() \n'}
[4.116498] (unitree_guide2) StdoutLine: {'line': b'3: -  : n(0), m(0), v(0)\n'}
[4.116539] (unitree_guide2) StdoutLine: {'line': b'3: -{}\n'}
[4.116580] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.116621] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.116663] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::Matrix(unsigned int n, unsigned int m)\n'}
[4.116704] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T*[n])\n'}
[4.116746] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.116790] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n; this->m = m;\n'}
[4.116832] (unitree_guide2) StdoutLine: {'line': b'3: -  v[0] = new T[m * n];\n'}
[4.116873] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.116914] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = v[i - 1] + m;\n'}
[4.116955] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.116995] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.117036] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.117077] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::Matrix(const T& a, unsigned int n, unsigned int m)\n'}
[4.117119] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T*[n])\n'}
[4.117160] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.117201] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n; this->m = m;\n'}
[4.117243] (unitree_guide2) StdoutLine: {'line': b'3: -  v[0] = new T[m * n];\n'}
[4.117284] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.117326] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = v[i - 1] + m;\n'}
[4.117367] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.117409] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.117449] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = a;\n'}
[4.117490] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.117531] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.117572] (unitree_guide2) StdoutLine: {'line': b'3: -template <class T> \n'}
[4.117612] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::Matrix(const T* a, unsigned int n, unsigned int m) \n'}
[4.117654] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T*[n])\n'}
[4.117695] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.117737] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n; this->m = m;\n'}
[4.117802] (unitree_guide2) StdoutLine: {'line': b'3: -  v[0] = new T[m * n]; \n'}
[4.117857] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.117898] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = v[i - 1] + m; \n'}
[4.117939] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.117980] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.118022] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = *a++; \n'}
[4.118063] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.118105] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.118145] (unitree_guide2) StdoutLine: {'line': b'3: -template <class T> \n'}
[4.118187] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::Matrix(MType t, const T& a, const T& o, unsigned int n, unsigned int m) \n'}
[4.118228] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T*[n])\n'}
[4.118288] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.118342] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n; this->m = m;\n'}
[4.118385] (unitree_guide2) StdoutLine: {'line': b'3: -  v[0] = new T[m * n]; \n'}
[4.118427] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.118470] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = v[i - 1] + m; \n'}
[4.118513] (unitree_guide2) StdoutLine: {'line': b'3: -  switch (t)\n'}
[4.118556] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.118599] (unitree_guide2) StdoutLine: {'line': b'3: +        if (*el >= n) {\n'}
[4.118642] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");\n'}
[4.118687] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.118734] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = v[*el][j];\n'}
[4.118778] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.118821] (unitree_guide2) StdoutLine: {'line': b'3: +      i++;\n'}
[4.118864] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.118907] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.118950] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.118994] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.119036] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.119083] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.119139] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > Matrix < T > ::extractColumns(const std::set < unsigned int > &indexes) const\n'}
[4.119187] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.119228] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(n, indexes.size());\n'}
[4.119269] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int j = 0;\n'}
[4.119310] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.119350] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();\n'}
[4.119392] (unitree_guide2) StdoutLine: {'line': b'3: +      el++)\n'}
[4.119433] (unitree_guide2) StdoutLine: {'line': b'3: @@ -954,22 +1251,22 @@\n'}
[4.119473] (unitree_guide2) StdoutLine: {'line': b'3: -    case DIAG:\n'}
[4.119514] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < n; i++)\n'}
[4.119556] (unitree_guide2) StdoutLine: {'line': b'3: -\tfor (unsigned int j = 0; j < m; j++)\n'}
[4.119597] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (i != j)\n'}
[4.119638] (unitree_guide2) StdoutLine: {'line': b'3: -\t    v[i][j] = o; \n'}
[4.119679] (unitree_guide2) StdoutLine: {'line': b'3: -\t  else\n'}
[4.119723] (unitree_guide2) StdoutLine: {'line': b'3: -\t    v[i][j] = a;\n'}
[4.119764] (unitree_guide2) StdoutLine: {'line': b'3: -      break;\n'}
[4.119804] (unitree_guide2) StdoutLine: {'line': b'3: -    default:\n'}
[4.119844] (unitree_guide2) StdoutLine: {'line': b'3: -      throw std::logic_error("Matrix type not supported");\n'}
[4.119885] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.119925] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.119965] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.120006] (unitree_guide2) StdoutLine: {'line': b'3: -template <class T> \n'}
[4.120047] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::Matrix(MType t, const Vector<T>& a, const T& o, unsigned int n, unsigned int m) \n'}
[4.120088] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T*[n])\n'}
[4.120129] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.120170] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n; this->m = m;\n'}
[4.120211] (unitree_guide2) StdoutLine: {'line': b'3: -  v[0] = new T[m * n]; \n'}
[4.120253] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.120296] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = v[i - 1] + m; \n'}
[4.120338] (unitree_guide2) StdoutLine: {'line': b'3: -  switch (t)\n'}
[4.120383] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < n; i++) {\n'}
[4.120424] (unitree_guide2) StdoutLine: {'line': b'3: +        if (*el >= m) {\n'}
[4.120465] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::logic_error("Error extracting columns: the indexes are out of matrix bounds");\n'}
[4.120506] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.120546] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = v[i][*el];\n'}
[4.120587] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.120628] (unitree_guide2) StdoutLine: {'line': b'3: +      j++;\n'}
[4.120671] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.120712] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.120753] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.120793] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.120834] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.120875] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.120916] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > Matrix < T > ::extract(\n'}
[4.120957] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::set < unsigned int > &r_indexes,\n'}
[4.120999] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::set < unsigned int > &c_indexes) const\n'}
[4.121040] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.121081] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(r_indexes.size(), c_indexes.size());\n'}
[4.121122] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int i = 0, j;\n'}
[4.121163] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.121204] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::set < unsigned int > ::const_iterator r_el = r_indexes.begin();\n'}
[4.121246] (unitree_guide2) StdoutLine: {'line': b'3: +      r_el != r_indexes.end(); r_el++)\n'}
[4.121287] (unitree_guide2) StdoutLine: {'line': b'3: @@ -977,42 +1274,61 @@\n'}
[4.121328] (unitree_guide2) StdoutLine: {'line': b'3: -    case DIAG:\n'}
[4.121368] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < n; i++)\n'}
[4.121408] (unitree_guide2) StdoutLine: {'line': b'3: -\tfor (unsigned int j = 0; j < m; j++)\n'}
[4.121449] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (i != j)\n'}
[4.121491] (unitree_guide2) StdoutLine: {'line': b'3: -\t    v[i][j] = o; \n'}
[4.121532] (unitree_guide2) StdoutLine: {'line': b'3: -\t  else\n'}
[4.121573] (unitree_guide2) StdoutLine: {'line': b'3: -\t    v[i][j] = a[i];\n'}
[4.121615] (unitree_guide2) StdoutLine: {'line': b'3: -      break;\n'}
[4.121680] (unitree_guide2) StdoutLine: {'line': b'3: -    default:\n'}
[4.121724] (unitree_guide2) StdoutLine: {'line': b'3: -      throw std::logic_error("Matrix type not supported");\n'}
[4.121768] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.121823] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.121863] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.121904] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.121945] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::Matrix(const Matrix<T>& rhs)\n'}
[4.121985] (unitree_guide2) StdoutLine: {'line': b'3: -  : v(new T*[rhs.n])\n'}
[4.122026] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.122067] (unitree_guide2) StdoutLine: {'line': b'3: -  n = rhs.n; m = rhs.m;\n'}
[4.122107] (unitree_guide2) StdoutLine: {'line': b'3: -  v[0] = new T[m * n]; \n'}
[4.122148] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.122188] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = v[i - 1] + m;\n'}
[4.122229] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.122270] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.122311] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = rhs[i][j];\n'}
[4.122352] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.122393] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.122439] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.122480] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T>::~Matrix() \n'}
[4.122522] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.122562] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v != 0) { \n'}
[4.122603] (unitree_guide2) StdoutLine: {'line': b'3: -    delete[] (v[0]); \n'}
[4.122648] (unitree_guide2) StdoutLine: {'line': b'3: -    delete[] (v); \n'}
[4.122689] (unitree_guide2) StdoutLine: {'line': b'3: -  } \n'}
[4.122730] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.122770] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\t\t\n'}
[4.122811] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.122852] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator=(const Matrix<T> &rhs) \n'}
[4.122893] (unitree_guide2) StdoutLine: {'line': b'3: -// postcondition: normal assignment via copying has been performed; \n'}
[4.122935] (unitree_guide2) StdoutLine: {'line': b'3: -// if matrix and rhs were different sizes, matrix \n'}
[4.122975] (unitree_guide2) StdoutLine: {'line': b'3: -// has been resized to match the size of rhs \n'}
[4.123016] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.123057] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this != &rhs) \n'}
[4.123099] (unitree_guide2) StdoutLine: {'line': b'3: +      if (*r_el >= n) {\n'}
[4.123247] (unitree_guide2) StdoutLine: {'line': b'3: +        throw std::logic_error("Error extracting submatrix: the indexes are out of matrix bounds");\n'}
[4.123309] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.123352] (unitree_guide2) StdoutLine: {'line': b'3: +      j = 0;\n'}
[4.123393] (unitree_guide2) StdoutLine: {'line': b'3: +      for (std::set < unsigned int > ::const_iterator c_el = c_indexes.begin();\n'}
[4.123435] (unitree_guide2) StdoutLine: {'line': b'3: +        c_el != c_indexes.end(); c_el++)\n'}
[4.123497] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.123548] (unitree_guide2) StdoutLine: {'line': b'3: +        if (*c_el >= m) {\n'}
[4.123601] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");\n'}
[4.123646] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.123687] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = v[*r_el][*c_el];\n'}
[4.123729] (unitree_guide2) StdoutLine: {'line': b'3: +        j++;\n'}
[4.123774] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.123817] (unitree_guide2) StdoutLine: {'line': b'3: +      i++;\n'}
[4.123861] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.123908] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.123958] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.124038] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.124080] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.124121] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.124162] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::setRow(unsigned int i, const Vector < T > &a)\n'}
[4.124203] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.124244] (unitree_guide2) StdoutLine: {'line': b'3: +    if (i >= n) {\n'}
[4.124285] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");\n'}
[4.124327] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.124368] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->m != a.size()) {\n'}
[4.124409] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix row: ranges are not compatible");\n'}
[4.124450] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.124491] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < ncols(); j++) {\n'}
[4.124532] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i][j] = a[j];\n'}
[4.124575] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.124648] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.124694] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.124735] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.124776] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::setRow(unsigned int i, const Matrix < T > &a)\n'}
[4.124816] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.124868] (unitree_guide2) StdoutLine: {'line': b'3: +    if (i >= n) {\n'}
[4.124918] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");\n'}
[4.124960] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.125001] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->m != a.ncols()) {\n'}
[4.125050] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix column: ranges are not compatible");\n'}
[4.125092] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.125134] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.nrows() != 1) {\n'}
[4.125175] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix column with a non-row matrix");\n'}
[4.125217] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.125258] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < ncols(); j++) {\n'}
[4.125299] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i][j] = a[0][j];\n'}
[4.125340] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.125380] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.125421] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.125461] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.125501] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T >\n'}
[4.125541] (unitree_guide2) StdoutLine: {'line': b'3: +  ::setRows(const std::set < unsigned int > &indexes, const Matrix < T > &m)\n'}
[4.125586] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.125627] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int i = 0;\n'}
[4.125668] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.125709] (unitree_guide2) StdoutLine: {'line': b'3: +    if (indexes.size() != m.nrows() || this->m != m.ncols()) {\n'}
[4.125750] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix rows: ranges are not compatible");\n'}
[4.125791] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.125833] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();\n'}
[4.125874] (unitree_guide2) StdoutLine: {'line': b'3: +      el++)\n'}
[4.125916] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1020,90 +1336,54 @@\n'}
[4.125956] (unitree_guide2) StdoutLine: {'line': b'3: -      resize(rhs.n, rhs.m);\n'}
[4.125997] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < n; i++)\n'}
[4.126091] (unitree_guide2) StdoutLine: {'line': b'3: -\tfor (unsigned int j = 0; j < m; j++)\n'}
[4.126145] (unitree_guide2) StdoutLine: {'line': b'3: -\t  v[i][j] = rhs[i][j]; \n'}
[4.126188] (unitree_guide2) StdoutLine: {'line': b'3: -    } \n'}
[4.126231] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this; \n'}
[4.126273] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.126316] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.126359] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.126402] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator=(const T& a) // assign a to every element \n'}
[4.126446] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.126489] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.126542] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.126587] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = a; \n'}
[4.126631] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this; \n'}
[4.126684] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.126727] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.126771] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.126815] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.126858] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::resize(const unsigned int n, const unsigned int m) \n'}
[4.126901] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.126943] (unitree_guide2) StdoutLine: {'line': b'3: -  if (n == this->n && m == this->m)\n'}
[4.126987] (unitree_guide2) StdoutLine: {'line': b'3: -    return;\n'}
[4.127030] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v != 0) \n'}
[4.127073] (unitree_guide2) StdoutLine: {'line': b'3: -    { \n'}
[4.127115] (unitree_guide2) StdoutLine: {'line': b'3: -      delete[] (v[0]); \n'}
[4.127159] (unitree_guide2) StdoutLine: {'line': b'3: -      delete[] (v); \n'}
[4.127202] (unitree_guide2) StdoutLine: {'line': b'3: -    } \n'}
[4.127245] (unitree_guide2) StdoutLine: {'line': b'3: -  this->n = n; this->m = m;\n'}
[4.127288] (unitree_guide2) StdoutLine: {'line': b'3: -  v = new T*[n]; \n'}
[4.127332] (unitree_guide2) StdoutLine: {'line': b'3: -  v[0] = new T[m * n];  \n'}
[4.127376] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.127517] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i] = v[i - 1] + m;\n'}
[4.127586] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.127631] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.127675] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.127719] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::resize(const T& a, const unsigned int n, const unsigned int m) \n'}
[4.127764] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.127807] (unitree_guide2) StdoutLine: {'line': b'3: -  resize(n, m);\n'}
[4.127850] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.127894] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.127937] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = a;\n'}
[4.127980] (unitree_guide2) StdoutLine: {'line': b'3: -} \n'}
[4.128023] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.128066] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.128109] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.128152] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.128196] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> Matrix<T>::extractRow(const unsigned int i) const\n'}
[4.128241] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.128285] (unitree_guide2) StdoutLine: {'line': b'3: -  if (i >= n)\n'}
[4.128329] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");\n'}
[4.128384] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(v[i], m);\n'}
[4.128428] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.128472] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.128523] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.128624] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.128674] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.128717] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> Matrix<T>::extractColumn(const unsigned int j) const\n'}
[4.128761] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.128805] (unitree_guide2) StdoutLine: {'line': b'3: -  if (j >= m)\n'}
[4.128847] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");\n'}
[4.128891] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(n);\n'}
[4.128934] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.128977] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.129020] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = v[i][j];\n'}
[4.129071] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.129115] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.129160] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.129203] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.129247] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.129290] (unitree_guide2) StdoutLine: {'line': b'3: -inline Vector<T> Matrix<T>::extractDiag() const\n'}
[4.129334] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.129377] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int d = std::min(n, m);\n'}
[4.129420] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.129468] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp(d);\n'}
[4.129600] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.129658] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < d; i++)\n'}
[4.129702] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp[i] = v[i][i];\n'}
[4.129745] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.129788] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.129831] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.129873] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.129916] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.129959] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.130002] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T> Matrix<T>::extractRows(const std::set<unsigned int>& indexes) const\n'}
[4.130047] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.130090] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(indexes.size(), m);\n'}
[4.130134] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int i = 0;\n'}
[4.130178] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.130222] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)\n'}
[4.130266] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < ncols(); j++) {\n'}
[4.130310] (unitree_guide2) StdoutLine: {'line': b'3: +        if (*el >= n) {\n'}
[4.130353] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::logic_error("Error in setRows: trying to set a row out of matrix bounds");\n'}
[4.130397] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.130446] (unitree_guide2) StdoutLine: {'line': b'3: +        v[*el][j] = m[i][j];\n'}
[4.130491] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.130534] (unitree_guide2) StdoutLine: {'line': b'3: +      i++;\n'}
[4.130577] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.130619] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.130662] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.130705] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.130747] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::setColumn(unsigned int j, const Vector < T > &a)\n'}
[4.130791] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.130833] (unitree_guide2) StdoutLine: {'line': b'3: +    if (j >= m) {\n'}
[4.130876] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");\n'}
[4.130921] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.130964] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->n != a.size()) {\n'}
[4.131008] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix column: ranges are not compatible");\n'}
[4.131051] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.131095] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < nrows(); i++) {\n'}
[4.131138] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i][j] = a[i];\n'}
[4.131181] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.131224] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.131267] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.131310] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.131370] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::setColumn(unsigned int j, const Matrix < T > &a)\n'}
[4.131429] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.131473] (unitree_guide2) StdoutLine: {'line': b'3: +    if (j >= m) {\n'}
[4.131519] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");\n'}
[4.131563] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.131654] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->n != a.nrows()) {\n'}
[4.131770] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix column: ranges are not compatible");\n'}
[4.131881] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.131972] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.ncols() != 1) {\n'}
[4.132063] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix column with a non-column matrix");\n'}
[4.132116] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.132159] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < nrows(); i++) {\n'}
[4.132203] (unitree_guide2) StdoutLine: {'line': b'3: +      v[i][j] = a[i][0];\n'}
[4.132247] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.132290] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.132334] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.132380] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.132432] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.132493] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::setColumns(\n'}
[4.132539] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::set < unsigned int > &indexes,\n'}
[4.132586] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < T > &a)\n'}
[4.132631] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.132675] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int j = 0;\n'}
[4.132721] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.132774] (unitree_guide2) StdoutLine: {'line': b'3: +    if (indexes.size() != a.ncols() || this->n != a.nrows()) {\n'}
[4.132822] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix columns: ranges are not compatible");\n'}
[4.132869] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.132914] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();\n'}
[4.132960] (unitree_guide2) StdoutLine: {'line': b'3: +      el++)\n'}
[4.133007] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1111,6 +1391,37 @@\n'}
[4.133054] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 0; j < m; j++)\n'}
[4.133102] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.133148] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (*el >= n)\n'}
[4.133196] (unitree_guide2) StdoutLine: {'line': b'3: -\t    throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");\n'}
[4.133241] (unitree_guide2) StdoutLine: {'line': b'3: -\t  tmp[i][j] = v[*el][j];\n'}
[4.133295] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.133351] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < nrows(); i++) {\n'}
[4.133401] (unitree_guide2) StdoutLine: {'line': b'3: +        if (*el >= m) {\n'}
[4.133448] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::logic_error(\n'}
[4.133493] (unitree_guide2) StdoutLine: {'line': b'3: +            "Error in setColumns: trying to set a column out of matrix bounds");\n'}
[4.133538] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.133583] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][*el] = a[i][j];\n'}
[4.133628] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.133673] (unitree_guide2) StdoutLine: {'line': b'3: +      j++;\n'}
[4.133723] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.133771] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.133821] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.133866] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.133911] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::set(\n'}
[4.133958] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::set < unsigned int > &r_indexes,\n'}
[4.134003] (unitree_guide2) StdoutLine: {'line': b'3: +    const std::set < unsigned int > &c_indexes, const Matrix < T > &a)\n'}
[4.134049] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.134094] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int i = 0, j;\n'}
[4.134140] (unitree_guide2) StdoutLine: {'line': b'3: +    if (c_indexes.size() != a.ncols() || r_indexes.size() != a.nrows()) {\n'}
[4.134187] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error setting matrix elements: ranges are not compatible");\n'}
[4.134232] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.134281] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.134332] (unitree_guide2) StdoutLine: {'line': b'3: +    for (std::set < unsigned int > ::const_iterator r_el = r_indexes.begin();\n'}
[4.134396] (unitree_guide2) StdoutLine: {'line': b'3: +      r_el != r_indexes.end(); r_el++)\n'}
[4.134442] (unitree_guide2) StdoutLine: {'line': b'3: +    {\n'}
[4.134489] (unitree_guide2) StdoutLine: {'line': b'3: +      if (*r_el >= n) {\n'}
[4.134535] (unitree_guide2) StdoutLine: {'line': b'3: +        throw std::logic_error("Error in set: trying to set a row out of matrix bounds");\n'}
[4.134582] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.134627] (unitree_guide2) StdoutLine: {'line': b'3: +      j = 0;\n'}
[4.134674] (unitree_guide2) StdoutLine: {'line': b'3: +      for (std::set < unsigned int > ::const_iterator c_el = c_indexes.begin();\n'}
[4.134719] (unitree_guide2) StdoutLine: {'line': b'3: +        c_el != c_indexes.end(); c_el++)\n'}
[4.134765] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.134815] (unitree_guide2) StdoutLine: {'line': b'3: +        if (*c_el >= m) {\n'}
[4.134866] (unitree_guide2) StdoutLine: {'line': b'3: +          throw std::logic_error("Error in set: trying to set a column out of matrix bounds");\n'}
[4.134913] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.134961] (unitree_guide2) StdoutLine: {'line': b'3: +        v[*r_el][*c_el] = a[i][j];\n'}
[4.135007] (unitree_guide2) StdoutLine: {'line': b'3: +        j++;\n'}
[4.135055] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.135101] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1119,479 +1430,391 @@\n'}
[4.135147] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.135195] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.135241] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.135289] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.135348] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.135395] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T> Matrix<T>::extractColumns(const std::set<unsigned int>& indexes) const\n'}
[4.135444] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.135498] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(n, indexes.size());\n'}
[4.135547] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int j = 0;\n'}
[4.135596] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.135647] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)\n'}
[4.135710] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.135756] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < n; i++)\n'}
[4.135802] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.135854] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (*el >= m)\n'}
[4.135907] (unitree_guide2) StdoutLine: {'line': b'3: -\t    throw std::logic_error("Error extracting columns: the indexes are out of matrix bounds");\n'}
[4.135975] (unitree_guide2) StdoutLine: {'line': b'3: -\t  tmp[i][j] = v[i][*el];\n'}
[4.136022] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.136070] (unitree_guide2) StdoutLine: {'line': b'3: -      j++;\n'}
[4.136116] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.136166] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.136213] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.136261] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.136315] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.136386] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.136440] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T> Matrix<T>::extract(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes) const\n'}
[4.136491] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.136540] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(r_indexes.size(), c_indexes.size());\n'}
[4.136588] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int i = 0, j;\n'}
[4.136637] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.136684] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::set<unsigned int>::const_iterator r_el = r_indexes.begin(); r_el != r_indexes.end(); r_el++)\n'}
[4.136733] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.136781] (unitree_guide2) StdoutLine: {'line': b'3: -      if (*r_el >= n)\n'}
[4.136829] (unitree_guide2) StdoutLine: {'line': b'3: -\tthrow std::logic_error("Error extracting submatrix: the indexes are out of matrix bounds");\n'}
[4.136877] (unitree_guide2) StdoutLine: {'line': b'3: -      j = 0;\n'}
[4.136938] (unitree_guide2) StdoutLine: {'line': b'3: -      for (std::set<unsigned int>::const_iterator c_el = c_indexes.begin(); c_el != c_indexes.end(); c_el++)\n'}
[4.136992] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.137039] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (*c_el >= m)\n'}
[4.137089] (unitree_guide2) StdoutLine: {'line': b'3: -\t    throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");\n'}
[4.137138] (unitree_guide2) StdoutLine: {'line': b'3: -\t  tmp[i][j] = v[*r_el][*c_el];\n'}
[4.137189] (unitree_guide2) StdoutLine: {'line': b'3: -\t  j++;\n'}
[4.137240] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.137300] (unitree_guide2) StdoutLine: {'line': b'3: -      i++;\n'}
[4.137350] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.137398] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.137468] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.137520] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.137590] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.137639] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.137686] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::setRow(unsigned int i, const Vector<T>& a)\n'}
[4.137735] (unitree_guide2) StdoutLine: {'line': b'3: -{\t\n'}
[4.137781] (unitree_guide2) StdoutLine: {'line': b'3: -  if (i >= n)\n'}
[4.137829] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");\n'}
[4.137877] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->m != a.size())\n'}
[4.137925] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix row: ranges are not compatible");\n'}
[4.137978] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < ncols(); j++)\n'}
[4.138035] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i][j] = a[j];\n'}
[4.138084] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.138132] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.138182] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.138230] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::setRow(unsigned int i, const Matrix<T>& a)\n'}
[4.138288] (unitree_guide2) StdoutLine: {'line': b'3: -{\t\n'}
[4.138447] (unitree_guide2) StdoutLine: {'line': b'3: -  if (i >= n)\n'}
[4.138514] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");\n'}
[4.138560] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->m != a.ncols())\n'}
[4.138604] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix column: ranges are not compatible");\n'}
[4.138647] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.nrows() != 1)\n'}
[4.138690] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix column with a non-row matrix");\n'}
[4.138733] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < ncols(); j++)\n'}
[4.138776] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i][j] = a[0][j];\n'}
[4.138818] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.138860] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.138902] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.138945] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::setRows(const std::set<unsigned int>& indexes, const Matrix<T>& m)\n'}
[4.138988] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.139030] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int i = 0;\n'}
[4.139073] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.139116] (unitree_guide2) StdoutLine: {'line': b'3: -  if (indexes.size() != m.nrows() || this->m != m.ncols())\n'}
[4.139159] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix rows: ranges are not compatible");\n'}
[4.139203] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)\n'}
[4.139251] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.139294] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 0; j < ncols(); j++)\n'}
[4.139337] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.139394] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (*el >= n)\n'}
[4.139437] (unitree_guide2) StdoutLine: {'line': b'3: -\t    throw std::logic_error("Error in setRows: trying to set a row out of matrix bounds");\n'}
[4.139482] (unitree_guide2) StdoutLine: {'line': b'3: -\t  v[*el][j] = m[i][j];\n'}
[4.139525] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.139569] (unitree_guide2) StdoutLine: {'line': b'3: -      i++;\n'}
[4.139613] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.139656] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.139700] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.139743] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.139787] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::setColumn(unsigned int j, const Vector<T>& a)\n'}
[4.139831] (unitree_guide2) StdoutLine: {'line': b'3: -{\t\n'}
[4.139875] (unitree_guide2) StdoutLine: {'line': b'3: -  if (j >= m)\n'}
[4.139920] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");\n'}
[4.139964] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->n != a.size())\n'}
[4.140009] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix column: ranges are not compatible");\n'}
[4.140054] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < nrows(); i++)\n'}
[4.140098] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i][j] = a[i];\n'}
[4.140141] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.140185] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.140233] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.140277] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::setColumn(unsigned int j, const Matrix<T>& a)\n'}
[4.140321] (unitree_guide2) StdoutLine: {'line': b'3: -{\t\n'}
[4.140377] (unitree_guide2) StdoutLine: {'line': b'3: -  if (j >= m)\n'}
[4.140422] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");\n'}
[4.140476] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->n != a.nrows())\n'}
[4.140521] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix column: ranges are not compatible");\n'}
[4.140566] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.ncols() != 1)\n'}
[4.140611] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix column with a non-column matrix");\n'}
[4.140656] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < nrows(); i++)\n'}
[4.140701] (unitree_guide2) StdoutLine: {'line': b'3: -    v[i][j] = a[i][0];\n'}
[4.140747] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.140792] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.140837] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.140881] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.140926] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::setColumns(const std::set<unsigned int>& indexes, const Matrix<T>& a)\n'}
[4.140971] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.141016] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int j = 0;\n'}
[4.141060] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.141105] (unitree_guide2) StdoutLine: {'line': b'3: -  if (indexes.size() != a.ncols() || this->n != a.nrows())\n'}
[4.141150] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix columns: ranges are not compatible");\n'}
[4.141200] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)\n'}
[4.141246] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.141291] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < nrows(); i++)\n'}
[4.141336] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.141394] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (*el >= m)\n'}
[4.141438] (unitree_guide2) StdoutLine: {'line': b'3: -\t    throw std::logic_error("Error in setColumns: trying to set a column out of matrix bounds");\n'}
[4.141483] (unitree_guide2) StdoutLine: {'line': b'3: -\t  v[i][*el] = a[i][j];\n'}
[4.141527] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.141571] (unitree_guide2) StdoutLine: {'line': b'3: -      j++;\n'}
[4.141615] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.141659] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.141702] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.141745] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.141789] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::set(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes, const Matrix<T>& a)\n'}
[4.141834] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.141878] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int i = 0, j;\n'}
[4.141921] (unitree_guide2) StdoutLine: {'line': b'3: -  if (c_indexes.size() != a.ncols() || r_indexes.size() != a.nrows())\n'}
[4.141965] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error setting matrix elements: ranges are not compatible");\n'}
[4.142010] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.142053] (unitree_guide2) StdoutLine: {'line': b'3: -  for (std::set<unsigned int>::const_iterator r_el = r_indexes.begin(); r_el != r_indexes.end(); r_el++)\n'}
[4.142102] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.142148] (unitree_guide2) StdoutLine: {'line': b'3: -      if (*r_el >= n)\n'}
[4.142196] (unitree_guide2) StdoutLine: {'line': b'3: -\tthrow std::logic_error("Error in set: trying to set a row out of matrix bounds");\n'}
[4.142242] (unitree_guide2) StdoutLine: {'line': b'3: -      j = 0;\n'}
[4.142286] (unitree_guide2) StdoutLine: {'line': b'3: -      for (std::set<unsigned int>::const_iterator c_el = c_indexes.begin(); c_el != c_indexes.end(); c_el++)\n'}
[4.142337] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.142395] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (*c_el >= m)\n'}
[4.142437] (unitree_guide2) StdoutLine: {'line': b'3: -\t    throw std::logic_error("Error in set: trying to set a column out of matrix bounds");\n'}
[4.142489] (unitree_guide2) StdoutLine: {'line': b'3: -\t  v[*r_el][*c_el] = a[i][j];\n'}
[4.142532] (unitree_guide2) StdoutLine: {'line': b'3: -\t  j++;\n'}
[4.142575] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.142617] (unitree_guide2) StdoutLine: {'line': b'3: -      i++;\n'}
[4.142659] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.142701] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.142743] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.142786] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T> \n'}
[4.142828] (unitree_guide2) StdoutLine: {'line': b'3: -inline void Matrix<T>::set(const T* a, unsigned int n, unsigned int m)\n'}
[4.142871] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.142914] (unitree_guide2) StdoutLine: {'line': b'3: -  if (this->n != n || this->m != m)\n'}
[4.142957] (unitree_guide2) StdoutLine: {'line': b'3: -    resize(n, m);\n'}
[4.143000] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int k = 0;\n'}
[4.143042] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.143085] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.143131] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = a[k++];\n'}
[4.143179] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.143225] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.143269] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.143311] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.143354] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator+(const Matrix<T>& rhs)\n'}
[4.143397] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.143509] (unitree_guide2) StdoutLine: {'line': b'3: -  return rhs;\n'}
[4.143564] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.143607] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.143650] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.143693] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator+(const Matrix<T>& lhs, const Matrix<T>& rhs)\n'}
[4.143737] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.143780] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())\n'}
[4.143824] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator+: matrices have different sizes");\n'}
[4.143868] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.143912] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.143955] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.143998] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] + rhs[i][j];\n'}
[4.144041] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.144084] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.144133] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.144221] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.144315] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.144361] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator+(const Matrix<T>& lhs, const T& a)\n'}
[4.144417] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.144458] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.144499] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.144540] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.144581] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] + a;\n'}
[4.144634] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.144675] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.144716] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.144758] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.144799] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.144841] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator+(const T& a, const Matrix<T>& rhs)\n'}
[4.144882] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.144924] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());\n'}
[4.144966] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)\n'}
[4.145007] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)\n'}
[4.145049] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = a + rhs[i][j];\n'}
[4.145095] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.145166] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.145219] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.145261] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.145303] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.145343] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator+=(const Matrix<T>& rhs)\n'}
[4.145385] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.145466] (unitree_guide2) StdoutLine: {'line': b'3: -  if (m != rhs.ncols() || n != rhs.nrows())\n'}
[4.145507] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator+=: matrices have different sizes");\n'}
[4.145548] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.145589] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.145631] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] += rhs[i][j];\n'}
[4.145671] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.145712] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.145753] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.145794] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.145834] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.145874] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator+=(const T& a)\n'}
[4.145915] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.145955] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.145995] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.146035] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] += a;\n'}
[4.146079] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.146119] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.146159] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.146200] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.146240] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.146281] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator-(const Matrix<T>& rhs)\n'}
[4.146322] (unitree_guide2) StdoutLine: {'line': b'3: -{\t\n'}
[4.146376] (unitree_guide2) StdoutLine: {'line': b'3: -  return (T)(-1) * rhs;\n'}
[4.146418] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.146460] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.146502] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.146544] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator-(const Matrix<T>& lhs, const Matrix<T>& rhs)\n'}
[4.146586] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.146628] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())\n'}
[4.146670] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator-: matrices have different sizes");\n'}
[4.146712] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.146753] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.146801] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.146847] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] - rhs[i][j];\n'}
[4.146890] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.146931] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.146973] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.147015] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.147065] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.147108] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator-(const Matrix<T>& lhs, const T& a)\n'}
[4.147150] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.147192] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.147235] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.147276] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.147318] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] - a;\n'}
[4.147373] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.147415] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.147458] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.147530] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.147573] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.147615] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator-(const T& a, const Matrix<T>& rhs)\n'}
[4.147658] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.147700] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());\n'}
[4.147743] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)\n'}
[4.147785] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)\n'}
[4.147828] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = a - rhs[i][j];\n'}
[4.147871] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.147914] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.147957] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.148000] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.148052] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.148095] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator-=(const Matrix<T>& rhs)\n'}
[4.148138] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.148180] (unitree_guide2) StdoutLine: {'line': b'3: -  if (m != rhs.ncols() || n != rhs.nrows())\n'}
[4.148223] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator-=: matrices have different sizes");\n'}
[4.148266] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.148308] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.148351] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] -= rhs[i][j];\n'}
[4.148394] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.148437] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.148479] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.148522] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.148564] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.148607] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator-=(const T& a)\n'}
[4.148650] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.148693] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.148735] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.148778] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] -= a;\n'}
[4.148830] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.148873] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.148920] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.148962] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.149009] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.149052] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator*(const Matrix<T>& lhs, const Matrix<T>& rhs)\n'}
[4.149095] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.149137] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())\n'}
[4.149179] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator*: matrices have different sizes");\n'}
[4.149222] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.149264] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.149307] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.149350] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] * rhs[i][j];\n'}
[4.149392] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.149435] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.149477] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.149519] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.149561] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.149603] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator*(const Matrix<T>& lhs, const T& a)\n'}
[4.149645] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.149686] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.149729] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.149771] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.149813] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] * a;\n'}
[4.149856] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.149898] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.149941] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.149989] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.150033] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.150076] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator*(const T& a, const Matrix<T>& rhs)\n'}
[4.150119] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.150162] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());\n'}
[4.150204] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)\n'}
[4.150246] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)\n'}
[4.150288] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = a * rhs[i][j];\n'}
[4.150331] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.150373] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.150415] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.150458] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.150500] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.150543] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator*=(const Matrix<T>& rhs)\n'}
[4.150586] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.150629] (unitree_guide2) StdoutLine: {'line': b'3: -  if (m != rhs.ncols() || n != rhs.nrows())\n'}
[4.150671] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator*=: matrices have different sizes");\n'}
[4.150715] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.150758] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.150801] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] *= rhs[i][j];\n'}
[4.150844] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.150887] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.150936] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.150982] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.151024] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.151067] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator*=(const T& a)\n'}
[4.151110] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.151152] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.151195] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.151237] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] *= a;\n'}
[4.151280] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.151323] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.151366] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.151409] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.151452] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.151499] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator/(const Matrix<T>& lhs, const Matrix<T>& rhs)\n'}
[4.151543] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.151586] (unitree_guide2) StdoutLine: {'line': b'3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())\n'}
[4.151630] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator+: matrices have different sizes");\n'}
[4.151673] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.151715] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.151757] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.151800] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] / rhs[i][j];\n'}
[4.151842] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.151884] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.151930] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.151973] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.152015] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.152057] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator/(const Matrix<T>& lhs, const T& a)\n'}
[4.152100] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.152142] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.152186] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.152229] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.152272] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = lhs[i][j] / a;\n'}
[4.152314] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.152357] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.152400] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.152442] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.152484] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.152526] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator/(const T& a, const Matrix<T>& rhs)\n'}
[4.152583] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.152624] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());\n'}
[4.152665] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)\n'}
[4.152707] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)\n'}
[4.152748] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = a / rhs[i][j];\n'}
[4.152789] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.152831] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.152873] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.152941] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.152984] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.153040] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator/=(const Matrix<T>& rhs)\n'}
[4.153089] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.153130] (unitree_guide2) StdoutLine: {'line': b'3: -  if (m != rhs.ncols() || n != rhs.nrows())\n'}
[4.153171] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator+=: matrices have different sizes");\n'}
[4.153213] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.153254] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.153295] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] /= rhs[i][j];\n'}
[4.153336] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.153378] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.153419] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.153460] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.153516] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.153556] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator/=(const T& a)\n'}
[4.153597] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.153638] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.153679] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.153721] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] /= a;\n'}
[4.153762] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.153836] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.153900] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.153957] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.153998] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.154058] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> operator^(const Matrix<T>& lhs, const T& a)\n'}
[4.154101] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.154157] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());\n'}
[4.154197] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)\n'}
[4.154237] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)\n'}
[4.154277] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = pow(lhs[i][j], a);\n'}
[4.154317] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.154357] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.154397] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.154456] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.154510] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.154567] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator^=(const Matrix<T>& rhs)\n'}
[4.154624] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.154678] (unitree_guide2) StdoutLine: {'line': b'3: -  if (m != rhs.ncols() || n != rhs.nrows())\n'}
[4.154734] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Operator^=: matrices have different sizes");\n'}
[4.154793] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.154898] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.154971] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = pow(v[i][j], rhs[i][j]);\n'}
[4.155026] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.155083] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.155144] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.155212] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.155269] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.155326] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.155387] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>& Matrix<T>::operator^=(const T& a)\n'}
[4.155449] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.155512] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.155568] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m; j++)\n'}
[4.155647] (unitree_guide2) StdoutLine: {'line': b'3: -      v[i][j] = pow(v[i][j], a);\n'}
[4.155688] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.155731] (unitree_guide2) StdoutLine: {'line': b'3: -  return *this;\n'}
[4.155774] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.155816] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.155862] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.155904] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<T>::operator Vector<T>()\n'}
[4.155946] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.155987] (unitree_guide2) StdoutLine: {'line': b'3: -  if (n > 1 && m > 1)\n'}
[4.156029] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error matrix cast to vector: trying to cast a multi-dimensional matrix");\n'}
[4.156072] (unitree_guide2) StdoutLine: {'line': b'3: -  if (n == 1)\n'}
[4.156113] (unitree_guide2) StdoutLine: {'line': b'3: -    return extractRow(0);\n'}
[4.156155] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.156196] (unitree_guide2) StdoutLine: {'line': b'3: -    return extractColumn(0);\n'}
[4.156237] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.156279] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.156320] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.156375] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator==(const Matrix<T>& a, const Matrix<T>& b)\n'}
[4.156418] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.156460] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.nrows() != b.nrows() || a.ncols() != b.ncols())\n'}
[4.156503] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Matrices of different size are not confrontable");\n'}
[4.156550] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < a.nrows(); i++)\n'}
[4.156594] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned j = 0; j < a.ncols(); j++)\n'}
[4.156636] (unitree_guide2) StdoutLine: {'line': b'3: -      if (a[i][j] != b[i][j])\n'}
[4.156679] (unitree_guide2) StdoutLine: {'line': b'3: -\treturn false;\n'}
[4.156722] (unitree_guide2) StdoutLine: {'line': b'3: -  return true;\n'}
[4.156764] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.156810] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.156853] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.156896] (unitree_guide2) StdoutLine: {'line': b'3: -inline bool operator!=(const Matrix<T>& a, const Matrix<T>& b)\n'}
[4.156940] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.156983] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.nrows() != b.nrows() || a.ncols() != b.ncols())\n'}
[4.157026] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Matrices of different size are not confrontable");\n'}
[4.157069] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < a.nrows(); i++)\n'}
[4.157113] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned j = 0; j < a.ncols(); j++)\n'}
[4.157155] (unitree_guide2) StdoutLine: {'line': b'3: -      if (a[i][j] != b[i][j])\n'}
[4.157198] (unitree_guide2) StdoutLine: {'line': b'3: -\treturn true;\n'}
[4.157240] (unitree_guide2) StdoutLine: {'line': b'3: -  return false;\n'}
[4.157282] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.157324] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.157367] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.157409] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.157451] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.157494] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void Matrix < T > ::set(const T * a, unsigned int n, unsigned int m)\n'}
[4.157537] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.157579] (unitree_guide2) StdoutLine: {'line': b'3: +    if (this->n != n || this->m != m) {\n'}
[4.157623] (unitree_guide2) StdoutLine: {'line': b'3: +      resize(n, m);\n'}
[4.157666] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.157716] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int k = 0;\n'}
[4.157759] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.157810] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.157854] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = a[k++];\n'}
[4.157896] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.157938] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.157980] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.158022] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.158064] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.158106] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.158148] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator + (const Matrix < T > &rhs)\n'}
[4.158190] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.158232] (unitree_guide2) StdoutLine: {'line': b'3: +    return rhs;\n'}
[4.158275] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.158317] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.158359] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.158415] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator + (const Matrix < T > &lhs, const Matrix < T > &rhs)\n'}
[4.158457] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.158498] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {\n'}
[4.158540] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator+: matrices have different sizes");\n'}
[4.158582] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.158623] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.158664] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.158705] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.158748] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] + rhs[i][j];\n'}
[4.158793] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.158834] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.158875] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.158916] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.158957] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.158998] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.159039] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.159081] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator + (const Matrix < T > &lhs, const T & a)\n'}
[4.159123] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.159165] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.159207] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.159249] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.159290] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] + a;\n'}
[4.159331] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.159373] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.159475] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.159935] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.159985] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.160030] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.160073] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.160117] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator + (const T & a, const Matrix < T > &rhs)\n'}
[4.160191] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.160236] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());\n'}
[4.160289] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {\n'}
[4.160333] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {\n'}
[4.160377] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = a + rhs[i][j];\n'}
[4.160433] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.160476] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.160518] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.160561] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.160603] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.160645] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.160708] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.160900] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator += (const Matrix < T > &rhs)\n'}
[4.160950] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.160993] (unitree_guide2) StdoutLine: {'line': b'3: +    if (m != rhs.ncols() || n != rhs.nrows()) {\n'}
[4.161037] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator+=: matrices have different sizes");\n'}
[4.161080] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.161122] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.161165] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.161206] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] += rhs[i][j];\n'}
[4.161248] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.161289] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.161330] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.161385] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.161428] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.161470] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.161512] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.161555] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator += (const T & a)\n'}
[4.161599] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.161641] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.161688] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.161743] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] += a;\n'}
[4.161788] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.161831] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.161874] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.161918] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.161969] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.162012] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.162060] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.162103] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator - (const Matrix < T > &rhs)\n'}
[4.162146] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.162188] (unitree_guide2) StdoutLine: {'line': b'3: +    return (T)(-1) * rhs;\n'}
[4.162230] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.162272] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.162315] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.162357] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator - (const Matrix < T > &lhs, const Matrix < T > &rhs)\n'}
[4.162413] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.162456] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {\n'}
[4.162499] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator-: matrices have different sizes");\n'}
[4.162541] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.162583] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.162630] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.162700] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.162837] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] - rhs[i][j];\n'}
[4.162881] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.162924] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.162966] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.163007] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.163049] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.163090] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.163131] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.163173] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator - (const Matrix < T > &lhs, const T & a)\n'}
[4.163215] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.163256] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.163298] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.163340] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.163383] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] - a;\n'}
[4.163438] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.163479] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.163519] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.163560] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.163601] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.163646] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.163760] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.163818] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator - (const T & a, const Matrix < T > &rhs)\n'}
[4.163860] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.163901] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());\n'}
[4.163942] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {\n'}
[4.163983] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {\n'}
[4.164024] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = a - rhs[i][j];\n'}
[4.164064] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.164105] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.164145] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.164185] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.164225] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.164265] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.164306] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.164347] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator -= (const Matrix < T > &rhs)\n'}
[4.164388] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.164442] (unitree_guide2) StdoutLine: {'line': b'3: +    if (m != rhs.ncols() || n != rhs.nrows()) {\n'}
[4.164483] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator-=: matrices have different sizes");\n'}
[4.164526] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.164567] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.164612] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.164680] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] -= rhs[i][j];\n'}
[4.164739] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.164782] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.164823] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.164865] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.164906] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.164955] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.164997] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.165039] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator -= (const T & a)\n'}
[4.165081] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.165123] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.165168] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.165211] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] -= a;\n'}
[4.165254] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.165297] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.165339] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.165381] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.165435] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.165475] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.165548] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.165592] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator * (const Matrix < T > &lhs, const Matrix < T > &rhs)\n'}
[4.165684] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.165754] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {\n'}
[4.165796] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator*: matrices have different sizes");\n'}
[4.165837] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.165878] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.165918] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.165959] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.166001] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] * rhs[i][j];\n'}
[4.166042] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.166083] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.166124] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.166164] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.166205] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.166245] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.166285] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.166326] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator * (const Matrix < T > &lhs, const T & a)\n'}
[4.166366] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.166406] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.166474] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.166534] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.166580] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] * a;\n'}
[4.166627] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.166717] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.166761] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.166802] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.166842] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.166883] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.166924] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.166965] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator * (const T & a, const Matrix < T > &rhs)\n'}
[4.167006] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.167047] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());\n'}
[4.167088] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {\n'}
[4.167129] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {\n'}
[4.167175] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = a * rhs[i][j];\n'}
[4.167216] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.167256] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.167297] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.167337] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.167377] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.167418] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.167458] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.167499] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator *= (const Matrix < T > &rhs)\n'}
[4.167542] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.167585] (unitree_guide2) StdoutLine: {'line': b'3: +    if (m != rhs.ncols() || n != rhs.nrows()) {\n'}
[4.167626] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator*=: matrices have different sizes");\n'}
[4.167668] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.167709] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.167750] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.167792] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] *= rhs[i][j];\n'}
[4.167834] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.167874] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.167915] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.167955] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.167996] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.168036] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.168076] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.168116] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator *= (const T & a)\n'}
[4.168156] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.168196] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.168244] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.168285] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] *= a;\n'}
[4.168327] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.168389] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.168445] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.168486] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.168567] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.168624] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.168666] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.168707] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator / (const Matrix < T > &lhs, const Matrix < T > &rhs)\n'}
[4.168749] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.168790] (unitree_guide2) StdoutLine: {'line': b'3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {\n'}
[4.168832] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator+: matrices have different sizes");\n'}
[4.168874] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.168915] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.168956] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.168998] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.169039] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] / rhs[i][j];\n'}
[4.169082] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.169123] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.169165] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.169207] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.169255] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.169297] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.169338] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.169380] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator / (const Matrix < T > &lhs, const T & a)\n'}
[4.169422] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.169463] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.169508] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.169563] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.169603] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = lhs[i][j] / a;\n'}
[4.169644] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.169685] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.169725] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.169766] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.169807] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.169847] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.169888] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.169930] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator / (const T & a, const Matrix < T > &rhs)\n'}
[4.169972] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.170012] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());\n'}
[4.170054] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {\n'}
[4.170094] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {\n'}
[4.170135] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = a / rhs[i][j];\n'}
[4.170175] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.170216] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.170256] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.170295] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.170336] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.170376] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.170416] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.170473] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator /= (const Matrix < T > &rhs)\n'}
[4.170517] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.170560] (unitree_guide2) StdoutLine: {'line': b'3: +    if (m != rhs.ncols() || n != rhs.nrows()) {\n'}
[4.170602] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator+=: matrices have different sizes");\n'}
[4.170644] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.170687] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.170728] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.170770] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] /= rhs[i][j];\n'}
[4.170811] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.170853] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.170894] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.170935] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.170977] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.171018] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.171059] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.171100] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator /= (const T & a)\n'}
[4.171142] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.171183] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.171226] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.171272] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] /= a;\n'}
[4.171321] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.171363] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.171405] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.171449] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.171492] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.171534] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.171575] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.171616] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > operator ^ (const Matrix < T > &lhs, const T & a)\n'}
[4.171659] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.171700] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());\n'}
[4.171742] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {\n'}
[4.171784] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {\n'}
[4.171826] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = pow(lhs[i][j], a);\n'}
[4.171867] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.171909] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.171951] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.171993] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.172034] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.172076] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.172117] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.172162] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator ^= (const Matrix < T > &rhs)\n'}
[4.172206] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.172248] (unitree_guide2) StdoutLine: {'line': b'3: +    if (m != rhs.ncols() || n != rhs.nrows()) {\n'}
[4.172289] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Operator^=: matrices have different sizes");\n'}
[4.172331] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.172373] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.172414] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.172458] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = pow(v[i][j], rhs[i][j]);\n'}
[4.172501] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.172542] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.172584] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.172625] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.172667] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.172709] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.172751] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.172792] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.172833] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > & Matrix < T > ::operator ^= (const T & a)\n'}
[4.172875] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.172916] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.172957] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m; j++) {\n'}
[4.172998] (unitree_guide2) StdoutLine: {'line': b'3: +        v[i][j] = pow(v[i][j], a);\n'}
[4.173040] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.173081] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.173123] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.173164] (unitree_guide2) StdoutLine: {'line': b'3: +    return *this;\n'}
[4.173205] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.173246] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.173288] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.173330] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < T > ::operator Vector < T > ()\n'}
[4.173372] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.173448] (unitree_guide2) StdoutLine: {'line': b'3: +    if (n > 1 && m > 1) {\n'}
[4.173506] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.173548] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error matrix cast to vector: trying to cast a multi-dimensional matrix");\n'}
[4.173590] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.173632] (unitree_guide2) StdoutLine: {'line': b'3: +    if (n == 1) {\n'}
[4.173673] (unitree_guide2) StdoutLine: {'line': b'3: +      return extractRow(0);\n'}
[4.173714] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.173755] (unitree_guide2) StdoutLine: {'line': b'3: +      return extractColumn(0);\n'}
[4.173796] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.173837] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.173879] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.173920] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.173962] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator == (const Matrix < T > &a, const Matrix < T > &b)\n'}
[4.174005] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.174047] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.nrows() != b.nrows() || a.ncols() != b.ncols()) {\n'}
[4.174089] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Matrices of different size are not confrontable");\n'}
[4.174131] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.174172] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < a.nrows(); i++) {\n'}
[4.174214] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned j = 0; j < a.ncols(); j++) {\n'}
[4.174263] (unitree_guide2) StdoutLine: {'line': b'3: +        if (a[i][j] != b[i][j]) {\n'}
[4.174305] (unitree_guide2) StdoutLine: {'line': b'3: +          return false;\n'}
[4.174347] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.174391] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.174433] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.174474] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.174516] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.174557] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.174599] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.174641] (unitree_guide2) StdoutLine: {'line': b'3: +  inline bool operator != (const Matrix < T > &a, const Matrix < T > &b)\n'}
[4.174684] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.174726] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.nrows() != b.nrows() || a.ncols() != b.ncols()) {\n'}
[4.174768] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Matrices of different size are not confrontable");\n'}
[4.174810] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.174852] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < a.nrows(); i++) {\n'}
[4.174894] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned j = 0; j < a.ncols(); j++) {\n'}
[4.174936] (unitree_guide2) StdoutLine: {'line': b'3: +        if (a[i][j] != b[i][j]) {\n'}
[4.174977] (unitree_guide2) StdoutLine: {'line': b'3: +          return true;\n'}
[4.175018] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.175059] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.175101] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.175142] (unitree_guide2) StdoutLine: {'line': b'3: +    return false;\n'}
[4.175183] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.175224] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1601 +1824 @@\n'}
[4.175266] (unitree_guide2) StdoutLine: {'line': b'3: -   Input/Output \n'}
[4.175307] (unitree_guide2) StdoutLine: {'line': b'3: +   Input/Output\n'}
[4.175351] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1603,300 +1826,297 @@\n'}
[4.175396] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.175560] (unitree_guide2) StdoutLine: {'line': b'3: -std::ostream& operator<<(std::ostream& os, const Matrix<T>& m)\n'}
[4.175638] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.175681] (unitree_guide2) StdoutLine: {'line': b'3: -  os << std::endl << m.nrows() << " " << m.ncols() << std::endl;\n'}
[4.175725] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.175767] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.175809] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 0; j < m.ncols() - 1; j++)\n'}
[4.175851] (unitree_guide2) StdoutLine: {'line': b'3: -\tos << std::setw(20) << std::setprecision(16) << m[i][j] << ", ";\n'}
[4.175893] (unitree_guide2) StdoutLine: {'line': b'3: -      os << std::setw(20) << std::setprecision(16) << m[i][m.ncols() - 1] << std::endl;\n'}
[4.175940] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.175981] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.176023] (unitree_guide2) StdoutLine: {'line': b'3: -  return os;\n'}
[4.176064] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.176105] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.176146] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.176188] (unitree_guide2) StdoutLine: {'line': b'3: -std::istream& operator>>(std::istream& is, Matrix<T>& m)\n'}
[4.176229] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.176271] (unitree_guide2) StdoutLine: {'line': b'3: -  int rows, cols;\n'}
[4.176312] (unitree_guide2) StdoutLine: {'line': b'3: -  char comma;\n'}
[4.176359] (unitree_guide2) StdoutLine: {'line': b'3: -  is >> rows >> cols;\n'}
[4.176401] (unitree_guide2) StdoutLine: {'line': b'3: -  m.resize(rows, cols);\n'}
[4.176443] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < rows; i++)\n'}
[4.176486] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < cols; j++)\n'}
[4.176528] (unitree_guide2) StdoutLine: {'line': b'3: -      is >> m[i][j] >> comma;\n'}
[4.176570] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.176625] (unitree_guide2) StdoutLine: {'line': b'3: -  return is;\n'}
[4.176665] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.176706] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.176746] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.176787] (unitree_guide2) StdoutLine: {'line': b'3: -T sign(const T& v)\n'}
[4.176827] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.176868] (unitree_guide2) StdoutLine: {'line': b'3: -  if (v >= (T)0.0)\n'}
[4.176908] (unitree_guide2) StdoutLine: {'line': b'3: -    return (T)1.0;\n'}
[4.176949] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.176989] (unitree_guide2) StdoutLine: {'line': b'3: -    return (T)-1.0;\n'}
[4.177029] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.177070] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.177111] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.177151] (unitree_guide2) StdoutLine: {'line': b'3: -T dist(const T& a, const T& b)\n'}
[4.177192] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.177232] (unitree_guide2) StdoutLine: {'line': b'3: -  T abs_a = (T)fabs(a), abs_b = (T)fabs(b);\n'}
[4.177273] (unitree_guide2) StdoutLine: {'line': b'3: -  if (abs_a > abs_b)\n'}
[4.177317] (unitree_guide2) StdoutLine: {'line': b'3: -    return abs_a * sqrt((T)1.0 + (abs_b / abs_a) * (abs_b / abs_a));\n'}
[4.177360] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.177401] (unitree_guide2) StdoutLine: {'line': b'3: -    return (abs_b == (T)0.0 ? (T)0.0 : abs_b * sqrt((T)1.0 + (abs_a / abs_b) * (abs_a / abs_b)));\n'}
[4.177443] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.177498] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.177539] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.177582] (unitree_guide2) StdoutLine: {'line': b'3: -void svd(const Matrix<T>& A, Matrix<T>& U, Vector<T>& W, Matrix<T>& V)\n'}
[4.177624] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.177665] (unitree_guide2) StdoutLine: {'line': b'3: -  int m = A.nrows(), n = A.ncols(), i, j, k, l, jj, nm;\n'}
[4.177713] (unitree_guide2) StdoutLine: {'line': b'3: -  const unsigned int max_its = 30;\n'}
[4.177755] (unitree_guide2) StdoutLine: {'line': b'3: -  bool flag;\n'}
[4.177797] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> rv1(n);\n'}
[4.177839] (unitree_guide2) StdoutLine: {'line': b'3: -  U = A;\n'}
[4.177880] (unitree_guide2) StdoutLine: {'line': b'3: -  W.resize(n);\n'}
[4.177922] (unitree_guide2) StdoutLine: {'line': b'3: -  V.resize(n, n);\n'}
[4.177964] (unitree_guide2) StdoutLine: {'line': b'3: -  T anorm, c, f, g, h, s, scale, x, y, z;\n'}
[4.178006] (unitree_guide2) StdoutLine: {'line': b'3: -  g = scale = anorm = (T)0.0;\n'}
[4.178047] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.178089] (unitree_guide2) StdoutLine: {'line': b'3: -  // Householder reduction to bidiagonal form\n'}
[4.178131] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.178172] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.178214] (unitree_guide2) StdoutLine: {'line': b'3: -      l = i + 1;\n'}
[4.178255] (unitree_guide2) StdoutLine: {'line': b'3: -      rv1[i] = scale * g;\n'}
[4.178302] (unitree_guide2) StdoutLine: {'line': b'3: -      g = s = scale = (T)0.0;\n'}
[4.178343] (unitree_guide2) StdoutLine: {'line': b'3: -      if (i < m)\n'}
[4.178385] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.178427] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (k = i; k < m; k++)\n'}
[4.178469] (unitree_guide2) StdoutLine: {'line': b'3: -\t    scale += fabs(U[k][i]);\n'}
[4.178510] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (scale != (T)0.0)\n'}
[4.178565] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.178606] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (k = i; k < m; k++)\n'}
[4.178647] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.178688] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  U[k][i] /= scale;\n'}
[4.178728] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  s += U[k][i] * U[k][i];\n'}
[4.178769] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.178809] (unitree_guide2) StdoutLine: {'line': b'3: -\t      f = U[i][i];\n'}
[4.178851] (unitree_guide2) StdoutLine: {'line': b'3: -\t      g = -sign(f) * sqrt(s);\n'}
[4.178891] (unitree_guide2) StdoutLine: {'line': b'3: -\t      h = f * g - s;\n'}
[4.178931] (unitree_guide2) StdoutLine: {'line': b'3: -\t      U[i][i] = f - g;\n'}
[4.178972] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (j = l; j < n; j++)\n'}
[4.179012] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.179052] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  s = (T)0.0;\n'}
[4.179093] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (k = i; k < m; k++)\n'}
[4.179133] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    s += U[k][i] * U[k][j];\n'}
[4.179173] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  f = s / h;\n'}
[4.179214] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (k = i; k < m; k++)\n'}
[4.179257] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    U[k][j] += f * U[k][i];\n'}
[4.179300] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.179341] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (k = i; k < m; k++)\n'}
[4.179382] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tU[k][i] *= scale;\n'}
[4.179423] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.179463] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.179517] (unitree_guide2) StdoutLine: {'line': b'3: -      W[i] = scale * g;\n'}
[4.179559] (unitree_guide2) StdoutLine: {'line': b'3: -      g = s = scale = (T)0.0;\n'}
[4.179600] (unitree_guide2) StdoutLine: {'line': b'3: -      if (i < m && i != n - 1)\n'}
[4.179642] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.179683] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (k = l; k < n; k++)\n'}
[4.179724] (unitree_guide2) StdoutLine: {'line': b'3: -\t    scale += fabs(U[i][k]);\n'}
[4.179766] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (scale != (T)0.0)\n'}
[4.179812] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.179853] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (k = l; k < n; k++)\n'}
[4.179895] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.179936] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  U[i][k] /= scale;\n'}
[4.179978] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  s += U[i][k] * U[i][k];\t\t\t\t\t\n'}
[4.180020] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.180060] (-) TimerEvent: {}
[4.180177] (unitree_guide2) StdoutLine: {'line': b'3: -\t      f = U[i][l];\n'}
[4.180324] (unitree_guide2) StdoutLine: {'line': b'3: -\t      g = -sign(f) * sqrt(s);\n'}
[4.180400] (unitree_guide2) StdoutLine: {'line': b'3: -\t      h = f * g - s;\n'}
[4.180446] (unitree_guide2) StdoutLine: {'line': b'3: -\t      U[i][l] = f - g;\n'}
[4.180488] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (k = l; k <n; k++)\n'}
[4.180544] (unitree_guide2) StdoutLine: {'line': b'3: -\t\trv1[k] = U[i][k] / h;\n'}
[4.180585] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (j = l; j < m; j++)\n'}
[4.180625] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.180666] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  s = (T)0.0;\n'}
[4.180706] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (k = l; k < n; k++)\n'}
[4.180747] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    s += U[j][k] * U[i][k];\n'}
[4.180788] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (k = l; k < n; k++)\n'}
[4.180829] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    U[j][k] += s * rv1[k];\n'}
[4.180870] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.180911] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (k = l; k < n; k++)\n'}
[4.180952] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tU[i][k] *= scale;\n'}
[4.180993] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.181034] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.181075] (unitree_guide2) StdoutLine: {'line': b'3: -      anorm = std::max(anorm, fabs(W[i]) + fabs(rv1[i]));\n'}
[4.181127] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.181168] (unitree_guide2) StdoutLine: {'line': b'3: -  // Accumulation of right-hand transformations\n'}
[4.181216] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = n - 1; i >= 0; i--)\n'}
[4.181281] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.181339] (unitree_guide2) StdoutLine: {'line': b'3: -      if (i < n - 1) \n'}
[4.181381] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.181422] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (g != (T)0.0)\n'}
[4.181462] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.181503] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (j = l; j < n; j++)\n'}
[4.181544] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tV[j][i] = (U[i][j] / U[i][l]) / g;\n'}
[4.181585] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (j = l; j < n; j++)\n'}
[4.181626] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.181667] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  s = (T)0.0;\n'}
[4.181708] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (k = l; k < n; k++)\n'}
[4.181749] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    s += U[i][k] * V[k][j];\n'}
[4.181790] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (k = l; k < n; k++)\n'}
[4.181831] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    V[k][j] += s * V[k][i];\n'}
[4.181876] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.181920] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.181963] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (j = l; j < n; j++)\n'}
[4.182011] (unitree_guide2) StdoutLine: {'line': b'3: -\t    V[i][j] = V[j][i] = (T)0.0;\n'}
[4.182058] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.182103] (unitree_guide2) StdoutLine: {'line': b'3: -      V[i][i] = (T)1.0;\n'}
[4.182147] (unitree_guide2) StdoutLine: {'line': b'3: -      g = rv1[i];\n'}
[4.182197] (unitree_guide2) StdoutLine: {'line': b'3: -      l = i;\n'}
[4.182285] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.182333] (unitree_guide2) StdoutLine: {'line': b'3: -  // Accumulation of left-hand transformations\n'}
[4.182374] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = std::min(m, n) - 1; i >= 0; i--)\n'}
[4.182415] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.182456] (unitree_guide2) StdoutLine: {'line': b'3: -      l = i + 1;\n'}
[4.182496] (unitree_guide2) StdoutLine: {'line': b'3: -      g = W[i];\n'}
[4.182537] (unitree_guide2) StdoutLine: {'line': b'3: -      for (j = l; j < n; j++)\n'}
[4.182578] (unitree_guide2) StdoutLine: {'line': b'3: -\tU[i][j] = (T)0.0;\n'}
[4.182619] (unitree_guide2) StdoutLine: {'line': b'3: -      if (g != (T)0.0)\n'}
[4.182659] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.182700] (unitree_guide2) StdoutLine: {'line': b'3: -\t  g = (T)1.0 / g;\n'}
[4.182740] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (j = l; j < n; j++)\n'}
[4.182781] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.182821] (unitree_guide2) StdoutLine: {'line': b'3: -\t      s = (T)0.0;\n'}
[4.182862] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (k = l; k < m; k++)\n'}
[4.182902] (unitree_guide2) StdoutLine: {'line': b'3: -\t\ts += U[k][i] * U[k][j];\n'}
[4.182942] (unitree_guide2) StdoutLine: {'line': b'3: -\t      f = (s / U[i][i]) * g;\n'}
[4.182983] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (k = i; k < m; k++)\n'}
[4.183024] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tU[k][j] += f * U[k][i];\n'}
[4.183065] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.183106] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (j = i; j < m; j++)\n'}
[4.183148] (unitree_guide2) StdoutLine: {'line': b'3: -\t    U[j][i] *= g;\n'}
[4.183195] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.183273] (unitree_guide2) StdoutLine: {'line': b'3: -      else\n'}
[4.183319] (unitree_guide2) StdoutLine: {'line': b'3: -\tfor (j = i; j < m; j++)\n'}
[4.183361] (unitree_guide2) StdoutLine: {'line': b'3: -\t  U[j][i] = (T)0.0;\n'}
[4.183402] (unitree_guide2) StdoutLine: {'line': b'3: -      U[i][i]++;\n'}
[4.183443] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.183484] (unitree_guide2) StdoutLine: {'line': b'3: -  // Diagonalization of the bidiagonal form: loop over singular values, and over allowed iterations.\n'}
[4.183525] (unitree_guide2) StdoutLine: {'line': b'3: -  for (k = n - 1; k >= 0; k--)\n'}
[4.183566] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.183606] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int its = 0; its < max_its; its++)\n'}
[4.183647] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.183687] (unitree_guide2) StdoutLine: {'line': b'3: -\t  flag = true;\n'}
[4.183727] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (l = k; l >= 0; l--) // FIXME: in NR it was l >= 1 but there subscripts start from one\n'}
[4.183768] (unitree_guide2) StdoutLine: {'line': b'3: -\t    { // Test for splitting\n'}
[4.183809] (unitree_guide2) StdoutLine: {'line': b'3: -\t      nm = l - 1; // Note that rV[0] is always zero\n'}
[4.183849] (unitree_guide2) StdoutLine: {'line': b'3: -\t      if ((T)(fabs(rv1[l]) + anorm) == anorm)\n'}
[4.183889] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.183930] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  flag = false;\n'}
[4.183971] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  break;\n'}
[4.184011] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.184052] (unitree_guide2) StdoutLine: {'line': b'3: -\t      if ((T)(fabs(W[nm]) + anorm) == anorm)\n'}
[4.184092] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tbreak;\n'}
[4.184133] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.184177] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (flag)\n'}
[4.184218] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.184257] (unitree_guide2) StdoutLine: {'line': b'3: -\t      // Cancellation of rv1[l], if l > 0 FIXME: it was l > 1 in NR\n'}
[4.184298] (unitree_guide2) StdoutLine: {'line': b'3: -\t      c = (T)0.0;\n'}
[4.184344] (unitree_guide2) StdoutLine: {'line': b'3: -\t      s = (T)1.0;\n'}
[4.184384] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (i = l; i <= k; i++)\n'}
[4.184424] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.184464] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  f = s * rv1[i];\n'}
[4.184504] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  rv1[i] *= c;\n'}
[4.184544] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  if ((T)(fabs(f) + anorm) == anorm)\n'}
[4.184585] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    break;\n'}
[4.184625] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  g = W[i];\n'}
[4.184666] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  h = dist(f, g);\n'}
[4.184707] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  W[i] = h;\n'}
[4.184748] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  h = (T)1.0 / h;\n'}
[4.184789] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  c = g * h;\n'}
[4.184829] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  s = -f * h;\n'}
[4.184870] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (j = 0; j < m; j++)\n'}
[4.184910] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    {\n'}
[4.184950] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t      y = U[j][nm];\n'}
[4.185011] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t      z = U[j][i];\n'}
[4.185054] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t      U[j][nm] = y * c + z * s;\n'}
[4.185096] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t      U[j][i] = z * c - y * s;\n'}
[4.185142] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    }\n'}
[4.185198] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.185238] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.185278] (unitree_guide2) StdoutLine: {'line': b'3: -\t  z = W[k];\n'}
[4.185318] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (l == k)\n'}
[4.185360] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {  // Convergence\n'}
[4.185401] (unitree_guide2) StdoutLine: {'line': b'3: -\t      if (z < (T)0.0)\n'}
[4.185442] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{ // Singular value is made nonnegative\n'}
[4.185482] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  W[k] = -z;\n'}
[4.185547] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  for (j = 0; j < n; j++)\n'}
[4.185589] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t    V[j][k] = -V[j][k];\n'}
[4.185631] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.185689] (unitree_guide2) StdoutLine: {'line': b'3: -\t      break;\n'}
[4.185729] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.185769] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (its == max_its)\n'}
[4.185809] (unitree_guide2) StdoutLine: {'line': b'3: -\t    throw std::logic_error("Error svd: no convergence in the maximum number of iterations");\n'}
[4.185850] (unitree_guide2) StdoutLine: {'line': b'3: -\t  x = W[l];\n'}
[4.185891] (unitree_guide2) StdoutLine: {'line': b'3: -\t  nm = k - 1;\n'}
[4.185931] (unitree_guide2) StdoutLine: {'line': b'3: -\t  y = W[nm];\n'}
[4.185971] (unitree_guide2) StdoutLine: {'line': b'3: -\t  g = rv1[nm];\n'}
[4.186011] (unitree_guide2) StdoutLine: {'line': b'3: -\t  h = rv1[k];\n'}
[4.186052] (unitree_guide2) StdoutLine: {'line': b'3: -\t  f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\n'}
[4.186096] (unitree_guide2) StdoutLine: {'line': b'3: -\t  g = dist(f, (T)1.0);\n'}
[4.186139] (unitree_guide2) StdoutLine: {'line': b'3: -\t  f = ((x - z) * (x + z) + h * ((y / (f + sign(f)*fabs(g))) - h)) / x;\n'}
[4.186187] (unitree_guide2) StdoutLine: {'line': b'3: -\t  c = s = (T)1.0; // Next QR transformation\n'}
[4.186228] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (j = l; j <= nm; j++)\n'}
[4.186270] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.186311] (unitree_guide2) StdoutLine: {'line': b'3: -\t      i = j + 1;\n'}
[4.186351] (unitree_guide2) StdoutLine: {'line': b'3: -\t      g = rv1[i];\n'}
[4.186392] (unitree_guide2) StdoutLine: {'line': b'3: -\t      y = W[i];\n'}
[4.186436] (unitree_guide2) StdoutLine: {'line': b'3: -\t      h = s * g;\n'}
[4.186477] (unitree_guide2) StdoutLine: {'line': b'3: -\t      g *= c;\n'}
[4.186517] (unitree_guide2) StdoutLine: {'line': b'3: -\t      z = dist(f, h);\n'}
[4.186556] (unitree_guide2) StdoutLine: {'line': b'3: -\t      rv1[j] = z;\n'}
[4.186596] (unitree_guide2) StdoutLine: {'line': b'3: -\t      c = f / z;\n'}
[4.186636] (unitree_guide2) StdoutLine: {'line': b'3: -\t      s = h / z;\n'}
[4.186676] (unitree_guide2) StdoutLine: {'line': b'3: -\t      f = x * c + g * s;\n'}
[4.186717] (unitree_guide2) StdoutLine: {'line': b'3: -\t      g = g * c - x * s;\n'}
[4.186757] (unitree_guide2) StdoutLine: {'line': b'3: -\t      h = y * s;\n'}
[4.186797] (unitree_guide2) StdoutLine: {'line': b'3: -\t      y *= c;\n'}
[4.186838] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (jj = 0; jj < n; jj++)\n'}
[4.186879] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.186919] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  x = V[jj][j];\n'}
[4.186960] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  z = V[jj][i];\n'}
[4.187000] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  V[jj][j] = x * c + z * s;\n'}
[4.187041] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  V[jj][i] = z * c - x * s;\n'}
[4.187085] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.187126] (unitree_guide2) StdoutLine: {'line': b'3: -\t      z = dist(f, h);\n'}
[4.187166] (unitree_guide2) StdoutLine: {'line': b'3: -\t      W[j] = z; \n'}
[4.187207] (unitree_guide2) StdoutLine: {'line': b'3: -\t      if (z != 0) // Rotation can be arbitrary if z = 0\n'}
[4.187247] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.187287] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  z = (T)1.0 / z;\n'}
[4.187327] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  c = f * z;\n'}
[4.187368] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  s = h * z;\n'}
[4.187409] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.187449] (unitree_guide2) StdoutLine: {'line': b'3: -\t      f = c * g + s * y;\n'}
[4.187490] (unitree_guide2) StdoutLine: {'line': b'3: -\t      x = c * y - s * g;\n'}
[4.187531] (unitree_guide2) StdoutLine: {'line': b'3: -\t      for (jj = 0; jj < m; jj++)\n'}
[4.187572] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t{\n'}
[4.187613] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  y = U[jj][j];\n'}
[4.187654] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  z = U[jj][i];\n'}
[4.187694] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  U[jj][j] = y * c + z * s;\n'}
[4.187743] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t  U[jj][i] = z * c - y * s;\n'}
[4.187783] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t}\n'}
[4.187823] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.187863] (unitree_guide2) StdoutLine: {'line': b'3: -\t  rv1[l] = (T)0.0;\n'}
[4.187904] (unitree_guide2) StdoutLine: {'line': b'3: -\t  rv1[k] = f;\n'}
[4.187944] (unitree_guide2) StdoutLine: {'line': b'3: -\t  W[k] = x;\n'}
[4.187984] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.188024] (unitree_guide2) StdoutLine: {'line': b'3: -    }\t\n'}
[4.188070] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.188111] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.188152] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.188193] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> pinv(const Matrix<T>& A)\n'}
[4.188235] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.188276] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> U, V, x, tmp(A.ncols(), A.nrows());\n'}
[4.188317] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> W;\n'}
[4.188358] (unitree_guide2) StdoutLine: {'line': b'3: -  CanonicalBaseVector<T> e(0, A.nrows());\n'}
[4.188399] (unitree_guide2) StdoutLine: {'line': b'3: -  svd(A, U, W, V);\n'}
[4.188439] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < A.nrows(); i++)\n'}
[4.188480] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.188520] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.188565] (unitree_guide2) StdoutLine: {'line': b'3: +  std::ostream & operator << (std::ostream & os, const Matrix < T > &m)\n'}
[4.188605] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.188645] (unitree_guide2) StdoutLine: {'line': b'3: +      os << std::endl << m.nrows() << " " << m.ncols() << std::endl;\n'}
[4.188685] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.188726] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int j = 0; j < m.ncols() - 1; j++) {\n'}
[4.188766] (unitree_guide2) StdoutLine: {'line': b'3: +          os << std::setw(20) << std::setprecision(16) << m[i][j] << ", ";\n'}
[4.188807] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.188847] (unitree_guide2) StdoutLine: {'line': b'3: +        os << std::setw(20) << std::setprecision(16) << m[i][m.ncols() - 1] << std::endl;\n'}
[4.188889] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.188929] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.188970] (unitree_guide2) StdoutLine: {'line': b'3: +      return os;\n'}
[4.189010] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.189055] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.189095] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[4.189136] (unitree_guide2) StdoutLine: {'line': b'3: +    std::istream & operator >> (std::istream & is, Matrix < T > &m)\n'}
[4.189176] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.189222] (unitree_guide2) StdoutLine: {'line': b'3: +      int rows, cols;\n'}
[4.189319] (unitree_guide2) StdoutLine: {'line': b'3: +      char comma;\n'}
[4.189366] (unitree_guide2) StdoutLine: {'line': b'3: +      is >> rows >> cols;\n'}
[4.189408] (unitree_guide2) StdoutLine: {'line': b'3: +      m.resize(rows, cols);\n'}
[4.189449] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < rows; i++) {\n'}
[4.189490] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int j = 0; j < cols; j++) {\n'}
[4.189530] (unitree_guide2) StdoutLine: {'line': b'3: +          is >> m[i][j] >> comma;\n'}
[4.189571] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.189612] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.189653] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.189694] (unitree_guide2) StdoutLine: {'line': b'3: +      return is;\n'}
[4.189735] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.189776] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.189817] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[4.189858] (unitree_guide2) StdoutLine: {'line': b'3: +    T sign(const T & v)\n'}
[4.189899] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.189939] (unitree_guide2) StdoutLine: {'line': b'3: +      if (v >= (T)0.0) {\n'}
[4.189980] (unitree_guide2) StdoutLine: {'line': b'3: +        return (T)1.0;\n'}
[4.190053] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.190174] (unitree_guide2) StdoutLine: {'line': b'3: +        return (T)-1.0;\n'}
[4.190219] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.190260] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.190301] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.190342] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[4.190382] (unitree_guide2) StdoutLine: {'line': b'3: +    T dist(const T & a, const T & b)\n'}
[4.190423] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.190464] (unitree_guide2) StdoutLine: {'line': b'3: +      T abs_a = (T)fabs(a), abs_b = (T)fabs(b);\n'}
[4.190505] (unitree_guide2) StdoutLine: {'line': b'3: +      if (abs_a > abs_b) {\n'}
[4.190560] (unitree_guide2) StdoutLine: {'line': b'3: +        return abs_a * sqrt((T)1.0 + (abs_b / abs_a) * (abs_b / abs_a));\n'}
[4.190602] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.190645] (unitree_guide2) StdoutLine: {'line': b'3: +        return abs_b == (T)0.0 ? (T)0.0 : abs_b * sqrt((T)1.0 + (abs_a / abs_b) * (abs_a / abs_b));\n'}
[4.190695] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.190737] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.190779] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.190821] (unitree_guide2) StdoutLine: {'line': b'3: +    template < typename T >\n'}
[4.190862] (unitree_guide2) StdoutLine: {'line': b'3: +    void svd(const Matrix < T > & A, Matrix < T > & U, Vector < T > & W, Matrix < T > & V)\n'}
[4.190904] (unitree_guide2) StdoutLine: {'line': b'3: +      {\n'}
[4.190953] (unitree_guide2) StdoutLine: {'line': b'3: +      int m = A.nrows(), n = A.ncols(), i, j, k, l, jj, nm;\n'}
[4.191003] (unitree_guide2) StdoutLine: {'line': b'3: +      const unsigned int max_its = 30;\n'}
[4.191046] (unitree_guide2) StdoutLine: {'line': b'3: +      bool flag;\n'}
[4.191088] (unitree_guide2) StdoutLine: {'line': b'3: +      Vector < T > rv1(n);\n'}
[4.191129] (unitree_guide2) StdoutLine: {'line': b'3: +      U = A;\n'}
[4.191171] (unitree_guide2) StdoutLine: {'line': b'3: +      W.resize(n);\n'}
[4.191212] (unitree_guide2) StdoutLine: {'line': b'3: +      V.resize(n, n);\n'}
[4.191253] (unitree_guide2) StdoutLine: {'line': b'3: +      T anorm, c, f, g, h, s, scale, x, y, z;\n'}
[4.191295] (unitree_guide2) StdoutLine: {'line': b'3: +      g = scale = anorm = (T)0.0;\n'}
[4.191337] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.191378] (unitree_guide2) StdoutLine: {'line': b'3: +      // Householder reduction to bidiagonal form\n'}
[4.191421] (unitree_guide2) StdoutLine: {'line': b'3: +      for (i = 0; i < n; i++) {\n'}
[4.191478] (unitree_guide2) StdoutLine: {'line': b'3: +        l = i + 1;\n'}
[4.191563] (unitree_guide2) StdoutLine: {'line': b'3: +        rv1[i] = scale * g;\n'}
[4.191610] (unitree_guide2) StdoutLine: {'line': b'3: +        g = s = scale = (T)0.0;\n'}
[4.191653] (unitree_guide2) StdoutLine: {'line': b'3: +        if (i < m) {\n'}
[4.191695] (unitree_guide2) StdoutLine: {'line': b'3: +          for (k = i; k < m; k++) {\n'}
[4.191737] (unitree_guide2) StdoutLine: {'line': b'3: +            scale += fabs(U[k][i]);\n'}
[4.191779] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.191820] (unitree_guide2) StdoutLine: {'line': b'3: +          if (scale != (T)0.0) {\n'}
[4.191863] (unitree_guide2) StdoutLine: {'line': b'3: +            for (k = i; k < m; k++) {\n'}
[4.191905] (unitree_guide2) StdoutLine: {'line': b'3: +              U[k][i] /= scale;\n'}
[4.191947] (unitree_guide2) StdoutLine: {'line': b'3: +              s += U[k][i] * U[k][i];\n'}
[4.191992] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.192034] (unitree_guide2) StdoutLine: {'line': b'3: +            f = U[i][i];\n'}
[4.192075] (unitree_guide2) StdoutLine: {'line': b'3: +            g = -sign(f) * sqrt(s);\n'}
[4.192117] (unitree_guide2) StdoutLine: {'line': b'3: +            h = f * g - s;\n'}
[4.192158] (unitree_guide2) StdoutLine: {'line': b'3: +            U[i][i] = f - g;\n'}
[4.192200] (unitree_guide2) StdoutLine: {'line': b'3: +            for (j = l; j < n; j++) {\n'}
[4.192242] (unitree_guide2) StdoutLine: {'line': b'3: +              s = (T)0.0;\n'}
[4.192284] (unitree_guide2) StdoutLine: {'line': b'3: +              for (k = i; k < m; k++) {\n'}
[4.192326] (unitree_guide2) StdoutLine: {'line': b'3: +                s += U[k][i] * U[k][j];\n'}
[4.192367] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.192409] (unitree_guide2) StdoutLine: {'line': b'3: +              f = s / h;\n'}
[4.192450] (unitree_guide2) StdoutLine: {'line': b'3: +              for (k = i; k < m; k++) {\n'}
[4.192492] (unitree_guide2) StdoutLine: {'line': b'3: +                U[k][j] += f * U[k][i];\n'}
[4.192535] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.192577] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.192619] (unitree_guide2) StdoutLine: {'line': b'3: +            for (k = i; k < m; k++) {\n'}
[4.192660] (unitree_guide2) StdoutLine: {'line': b'3: +              U[k][i] *= scale;\n'}
[4.192709] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.192751] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.192792] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.192834] (unitree_guide2) StdoutLine: {'line': b'3: +        W[i] = scale * g;\n'}
[4.192875] (unitree_guide2) StdoutLine: {'line': b'3: +        g = s = scale = (T)0.0;\n'}
[4.192917] (unitree_guide2) StdoutLine: {'line': b'3: +        if (i < m && i != n - 1) {\n'}
[4.192964] (unitree_guide2) StdoutLine: {'line': b'3: +          for (k = l; k < n; k++) {\n'}
[4.193007] (unitree_guide2) StdoutLine: {'line': b'3: +            scale += fabs(U[i][k]);\n'}
[4.193049] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.193091] (unitree_guide2) StdoutLine: {'line': b'3: +          if (scale != (T)0.0) {\n'}
[4.193132] (unitree_guide2) StdoutLine: {'line': b'3: +            for (k = l; k < n; k++) {\n'}
[4.193174] (unitree_guide2) StdoutLine: {'line': b'3: +              U[i][k] /= scale;\n'}
[4.193215] (unitree_guide2) StdoutLine: {'line': b'3: +              s += U[i][k] * U[i][k];\n'}
[4.193257] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.193297] (unitree_guide2) StdoutLine: {'line': b'3: +            f = U[i][l];\n'}
[4.193339] (unitree_guide2) StdoutLine: {'line': b'3: +            g = -sign(f) * sqrt(s);\n'}
[4.193379] (unitree_guide2) StdoutLine: {'line': b'3: +            h = f * g - s;\n'}
[4.193421] (unitree_guide2) StdoutLine: {'line': b'3: +            U[i][l] = f - g;\n'}
[4.193462] (unitree_guide2) StdoutLine: {'line': b'3: +            for (k = l; k < n; k++) {\n'}
[4.193504] (unitree_guide2) StdoutLine: {'line': b'3: +              rv1[k] = U[i][k] / h;\n'}
[4.193590] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.193699] (unitree_guide2) StdoutLine: {'line': b'3: +            for (j = l; j < m; j++) {\n'}
[4.193745] (unitree_guide2) StdoutLine: {'line': b'3: +              s = (T)0.0;\n'}
[4.193789] (unitree_guide2) StdoutLine: {'line': b'3: +              for (k = l; k < n; k++) {\n'}
[4.193832] (unitree_guide2) StdoutLine: {'line': b'3: +                s += U[j][k] * U[i][k];\n'}
[4.193874] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.193921] (unitree_guide2) StdoutLine: {'line': b'3: +              for (k = l; k < n; k++) {\n'}
[4.193985] (unitree_guide2) StdoutLine: {'line': b'3: +                U[j][k] += s * rv1[k];\n'}
[4.194042] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.194085] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.194126] (unitree_guide2) StdoutLine: {'line': b'3: +            for (k = l; k < n; k++) {\n'}
[4.194168] (unitree_guide2) StdoutLine: {'line': b'3: +              U[i][k] *= scale;\n'}
[4.194210] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.194251] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.194293] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.194334] (unitree_guide2) StdoutLine: {'line': b'3: +        anorm = std::max(anorm, fabs(W[i]) + fabs(rv1[i]));\n'}
[4.194376] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.194455] (unitree_guide2) StdoutLine: {'line': b'3: +      // Accumulation of right-hand transformations\n'}
[4.194502] (unitree_guide2) StdoutLine: {'line': b'3: +      for (i = n - 1; i >= 0; i--) {\n'}
[4.194545] (unitree_guide2) StdoutLine: {'line': b'3: +        if (i < n - 1) {\n'}
[4.194586] (unitree_guide2) StdoutLine: {'line': b'3: +          if (g != (T)0.0) {\n'}
[4.194629] (unitree_guide2) StdoutLine: {'line': b'3: +            for (j = l; j < n; j++) {\n'}
[4.194671] (unitree_guide2) StdoutLine: {'line': b'3: +              V[j][i] = (U[i][j] / U[i][l]) / g;\n'}
[4.194713] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.194756] (unitree_guide2) StdoutLine: {'line': b'3: +            for (j = l; j < n; j++) {\n'}
[4.194798] (unitree_guide2) StdoutLine: {'line': b'3: +              s = (T)0.0;\n'}
[4.194839] (unitree_guide2) StdoutLine: {'line': b'3: +              for (k = l; k < n; k++) {\n'}
[4.194891] (unitree_guide2) StdoutLine: {'line': b'3: +                s += U[i][k] * V[k][j];\n'}
[4.194934] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.194976] (unitree_guide2) StdoutLine: {'line': b'3: +              for (k = l; k < n; k++) {\n'}
[4.195017] (unitree_guide2) StdoutLine: {'line': b'3: +                V[k][j] += s * V[k][i];\n'}
[4.195058] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.195100] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.195141] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.195182] (unitree_guide2) StdoutLine: {'line': b'3: +          for (j = l; j < n; j++) {\n'}
[4.195224] (unitree_guide2) StdoutLine: {'line': b'3: +            V[i][j] = V[j][i] = (T)0.0;\n'}
[4.195265] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.195307] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.195352] (unitree_guide2) StdoutLine: {'line': b'3: +        V[i][i] = (T)1.0;\n'}
[4.195395] (unitree_guide2) StdoutLine: {'line': b'3: +        g = rv1[i];\n'}
[4.195437] (unitree_guide2) StdoutLine: {'line': b'3: +        l = i;\n'}
[4.195479] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.195520] (unitree_guide2) StdoutLine: {'line': b'3: +      // Accumulation of left-hand transformations\n'}
[4.195562] (unitree_guide2) StdoutLine: {'line': b'3: +      for (i = std::min(m, n) - 1; i >= 0; i--) {\n'}
[4.195604] (unitree_guide2) StdoutLine: {'line': b'3: +        l = i + 1;\n'}
[4.195645] (unitree_guide2) StdoutLine: {'line': b'3: +        g = W[i];\n'}
[4.195685] (unitree_guide2) StdoutLine: {'line': b'3: +        for (j = l; j < n; j++) {\n'}
[4.195727] (unitree_guide2) StdoutLine: {'line': b'3: +          U[i][j] = (T)0.0;\n'}
[4.195768] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.195808] (unitree_guide2) StdoutLine: {'line': b'3: +        if (g != (T)0.0) {\n'}
[4.195849] (unitree_guide2) StdoutLine: {'line': b'3: +          g = (T)1.0 / g;\n'}
[4.195897] (unitree_guide2) StdoutLine: {'line': b'3: +          for (j = l; j < n; j++) {\n'}
[4.195939] (unitree_guide2) StdoutLine: {'line': b'3: +            s = (T)0.0;\n'}
[4.195981] (unitree_guide2) StdoutLine: {'line': b'3: +            for (k = l; k < m; k++) {\n'}
[4.196023] (unitree_guide2) StdoutLine: {'line': b'3: +              s += U[k][i] * U[k][j];\n'}
[4.196064] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.196106] (unitree_guide2) StdoutLine: {'line': b'3: +            f = (s / U[i][i]) * g;\n'}
[4.196147] (unitree_guide2) StdoutLine: {'line': b'3: +            for (k = i; k < m; k++) {\n'}
[4.196189] (unitree_guide2) StdoutLine: {'line': b'3: +              U[k][j] += f * U[k][i];\n'}
[4.196231] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.196273] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.196314] (unitree_guide2) StdoutLine: {'line': b'3: +          for (j = i; j < m; j++) {\n'}
[4.196356] (unitree_guide2) StdoutLine: {'line': b'3: +            U[j][i] *= g;\n'}
[4.196398] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.196439] (unitree_guide2) StdoutLine: {'line': b'3: +        } else {\n'}
[4.196480] (unitree_guide2) StdoutLine: {'line': b'3: +          for (j = i; j < m; j++) {\n'}
[4.196521] (unitree_guide2) StdoutLine: {'line': b'3: +            U[j][i] = (T)0.0;\n'}
[4.196563] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.196604] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.196646] (unitree_guide2) StdoutLine: {'line': b'3: +        U[i][i]++;\n'}
[4.196688] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.196729] (unitree_guide2) StdoutLine: {'line': b'3: +      // Diagonalization of the bidiagonal form: loop over singular values, and over allowed iterations.\n'}
[4.196772] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = n - 1; k >= 0; k--) {\n'}
[4.196814] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int its = 0; its < max_its; its++) {\n'}
[4.196865] (unitree_guide2) StdoutLine: {'line': b'3: +          flag = true;\n'}
[4.196907] (unitree_guide2) StdoutLine: {'line': b'3: +          for (l = k; l >= 0; l--) { // FIXME: in NR it was l >= 1 but there subscripts start from one\n'}
[4.196950] (unitree_guide2) StdoutLine: {'line': b'3: +            // Test for splitting\n'}
[4.196991] (unitree_guide2) StdoutLine: {'line': b'3: +            nm = l - 1;   // Note that rV[0] is always zero\n'}
[4.197033] (unitree_guide2) StdoutLine: {'line': b'3: +            if ((T)(fabs(rv1[l]) + anorm) == anorm) {\n'}
[4.197074] (unitree_guide2) StdoutLine: {'line': b'3: +              flag = false;\n'}
[4.197115] (unitree_guide2) StdoutLine: {'line': b'3: +              break;\n'}
[4.197156] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.197197] (unitree_guide2) StdoutLine: {'line': b'3: +            if ((T)(fabs(W[nm]) + anorm) == anorm) {\n'}
[4.197239] (unitree_guide2) StdoutLine: {'line': b'3: +              break;\n'}
[4.197280] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.197321] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.197363] (unitree_guide2) StdoutLine: {'line': b'3: +          if (flag) {\n'}
[4.197404] (unitree_guide2) StdoutLine: {'line': b'3: +            // Cancellation of rv1[l], if l > 0 FIXME: it was l > 1 in NR\n'}
[4.197447] (unitree_guide2) StdoutLine: {'line': b'3: +            c = (T)0.0;\n'}
[4.197489] (unitree_guide2) StdoutLine: {'line': b'3: +            s = (T)1.0;\n'}
[4.197530] (unitree_guide2) StdoutLine: {'line': b'3: +            for (i = l; i <= k; i++) {\n'}
[4.197572] (unitree_guide2) StdoutLine: {'line': b'3: +              f = s * rv1[i];\n'}
[4.197613] (unitree_guide2) StdoutLine: {'line': b'3: +              rv1[i] *= c;\n'}
[4.197654] (unitree_guide2) StdoutLine: {'line': b'3: +              if ((T)(fabs(f) + anorm) == anorm) {\n'}
[4.197695] (unitree_guide2) StdoutLine: {'line': b'3: +                break;\n'}
[4.197737] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.197777] (unitree_guide2) StdoutLine: {'line': b'3: +              g = W[i];\n'}
[4.197822] (unitree_guide2) StdoutLine: {'line': b'3: +              h = dist(f, g);\n'}
[4.197865] (unitree_guide2) StdoutLine: {'line': b'3: +              W[i] = h;\n'}
[4.197906] (unitree_guide2) StdoutLine: {'line': b'3: +              h = (T)1.0 / h;\n'}
[4.197947] (unitree_guide2) StdoutLine: {'line': b'3: +              c = g * h;\n'}
[4.197989] (unitree_guide2) StdoutLine: {'line': b'3: +              s = -f * h;\n'}
[4.198030] (unitree_guide2) StdoutLine: {'line': b'3: +              for (j = 0; j < m; j++) {\n'}
[4.198072] (unitree_guide2) StdoutLine: {'line': b'3: +                y = U[j][nm];\n'}
[4.198114] (unitree_guide2) StdoutLine: {'line': b'3: +                z = U[j][i];\n'}
[4.198156] (unitree_guide2) StdoutLine: {'line': b'3: +                U[j][nm] = y * c + z * s;\n'}
[4.198198] (unitree_guide2) StdoutLine: {'line': b'3: +                U[j][i] = z * c - y * s;\n'}
[4.198240] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.198282] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.198324] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.198365] (unitree_guide2) StdoutLine: {'line': b'3: +          z = W[k];\n'}
[4.198406] (unitree_guide2) StdoutLine: {'line': b'3: +          if (l == k) { // Convergence\n'}
[4.198448] (unitree_guide2) StdoutLine: {'line': b'3: +            if (z < (T)0.0) { // Singular value is made nonnegative\n'}
[4.198490] (unitree_guide2) StdoutLine: {'line': b'3: +              W[k] = -z;\n'}
[4.198531] (unitree_guide2) StdoutLine: {'line': b'3: +              for (j = 0; j < n; j++) {\n'}
[4.198585] (unitree_guide2) StdoutLine: {'line': b'3: +                V[j][k] = -V[j][k];\n'}
[4.198626] (unitree_guide2) StdoutLine: {'line': b'3: +              }\n'}
[4.198666] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.198707] (unitree_guide2) StdoutLine: {'line': b'3: +            break;\n'}
[4.198753] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.198796] (unitree_guide2) StdoutLine: {'line': b'3: +          if (its == max_its) {\n'}
[4.198838] (unitree_guide2) StdoutLine: {'line': b'3: +            throw std::logic_error("Error svd: no convergence in the maximum number of iterations");\n'}
[4.198887] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.198929] (unitree_guide2) StdoutLine: {'line': b'3: +          x = W[l];\n'}
[4.198969] (unitree_guide2) StdoutLine: {'line': b'3: +          nm = k - 1;\n'}
[4.199010] (unitree_guide2) StdoutLine: {'line': b'3: +          y = W[nm];\n'}
[4.199050] (unitree_guide2) StdoutLine: {'line': b'3: +          g = rv1[nm];\n'}
[4.199091] (unitree_guide2) StdoutLine: {'line': b'3: +          h = rv1[k];\n'}
[4.199131] (unitree_guide2) StdoutLine: {'line': b'3: +          f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);\n'}
[4.199172] (unitree_guide2) StdoutLine: {'line': b'3: +          g = dist(f, (T)1.0);\n'}
[4.199212] (unitree_guide2) StdoutLine: {'line': b'3: +          f = ((x - z) * (x + z) + h * ((y / (f + sign(f) * fabs(g))) - h)) / x;\n'}
[4.199256] (unitree_guide2) StdoutLine: {'line': b'3: +          c = s = (T)1.0; // Next QR transformation\n'}
[4.199297] (unitree_guide2) StdoutLine: {'line': b'3: +          for (j = l; j <= nm; j++) {\n'}
[4.199337] (unitree_guide2) StdoutLine: {'line': b'3: +            i = j + 1;\n'}
[4.199378] (unitree_guide2) StdoutLine: {'line': b'3: +            g = rv1[i];\n'}
[4.199419] (unitree_guide2) StdoutLine: {'line': b'3: +            y = W[i];\n'}
[4.199460] (unitree_guide2) StdoutLine: {'line': b'3: +            h = s * g;\n'}
[4.199515] (unitree_guide2) StdoutLine: {'line': b'3: +            g *= c;\n'}
[4.199557] (unitree_guide2) StdoutLine: {'line': b'3: +            z = dist(f, h);\n'}
[4.199599] (unitree_guide2) StdoutLine: {'line': b'3: +            rv1[j] = z;\n'}
[4.199641] (unitree_guide2) StdoutLine: {'line': b'3: +            c = f / z;\n'}
[4.199684] (unitree_guide2) StdoutLine: {'line': b'3: +            s = h / z;\n'}
[4.199726] (unitree_guide2) StdoutLine: {'line': b'3: +            f = x * c + g * s;\n'}
[4.199770] (unitree_guide2) StdoutLine: {'line': b'3: +            g = g * c - x * s;\n'}
[4.199812] (unitree_guide2) StdoutLine: {'line': b'3: +            h = y * s;\n'}
[4.199854] (unitree_guide2) StdoutLine: {'line': b'3: +            y *= c;\n'}
[4.199895] (unitree_guide2) StdoutLine: {'line': b'3: +            for (jj = 0; jj < n; jj++) {\n'}
[4.199937] (unitree_guide2) StdoutLine: {'line': b'3: +              x = V[jj][j];\n'}
[4.199979] (unitree_guide2) StdoutLine: {'line': b'3: +              z = V[jj][i];\n'}
[4.200021] (unitree_guide2) StdoutLine: {'line': b'3: +              V[jj][j] = x * c + z * s;\n'}
[4.200064] (unitree_guide2) StdoutLine: {'line': b'3: +              V[jj][i] = z * c - x * s;\n'}
[4.200107] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.200149] (unitree_guide2) StdoutLine: {'line': b'3: +            z = dist(f, h);\n'}
[4.200191] (unitree_guide2) StdoutLine: {'line': b'3: +            W[j] = z;\n'}
[4.200233] (unitree_guide2) StdoutLine: {'line': b'3: +            if (z != 0) { // Rotation can be arbitrary if z = 0\n'}
[4.200276] (unitree_guide2) StdoutLine: {'line': b'3: +              z = (T)1.0 / z;\n'}
[4.200318] (unitree_guide2) StdoutLine: {'line': b'3: +              c = f * z;\n'}
[4.200360] (unitree_guide2) StdoutLine: {'line': b'3: +              s = h * z;\n'}
[4.200403] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.200444] (unitree_guide2) StdoutLine: {'line': b'3: +            f = c * g + s * y;\n'}
[4.200486] (unitree_guide2) StdoutLine: {'line': b'3: +            x = c * y - s * g;\n'}
[4.200528] (unitree_guide2) StdoutLine: {'line': b'3: +            for (jj = 0; jj < m; jj++) {\n'}
[4.200570] (unitree_guide2) StdoutLine: {'line': b'3: +              y = U[jj][j];\n'}
[4.200611] (unitree_guide2) StdoutLine: {'line': b'3: +              z = U[jj][i];\n'}
[4.200652] (unitree_guide2) StdoutLine: {'line': b'3: +              U[jj][j] = y * c + z * s;\n'}
[4.200699] (unitree_guide2) StdoutLine: {'line': b'3: +              U[jj][i] = z * c - y * s;\n'}
[4.200742] (unitree_guide2) StdoutLine: {'line': b'3: +            }\n'}
[4.200787] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.200829] (unitree_guide2) StdoutLine: {'line': b'3: +          rv1[l] = (T)0.0;\n'}
[4.200871] (unitree_guide2) StdoutLine: {'line': b'3: +          rv1[k] = f;\n'}
[4.200912] (unitree_guide2) StdoutLine: {'line': b'3: +          W[k] = x;\n'}
[4.200955] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.200997] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.201038] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.201080] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.201123] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.201165] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > pinv(const Matrix < T > &A)\n'}
[4.201207] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.201249] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > U, V, x, tmp(A.ncols(), A.nrows());\n'}
[4.201292] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > W;\n'}
[4.201333] (unitree_guide2) StdoutLine: {'line': b'3: +    CanonicalBaseVector < T > e(0, A.nrows());\n'}
[4.201375] (unitree_guide2) StdoutLine: {'line': b'3: +    svd(A, U, W, V);\n'}
[4.201416] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < A.nrows(); i++) {\n'}
[4.201458] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1904,20 +2124,25 @@\n'}
[4.201500] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp.setColumn(i, dot_prod(dot_prod(dot_prod(V, Matrix<double>(DIAG, 1.0 / W, 0.0, W.size(), W.size())), t(U)), e));\n'}
[4.201543] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.201584] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.201626] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.201690] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.201747] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.201790] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.201832] (unitree_guide2) StdoutLine: {'line': b'3: -int lu(const Matrix<T>& A, Matrix<T>& LU, Vector<unsigned int>& index)\n'}
[4.201875] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.201916] (unitree_guide2) StdoutLine: {'line': b'3: -  if (A.ncols() != A.nrows())\n'}
[4.201958] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in LU decomposition: matrix must be squared");\n'}
[4.202001] (unitree_guide2) StdoutLine: {'line': b'3: -  int i, p, j, k, n = A.ncols(), ex;\n'}
[4.202042] (unitree_guide2) StdoutLine: {'line': b'3: -  T val, tmp;\n'}
[4.202084] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> d(n);\n'}
[4.202125] (unitree_guide2) StdoutLine: {'line': b'3: -  LU = A;\n'}
[4.202167] (unitree_guide2) StdoutLine: {'line': b'3: -  index.resize(n);\n'}
[4.202209] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.202254] (unitree_guide2) StdoutLine: {'line': b'3: -  ex = 1;\n'}
[4.202333] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.202375] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.202417] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp.setColumn(\n'}
[4.202459] (unitree_guide2) StdoutLine: {'line': b'3: +        i,\n'}
[4.202502] (unitree_guide2) StdoutLine: {'line': b'3: +        dot_prod(\n'}
[4.202543] (unitree_guide2) StdoutLine: {'line': b'3: +          dot_prod(\n'}
[4.202585] (unitree_guide2) StdoutLine: {'line': b'3: +            dot_prod(V, Matrix < double > (DIAG, 1.0 / W, 0.0, W.size(), W.size())),\n'}
[4.202628] (unitree_guide2) StdoutLine: {'line': b'3: +            t(U)), e));\n'}
[4.202682] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.202723] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.202763] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.202804] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.202854] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.202894] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.202935] (unitree_guide2) StdoutLine: {'line': b'3: +  int lu(const Matrix < T > & A, Matrix < T > & LU, Vector < unsigned int > & index)\n'}
[4.202976] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.203016] (unitree_guide2) StdoutLine: {'line': b'3: +    if (A.ncols() != A.nrows()) {\n'}
[4.203057] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in LU decomposition: matrix must be squared");\n'}
[4.203099] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.203140] (unitree_guide2) StdoutLine: {'line': b'3: +    int i, p, j, k, n = A.ncols(), ex;\n'}
[4.203201] (unitree_guide2) StdoutLine: {'line': b'3: +    T val, tmp;\n'}
[4.203251] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > d(n);\n'}
[4.203296] (unitree_guide2) StdoutLine: {'line': b'3: +    LU = A;\n'}
[4.203350] (unitree_guide2) StdoutLine: {'line': b'3: +    index.resize(n);\n'}
[4.203390] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.203430] (unitree_guide2) StdoutLine: {'line': b'3: +    ex = 1;\n'}
[4.203471] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.203511] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1926,4 +2151,6 @@\n'}
[4.203551] (unitree_guide2) StdoutLine: {'line': b'3: -      for (j = 0; j < n; j++)\n'}
[4.203592] (unitree_guide2) StdoutLine: {'line': b'3: -\tval = std::max(val, (T)fabs(LU[i][j]));\n'}
[4.203644] (unitree_guide2) StdoutLine: {'line': b'3: -      if (val == (T)0.0)\n'}
[4.203721] (unitree_guide2) StdoutLine: {'line': b'3: -\tstd::logic_error("Error in LU decomposition: matrix was singular");\n'}
[4.203839] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < n; j++) {\n'}
[4.203925] (unitree_guide2) StdoutLine: {'line': b'3: +        val = std::max(val, (T)fabs(LU[i][j]));\n'}
[4.204008] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.204097] (unitree_guide2) StdoutLine: {'line': b'3: +      if (val == (T)0.0) {\n'}
[4.204188] (unitree_guide2) StdoutLine: {'line': b'3: +        std::logic_error("Error in LU decomposition: matrix was singular");\n'}
[4.204298] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.204390] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1933,2 +2160 @@\n'}
[4.204481] (unitree_guide2) StdoutLine: {'line': b'3: -  for (k = 0; k < n - 1; k++)\n'}
[4.204560] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.204655] (unitree_guide2) StdoutLine: {'line': b'3: +    for (k = 0; k < n - 1; k++) {\n'}
[4.204730] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1937,50 +2163,54 @@\n'}
[4.204826] (unitree_guide2) StdoutLine: {'line': b'3: -      for (i = k + 1; i < n; i++)\n'}
[4.204902] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.204991] (unitree_guide2) StdoutLine: {'line': b'3: -\t  tmp = fabs(LU[i][k]) / d[i];\n'}
[4.205083] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (tmp > val)\n'}
[4.205174] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.205269] (unitree_guide2) StdoutLine: {'line': b'3: -\t      val = tmp;\n'}
[4.205311] (unitree_guide2) StdoutLine: {'line': b'3: -\t      p = i;\n'}
[4.205364] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.205406] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.205448] (unitree_guide2) StdoutLine: {'line': b'3: -      if (val == (T)0.0)\n'}
[4.205490] (unitree_guide2) StdoutLine: {'line': b'3: -\tstd::logic_error("Error in LU decomposition: matrix was singular");\n'}
[4.205533] (unitree_guide2) StdoutLine: {'line': b'3: -      if (p > k)\n'}
[4.205574] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.205616] (unitree_guide2) StdoutLine: {'line': b'3: -\t  ex = -ex;\n'}
[4.205657] (unitree_guide2) StdoutLine: {'line': b'3: -\t  std::swap(index[k], index[p]);\n'}
[4.205699] (unitree_guide2) StdoutLine: {'line': b'3: -\t  std::swap(d[k], d[p]);\n'}
[4.205741] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (j = 0; j < n; j++)\n'}
[4.205827] (unitree_guide2) StdoutLine: {'line': b'3: -\t    std::swap(LU[k][j], LU[p][j]);\n'}
[4.205869] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.205911] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.205953] (unitree_guide2) StdoutLine: {'line': b'3: -      for (i = k + 1; i < n; i++)\n'}
[4.205994] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.206035] (unitree_guide2) StdoutLine: {'line': b'3: -\t  LU[i][k] /= LU[k][k];\n'}
[4.206076] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (j = k + 1; j < n; j++)\n'}
[4.206118] (unitree_guide2) StdoutLine: {'line': b'3: -\t    LU[i][j] -= LU[i][k] * LU[k][j];\n'}
[4.206162] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.206205] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.206320] (unitree_guide2) StdoutLine: {'line': b'3: -  if (LU[n - 1][n - 1] == (T)0.0)\n'}
[4.206362] (unitree_guide2) StdoutLine: {'line': b'3: -    std::logic_error("Error in LU decomposition: matrix was singular");\n'}
[4.206405] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.206446] (unitree_guide2) StdoutLine: {'line': b'3: -  return ex;\n'}
[4.206488] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.206529] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.206569] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.206610] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> lu_solve(const Matrix<T>& LU, const Vector<T>& b, Vector<unsigned int>& index)\n'}
[4.206652] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.206693] (unitree_guide2) StdoutLine: {'line': b'3: -  if (LU.ncols() != LU.nrows())\n'}
[4.206733] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in LU solve: LU matrix should be squared");\n'}
[4.206774] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = LU.ncols();\n'}
[4.206815] (unitree_guide2) StdoutLine: {'line': b'3: -  if (b.size() != n)\n'}
[4.206856] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in LU solve: b vector must be of the same dimensions of LU matrix");\n'}
[4.206898] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> x((T)0.0, n);\n'}
[4.206939] (unitree_guide2) StdoutLine: {'line': b'3: -  int i, j, p;\n'}
[4.206980] (unitree_guide2) StdoutLine: {'line': b'3: -  T sum;\n'}
[4.207022] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.207063] (unitree_guide2) StdoutLine: {'line': b'3: -  p = index[0];\n'}
[4.207104] (unitree_guide2) StdoutLine: {'line': b'3: -  x[0] = b[p];\n'}
[4.207149] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.207190] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 1; i < n; i++)\n'}
[4.207232] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.207272] (unitree_guide2) StdoutLine: {'line': b'3: +      for (i = k + 1; i < n; i++) {\n'}
[4.207313] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp = fabs(LU[i][k]) / d[i];\n'}
[4.207353] (unitree_guide2) StdoutLine: {'line': b'3: +        if (tmp > val) {\n'}
[4.207408] (unitree_guide2) StdoutLine: {'line': b'3: +          val = tmp;\n'}
[4.207449] (unitree_guide2) StdoutLine: {'line': b'3: +          p = i;\n'}
[4.207537] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.207596] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.207638] (unitree_guide2) StdoutLine: {'line': b'3: +      if (val == (T)0.0) {\n'}
[4.207680] (unitree_guide2) StdoutLine: {'line': b'3: +        std::logic_error("Error in LU decomposition: matrix was singular");\n'}
[4.207722] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.207764] (unitree_guide2) StdoutLine: {'line': b'3: +      if (p > k) {\n'}
[4.207806] (unitree_guide2) StdoutLine: {'line': b'3: +        ex = -ex;\n'}
[4.207849] (unitree_guide2) StdoutLine: {'line': b'3: +        std::swap(index[k], index[p]);\n'}
[4.207891] (unitree_guide2) StdoutLine: {'line': b'3: +        std::swap(d[k], d[p]);\n'}
[4.207933] (unitree_guide2) StdoutLine: {'line': b'3: +        for (j = 0; j < n; j++) {\n'}
[4.207975] (unitree_guide2) StdoutLine: {'line': b'3: +          std::swap(LU[k][j], LU[p][j]);\n'}
[4.208025] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.208067] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.208111] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.208182] (unitree_guide2) StdoutLine: {'line': b'3: +      for (i = k + 1; i < n; i++) {\n'}
[4.208238] (unitree_guide2) StdoutLine: {'line': b'3: +        LU[i][k] /= LU[k][k];\n'}
[4.208280] (unitree_guide2) StdoutLine: {'line': b'3: +        for (j = k + 1; j < n; j++) {\n'}
[4.208321] (unitree_guide2) StdoutLine: {'line': b'3: +          LU[i][j] -= LU[i][k] * LU[k][j];\n'}
[4.208363] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.208417] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.208458] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.208499] (unitree_guide2) StdoutLine: {'line': b'3: +    if (LU[n - 1][n - 1] == (T)0.0) {\n'}
[4.208539] (unitree_guide2) StdoutLine: {'line': b'3: +      std::logic_error("Error in LU decomposition: matrix was singular");\n'}
[4.208581] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.208621] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.208663] (unitree_guide2) StdoutLine: {'line': b'3: +    return ex;\n'}
[4.208704] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.208746] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.208786] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.208828] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > lu_solve(\n'}
[4.208868] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < T > &LU, const Vector < T > &b,\n'}
[4.208909] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < unsigned int > &index)\n'}
[4.208950] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.208991] (unitree_guide2) StdoutLine: {'line': b'3: +    if (LU.ncols() != LU.nrows()) {\n'}
[4.209031] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in LU solve: LU matrix should be squared");\n'}
[4.209072] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.209118] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = LU.ncols();\n'}
[4.209159] (unitree_guide2) StdoutLine: {'line': b'3: +    if (b.size() != n) {\n'}
[4.209199] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.209240] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error in LU solve: b vector must be of the same dimensions of LU matrix");\n'}
[4.209282] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.209324] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > x((T)0.0, n);\n'}
[4.209371] (unitree_guide2) StdoutLine: {'line': b'3: +    int i, j, p;\n'}
[4.209428] (unitree_guide2) StdoutLine: {'line': b'3: +    T sum;\n'}
[4.209471] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.209513] (unitree_guide2) StdoutLine: {'line': b'3: +    p = index[0];\n'}
[4.209555] (unitree_guide2) StdoutLine: {'line': b'3: +    x[0] = b[p];\n'}
[4.209597] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.209638] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 1; i < n; i++) {\n'}
[4.209679] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1988,2 +2218,3 @@\n'}
[4.209720] (unitree_guide2) StdoutLine: {'line': b'3: -      for (j = 0; j < i; j++)\n'}
[4.209762] (unitree_guide2) StdoutLine: {'line': b'3: -\tsum += LU[i][j] * x[j];\n'}
[4.209803] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < i; j++) {\n'}
[4.209844] (unitree_guide2) StdoutLine: {'line': b'3: +        sum += LU[i][j] * x[j];\n'}
[4.209885] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.209927] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1993,3 +2224,2 @@\n'}
[4.209968] (unitree_guide2) StdoutLine: {'line': b'3: -  x[n - 1] /= LU[n - 1][n - 1];\n'}
[4.210009] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = n - 2; i >= 0; i--)\n'}
[4.210051] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.210097] (unitree_guide2) StdoutLine: {'line': b'3: +    x[n - 1] /= LU[n - 1][n - 1];\n'}
[4.210144] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = n - 2; i >= 0; i--) {\n'}
[4.210186] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1997,2 +2227,3 @@\n'}
[4.210228] (unitree_guide2) StdoutLine: {'line': b'3: -      for (j = i + 1; j < n; j++)\n'}
[4.210271] (unitree_guide2) StdoutLine: {'line': b'3: -\tsum += LU[i][j] * x[j];\n'}
[4.210312] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = i + 1; j < n; j++) {\n'}
[4.210354] (unitree_guide2) StdoutLine: {'line': b'3: +        sum += LU[i][j] * x[j];\n'}
[4.210396] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.210438] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2001,22 +2232,24 @@\n'}
[4.210479] (unitree_guide2) StdoutLine: {'line': b'3: -  return x;\n'}
[4.210521] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.210562] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.210604] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.210646] (unitree_guide2) StdoutLine: {'line': b'3: -void lu_solve(const Matrix<T>& LU, Vector<T>& x, const Vector<T>& b, Vector<unsigned int>& index)\n'}
[4.210689] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.210731] (unitree_guide2) StdoutLine: {'line': b'3: -  x = lu_solve(LU, b, index);\n'}
[4.210773] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.210815] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.210857] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.210899] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> lu_inverse(const Matrix<T>& A)\n'}
[4.210942] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.210984] (unitree_guide2) StdoutLine: {'line': b'3: -  if (A.ncols() != A.nrows())\n'}
[4.211026] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in LU invert: matrix must be squared");\t\n'}
[4.211074] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = A.ncols();\n'}
[4.211116] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> A1(n, n), LU;\n'}
[4.211159] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<unsigned int> index;\n'}
[4.211201] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.211242] (unitree_guide2) StdoutLine: {'line': b'3: -  lu(A, LU, index);\n'}
[4.211284] (unitree_guide2) StdoutLine: {'line': b'3: -  CanonicalBaseVector<T> e(0, n);\n'}
[4.211327] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned i = 0; i < n; i++)\n'}
[4.211369] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.211410] (unitree_guide2) StdoutLine: {'line': b'3: +    return x;\n'}
[4.211452] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.211494] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.211536] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.211578] (unitree_guide2) StdoutLine: {'line': b'3: +  void lu_solve(\n'}
[4.211620] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < T > & LU, Vector < T > & x, const Vector < T > & b,\n'}
[4.211662] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < unsigned int > & index)\n'}
[4.211712] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.211754] (unitree_guide2) StdoutLine: {'line': b'3: +    x = lu_solve(LU, b, index);\n'}
[4.211796] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.211837] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.211879] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.211920] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > lu_inverse(const Matrix < T > &A)\n'}
[4.211962] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.212003] (unitree_guide2) StdoutLine: {'line': b'3: +    if (A.ncols() != A.nrows()) {\n'}
[4.212048] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in LU invert: matrix must be squared");\n'}
[4.212091] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.212132] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = A.ncols();\n'}
[4.212174] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > A1(n, n), LU;\n'}
[4.212222] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < unsigned int > index;\n'}
[4.212264] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.212307] (unitree_guide2) StdoutLine: {'line': b'3: +    lu(A, LU, index);\n'}
[4.212349] (unitree_guide2) StdoutLine: {'line': b'3: +    CanonicalBaseVector < T > e(0, n);\n'}
[4.212392] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned i = 0; i < n; i++) {\n'}
[4.212434] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2026,94 +2259,103 @@\n'}
[4.212477] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.212518] (unitree_guide2) StdoutLine: {'line': b'3: -  return A1;\n'}
[4.212560] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.212602] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.212643] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.212685] (unitree_guide2) StdoutLine: {'line': b'3: -T lu_det(const Matrix<T>& A)\n'}
[4.212726] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.212768] (unitree_guide2) StdoutLine: {'line': b'3: -  if (A.ncols() != A.nrows())\n'}
[4.212810] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in LU determinant: matrix must be squared");\t\n'}
[4.212852] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int d;\n'}
[4.212894] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> LU;\n'}
[4.212936] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<unsigned int> index;\n'}
[4.212979] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.213025] (unitree_guide2) StdoutLine: {'line': b'3: -  d = lu(A, LU, index);\n'}
[4.213068] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.213110] (unitree_guide2) StdoutLine: {'line': b'3: -  return d * prod(LU.extractDiag());\n'}
[4.213151] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.213193] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.213236] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.213277] (unitree_guide2) StdoutLine: {'line': b'3: -void cholesky(const Matrix<T> A, Matrix<T>& LL) \n'}
[4.213320] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.213362] (unitree_guide2) StdoutLine: {'line': b'3: -  if (A.ncols() != A.nrows())\n'}
[4.213404] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in Cholesky decomposition: matrix must be squared");\n'}
[4.213446] (unitree_guide2) StdoutLine: {'line': b'3: -  int n = A.ncols();\n'}
[4.213488] (unitree_guide2) StdoutLine: {'line': b'3: -  double sum;\n'}
[4.213529] (unitree_guide2) StdoutLine: {'line': b'3: -  LL = A;\n'}
[4.213571] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.213612] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < n; i++)\n'}
[4.213654] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.213696] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = i; j < n; j++)\n'}
[4.213738] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.213779] (unitree_guide2) StdoutLine: {'line': b'3: -\t  sum = LL[i][j];\n'}
[4.213821] (unitree_guide2) StdoutLine: {'line': b'3: -\t  for (int k = i - 1; k >= 0; k--)\n'}
[4.213864] (unitree_guide2) StdoutLine: {'line': b'3: -\t    sum -= LL[i][k] * LL[j][k];\n'}
[4.213906] (unitree_guide2) StdoutLine: {'line': b'3: -\t  if (i == j) \n'}
[4.213948] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.213994] (unitree_guide2) StdoutLine: {'line': b'3: -\t      if (sum <= 0.0)\n'}
[4.214036] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tthrow std::logic_error("Error in Cholesky decomposition: matrix is not postive definite");\n'}
[4.214078] (unitree_guide2) StdoutLine: {'line': b'3: -\t      LL[i][i] = sqrt(sum);\n'}
[4.214123] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.214165] (unitree_guide2) StdoutLine: {'line': b'3: -\t  else\n'}
[4.214206] (unitree_guide2) StdoutLine: {'line': b'3: -\t    LL[j][i] = sum / LL[i][i];\n'}
[4.214248] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.214290] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int k = i + 1; k < n; k++)\n'}
[4.214336] (unitree_guide2) StdoutLine: {'line': b'3: -\tLL[i][k] = LL[k][i];\n'}
[4.214377] (unitree_guide2) StdoutLine: {'line': b'3: -    } \n'}
[4.214419] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.214461] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.214503] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.214545] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> cholesky(const Matrix<T> A) \n'}
[4.214587] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.214629] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> LL;\n'}
[4.214671] (unitree_guide2) StdoutLine: {'line': b'3: -  cholesky(A, LL);\n'}
[4.214713] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.214754] (unitree_guide2) StdoutLine: {'line': b'3: -  return LL;\n'}
[4.214796] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.214837] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.214878] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.214919] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> cholesky_solve(const Matrix<T>& LL, const Vector<T>& b)\n'}
[4.214966] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.215009] (unitree_guide2) StdoutLine: {'line': b'3: -  if (LL.ncols() != LL.nrows())\n'}
[4.215051] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in Cholesky solve: matrix must be squared");\n'}
[4.215093] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = LL.ncols();\n'}
[4.215136] (unitree_guide2) StdoutLine: {'line': b'3: -  if (b.size() != n)\n'}
[4.215177] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in Cholesky decomposition: b vector must be of the same dimensions of LU matrix");\n'}
[4.215221] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> x, y;\n'}
[4.215263] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.215305] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Solve L * y = b */\n'}
[4.215348] (unitree_guide2) StdoutLine: {'line': b'3: -  forward_elimination(LL, y, b);\n'}
[4.215403] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Solve L^T * x = y */\n'}
[4.215444] (unitree_guide2) StdoutLine: {'line': b'3: -  backward_elimination(LL, x, y);\n'}
[4.215484] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.215579] (unitree_guide2) StdoutLine: {'line': b'3: -  return x;\n'}
[4.215619] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.215659] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.215700] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.215740] (unitree_guide2) StdoutLine: {'line': b'3: -void cholesky_solve(const Matrix<T>& LL, Vector<T>& x, const Vector<T>& b)\n'}
[4.215780] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.215821] (unitree_guide2) StdoutLine: {'line': b'3: -  x = cholesky_solve(LL, b);\n'}
[4.215862] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.215902] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.215949] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.215991] (unitree_guide2) StdoutLine: {'line': b'3: -void forward_elimination(const Matrix<T>& L, Vector<T>& y, const Vector<T> b)\n'}
[4.216062] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.216123] (unitree_guide2) StdoutLine: {'line': b'3: -  if (L.ncols() != L.nrows())\n'}
[4.216165] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in Forward elimination: matrix must be squared (lower triangular)");\n'}
[4.216208] (unitree_guide2) StdoutLine: {'line': b'3: -  if (b.size() != L.nrows())\n'}
[4.216249] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in Forward elimination: b vector must be of the same dimensions of L matrix");\n'}
[4.216290] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = b.size();\n'}
[4.216331] (unitree_guide2) StdoutLine: {'line': b'3: -  y.resize(n);\n'}
[4.216371] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.216411] (unitree_guide2) StdoutLine: {'line': b'3: -  y[0] = b[0] / L[0][0];\n'}
[4.216458] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 1; i < n; i++)\n'}
[4.216512] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.216553] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.216595] (unitree_guide2) StdoutLine: {'line': b'3: +    return A1;\n'}
[4.216637] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.216678] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.216720] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.216762] (unitree_guide2) StdoutLine: {'line': b'3: +  T lu_det(const Matrix < T > & A)\n'}
[4.216804] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.216846] (unitree_guide2) StdoutLine: {'line': b'3: +    if (A.ncols() != A.nrows()) {\n'}
[4.216888] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in LU determinant: matrix must be squared");\n'}
[4.216933] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.216975] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int d;\n'}
[4.217017] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > LU;\n'}
[4.217058] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < unsigned int > index;\n'}
[4.217099] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.217141] (unitree_guide2) StdoutLine: {'line': b'3: +    d = lu(A, LU, index);\n'}
[4.217182] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.217223] (unitree_guide2) StdoutLine: {'line': b'3: +    return d * prod(LU.extractDiag());\n'}
[4.217264] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.217305] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.217346] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.217388] (unitree_guide2) StdoutLine: {'line': b'3: +  void cholesky(const Matrix < T > A, Matrix < T > & LL)\n'}
[4.217430] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.217472] (unitree_guide2) StdoutLine: {'line': b'3: +    if (A.ncols() != A.nrows()) {\n'}
[4.217514] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in Cholesky decomposition: matrix must be squared");\n'}
[4.217557] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.217598] (unitree_guide2) StdoutLine: {'line': b'3: +    int n = A.ncols();\n'}
[4.217640] (unitree_guide2) StdoutLine: {'line': b'3: +    double sum;\n'}
[4.217681] (unitree_guide2) StdoutLine: {'line': b'3: +    LL = A;\n'}
[4.217722] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.217763] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < n; i++) {\n'}
[4.217805] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = i; j < n; j++) {\n'}
[4.217847] (unitree_guide2) StdoutLine: {'line': b'3: +        sum = LL[i][j];\n'}
[4.217893] (unitree_guide2) StdoutLine: {'line': b'3: +        for (int k = i - 1; k >= 0; k--) {\n'}
[4.218053] (unitree_guide2) StdoutLine: {'line': b'3: +          sum -= LL[i][k] * LL[j][k];\n'}
[4.218132] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.218176] (unitree_guide2) StdoutLine: {'line': b'3: +        if (i == j) {\n'}
[4.218219] (unitree_guide2) StdoutLine: {'line': b'3: +          if (sum <= 0.0) {\n'}
[4.218280] (unitree_guide2) StdoutLine: {'line': b'3: +            throw std::logic_error(\n'}
[4.218324] (unitree_guide2) StdoutLine: {'line': b'3: +              "Error in Cholesky decomposition: matrix is not postive definite");\n'}
[4.218368] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.218412] (unitree_guide2) StdoutLine: {'line': b'3: +          LL[i][i] = sqrt(sum);\n'}
[4.218456] (unitree_guide2) StdoutLine: {'line': b'3: +        } else {\n'}
[4.218500] (unitree_guide2) StdoutLine: {'line': b'3: +          LL[j][i] = sum / LL[i][i];\n'}
[4.218544] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.218588] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.218632] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int k = i + 1; k < n; k++) {\n'}
[4.218687] (unitree_guide2) StdoutLine: {'line': b'3: +        LL[i][k] = LL[k][i];\n'}
[4.218731] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.218773] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.218816] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.218865] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.218909] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.218951] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > cholesky(const Matrix < T > A)\n'}
[4.218994] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.219046] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > LL;\n'}
[4.219090] (unitree_guide2) StdoutLine: {'line': b'3: +    cholesky(A, LL);\n'}
[4.219134] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.219178] (unitree_guide2) StdoutLine: {'line': b'3: +    return LL;\n'}
[4.219222] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.219265] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.219309] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.219352] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > cholesky_solve(const Matrix < T > &LL, const Vector < T > &b)\n'}
[4.219397] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.219440] (unitree_guide2) StdoutLine: {'line': b'3: +    if (LL.ncols() != LL.nrows()) {\n'}
[4.219485] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error("Error in Cholesky solve: matrix must be squared");\n'}
[4.219529] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.219572] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = LL.ncols();\n'}
[4.219615] (unitree_guide2) StdoutLine: {'line': b'3: +    if (b.size() != n) {\n'}
[4.219657] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.219700] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error in Cholesky decomposition: b vector must be of the same dimensions of LU matrix");\n'}
[4.219746] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.219789] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > x, y;\n'}
[4.219837] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.219898] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Solve L * y = b */\n'}
[4.220193] (unitree_guide2) StdoutLine: {'line': b'3: +    forward_elimination(LL, y, b);\n'}
[4.220266] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Solve L^T * x = y */\n'}
[4.220311] (unitree_guide2) StdoutLine: {'line': b'3: +    backward_elimination(LL, x, y);\n'}
[4.220355] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.220399] (unitree_guide2) StdoutLine: {'line': b'3: +    return x;\n'}
[4.220443] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.220487] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.220531] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.220576] (unitree_guide2) StdoutLine: {'line': b'3: +  void cholesky_solve(const Matrix < T > & LL, Vector < T > & x, const Vector < T > & b)\n'}
[4.220635] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.220677] (unitree_guide2) StdoutLine: {'line': b'3: +    x = cholesky_solve(LL, b);\n'}
[4.220718] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.220760] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.220800] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.220892] (unitree_guide2) StdoutLine: {'line': b'3: +  void forward_elimination(const Matrix < T > & L, Vector < T > & y, const Vector < T > b)\n'}
[4.220934] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.220975] (unitree_guide2) StdoutLine: {'line': b'3: +    if (L.ncols() != L.nrows()) {\n'}
[4.221016] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.221057] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error in Forward elimination: matrix must be squared (lower triangular)");\n'}
[4.221099] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.221140] (unitree_guide2) StdoutLine: {'line': b'3: +    if (b.size() != L.nrows()) {\n'}
[4.221208] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.221249] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error in Forward elimination: b vector must be of the same dimensions of L matrix");\n'}
[4.221291] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.221332] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = b.size();\n'}
[4.221374] (unitree_guide2) StdoutLine: {'line': b'3: +    y.resize(n);\n'}
[4.221416] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.221457] (unitree_guide2) StdoutLine: {'line': b'3: +    y[0] = b[0] / L[0][0];\n'}
[4.221499] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 1; i < n; i++) {\n'}
[4.221540] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2121,2 +2363,3 @@\n'}
[4.221582] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 0; j < i; j++)\n'}
[4.221623] (unitree_guide2) StdoutLine: {'line': b'3: -\ty[i] -= L[i][j] * y[j];\n'}
[4.221664] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < i; j++) {\n'}
[4.221708] (unitree_guide2) StdoutLine: {'line': b'3: +        y[i] -= L[i][j] * y[j];\n'}
[4.221749] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.221795] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2125,24 +2368,27 @@\n'}
[4.221839] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.221880] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.221921] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.221962] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> forward_elimination(const Matrix<T>& L, const Vector<T> b)\n'}
[4.222005] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.222045] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> y;\n'}
[4.222086] (unitree_guide2) StdoutLine: {'line': b'3: -  forward_elimination(L, y, b);\n'}
[4.222127] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.222170] (unitree_guide2) StdoutLine: {'line': b'3: -  return y;\n'}
[4.222211] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.222252] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.222292] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.222332] (unitree_guide2) StdoutLine: {'line': b'3: -void backward_elimination(const Matrix<T>& U, Vector<T>& x, const Vector<T>& y)\n'}
[4.222372] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.222413] (unitree_guide2) StdoutLine: {'line': b'3: -  if (U.ncols() != U.nrows())\n'}
[4.222453] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in Backward elimination: matrix must be squared (upper triangular)");\n'}
[4.222494] (unitree_guide2) StdoutLine: {'line': b'3: -  if (y.size() != U.nrows())\n'}
[4.222535] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error in Backward elimination: b vector must be of the same dimensions of U matrix");\n'}
[4.222577] (unitree_guide2) StdoutLine: {'line': b'3: -  int n = y.size();\n'}
[4.222618] (unitree_guide2) StdoutLine: {'line': b'3: -  x.resize(n);\n'}
[4.222658] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.222699] (unitree_guide2) StdoutLine: {'line': b'3: -  x[n - 1] = y[n - 1] / U[n - 1][n - 1];\n'}
[4.222740] (unitree_guide2) StdoutLine: {'line': b'3: -  for (int i = n - 2; i >= 0; i--)\n'}
[4.222807] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.222850] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.222894] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.222937] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.222980] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > forward_elimination(const Matrix < T > &L, const Vector < T > b)\n'}
[4.223023] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.223078] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > y;\n'}
[4.223118] (unitree_guide2) StdoutLine: {'line': b'3: +    forward_elimination(L, y, b);\n'}
[4.223158] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.223206] (unitree_guide2) StdoutLine: {'line': b'3: +    return y;\n'}
[4.223247] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.223288] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.223328] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.223369] (unitree_guide2) StdoutLine: {'line': b'3: +  void backward_elimination(const Matrix < T > & U, Vector < T > & x, const Vector < T > & y)\n'}
[4.223410] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.223451] (unitree_guide2) StdoutLine: {'line': b'3: +    if (U.ncols() != U.nrows()) {\n'}
[4.223658] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.223743] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error in Backward elimination: matrix must be squared (upper triangular)");\n'}
[4.223788] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.223830] (unitree_guide2) StdoutLine: {'line': b'3: +    if (y.size() != U.nrows()) {\n'}
[4.223913] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.223958] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error in Backward elimination: b vector must be of the same dimensions of U matrix");\n'}
[4.224011] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.224054] (unitree_guide2) StdoutLine: {'line': b'3: +    int n = y.size();\n'}
[4.224096] (unitree_guide2) StdoutLine: {'line': b'3: +    x.resize(n);\n'}
[4.224138] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.224180] (unitree_guide2) StdoutLine: {'line': b'3: +    x[n - 1] = y[n - 1] / U[n - 1][n - 1];\n'}
[4.224221] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i = n - 2; i >= 0; i--) {\n'}
[4.224262] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2150,2 +2396,3 @@\n'}
[4.224303] (unitree_guide2) StdoutLine: {'line': b'3: -      for (int j = i + 1; j < n; j++)\n'}
[4.224355] (unitree_guide2) StdoutLine: {'line': b'3: -\tx[i] -= U[i][j] * x[j];\n'}
[4.224397] (unitree_guide2) StdoutLine: {'line': b'3: +      for (int j = i + 1; j < n; j++) {\n'}
[4.224438] (unitree_guide2) StdoutLine: {'line': b'3: +        x[i] -= U[i][j] * x[j];\n'}
[4.224479] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.224520] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2154,10 +2401,10 @@\n'}
[4.224561] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.224602] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.224643] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.224685] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> backward_elimination(const Matrix<T>& U, const Vector<T> y)\n'}
[4.224733] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.224775] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> x;\n'}
[4.224817] (unitree_guide2) StdoutLine: {'line': b'3: -  forward_elimination(U, x, y);\n'}
[4.224859] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.224901] (unitree_guide2) StdoutLine: {'line': b'3: -  return x;\n'}
[4.224943] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.224984] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.225026] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.225066] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.225108] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > backward_elimination(const Matrix < T > &U, const Vector < T > y)\n'}
[4.225150] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.225192] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > x;\n'}
[4.225234] (unitree_guide2) StdoutLine: {'line': b'3: +    forward_elimination(U, x, y);\n'}
[4.225275] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.225316] (unitree_guide2) StdoutLine: {'line': b'3: +    return x;\n'}
[4.225356] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.225397] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2173,7 +2420,9 @@\n'}
[4.225437] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.225479] (unitree_guide2) StdoutLine: {'line': b'3: -void random(Matrix<T>& m)\n'}
[4.225525] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.225566] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.225608] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.225650] (unitree_guide2) StdoutLine: {'line': b'3: -      m[i][j] = (T)(rand() / double(RAND_MAX));\n'}
[4.225694] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.225736] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.225777] (unitree_guide2) StdoutLine: {'line': b'3: +  void random(Matrix < T > & m)\n'}
[4.225818] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.225858] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.225899] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.225940] (unitree_guide2) StdoutLine: {'line': b'3: +        m[i][j] = (T)(rand() / double(RAND_MAX));\n'}
[4.225981] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.226021] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.226061] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.226101] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2185,68 +2434,80 @@\n'}
[4.226141] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.226182] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> sum(const Matrix<T>& m)\n'}
[4.226223] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.226263] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp((T)0, m.ncols());\n'}
[4.226304] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.226345] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.226386] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[j] += m[i][j];\n'}
[4.226427] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.226468] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.226508] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.226548] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.226589] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> r_sum(const Matrix<T>& m)\n'}
[4.226629] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.226677] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp((T)0, m.nrows());\n'}
[4.226748] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.226803] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.226844] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i] += m[i][j];\n'}
[4.226884] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.226924] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.226965] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.227006] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.227047] (unitree_guide2) StdoutLine: {'line': b'3: -T all_sum(const Matrix<T>& m)\n'}
[4.227088] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.227129] (unitree_guide2) StdoutLine: {'line': b'3: -  T tmp = (T)0;\n'}
[4.227170] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.227211] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.227253] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp += m[i][j];\n'}
[4.227294] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.227335] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.227375] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.227415] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.227455] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> prod(const Matrix<T>& m)\n'}
[4.227496] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.227536] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp((T)1, m.ncols());\n'}
[4.227577] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.227623] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.227668] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[j] *= m[i][j];\n'}
[4.227710] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.227751] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.227792] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.227833] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.227874] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> r_prod(const Matrix<T>& m)\n'}
[4.227915] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.227954] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> tmp((T)1, m.nrows());\n'}
[4.227995] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.228035] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.228075] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i] *= m[i][j];\n'}
[4.228115] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.228156] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.228196] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.228238] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.228278] (unitree_guide2) StdoutLine: {'line': b'3: -T all_prod(const Matrix<T>& m)\n'}
[4.228320] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.228362] (unitree_guide2) StdoutLine: {'line': b'3: -  T tmp = (T)1;\n'}
[4.228403] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.228444] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.228484] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp *= m[i][j];\n'}
[4.228525] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.228566] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.228606] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.228671] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.228726] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> mean(const Matrix<T>& m)\n'}
[4.228766] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.228810] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res((T)0, m.ncols());\n'}
[4.228851] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.228892] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.228932] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.228973] (unitree_guide2) StdoutLine: {'line': b'3: -\tres[j] += m[i][j];\n'}
[4.229013] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.229054] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > sum(const Matrix < T > &m)\n'}
[4.229095] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.229136] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp((T)0, m.ncols());\n'}
[4.229177] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.229218] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.229259] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[j] += m[i][j];\n'}
[4.229300] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.229340] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.229381] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.229422] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.229462] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.229502] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.229542] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > r_sum(const Matrix < T > &m)\n'}
[4.229582] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.229626] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp((T)0, m.nrows());\n'}
[4.229672] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.229713] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.229754] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i] += m[i][j];\n'}
[4.229795] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.229834] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.229875] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.229916] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.229957] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.229997] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.230038] (unitree_guide2) StdoutLine: {'line': b'3: +  T all_sum(const Matrix < T > & m)\n'}
[4.230078] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.230118] (unitree_guide2) StdoutLine: {'line': b'3: +    T tmp = (T)0;\n'}
[4.230158] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.230198] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.230239] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp += m[i][j];\n'}
[4.230279] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.230319] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.230359] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.230400] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.230441] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.230482] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.230524] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > prod(const Matrix < T > &m)\n'}
[4.230565] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.230608] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp((T)1, m.ncols());\n'}
[4.230649] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.230690] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.230738] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[j] *= m[i][j];\n'}
[4.230779] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.230819] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.230860] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.230900] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.230940] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.230980] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.231021] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > r_prod(const Matrix < T > &m)\n'}
[4.231061] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.231102] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > tmp((T)1, m.nrows());\n'}
[4.231143] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.231184] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.231225] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i] *= m[i][j];\n'}
[4.231266] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.231307] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.231348] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.231389] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.231429] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.231470] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.231511] (unitree_guide2) StdoutLine: {'line': b'3: +  T all_prod(const Matrix < T > & m)\n'}
[4.231554] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.231595] (unitree_guide2) StdoutLine: {'line': b'3: +    T tmp = (T)1;\n'}
[4.231636] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.231676] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.231724] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp *= m[i][j];\n'}
[4.231765] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.231806] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.231847] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.231888] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.231929] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.231969] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.232010] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > mean(const Matrix < T > &m)\n'}
[4.232051] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.232091] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res((T)0, m.ncols());\n'}
[4.232131] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.232171] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.232212] (unitree_guide2) StdoutLine: {'line': b'3: +        res[j] += m[i][j];\n'}
[4.232252] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.232292] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2255,12 +2516,12 @@\n'}
[4.232332] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.232373] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.232413] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.232454] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.232495] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.232542] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> r_mean(const Matrix<T>& m)\n'}
[4.232585] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.232626] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res((T)0, m.rows());\n'}
[4.232667] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.232708] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.232749] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.232789] (unitree_guide2) StdoutLine: {'line': b'3: -\tres[i] += m[i][j];\n'}
[4.232829] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.232870] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.232910] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.232950] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.232991] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.233032] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > r_mean(const Matrix < T > &m)\n'}
[4.233072] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.233113] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res((T)0, m.rows());\n'}
[4.233154] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.233195] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.233236] (unitree_guide2) StdoutLine: {'line': b'3: +        res[i] += m[i][j];\n'}
[4.233276] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.233317] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2269,22 +2530,23 @@\n'}
[4.233358] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.233399] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.233440] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.233480] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.233524] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.233570] (unitree_guide2) StdoutLine: {'line': b'3: -T all_mean(const Matrix<T>& m)\n'}
[4.233611] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.233651] (unitree_guide2) StdoutLine: {'line': b'3: -  T tmp = (T)0;\n'}
[4.233691] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.233732] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.233772] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp += m[i][j];\n'}
[4.233817] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp / (m.nrows() * m.ncols());\n'}
[4.233858] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.233899] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.233940] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.233981] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> var(const Matrix<T>& m, bool sample_correction = false)\n'}
[4.234022] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.234164] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res((T)0, m.ncols());\n'}
[4.234235] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = m.nrows();\n'}
[4.234276] (unitree_guide2) StdoutLine: {'line': b'3: -  double sum, ssum;\n'}
[4.234317] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.234359] (unitree_guide2) StdoutLine: {'line': b'3: -    {\t\n'}
[4.234400] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.234458] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.234540] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.234595] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.234636] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.234677] (unitree_guide2) StdoutLine: {'line': b'3: +  T all_mean(const Matrix < T > & m)\n'}
[4.234718] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.234762] (unitree_guide2) StdoutLine: {'line': b'3: +    T tmp = (T)0;\n'}
[4.234805] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.234848] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.234911] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp += m[i][j];\n'}
[4.234957] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.235043] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.235091] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp / (m.nrows() * m.ncols());\n'}
[4.235135] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.235179] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.235222] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.235266] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > var(const Matrix < T > &m, bool sample_correction = false)\n'}
[4.235310] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.235354] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res((T)0, m.ncols());\n'}
[4.235397] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = m.nrows();\n'}
[4.235440] (unitree_guide2) StdoutLine: {'line': b'3: +    double sum, ssum;\n'}
[4.235486] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.235529] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2292,28 +2554,27 @@\n'}
[4.235576] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.235623] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.235668] (unitree_guide2) StdoutLine: {'line': b'3: -\t  sum += m[i][j];\n'}
[4.235714] (unitree_guide2) StdoutLine: {'line': b'3: -\t  ssum += (m[i][j] * m[i][j]);\n'}
[4.235769] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.235811] (unitree_guide2) StdoutLine: {'line': b'3: -      if (!sample_correction)\n'}
[4.235852] (unitree_guide2) StdoutLine: {'line': b'3: -\tres[j] = (ssum / n) - (sum / n) * (sum / n);\n'}
[4.235893] (unitree_guide2) StdoutLine: {'line': b'3: -      else\n'}
[4.235934] (unitree_guide2) StdoutLine: {'line': b'3: -\tres[j] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);\t\t \n'}
[4.235981] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.236029] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.236071] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.236148] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.236198] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.236239] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.236289] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> stdev(const Matrix<T>& m, bool sample_correction = false)\n'}
[4.236331] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.236371] (unitree_guide2) StdoutLine: {'line': b'3: -  return vec_sqrt(var(m, sample_correction));\n'}
[4.236411] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.236455] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.236495] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.236536] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> r_var(const Matrix<T>& m, bool sample_correction = false)\n'}
[4.236577] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.236617] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res((T)0, m.nrows());\n'}
[4.236658] (unitree_guide2) StdoutLine: {'line': b'3: -  double sum, ssum;\n'}
[4.236699] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = m.ncols();\n'}
[4.236773] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.236813] (unitree_guide2) StdoutLine: {'line': b'3: -    {\t\n'}
[4.236854] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.236909] (unitree_guide2) StdoutLine: {'line': b'3: +        sum += m[i][j];\n'}
[4.236956] (unitree_guide2) StdoutLine: {'line': b'3: +        ssum += (m[i][j] * m[i][j]);\n'}
[4.236997] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.237038] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!sample_correction) {\n'}
[4.237078] (unitree_guide2) StdoutLine: {'line': b'3: +        res[j] = (ssum / n) - (sum / n) * (sum / n);\n'}
[4.237119] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.237160] (unitree_guide2) StdoutLine: {'line': b'3: +        res[j] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);\n'}
[4.237201] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.237241] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.237281] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.237321] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.237362] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.237403] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.237447] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.237500] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > stdev(const Matrix < T > &m, bool sample_correction = false)\n'}
[4.237542] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.237583] (unitree_guide2) StdoutLine: {'line': b'3: +    return vec_sqrt(var(m, sample_correction));\n'}
[4.237623] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.237664] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.237705] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.237745] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > r_var(const Matrix < T > &m, bool sample_correction = false)\n'}
[4.237785] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.237826] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res((T)0, m.nrows());\n'}
[4.237866] (unitree_guide2) StdoutLine: {'line': b'3: +    double sum, ssum;\n'}
[4.237906] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = m.ncols();\n'}
[4.237946] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.237986] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2321,27 +2582,26 @@\n'}
[4.238026] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.238066] (unitree_guide2) StdoutLine: {'line': b'3: -\t{\n'}
[4.238106] (unitree_guide2) StdoutLine: {'line': b'3: -\t  sum += m[i][j];\n'}
[4.238147] (unitree_guide2) StdoutLine: {'line': b'3: -\t  ssum += (m[i][j] * m[i][j]);\n'}
[4.238187] (unitree_guide2) StdoutLine: {'line': b'3: -\t}\n'}
[4.238228] (unitree_guide2) StdoutLine: {'line': b'3: -      if (!sample_correction)\n'}
[4.238269] (unitree_guide2) StdoutLine: {'line': b'3: -\tres[i] = (ssum / n) - (sum / n) * (sum / n);\n'}
[4.238314] (unitree_guide2) StdoutLine: {'line': b'3: -      else\n'}
[4.238354] (unitree_guide2) StdoutLine: {'line': b'3: -\tres[i] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);\n'}
[4.238419] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.238526] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.238588] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.238633] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.238699] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.238768] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.238809] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> r_stdev(const Matrix<T>& m, bool sample_correction = false)\n'}
[4.238850] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.238891] (unitree_guide2) StdoutLine: {'line': b'3: -  return vec_sqrt(r_var(m, sample_correction));\n'}
[4.238932] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.238973] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.239015] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.239058] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> max(const Matrix<T>& m)\n'}
[4.239100] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.239141] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res(m.ncols());\n'}
[4.239183] (unitree_guide2) StdoutLine: {'line': b'3: -  double value;\n'}
[4.239225] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.239267] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.239308] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.239349] (unitree_guide2) StdoutLine: {'line': b'3: +        sum += m[i][j];\n'}
[4.239418] (unitree_guide2) StdoutLine: {'line': b'3: +        ssum += (m[i][j] * m[i][j]);\n'}
[4.239461] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.239576] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!sample_correction) {\n'}
[4.239647] (unitree_guide2) StdoutLine: {'line': b'3: +        res[i] = (ssum / n) - (sum / n) * (sum / n);\n'}
[4.239693] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.239736] (unitree_guide2) StdoutLine: {'line': b'3: +        res[i] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);\n'}
[4.239780] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.239822] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.239866] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.239908] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.239952] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.239995] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.240038] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.240082] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > r_stdev(const Matrix < T > &m, bool sample_correction = false)\n'}
[4.240127] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.240170] (unitree_guide2) StdoutLine: {'line': b'3: +    return vec_sqrt(r_var(m, sample_correction));\n'}
[4.240213] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.240255] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.240298] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.240344] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > max(const Matrix < T > &m)\n'}
[4.240421] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.240489] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res(m.ncols());\n'}
[4.240533] (unitree_guide2) StdoutLine: {'line': b'3: +    double value;\n'}
[4.240576] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.240619] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2349,2 +2609,3 @@\n'}
[4.240661] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 1; i < m.nrows(); i++)\n'}
[4.240704] (unitree_guide2) StdoutLine: {'line': b'3: -\tvalue = std::max(m[i][j], value);\n'}
[4.240766] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 1; i < m.nrows(); i++) {\n'}
[4.240810] (unitree_guide2) StdoutLine: {'line': b'3: +        value = std::max(m[i][j], value);\n'}
[4.240854] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.240897] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2353,11 +2614,10 @@\n'}
[4.240940] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.240983] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.241027] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.241070] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.241113] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.241156] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> r_max(const Matrix<T>& m)\n'}
[4.241199] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.241242] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res(m.nrows());\n'}
[4.241284] (unitree_guide2) StdoutLine: {'line': b'3: -  double value;\n'}
[4.241333] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.241377] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.241420] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.241463] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.241525] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.241634] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.241683] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.241727] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > r_max(const Matrix < T > &m)\n'}
[4.241770] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.241813] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res(m.nrows());\n'}
[4.241857] (unitree_guide2) StdoutLine: {'line': b'3: +    double value;\n'}
[4.241900] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.241943] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2365,2 +2625,3 @@\n'}
[4.241986] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 1; j < m.ncols(); j++)\n'}
[4.242029] (unitree_guide2) StdoutLine: {'line': b'3: -\tvalue = std::max(m[i][j], value);\n'}
[4.242074] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 1; j < m.ncols(); j++) {\n'}
[4.242117] (unitree_guide2) StdoutLine: {'line': b'3: +        value = std::max(m[i][j], value);\n'}
[4.242160] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.242202] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2369,11 +2630,10 @@\n'}
[4.242245] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.242289] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.242335] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.242378] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.242420] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.242464] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> min(const Matrix<T>& m)\n'}
[4.242507] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.242550] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res(m.ncols());\n'}
[4.242592] (unitree_guide2) StdoutLine: {'line': b'3: -  double value;\n'}
[4.242636] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.242679] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.242721] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.242764] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.242807] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.242850] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.242893] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.242936] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > min(const Matrix < T > &m)\n'}
[4.242978] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.243021] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res(m.ncols());\n'}
[4.243064] (unitree_guide2) StdoutLine: {'line': b'3: +    double value;\n'}
[4.243127] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.243171] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2381,2 +2641,3 @@\n'}
[4.243214] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int i = 1; i < m.nrows(); i++)\n'}
[4.243257] (unitree_guide2) StdoutLine: {'line': b'3: -\tvalue = std::min(m[i][j], value);\n'}
[4.243310] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int i = 1; i < m.nrows(); i++) {\n'}
[4.243354] (unitree_guide2) StdoutLine: {'line': b'3: +        value = std::min(m[i][j], value);\n'}
[4.243397] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.243440] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2385,11 +2646,10 @@\n'}
[4.243483] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.243525] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.243569] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.243612] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.243655] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.243698] (unitree_guide2) StdoutLine: {'line': b'3: -Vector<T> r_min(const Matrix<T>& m)\n'}
[4.243742] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.243786] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<T> res(m.nrows());\n'}
[4.243829] (unitree_guide2) StdoutLine: {'line': b'3: -  double value;\n'}
[4.243872] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.243926] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.243970] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.244014] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.244057] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.244100] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.244143] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.244185] (unitree_guide2) StdoutLine: {'line': b'3: +  Vector < T > r_min(const Matrix < T > &m)\n'}
[4.244228] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.244276] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < T > res(m.nrows());\n'}
[4.244319] (unitree_guide2) StdoutLine: {'line': b'3: +    double value;\n'}
[4.244362] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.244405] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2397,2 +2657,3 @@\n'}
[4.244462] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int j = 1; j < m.ncols(); j++)\n'}
[4.244505] (unitree_guide2) StdoutLine: {'line': b'3: -\tvalue = std::min(m[i][j], value);\n'}
[4.244548] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 1; j < m.ncols(); j++) {\n'}
[4.244591] (unitree_guide2) StdoutLine: {'line': b'3: +        value = std::min(m[i][j], value);\n'}
[4.244635] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.244678] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2401,4 +2662,3 @@\n'}
[4.244721] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.244764] (unitree_guide2) StdoutLine: {'line': b'3: -  return res;\n'}
[4.244807] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.244850] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.244894] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.244937] (unitree_guide2) StdoutLine: {'line': b'3: +    return res;\n'}
[4.244979] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.245022] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2411,23 +2671,27 @@\n'}
[4.245066] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.245112] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> exp(const Matrix<T>&m)\n'}
[4.245156] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.245198] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(m.nrows(), m.ncols());\n'}
[4.245245] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.245289] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.245441] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.245571] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = exp(m[i][j]);\n'}
[4.245667] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.245787] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.245865] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.245910] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.245954] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.245998] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> mat_sqrt(const Matrix<T>&m)\n'}
[4.246042] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.246085] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(m.nrows(), m.ncols());\n'}
[4.246128] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.246171] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.246219] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.246263] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = sqrt(m[i][j]);\n'}
[4.246307] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.246349] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.246392] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.246434] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.246477] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > exp(const Matrix < T > &m)\n'}
[4.246520] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.246562] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(m.nrows(), m.ncols());\n'}
[4.246604] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.246647] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.246691] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.246734] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = exp(m[i][j]);\n'}
[4.246777] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.246820] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.246863] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.246906] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.246949] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.246991] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.247034] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.247076] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > mat_sqrt(const Matrix < T > &m)\n'}
[4.247118] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.247160] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(m.nrows(), m.ncols());\n'}
[4.247206] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.247248] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.247290] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.247333] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = sqrt(m[i][j]);\n'}
[4.247375] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.247431] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.247475] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.247518] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.247562] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.247606] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2439,47 +2703,55 @@\n'}
[4.247649] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.247693] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> kron(const Vector<T>& b, const Vector<T>& a)\n'}
[4.247737] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.247780] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(b.size(), a.size());\n'}
[4.247824] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < b.size(); i++)\n'}
[4.247867] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < a.size(); j++)\n'}
[4.247919] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[i][j] = a[j] * b[i];\n'}
[4.247962] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.248006] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.248050] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.248093] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.248137] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.248187] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> t(const Matrix<T>& a)\n'}
[4.248231] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.248275] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(a.ncols(), a.nrows());\n'}
[4.248319] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < a.nrows(); i++)\n'}
[4.248363] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < a.ncols(); j++)\n'}
[4.248407] (unitree_guide2) StdoutLine: {'line': b'3: -      tmp[j][i] = a[i][j];\n'}
[4.248465] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.248510] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.248555] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.248600] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.248645] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.248690] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> dot_prod(const Matrix<T>& a, const Matrix<T>& b)\n'}
[4.248735] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.248779] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.ncols() != b.nrows())\n'}
[4.248824] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error matrix dot product: dimensions of the matrices are not compatible");\n'}
[4.248869] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(a.nrows(), b.ncols());\n'}
[4.248914] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < tmp.nrows(); i++)\n'}
[4.248959] (unitree_guide2) StdoutLine: {'line': b'3: -    for (unsigned int j = 0; j < tmp.ncols(); j++)\n'}
[4.249003] (unitree_guide2) StdoutLine: {'line': b'3: -      {\n'}
[4.249048] (unitree_guide2) StdoutLine: {'line': b'3: -\ttmp[i][j] = (T)0;\n'}
[4.249093] (unitree_guide2) StdoutLine: {'line': b'3: -\tfor (unsigned int k = 0; k < a.ncols(); k++)\n'}
[4.249143] (unitree_guide2) StdoutLine: {'line': b'3: -\t  tmp[i][j] += a[i][k] * b[k][j];\n'}
[4.249230] (unitree_guide2) StdoutLine: {'line': b'3: -      }\n'}
[4.249285] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\t\n'}
[4.249331] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.249376] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.249441] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.249488] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.249535] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> dot_prod(const Matrix<T>& a, const Vector<T>& b)\n'}
[4.249582] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.249627] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.ncols() != b.size())\n'}
[4.249673] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error matrix dot product: dimensions of the matrix and the vector are not compatible");\n'}
[4.249720] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(a.nrows(), 1);\n'}
[4.249766] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < tmp.nrows(); i++)\n'}
[4.249813] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.249859] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.249906] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > kron(const Vector < T > &b, const Vector < T > &a)\n'}
[4.249952] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.249998] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(b.size(), a.size());\n'}
[4.250045] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < b.size(); i++) {\n'}
[4.250092] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < a.size(); j++) {\n'}
[4.250152] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = a[j] * b[i];\n'}
[4.250200] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.250246] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.250292] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.250337] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.250383] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.250442] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.250486] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.250531] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > t(const Matrix < T > &a)\n'}
[4.250576] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.250621] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(a.ncols(), a.nrows());\n'}
[4.250667] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < a.nrows(); i++) {\n'}
[4.250714] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < a.ncols(); j++) {\n'}
[4.250760] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[j][i] = a[i][j];\n'}
[4.250806] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.250851] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.250896] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.250941] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.250985] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.251030] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.251076] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.251125] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > dot_prod(const Matrix < T > &a, const Matrix < T > &b)\n'}
[4.251170] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.251215] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.ncols() != b.nrows()) {\n'}
[4.251259] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.251304] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error matrix dot product: dimensions of the matrices are not compatible");\n'}
[4.251359] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.251404] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(a.nrows(), b.ncols());\n'}
[4.251449] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < tmp.nrows(); i++) {\n'}
[4.251494] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int j = 0; j < tmp.ncols(); j++) {\n'}
[4.251538] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][j] = (T)0;\n'}
[4.251583] (unitree_guide2) StdoutLine: {'line': b'3: +        for (unsigned int k = 0; k < a.ncols(); k++) {\n'}
[4.251628] (unitree_guide2) StdoutLine: {'line': b'3: +          tmp[i][j] += a[i][k] * b[k][j];\n'}
[4.251674] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.251719] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.251764] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.251808] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.251853] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.251897] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.251942] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.251986] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.252031] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > dot_prod(const Matrix < T > &a, const Vector < T > &b)\n'}
[4.252084] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.252133] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.ncols() != b.size()) {\n'}
[4.252178] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.252223] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error matrix dot product: dimensions of the matrix and the vector are not compatible");\n'}
[4.252269] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.252315] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(a.nrows(), 1);\n'}
[4.252547] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < tmp.nrows(); i++) {\n'}
[4.252604] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2487,15 +2759,17 @@\n'}
[4.252649] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int k = 0; k < a.ncols(); k++)\n'}
[4.252695] (unitree_guide2) StdoutLine: {'line': b'3: -\ttmp[i][0] += a[i][k] * b[k];\n'}
[4.252740] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.252785] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.252830] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.252876] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.252921] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.252965] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.253013] (unitree_guide2) StdoutLine: {'line': b'3: -Matrix<T> dot_prod(const Vector<T>& a, const Matrix<T>& b)\n'}
[4.253072] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.253213] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a.size() != b.nrows())\n'}
[4.253327] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error("Error matrix dot product: dimensions of the vector and matrix are not compatible");\n'}
[4.253377] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<T> tmp(1, b.ncols());\n'}
[4.253422] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < tmp.ncols(); j++)\n'}
[4.253482] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.253526] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int k = 0; k < a.ncols(); k++) {\n'}
[4.253570] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[i][0] += a[i][k] * b[k];\n'}
[4.253613] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.253658] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.253701] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.253745] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.253792] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.253835] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.253881] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.253925] (unitree_guide2) StdoutLine: {'line': b'3: +  Matrix < T > dot_prod(const Vector < T > &a, const Matrix < T > &b)\n'}
[4.253971] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.254020] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a.size() != b.nrows()) {\n'}
[4.254086] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(\n'}
[4.254131] (unitree_guide2) StdoutLine: {'line': b'3: +        "Error matrix dot product: dimensions of the vector and matrix are not compatible");\n'}
[4.254177] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.254232] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < T > tmp(1, b.ncols());\n'}
[4.254278] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < tmp.ncols(); j++) {\n'}
[4.254326] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2503,26 +2777,29 @@\n'}
[4.254372] (unitree_guide2) StdoutLine: {'line': b'3: -      for (unsigned int k = 0; k < a.size(); k++)\n'}
[4.254454] (unitree_guide2) StdoutLine: {'line': b'3: -\ttmp[0][j] += a[k] * b[k][j];\n'}
[4.254505] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.254553] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\n'}
[4.254601] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;\n'}
[4.254649] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.254701] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.254754] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.254802] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<double> rank(const Matrix<T> m)\n'}
[4.254850] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.254896] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<double> tmp(m.nrows(), m.ncols());\n'}
[4.254942] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int j = 0; j < m.ncols(); j++)\n'}
[4.255003] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp.setColumn(j, rank<T>(m.extractColumn(j)));\n'}
[4.255053] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.255108] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;                  \n'}
[4.255311] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.255369] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.255413] (unitree_guide2) StdoutLine: {'line': b'3: -template <typename T>\n'}
[4.255470] (unitree_guide2) StdoutLine: {'line': b'3: -inline Matrix<double> r_rank(const Matrix<T> m)\n'}
[4.255533] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.255613] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<double> tmp(m.nrows(), m.ncols());\n'}
[4.255660] (unitree_guide2) StdoutLine: {'line': b'3: -  for (unsigned int i = 0; i < m.nrows(); i++)\n'}
[4.255706] (unitree_guide2) StdoutLine: {'line': b'3: -    tmp.setRow(i, rank<T>(m.extractRow(i)));\n'}
[4.255753] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.255798] (unitree_guide2) StdoutLine: {'line': b'3: -  return tmp;                  \n'}
[4.255843] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.255888] (unitree_guide2) StdoutLine: {'line': b'3: +      for (unsigned int k = 0; k < a.size(); k++) {\n'}
[4.255934] (unitree_guide2) StdoutLine: {'line': b'3: +        tmp[0][j] += a[k] * b[k][j];\n'}
[4.255984] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.256031] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.256076] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.256120] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.256166] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.256213] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.256259] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.256304] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < double > rank(const Matrix < T > m)\n'}
[4.256348] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.256393] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > tmp(m.nrows(), m.ncols());\n'}
[4.256438] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int j = 0; j < m.ncols(); j++) {\n'}
[4.256483] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp.setColumn(j, rank < T > (m.extractColumn(j)));\n'}
[4.256529] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.256574] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.256619] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.256665] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.256711] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.256757] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.256802] (unitree_guide2) StdoutLine: {'line': b'3: +  inline Matrix < double > r_rank(const Matrix < T > m)\n'}
[4.256847] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.256891] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > tmp(m.nrows(), m.ncols());\n'}
[4.256936] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = 0; i < m.nrows(); i++) {\n'}
[4.256986] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp.setRow(i, rank < T > (m.extractRow(i)));\n'}
[4.257032] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.257076] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.257121] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.257165] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.257210] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.257254] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'include/thirdParty/quadProgpp/QuadProg++.hh':\n"}
[4.257300] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.257346] (unitree_guide2) StdoutLine: {'line': b'3: --- include/thirdParty/quadProgpp/QuadProg++.hh\n'}
[4.257391] (unitree_guide2) StdoutLine: {'line': b'3: +++ include/thirdParty/quadProgpp/QuadProg++.hh.uncrustify\n'}
[4.257449] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2,3 +2,3 @@\n'}
[4.257494] (unitree_guide2) StdoutLine: {'line': b'3: - File $Id: QuadProg++.hh 232 2007-06-21 12:29:00Z digasper $ \n'}
[4.257547] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.257591] (unitree_guide2) StdoutLine: {'line': b'3: - The quadprog_solve() function implements the algorithm of Goldfarb and Idnani \n'}
[4.257635] (unitree_guide2) StdoutLine: {'line': b'3: + File $Id: QuadProg++.hh 232 2007-06-21 12:29:00Z digasper $\n'}
[4.257680] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.257724] (unitree_guide2) StdoutLine: {'line': b'3: + The quadprog_solve() function implements the algorithm of Goldfarb and Idnani\n'}
[4.257768] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7 +7 @@\n'}
[4.257812] (unitree_guide2) StdoutLine: {'line': b'3: -\t \n'}
[4.257855] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.257899] (unitree_guide2) StdoutLine: {'line': b'3: @@ -14 +14 @@\n'}
[4.257949] (unitree_guide2) StdoutLine: {'line': b'3: -\t \n'}
[4.257993] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.258037] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18 +18 @@\n'}
[4.258081] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\t\t\n'}
[4.258125] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.258169] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21 +21 @@\n'}
[4.258213] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\t\t\n'}
[4.258258] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.258302] (unitree_guide2) StdoutLine: {'line': b'3: @@ -26 +26 @@\n'}
[4.258346] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.258390] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.258446] (unitree_guide2) StdoutLine: {'line': b'3: @@ -30 +30 @@\n'}
[4.258489] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.258532] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.258574] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35,2 +35,2 @@\n'}
[4.258616] (unitree_guide2) StdoutLine: {'line': b'3: -  1. pay attention in setting up the vectors ce0 and ci0. \n'}
[4.258667] (unitree_guide2) StdoutLine: {'line': b'3: -\t   If the constraints of your problem are specified in the form \n'}
[4.258710] (unitree_guide2) StdoutLine: {'line': b'3: +  1. pay attention in setting up the vectors ce0 and ci0.\n'}
[4.258753] (unitree_guide2) StdoutLine: {'line': b'3: +\t   If the constraints of your problem are specified in the form\n'}
[4.258796] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38,2 +38,2 @@\n'}
[4.258839] (unitree_guide2) StdoutLine: {'line': b'3: -  2. The matrices have column dimension equal to MATRIX_DIM, \n'}
[4.258883] (unitree_guide2) StdoutLine: {'line': b'3: -     a constant set to 20 in this file (by means of a #define macro). \n'}
[4.258933] (unitree_guide2) StdoutLine: {'line': b'3: +  2. The matrices have column dimension equal to MATRIX_DIM,\n'}
[4.258977] (unitree_guide2) StdoutLine: {'line': b'3: +     a constant set to 20 in this file (by means of a #define macro).\n'}
[4.259020] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43 +43 @@\n'}
[4.259063] (unitree_guide2) StdoutLine: {'line': b'3: -     the G = L^T L cholesky factorization for further computations inside the function. \n'}
[4.259106] (unitree_guide2) StdoutLine: {'line': b'3: +     the G = L^T L cholesky factorization for further computations inside the function.\n'}
[4.259149] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46 +46 @@\n'}
[4.259191] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.259232] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.259274] (unitree_guide2) StdoutLine: {'line': b'3: @@ -48 +48 @@\n'}
[4.259316] (unitree_guide2) StdoutLine: {'line': b'3: -  \t\t\t DIEGM - University of Udine, Italy\n'}
[4.259359] (unitree_guide2) StdoutLine: {'line': b'3: +                         DIEGM - University of Udine, Italy\n'}
[4.259401] (unitree_guide2) StdoutLine: {'line': b'3: @@ -51 +51 @@\n'}
[4.259443] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.259486] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.259528] (unitree_guide2) StdoutLine: {'line': b'3: @@ -54 +54 @@\n'}
[4.259575] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.259622] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.259665] (unitree_guide2) StdoutLine: {'line': b'3: @@ -56 +56 @@\n'}
[4.259708] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.259751] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.259794] (unitree_guide2) StdoutLine: {'line': b'3: @@ -70,4 +70,5 @@\n'}
[4.259837] (unitree_guide2) StdoutLine: {'line': b'3: -double solve_quadprog(Matrix<double>& G, Vector<double>& g0, \n'}
[4.259884] (unitree_guide2) StdoutLine: {'line': b'3: -                      const Matrix<double>& CE, const Vector<double>& ce0,  \n'}
[4.259929] (unitree_guide2) StdoutLine: {'line': b'3: -                      const Matrix<double>& CI, const Vector<double>& ci0, \n'}
[4.259972] (unitree_guide2) StdoutLine: {'line': b'3: -                      Vector<double>& x);\n'}
[4.260014] (unitree_guide2) StdoutLine: {'line': b'3: +  double solve_quadprog(\n'}
[4.260057] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > & G, Vector < double > & g0,\n'}
[4.260099] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & CE, const Vector < double > & ce0,\n'}
[4.260142] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & CI, const Vector < double > & ci0,\n'}
[4.260184] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > & x);\n'}
[4.260226] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.260269] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/FSM.cpp':\n"}
[4.260312] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.260355] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/FSM.cpp\n'}
[4.260398] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/FSM.cpp.uncrustify\n'}
[4.260440] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7,2 +7,3 @@\n'}
[4.260496] (unitree_guide2) StdoutLine: {'line': b'3: -FSM::FSM(CtrlComponents *ctrlComp)\n'}
[4.260539] (unitree_guide2) StdoutLine: {'line': b'3: -    :_ctrlComp(ctrlComp){\n'}
[4.260581] (unitree_guide2) StdoutLine: {'line': b'3: +FSM::FSM(CtrlComponents * ctrlComp)\n'}
[4.260622] (unitree_guide2) StdoutLine: {'line': b'3: +: _ctrlComp(ctrlComp)\n'}
[4.260663] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.260705] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10,8 +11,8 @@\n'}
[4.260746] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.invalid = nullptr;\n'}
[4.260787] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.passive = new State_Passive(_ctrlComp);\n'}
[4.260828] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.fixedStand = new State_FixedStand(_ctrlComp);\n'}
[4.260874] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.freeStand = new State_FreeStand(_ctrlComp);\n'}
[4.260916] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.trotting = new State_Trotting(_ctrlComp);\n'}
[4.260958] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.balanceTest = new State_BalanceTest(_ctrlComp);\n'}
[4.261000] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.swingTest = new State_SwingTest(_ctrlComp);\n'}
[4.261042] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.stepTest = new State_StepTest(_ctrlComp);\n'}
[4.261084] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.invalid = nullptr;\n'}
[4.261125] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.passive = new State_Passive(_ctrlComp);\n'}
[4.261167] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.fixedStand = new State_FixedStand(_ctrlComp);\n'}
[4.261209] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.freeStand = new State_FreeStand(_ctrlComp);\n'}
[4.261252] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.trotting = new State_Trotting(_ctrlComp);\n'}
[4.261294] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.balanceTest = new State_BalanceTest(_ctrlComp);\n'}
[4.261336] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.swingTest = new State_SwingTest(_ctrlComp);\n'}
[4.261378] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.stepTest = new State_StepTest(_ctrlComp);\n'}
[4.261424] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19 +20 @@\n'}
[4.261480] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.moveBase = new State_move_base(_ctrlComp);\n'}
[4.261523] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.moveBase = new State_move_base(_ctrlComp);\n'}
[4.261565] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22 +23 @@\n'}
[4.261608] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.moveBase = new State_move_base(_ctrlComp);\n'}
[4.261651] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.moveBase = new State_move_base(_ctrlComp);\n'}
[4.261693] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24 +25 @@\n'}
[4.261736] (unitree_guide2) StdoutLine: {'line': b'3: -    initialize();\n'}
[4.261779] (unitree_guide2) StdoutLine: {'line': b'3: +  initialize();\n'}
[4.261821] (unitree_guide2) StdoutLine: {'line': b'3: @@ -27,2 +28,3 @@\n'}
[4.261867] (unitree_guide2) StdoutLine: {'line': b'3: -FSM::~FSM(){\n'}
[4.261909] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateList.deletePtr();\n'}
[4.261952] (unitree_guide2) StdoutLine: {'line': b'3: +FSM::~FSM()\n'}
[4.261995] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.262038] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateList.deletePtr();\n'}
[4.262080] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31,5 +33,6 @@\n'}
[4.262123] (unitree_guide2) StdoutLine: {'line': b'3: -void FSM::initialize(){\n'}
[4.262165] (unitree_guide2) StdoutLine: {'line': b'3: -    _currentState = _stateList.passive;\n'}
[4.262207] (unitree_guide2) StdoutLine: {'line': b'3: -    _currentState -> enter();\n'}
[4.262250] (unitree_guide2) StdoutLine: {'line': b'3: -    _nextState = _currentState;\n'}
[4.262292] (unitree_guide2) StdoutLine: {'line': b'3: -    _mode = FSMMode::NORMAL;\n'}
[4.262334] (unitree_guide2) StdoutLine: {'line': b'3: +void FSM::initialize()\n'}
[4.262377] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.262419] (unitree_guide2) StdoutLine: {'line': b'3: +  _currentState = _stateList.passive;\n'}
[4.262462] (unitree_guide2) StdoutLine: {'line': b'3: +  _currentState->enter();\n'}
[4.262504] (unitree_guide2) StdoutLine: {'line': b'3: +  _nextState = _currentState;\n'}
[4.262547] (unitree_guide2) StdoutLine: {'line': b'3: +  _mode = FSMMode::NORMAL;\n'}
[4.262589] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38,7 +41,18 @@\n'}
[4.262632] (unitree_guide2) StdoutLine: {'line': b'3: -void FSM::run(){\n'}
[4.262675] (unitree_guide2) StdoutLine: {'line': b'3: -    _startTime = getSystemTime();\n'}
[4.262718] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->sendRecv();\n'}
[4.262761] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->runWaveGen();\n'}
[4.262806] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->estimator->run();\n'}
[4.262849] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!checkSafty()){\n'}
[4.262892] (unitree_guide2) StdoutLine: {'line': b'3: -        _ctrlComp->ioInter->setPassive();\n'}
[4.262935] (unitree_guide2) StdoutLine: {'line': b'3: +void FSM::run()\n'}
[4.262978] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.263021] (unitree_guide2) StdoutLine: {'line': b'3: +  _startTime = getSystemTime();\n'}
[4.263063] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->sendRecv();\n'}
[4.263105] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->runWaveGen();\n'}
[4.263148] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->estimator->run();\n'}
[4.263190] (unitree_guide2) StdoutLine: {'line': b'3: +  if (!checkSafty()) {\n'}
[4.263233] (unitree_guide2) StdoutLine: {'line': b'3: +    _ctrlComp->ioInter->setPassive();\n'}
[4.263275] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.263318] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.263360] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_mode == FSMMode::NORMAL) {\n'}
[4.263411] (unitree_guide2) StdoutLine: {'line': b'3: +    _currentState->run();\n'}
[4.263454] (unitree_guide2) StdoutLine: {'line': b'3: +    _nextStateName = _currentState->checkChange();\n'}
[4.263501] (unitree_guide2) StdoutLine: {'line': b'3: +    if (_nextStateName != _currentState->_stateName) {\n'}
[4.263547] (unitree_guide2) StdoutLine: {'line': b'3: +      _mode = FSMMode::CHANGE;\n'}
[4.263590] (unitree_guide2) StdoutLine: {'line': b'3: +      _nextState = getNextState(_nextStateName);\n'}
[4.263633] (unitree_guide2) StdoutLine: {'line': b'3: +      std::cout << "Switched from " << _currentState->_stateNameString\n'}
[4.263676] (unitree_guide2) StdoutLine: {'line': b'3: +                << " to " << _nextState->_stateNameString << std::endl;\n'}
[4.263718] (unitree_guide2) StdoutLine: {'line': b'3: @@ -45,0 +60,7 @@\n'}
[4.263760] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_mode == FSMMode::CHANGE) {\n'}
[4.263806] (unitree_guide2) StdoutLine: {'line': b'3: +    _currentState->exit();\n'}
[4.263849] (unitree_guide2) StdoutLine: {'line': b'3: +    _currentState = _nextState;\n'}
[4.263891] (unitree_guide2) StdoutLine: {'line': b'3: +    _currentState->enter();\n'}
[4.263933] (unitree_guide2) StdoutLine: {'line': b'3: +    _mode = FSMMode::NORMAL;\n'}
[4.263975] (unitree_guide2) StdoutLine: {'line': b'3: +    _currentState->run();\n'}
[4.264018] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.264060] (unitree_guide2) StdoutLine: {'line': b'3: @@ -47,19 +68 @@\n'}
[4.264103] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_mode == FSMMode::NORMAL){\n'}
[4.264147] (unitree_guide2) StdoutLine: {'line': b'3: -        _currentState->run();\n'}
[4.264190] (unitree_guide2) StdoutLine: {'line': b'3: -        _nextStateName = _currentState->checkChange();\n'}
[4.264233] (unitree_guide2) StdoutLine: {'line': b'3: -        if(_nextStateName != _currentState->_stateName){\n'}
[4.264276] (unitree_guide2) StdoutLine: {'line': b'3: -            _mode = FSMMode::CHANGE;\n'}
[4.264318] (unitree_guide2) StdoutLine: {'line': b'3: -            _nextState = getNextState(_nextStateName);\n'}
[4.264360] (unitree_guide2) StdoutLine: {'line': b'3: -            std::cout << "Switched from " << _currentState->_stateNameString\n'}
[4.264402] (unitree_guide2) StdoutLine: {'line': b'3: -                      << " to " << _nextState->_stateNameString << std::endl;\n'}
[4.264475] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.264517] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.264559] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_mode == FSMMode::CHANGE){\n'}
[4.264601] (unitree_guide2) StdoutLine: {'line': b'3: -        _currentState->exit();\n'}
[4.264643] (unitree_guide2) StdoutLine: {'line': b'3: -        _currentState = _nextState;\n'}
[4.264685] (unitree_guide2) StdoutLine: {'line': b'3: -        _currentState->enter();\n'}
[4.264727] (unitree_guide2) StdoutLine: {'line': b'3: -        _mode = FSMMode::NORMAL;\n'}
[4.264777] (unitree_guide2) StdoutLine: {'line': b'3: -        _currentState->run();\n'}
[4.264821] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.264863] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.264906] (unitree_guide2) StdoutLine: {'line': b'3: -    absoluteWait(_startTime, (long long)(_ctrlComp->dt * 1000000));\n'}
[4.264950] (unitree_guide2) StdoutLine: {'line': b'3: +  absoluteWait(_startTime, (long long)(_ctrlComp->dt * 1000000));\n'}
[4.264993] (unitree_guide2) StdoutLine: {'line': b'3: @@ -68,3 +71,3 @@\n'}
[4.265035] (unitree_guide2) StdoutLine: {'line': b'3: -FSMState* FSM::getNextState(FSMStateName stateName){\n'}
[4.265080] (unitree_guide2) StdoutLine: {'line': b'3: -    switch (stateName)\n'}
[4.265123] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.265166] (unitree_guide2) StdoutLine: {'line': b'3: +FSMState * FSM::getNextState(FSMStateName stateName)\n'}
[4.265208] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.265249] (unitree_guide2) StdoutLine: {'line': b'3: +  switch (stateName) {\n'}
[4.265291] (unitree_guide2) StdoutLine: {'line': b'3: @@ -72,2 +75,2 @@\n'}
[4.265333] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.invalid;\n'}
[4.265375] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.265423] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.invalid;\n'}
[4.265465] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.265508] (unitree_guide2) StdoutLine: {'line': b'3: @@ -75,2 +78,2 @@\n'}
[4.265551] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.passive;\n'}
[4.265594] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.265636] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.passive;\n'}
[4.265678] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.265721] (unitree_guide2) StdoutLine: {'line': b'3: @@ -78,2 +81,2 @@\n'}
[4.265769] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.fixedStand;\n'}
[4.265813] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.265855] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.fixedStand;\n'}
[4.265897] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.265940] (unitree_guide2) StdoutLine: {'line': b'3: @@ -81,2 +84,2 @@\n'}
[4.265982] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.freeStand;\n'}
[4.266025] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.266067] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.freeStand;\n'}
[4.266109] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.266151] (unitree_guide2) StdoutLine: {'line': b'3: @@ -84,2 +87,2 @@\n'}
[4.266193] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.trotting;\n'}
[4.266235] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.266278] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.trotting;\n'}
[4.266320] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.266363] (unitree_guide2) StdoutLine: {'line': b'3: @@ -87,2 +90,2 @@\n'}
[4.266405] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.balanceTest;\n'}
[4.266447] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.266490] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.balanceTest;\n'}
[4.266531] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.266573] (unitree_guide2) StdoutLine: {'line': b'3: @@ -90,2 +93,2 @@\n'}
[4.266615] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.swingTest;\n'}
[4.266657] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.266699] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.swingTest;\n'}
[4.266745] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.266787] (unitree_guide2) StdoutLine: {'line': b'3: @@ -93,2 +96,2 @@\n'}
[4.266829] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.stepTest;\n'}
[4.266872] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.266914] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.stepTest;\n'}
[4.266956] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.266998] (unitree_guide2) StdoutLine: {'line': b'3: @@ -97,2 +100,2 @@\n'}
[4.267041] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.moveBase;\n'}
[4.267083] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.267125] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.moveBase;\n'}
[4.267167] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.267209] (unitree_guide2) StdoutLine: {'line': b'3: @@ -102,2 +105,2 @@\n'}
[4.267250] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.moveBase;\n'}
[4.267293] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.267335] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.moveBase;\n'}
[4.267377] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.267419] (unitree_guide2) StdoutLine: {'line': b'3: @@ -106,3 +109,3 @@\n'}
[4.267462] (unitree_guide2) StdoutLine: {'line': b'3: -        return _stateList.invalid;\n'}
[4.267509] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.267551] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.267593] (unitree_guide2) StdoutLine: {'line': b'3: +      return _stateList.invalid;\n'}
[4.267636] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.267679] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.267722] (unitree_guide2) StdoutLine: {'line': b'3: @@ -111,8 +114,9 @@\n'}
[4.267764] (unitree_guide2) StdoutLine: {'line': b'3: -bool FSM::checkSafty(){\n'}
[4.267807] (unitree_guide2) StdoutLine: {'line': b'3: -    // The angle with z axis less than 60 degree\n'}
[4.267857] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_ctrlComp->lowState->getRotMat()(2,2) < 0.5 ){\n'}
[4.267900] (unitree_guide2) StdoutLine: {'line': b'3: -        return false;\n'}
[4.267943] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[4.267986] (unitree_guide2) StdoutLine: {'line': b'3: -        return true;\n'}
[4.268028] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.268070] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.268113] (unitree_guide2) StdoutLine: {'line': b'3: +bool FSM::checkSafty()\n'}
[4.268155] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.268197] (unitree_guide2) StdoutLine: {'line': b'3: +  // The angle with z axis less than 60 degree\n'}
[4.268265] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_ctrlComp->lowState->getRotMat()(2, 2) < 0.5) {\n'}
[4.268310] (unitree_guide2) StdoutLine: {'line': b'3: +    return false;\n'}
[4.268352] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.268395] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.268437] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.268479] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.268522] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.268564] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/FSMState.cpp':\n"}
[4.268608] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.268650] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/FSMState.cpp\n'}
[4.268693] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/FSMState.cpp.uncrustify\n'}
[4.268749] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,5 +6,6 @@\n'}
[4.268790] (unitree_guide2) StdoutLine: {'line': b'3: -FSMState::FSMState(CtrlComponents *ctrlComp, FSMStateName stateName, std::string stateNameString)\n'}
[4.268833] (unitree_guide2) StdoutLine: {'line': b'3: -            :_ctrlComp(ctrlComp), _stateName(stateName), _stateNameString(stateNameString){\n'}
[4.268875] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd = _ctrlComp->lowCmd;\n'}
[4.268916] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState = _ctrlComp->lowState;\n'}
[4.268965] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.269007] (unitree_guide2) StdoutLine: {'line': b'3: +FSMState::FSMState(CtrlComponents * ctrlComp, FSMStateName stateName, std::string stateNameString)\n'}
[4.269049] (unitree_guide2) StdoutLine: {'line': b'3: +: _ctrlComp(ctrlComp), _stateName(stateName), _stateNameString(stateNameString)\n'}
[4.269092] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.269134] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd = _ctrlComp->lowCmd;\n'}
[4.269176] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState = _ctrlComp->lowState;\n'}
[4.269222] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.269264] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.269307] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_BalanceTest.cpp':\n"}
[4.269349] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.269425] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_BalanceTest.cpp\n'}
[4.269466] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_BalanceTest.cpp.uncrustify\n'}
[4.269508] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,4 +6,5 @@\n'}
[4.269550] (unitree_guide2) StdoutLine: {'line': b'3: -State_BalanceTest::State_BalanceTest(CtrlComponents *ctrlComp)\n'}
[4.269598] (unitree_guide2) StdoutLine: {'line': b'3: -                  :FSMState(ctrlComp, FSMStateName::BALANCETEST, "balanceTest"),\n'}
[4.269653] (unitree_guide2) StdoutLine: {'line': b'3: -                  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel), \n'}
[4.269695] (unitree_guide2) StdoutLine: {'line': b'3: -                  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact){\n'}
[4.269736] (unitree_guide2) StdoutLine: {'line': b'3: +State_BalanceTest::State_BalanceTest(CtrlComponents * ctrlComp)\n'}
[4.269777] (unitree_guide2) StdoutLine: {'line': b'3: +: FSMState(ctrlComp, FSMStateName::BALANCETEST, "balanceTest"),\n'}
[4.269818] (unitree_guide2) StdoutLine: {'line': b'3: +  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel),\n'}
[4.269860] (unitree_guide2) StdoutLine: {'line': b'3: +  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact)\n'}
[4.269901] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.269943] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,8 +12,8 @@\n'}
[4.269985] (unitree_guide2) StdoutLine: {'line': b'3: -    _xMax = 0.05;\n'}
[4.270026] (unitree_guide2) StdoutLine: {'line': b'3: -    _xMin = -_xMax;\n'}
[4.270068] (unitree_guide2) StdoutLine: {'line': b'3: -    _yMax = 0.05;\n'}
[4.270108] (unitree_guide2) StdoutLine: {'line': b'3: -    _yMin = -_yMax;\n'}
[4.270149] (unitree_guide2) StdoutLine: {'line': b'3: -    _zMax = 0.04;\n'}
[4.270194] (unitree_guide2) StdoutLine: {'line': b'3: -    _zMin = -_zMax;\n'}
[4.270234] (unitree_guide2) StdoutLine: {'line': b'3: -    _yawMax = 20 * M_PI / 180;\n'}
[4.270275] (unitree_guide2) StdoutLine: {'line': b'3: -    _yawMin = -_yawMax;\n'}
[4.270316] (unitree_guide2) StdoutLine: {'line': b'3: +  _xMax = 0.05;\n'}
[4.270355] (unitree_guide2) StdoutLine: {'line': b'3: +  _xMin = -_xMax;\n'}
[4.270396] (unitree_guide2) StdoutLine: {'line': b'3: +  _yMax = 0.05;\n'}
[4.270436] (unitree_guide2) StdoutLine: {'line': b'3: +  _yMin = -_yMax;\n'}
[4.270476] (unitree_guide2) StdoutLine: {'line': b'3: +  _zMax = 0.04;\n'}
[4.270517] (unitree_guide2) StdoutLine: {'line': b'3: +  _zMin = -_zMax;\n'}
[4.270557] (unitree_guide2) StdoutLine: {'line': b'3: +  _yawMax = 20 * M_PI / 180;\n'}
[4.270618] (unitree_guide2) StdoutLine: {'line': b'3: +  _yawMin = -_yawMax;\n'}
[4.270662] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,2 +21,2 @@\n'}
[4.270705] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kpp = Vec3(150, 150, 150).asDiagonal();\n'}
[4.270762] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdp = Vec3(25, 25, 25).asDiagonal();\n'}
[4.270803] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kpp = Vec3(150, 150, 150).asDiagonal();\n'}
[4.270844] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdp = Vec3(25, 25, 25).asDiagonal();\n'}
[4.270885] (unitree_guide2) StdoutLine: {'line': b'3: @@ -23,2 +24,2 @@\n'}
[4.270926] (unitree_guide2) StdoutLine: {'line': b'3: -    _kpw = 200;\n'}
[4.270966] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdw = Vec3(30, 30, 30).asDiagonal();\n'}
[4.271007] (unitree_guide2) StdoutLine: {'line': b'3: +  _kpw = 200;\n'}
[4.271088] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdw = Vec3(30, 30, 30).asDiagonal();\n'}
[4.271139] (unitree_guide2) StdoutLine: {'line': b'3: @@ -27,4 +28,5 @@\n'}
[4.271199] (unitree_guide2) StdoutLine: {'line': b'3: -void State_BalanceTest::enter(){\n'}
[4.271255] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcdInit = _est->getPosition();\n'}
[4.271308] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd = _pcdInit;\n'}
[4.271361] (unitree_guide2) StdoutLine: {'line': b'3: -    _RdInit = _lowState->getRotMat();\n'}
[4.271635] (unitree_guide2) StdoutLine: {'line': b'3: +void State_BalanceTest::enter()\n'}
[4.272029] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.272102] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcdInit = _est->getPosition();\n'}
[4.272173] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd = _pcdInit;\n'}
[4.272236] (unitree_guide2) StdoutLine: {'line': b'3: +  _RdInit = _lowState->getRotMat();\n'}
[4.272291] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32,2 +34,2 @@\n'}
[4.272383] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setAllStance();\n'}
[4.272425] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.272484] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setAllStance();\n'}
[4.272526] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.272569] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36,2 +38,3 @@\n'}
[4.272611] (unitree_guide2) StdoutLine: {'line': b'3: -void State_BalanceTest::run(){\n'}
[4.272653] (unitree_guide2) StdoutLine: {'line': b'3: -    _userValue = _lowState->userValue;\n'}
[4.272694] (unitree_guide2) StdoutLine: {'line': b'3: +void State_BalanceTest::run()\n'}
[4.272736] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.272782] (unitree_guide2) StdoutLine: {'line': b'3: +  _userValue = _lowState->userValue;\n'}
[4.272825] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39,3 +42,3 @@\n'}
[4.272866] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd(0) = _pcdInit(0) + invNormalize(_userValue.ly, _xMin, _xMax);\n'}
[4.272909] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd(1) = _pcdInit(1) - invNormalize(_userValue.lx, _yMin, _yMax);\n'}
[4.272951] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd(2) = _pcdInit(2) + invNormalize(_userValue.ry, _zMin, _zMax);\n'}
[4.272993] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd(0) = _pcdInit(0) + invNormalize(_userValue.ly, _xMin, _xMax);\n'}
[4.273036] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd(1) = _pcdInit(1) - invNormalize(_userValue.lx, _yMin, _yMax);\n'}
[4.273078] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd(2) = _pcdInit(2) + invNormalize(_userValue.ry, _zMin, _zMax);\n'}
[4.273127] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,2 +46,2 @@\n'}
[4.273189] (unitree_guide2) StdoutLine: {'line': b'3: -    float yaw = invNormalize(_userValue.rx, _yawMin, _yawMax);\n'}
[4.273249] (unitree_guide2) StdoutLine: {'line': b'3: -    _Rd = rpyToRotMat(0, 0, yaw)*_RdInit;\n'}
[4.273292] (unitree_guide2) StdoutLine: {'line': b'3: +  float yaw = invNormalize(_userValue.rx, _yawMin, _yawMax);\n'}
[4.273335] (unitree_guide2) StdoutLine: {'line': b'3: +  _Rd = rpyToRotMat(0, 0, yaw) * _RdInit;\n'}
[4.273378] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46,2 +49,2 @@\n'}
[4.273420] (unitree_guide2) StdoutLine: {'line': b'3: -    _posBody = _est->getPosition();\n'}
[4.273476] (unitree_guide2) StdoutLine: {'line': b'3: -    _velBody = _est->getVelocity();\n'}
[4.273519] (unitree_guide2) StdoutLine: {'line': b'3: +  _posBody = _est->getPosition();\n'}
[4.273563] (unitree_guide2) StdoutLine: {'line': b'3: +  _velBody = _est->getVelocity();\n'}
[4.273606] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49,2 +52,2 @@\n'}
[4.273649] (unitree_guide2) StdoutLine: {'line': b'3: -    _B2G_RotMat = _lowState->getRotMat();\n'}
[4.273692] (unitree_guide2) StdoutLine: {'line': b'3: -    _G2B_RotMat = _B2G_RotMat.transpose();\n'}
[4.273735] (unitree_guide2) StdoutLine: {'line': b'3: +  _B2G_RotMat = _lowState->getRotMat();\n'}
[4.273778] (unitree_guide2) StdoutLine: {'line': b'3: +  _G2B_RotMat = _B2G_RotMat.transpose();\n'}
[4.273822] (unitree_guide2) StdoutLine: {'line': b'3: @@ -52 +55 @@\n'}
[4.273866] (unitree_guide2) StdoutLine: {'line': b'3: -    calcTau();\n'}
[4.273910] (unitree_guide2) StdoutLine: {'line': b'3: +  calcTau();\n'}
[4.273954] (unitree_guide2) StdoutLine: {'line': b'3: @@ -54,3 +57,3 @@\n'}
[4.273998] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setStableGain();\n'}
[4.274042] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setTau(_tau);\n'}
[4.274089] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setQ(_q);\n'}
[4.274134] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setStableGain();\n'}
[4.274177] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setTau(_tau);\n'}
[4.274220] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setQ(_q);\n'}
[4.274263] (unitree_guide2) StdoutLine: {'line': b'3: @@ -59,2 +62,3 @@\n'}
[4.274311] (unitree_guide2) StdoutLine: {'line': b'3: -void State_BalanceTest::exit(){\n'}
[4.274354] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.274397] (unitree_guide2) StdoutLine: {'line': b'3: +void State_BalanceTest::exit()\n'}
[4.274439] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.274482] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.274524] (unitree_guide2) StdoutLine: {'line': b'3: @@ -63,10 +67,9 @@\n'}
[4.274567] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_BalanceTest::checkChange(){\n'}
[4.274618] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.274662] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.274705] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.274748] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.274792] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.274835] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.274879] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.274921] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::BALANCETEST;\n'}
[4.274964] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.275007] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_BalanceTest::checkChange()\n'}
[4.275049] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.275097] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.275140] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.275183] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.275226] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.275269] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.275311] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::BALANCETEST;\n'}
[4.275355] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.275398] (unitree_guide2) StdoutLine: {'line': b'3: @@ -75 +78,2 @@\n'}
[4.275442] (unitree_guide2) StdoutLine: {'line': b'3: -void State_BalanceTest::calcTau(){\n'}
[4.275485] (unitree_guide2) StdoutLine: {'line': b'3: +void State_BalanceTest::calcTau()\n'}
[4.275528] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.275571] (unitree_guide2) StdoutLine: {'line': b'3: @@ -77,2 +81,3 @@\n'}
[4.275615] (unitree_guide2) StdoutLine: {'line': b'3: -    _ddPcd = _Kpp*(_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);\n'}
[4.275659] (unitree_guide2) StdoutLine: {'line': b'3: -    _dWbd  = _kpw*rotMatToExp(_Rd*_G2B_RotMat) + _Kdw * (Vec3(0, 0, 0) - _lowState->getGyroGlobal());\n'}
[4.275703] (unitree_guide2) StdoutLine: {'line': b'3: +  _ddPcd = _Kpp * (_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);\n'}
[4.275746] (unitree_guide2) StdoutLine: {'line': b'3: +  _dWbd = _kpw * rotMatToExp(_Rd * _G2B_RotMat) + _Kdw *\n'}
[4.275788] (unitree_guide2) StdoutLine: {'line': b'3: +    (Vec3(0, 0, 0) - _lowState->getGyroGlobal());\n'}
[4.275831] (unitree_guide2) StdoutLine: {'line': b'3: @@ -80 +85 @@\n'}
[4.275874] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeet2BGlobal = _est->getPosFeet2BGlobal();\n'}
[4.275917] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeet2BGlobal = _est->getPosFeet2BGlobal();\n'}
[4.275960] (unitree_guide2) StdoutLine: {'line': b'3: @@ -82,2 +87,2 @@\n'}
[4.276003] (unitree_guide2) StdoutLine: {'line': b'3: -    _forceFeetGlobal = - _balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);\n'}
[4.276053] (unitree_guide2) StdoutLine: {'line': b'3: -    _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;\n'}
[4.276098] (unitree_guide2) StdoutLine: {'line': b'3: +  _forceFeetGlobal = -_balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);\n'}
[4.276143] (unitree_guide2) StdoutLine: {'line': b'3: +  _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;\n'}
[4.276192] (unitree_guide2) StdoutLine: {'line': b'3: @@ -85,3 +90,3 @@\n'}
[4.276237] (unitree_guide2) StdoutLine: {'line': b'3: -    _q = vec34ToVec12(_lowState->getQ());\n'}
[4.276281] (unitree_guide2) StdoutLine: {'line': b'3: -    _tau = _robModel->getTau(_q, _forceFeetBody);\n'}
[4.276324] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.276368] (unitree_guide2) StdoutLine: {'line': b'3: +  _q = vec34ToVec12(_lowState->getQ());\n'}
[4.276417] (unitree_guide2) StdoutLine: {'line': b'3: +  _tau = _robModel->getTau(_q, _forceFeetBody);\n'}
[4.276474] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.276516] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.276558] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_FixedStand.cpp':\n"}
[4.276602] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.276645] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_FixedStand.cpp\n'}
[4.276687] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_FixedStand.cpp.uncrustify\n'}
[4.276729] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7,2 +7,2 @@\n'}
[4.276771] (unitree_guide2) StdoutLine: {'line': b'3: -State_FixedStand::State_FixedStand(CtrlComponents *ctrlComp)\n'}
[4.276814] (unitree_guide2) StdoutLine: {'line': b'3: -                :FSMState(ctrlComp, FSMStateName::FIXEDSTAND, "fixed stand"){}\n'}
[4.276857] (unitree_guide2) StdoutLine: {'line': b'3: +State_FixedStand::State_FixedStand(CtrlComponents * ctrlComp)\n'}
[4.276900] (unitree_guide2) StdoutLine: {'line': b'3: +: FSMState(ctrlComp, FSMStateName::FIXEDSTAND, "fixed stand") {}\n'}
[4.276943] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10,10 +10,7 @@\n'}
[4.276986] (unitree_guide2) StdoutLine: {'line': b'3: -void State_FixedStand::enter(){\n'}
[4.277032] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i=0; i<4; i++){\n'}
[4.277075] (unitree_guide2) StdoutLine: {'line': b'3: -        if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){\n'}
[4.277118] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setSimStanceGain(i);\n'}
[4.277160] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.277202] (unitree_guide2) StdoutLine: {'line': b'3: -        else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){\n'}
[4.277243] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setRealStanceGain(i);\n'}
[4.277285] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.277326] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->setZeroDq(i);\n'}
[4.277367] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->setZeroTau(i);\n'}
[4.277408] (unitree_guide2) StdoutLine: {'line': b'3: +void State_FixedStand::enter()\n'}
[4.277463] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.277505] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < 4; i++) {\n'}
[4.277548] (unitree_guide2) StdoutLine: {'line': b'3: +    if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {\n'}
[4.277591] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setSimStanceGain(i);\n'}
[4.277635] (unitree_guide2) StdoutLine: {'line': b'3: +    } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {\n'}
[4.277678] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setRealStanceGain(i);\n'}
[4.277722] (unitree_guide2) StdoutLine: {'line': b'3: @@ -21,5 +18,8 @@\n'}
[4.277765] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i=0; i<12; i++){\n'}
[4.277809] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;\n'}
[4.277852] (unitree_guide2) StdoutLine: {'line': b'3: -        _startPos[i] = _lowState->motorState[i].q;\n'}
[4.277896] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.277939] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setAllStance();\n'}
[4.277983] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->setZeroDq(i);\n'}
[4.278031] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->setZeroTau(i);\n'}
[4.278081] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.278125] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < 12; i++) {\n'}
[4.278168] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;\n'}
[4.278211] (unitree_guide2) StdoutLine: {'line': b'3: +    _startPos[i] = _lowState->motorState[i].q;\n'}
[4.278254] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.278296] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setAllStance();\n'}
[4.278339] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,6 +28,7 @@\n'}
[4.278382] (unitree_guide2) StdoutLine: {'line': b'3: -void State_FixedStand::run(){\n'}
[4.278425] (unitree_guide2) StdoutLine: {'line': b'3: -    _percent += (float)1/_duration;\n'}
[4.278469] (unitree_guide2) StdoutLine: {'line': b'3: -    _percent = _percent > 1 ? 1 : _percent;\n'}
[4.278512] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int j=0; j<12; j++){\n'}
[4.278555] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->motorCmd[j].q = (1 - _percent)*_startPos[j] + _percent*_targetPos[j]; \n'}
[4.278599] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.278643] (unitree_guide2) StdoutLine: {'line': b'3: +void State_FixedStand::run()\n'}
[4.278686] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.278729] (unitree_guide2) StdoutLine: {'line': b'3: +  _percent += (float)1 / _duration;\n'}
[4.278772] (unitree_guide2) StdoutLine: {'line': b'3: +  _percent = _percent > 1 ? 1 : _percent;\n'}
[4.278815] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int j = 0; j < 12; j++) {\n'}
[4.278858] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->motorCmd[j].q = (1 - _percent) * _startPos[j] + _percent * _targetPos[j];\n'}
[4.278901] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.278943] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36,2 +37,3 @@\n'}
[4.278991] (unitree_guide2) StdoutLine: {'line': b'3: -void State_FixedStand::exit(){\n'}
[4.279035] (unitree_guide2) StdoutLine: {'line': b'3: -    _percent = 0;\n'}
[4.279078] (unitree_guide2) StdoutLine: {'line': b'3: +void State_FixedStand::exit()\n'}
[4.279129] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.279172] (unitree_guide2) StdoutLine: {'line': b'3: +  _percent = 0;\n'}
[4.279215] (unitree_guide2) StdoutLine: {'line': b'3: @@ -40,19 +42,15 @@\n'}
[4.279257] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_FixedStand::checkChange(){\n'}
[4.279301] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.279344] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.279387] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.279430] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_X){\n'}
[4.279473] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FREESTAND;\n'}
[4.279516] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.279559] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::START){\n'}
[4.279601] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::TROTTING;\n'}
[4.279643] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.279685] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L1_X){\n'}
[4.279727] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::BALANCETEST;\n'}
[4.279769] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.279811] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L1_A){\n'}
[4.279854] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::SWINGTEST;\n'}
[4.279896] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.279941] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L1_Y){\n'}
[4.280011] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::STEPTEST;\n'}
[4.280062] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.280104] (-) TimerEvent: {}
[4.280350] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_FixedStand::checkChange()\n'}
[4.280435] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.280480] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.280524] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.280567] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_X) {\n'}
[4.280620] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FREESTAND;\n'}
[4.280664] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::START) {\n'}
[4.280707] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::TROTTING;\n'}
[4.280750] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L1_X) {\n'}
[4.280793] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::BALANCETEST;\n'}
[4.280835] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L1_A) {\n'}
[4.280879] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::SWINGTEST;\n'}
[4.280926] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L1_Y) {\n'}
[4.281002] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::STEPTEST;\n'}
[4.281057] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.281102] (unitree_guide2) StdoutLine: {'line': b'3: @@ -60,3 +58,3 @@\n'}
[4.281146] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_Y){\n'}
[4.281190] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::MOVE_BASE;\n'}
[4.281234] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.281277] (unitree_guide2) StdoutLine: {'line': b'3: +  else if (_lowState->userCmd == UserCommand::L2_Y) {\n'}
[4.281320] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::MOVE_BASE;\n'}
[4.281362] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.281405] (unitree_guide2) StdoutLine: {'line': b'3: @@ -66,3 +64,3 @@\n'}
[4.281460] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_Y){\n'}
[4.281502] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::MOVE_BASE;\n'}
[4.281543] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.281585] (unitree_guide2) StdoutLine: {'line': b'3: +  else if (_lowState->userCmd == UserCommand::L2_Y) {\n'}
[4.281626] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::MOVE_BASE;\n'}
[4.281668] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.281709] (unitree_guide2) StdoutLine: {'line': b'3: @@ -70,4 +68,4 @@\n'}
[4.281751] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.281793] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.281835] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.281877] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.281924] (unitree_guide2) StdoutLine: {'line': b'3: +  else {\n'}
[4.281967] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.282042] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.282083] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.282125] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.282165] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_FreeStand.cpp':\n"}
[4.282207] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.282248] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_FreeStand.cpp\n'}
[4.282290] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_FreeStand.cpp.uncrustify\n'}
[4.282331] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,10 +6,11 @@\n'}
[4.282373] (unitree_guide2) StdoutLine: {'line': b'3: -State_FreeStand::State_FreeStand(CtrlComponents *ctrlComp)\n'}
[4.282482] (unitree_guide2) StdoutLine: {'line': b'3: -             :FSMState(ctrlComp, FSMStateName::FREESTAND, "free stand"){\n'}
[4.282525] (unitree_guide2) StdoutLine: {'line': b'3: -    _rowMax = 20 * M_PI / 180;\n'}
[4.282567] (unitree_guide2) StdoutLine: {'line': b'3: -    _rowMin = -_rowMax;\n'}
[4.282609] (unitree_guide2) StdoutLine: {'line': b'3: -    _pitchMax = 15 * M_PI / 180;\n'}
[4.282651] (unitree_guide2) StdoutLine: {'line': b'3: -    _pitchMin = -_pitchMax;\n'}
[4.282693] (unitree_guide2) StdoutLine: {'line': b'3: -    _yawMax = 20 * M_PI / 180;\n'}
[4.282735] (unitree_guide2) StdoutLine: {'line': b'3: -    _yawMin = -_yawMax;\n'}
[4.282777] (unitree_guide2) StdoutLine: {'line': b'3: -    _heightMax = 0.04;\n'}
[4.282819] (unitree_guide2) StdoutLine: {'line': b'3: -    _heightMin = -_heightMax;\n'}
[4.282860] (unitree_guide2) StdoutLine: {'line': b'3: +State_FreeStand::State_FreeStand(CtrlComponents * ctrlComp)\n'}
[4.282909] (unitree_guide2) StdoutLine: {'line': b'3: +: FSMState(ctrlComp, FSMStateName::FREESTAND, "free stand")\n'}
[4.282951] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.282992] (unitree_guide2) StdoutLine: {'line': b'3: +  _rowMax = 20 * M_PI / 180;\n'}
[4.283033] (unitree_guide2) StdoutLine: {'line': b'3: +  _rowMin = -_rowMax;\n'}
[4.283075] (unitree_guide2) StdoutLine: {'line': b'3: +  _pitchMax = 15 * M_PI / 180;\n'}
[4.283117] (unitree_guide2) StdoutLine: {'line': b'3: +  _pitchMin = -_pitchMax;\n'}
[4.283158] (unitree_guide2) StdoutLine: {'line': b'3: +  _yawMax = 20 * M_PI / 180;\n'}
[4.283200] (unitree_guide2) StdoutLine: {'line': b'3: +  _yawMin = -_yawMax;\n'}
[4.283242] (unitree_guide2) StdoutLine: {'line': b'3: +  _heightMax = 0.04;\n'}
[4.283284] (unitree_guide2) StdoutLine: {'line': b'3: +  _heightMin = -_heightMax;\n'}
[4.283326] (unitree_guide2) StdoutLine: {'line': b'3: @@ -18,10 +19,7 @@\n'}
[4.283368] (unitree_guide2) StdoutLine: {'line': b'3: -void State_FreeStand::enter(){\n'}
[4.283410] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i=0; i<4; i++){\n'}
[4.283452] (unitree_guide2) StdoutLine: {'line': b'3: -        if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){\n'}
[4.283494] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setSimStanceGain(i);\n'}
[4.283536] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.283578] (unitree_guide2) StdoutLine: {'line': b'3: -        else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){\n'}
[4.283620] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setRealStanceGain(i);\n'}
[4.283662] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.283703] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->setZeroDq(i);\n'}
[4.283744] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->setZeroTau(i);\n'}
[4.283785] (unitree_guide2) StdoutLine: {'line': b'3: +void State_FreeStand::enter()\n'}
[4.283826] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.283871] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < 4; i++) {\n'}
[4.283913] (unitree_guide2) StdoutLine: {'line': b'3: +    if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {\n'}
[4.283955] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setSimStanceGain(i);\n'}
[4.283998] (unitree_guide2) StdoutLine: {'line': b'3: +    } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {\n'}
[4.284040] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setRealStanceGain(i);\n'}
[4.284082] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,0 +27,3 @@\n'}
[4.284125] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->setZeroDq(i);\n'}
[4.284167] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->setZeroTau(i);\n'}
[4.284210] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.284251] (unitree_guide2) StdoutLine: {'line': b'3: @@ -30,5 +31,5 @@\n'}
[4.284293] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i=0; i<12; i++){\n'}
[4.284335] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;\n'}
[4.284384] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.284426] (unitree_guide2) StdoutLine: {'line': b'3: -    _initVecOX = _ctrlComp->robotModel->getX(*_lowState);\n'}
[4.284467] (unitree_guide2) StdoutLine: {'line': b'3: -    _initVecXP = _ctrlComp->robotModel->getVecXP(*_lowState);\n'}
[4.284509] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < 12; i++) {\n'}
[4.284559] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;\n'}
[4.284601] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.284643] (unitree_guide2) StdoutLine: {'line': b'3: +  _initVecOX = _ctrlComp->robotModel->getX(*_lowState);\n'}
[4.284688] (unitree_guide2) StdoutLine: {'line': b'3: +  _initVecXP = _ctrlComp->robotModel->getVecXP(*_lowState);\n'}
[4.284731] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36,2 +37,2 @@\n'}
[4.284773] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setAllStance();\n'}
[4.284815] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.284861] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setAllStance();\n'}
[4.284903] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.284945] (unitree_guide2) StdoutLine: {'line': b'3: @@ -40,3 +41,4 @@\n'}
[4.285007] (unitree_guide2) StdoutLine: {'line': b'3: -void State_FreeStand::run(){\n'}
[4.285062] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 vecOP;\n'}
[4.285104] (unitree_guide2) StdoutLine: {'line': b'3: -    _userValue = _lowState->userValue;\n'}
[4.285146] (unitree_guide2) StdoutLine: {'line': b'3: +void State_FreeStand::run()\n'}
[4.285187] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.285229] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 vecOP;\n'}
[4.285270] (unitree_guide2) StdoutLine: {'line': b'3: +  _userValue = _lowState->userValue;\n'}
[4.285312] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44,5 +46,6 @@\n'}
[4.285354] (unitree_guide2) StdoutLine: {'line': b'3: -    vecOP = _calcOP( invNormalize(_userValue.lx, _rowMin, _rowMax),\n'}
[4.285396] (unitree_guide2) StdoutLine: {'line': b'3: -                     invNormalize(_userValue.ly, _pitchMin, _pitchMax),\n'}
[4.285439] (unitree_guide2) StdoutLine: {'line': b'3: -                    -invNormalize(_userValue.rx, _yawMin, _yawMax),\n'}
[4.285481] (unitree_guide2) StdoutLine: {'line': b'3: -                     invNormalize(_userValue.ry, _heightMin, _heightMax) );\n'}
[4.285523] (unitree_guide2) StdoutLine: {'line': b'3: -    _calcCmd(vecOP);\n'}
[4.285565] (unitree_guide2) StdoutLine: {'line': b'3: +  vecOP = _calcOP(\n'}
[4.285607] (unitree_guide2) StdoutLine: {'line': b'3: +    invNormalize(_userValue.lx, _rowMin, _rowMax),\n'}
[4.285649] (unitree_guide2) StdoutLine: {'line': b'3: +    invNormalize(_userValue.ly, _pitchMin, _pitchMax),\n'}
[4.285705] (unitree_guide2) StdoutLine: {'line': b'3: +    -invNormalize(_userValue.rx, _yawMin, _yawMax),\n'}
[4.285745] (unitree_guide2) StdoutLine: {'line': b'3: +    invNormalize(_userValue.ry, _heightMin, _heightMax) );\n'}
[4.285786] (unitree_guide2) StdoutLine: {'line': b'3: +  _calcCmd(vecOP);\n'}
[4.285852] (unitree_guide2) StdoutLine: {'line': b'3: @@ -51,2 +54,3 @@\n'}
[4.285908] (unitree_guide2) StdoutLine: {'line': b'3: -void State_FreeStand::exit(){\n'}
[4.285948] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.285988] (unitree_guide2) StdoutLine: {'line': b'3: +void State_FreeStand::exit()\n'}
[4.286029] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.286069] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.286110] (unitree_guide2) StdoutLine: {'line': b'3: @@ -55,13 +59,11 @@\n'}
[4.286151] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_FreeStand::checkChange(){\n'}
[4.286191] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.286232] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.286280] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.286320] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.286362] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.286402] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.286442] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::START){\n'}
[4.286483] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::TROTTING;\n'}
[4.286523] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.286562] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.286603] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FREESTAND;\n'}
[4.286643] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.286699] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_FreeStand::checkChange()\n'}
[4.286740] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.286787] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.286831] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.286873] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.286916] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.286958] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::START) {\n'}
[4.287001] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::TROTTING;\n'}
[4.287043] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.287085] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FREESTAND;\n'}
[4.287127] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.287169] (unitree_guide2) StdoutLine: {'line': b'3: @@ -70,3 +72,4 @@\n'}
[4.287210] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 State_FreeStand::_calcOP(float row, float pitch, float yaw, float height){\n'}
[4.287252] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 vecXO = -_initVecOX;\n'}
[4.287293] (unitree_guide2) StdoutLine: {'line': b'3: -    vecXO(2) += height;\n'}
[4.287335] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 State_FreeStand::_calcOP(float row, float pitch, float yaw, float height)\n'}
[4.287376] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.287417] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 vecXO = -_initVecOX;\n'}
[4.287459] (unitree_guide2) StdoutLine: {'line': b'3: +  vecXO(2) += height;\n'}
[4.287501] (unitree_guide2) StdoutLine: {'line': b'3: @@ -74 +77 @@\n'}
[4.287653] (unitree_guide2) StdoutLine: {'line': b'3: -    RotMat rotM = rpyToRotMat(row, pitch, yaw);\n'}
[4.287728] (unitree_guide2) StdoutLine: {'line': b'3: +  RotMat rotM = rpyToRotMat(row, pitch, yaw);\n'}
[4.287778] (unitree_guide2) StdoutLine: {'line': b'3: @@ -76,2 +79,2 @@\n'}
[4.287822] (unitree_guide2) StdoutLine: {'line': b'3: -    HomoMat Tsb = homoMatrix(vecXO, rotM);\n'}
[4.287865] (unitree_guide2) StdoutLine: {'line': b'3: -    HomoMat Tbs = homoMatrixInverse(Tsb);\n'}
[4.287908] (unitree_guide2) StdoutLine: {'line': b'3: +  HomoMat Tsb = homoMatrix(vecXO, rotM);\n'}
[4.287951] (unitree_guide2) StdoutLine: {'line': b'3: +  HomoMat Tbs = homoMatrixInverse(Tsb);\n'}
[4.287993] (unitree_guide2) StdoutLine: {'line': b'3: @@ -79,6 +82,6 @@\n'}
[4.288035] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec4 tempVec4;\n'}
[4.288077] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 vecOP;\n'}
[4.288119] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.288161] (unitree_guide2) StdoutLine: {'line': b'3: -        tempVec4 = Tbs * homoVec(_initVecXP.col(i));\n'}
[4.288203] (unitree_guide2) StdoutLine: {'line': b'3: -        vecOP.col(i) = noHomoVec(tempVec4);\n'}
[4.288245] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.288287] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec4 tempVec4;\n'}
[4.288328] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 vecOP;\n'}
[4.288378] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.288420] (unitree_guide2) StdoutLine: {'line': b'3: +    tempVec4 = Tbs * homoVec(_initVecXP.col(i));\n'}
[4.288462] (unitree_guide2) StdoutLine: {'line': b'3: +    vecOP.col(i) = noHomoVec(tempVec4);\n'}
[4.288504] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.288546] (unitree_guide2) StdoutLine: {'line': b'3: @@ -86 +89 @@\n'}
[4.288588] (unitree_guide2) StdoutLine: {'line': b'3: -    return vecOP;\n'}
[4.288631] (unitree_guide2) StdoutLine: {'line': b'3: +  return vecOP;\n'}
[4.288673] (unitree_guide2) StdoutLine: {'line': b'3: @@ -89,4 +92,5 @@\n'}
[4.288720] (unitree_guide2) StdoutLine: {'line': b'3: -void State_FreeStand::_calcCmd(Vec34 vecOP){\n'}
[4.288769] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 q = _ctrlComp->robotModel->getQ(vecOP, FrameType::BODY);\n'}
[4.288813] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setQ(q);\n'}
[4.288896] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.288941] (unitree_guide2) StdoutLine: {'line': b'3: +void State_FreeStand::_calcCmd(Vec34 vecOP)\n'}
[4.288984] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.289025] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 q = _ctrlComp->robotModel->getQ(vecOP, FrameType::BODY);\n'}
[4.289067] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setQ(q);\n'}
[4.289109] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.289150] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.289192] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_Passive.cpp':\n"}
[4.289234] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.289276] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_Passive.cpp\n'}
[4.289318] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_Passive.cpp.uncrustify\n'}
[4.289360] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,2 +6,2 @@\n'}
[4.289402] (unitree_guide2) StdoutLine: {'line': b'3: -State_Passive::State_Passive(CtrlComponents *ctrlComp)\n'}
[4.289445] (unitree_guide2) StdoutLine: {'line': b'3: -             :FSMState(ctrlComp, FSMStateName::PASSIVE, "passive"){}\n'}
[4.289487] (unitree_guide2) StdoutLine: {'line': b'3: +State_Passive::State_Passive(CtrlComponents * ctrlComp)\n'}
[4.289530] (unitree_guide2) StdoutLine: {'line': b'3: +: FSMState(ctrlComp, FSMStateName::PASSIVE, "passive") {}\n'}
[4.289582] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9,10 +9,10 @@\n'}
[4.289625] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Passive::enter(){\n'}
[4.289667] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){\n'}
[4.289712] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i=0; i<12; i++){\n'}
[4.289757] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].mode = 10;\n'}
[4.289798] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].q = 0;\n'}
[4.289839] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].dq = 0;\n'}
[4.289881] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].Kp = 0;\n'}
[4.289922] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].Kd = 8;\n'}
[4.289964] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].tau = 0;\n'}
[4.290005] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.290048] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Passive::enter()\n'}
[4.290090] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.290132] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {\n'}
[4.290175] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i = 0; i < 12; i++) {\n'}
[4.290217] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].mode = 10;\n'}
[4.290259] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].q = 0;\n'}
[4.290302] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].dq = 0;\n'}
[4.290349] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].Kp = 0;\n'}
[4.290392] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].Kd = 8;\n'}
[4.290433] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].tau = 0;\n'}
[4.290475] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,9 +20,8 @@\n'}
[4.290517] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){\n'}
[4.290559] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i=0; i<12; i++){\n'}
[4.290600] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].mode = 10;\n'}
[4.290642] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].q = 0;\n'}
[4.290685] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].dq = 0;\n'}
[4.290730] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].Kp = 0;\n'}
[4.290772] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].Kd = 3;\n'}
[4.290815] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->motorCmd[i].tau = 0;\n'}
[4.290858] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.290900] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {\n'}
[4.290944] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i = 0; i < 12; i++) {\n'}
[4.290986] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].mode = 10;\n'}
[4.291028] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].q = 0;\n'}
[4.291070] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].dq = 0;\n'}
[4.291112] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].Kp = 0;\n'}
[4.291153] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].Kd = 3;\n'}
[4.291194] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->motorCmd[i].tau = 0;\n'}
[4.291236] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29,0 +29 @@\n'}
[4.291277] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.291319] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31 +31 @@\n'}
[4.291361] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setAllSwing();\n'}
[4.291403] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setAllSwing();\n'}
[4.291445] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34,5 +34,2 @@\n'}
[4.291486] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Passive::run(){\n'}
[4.291528] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.291570] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.291613] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.291655] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Passive::exit(){\n'}
[4.291702] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Passive::run()\n'}
[4.291744] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.291787] (unitree_guide2) StdoutLine: {'line': b'3: @@ -42,8 +39,13 @@\n'}
[4.291829] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_Passive::checkChange(){\n'}
[4.291871] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.291913] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.291955] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.291997] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.292038] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.292080] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.292121] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.292163] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Passive::exit()\n'}
[4.292205] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.292247] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.292289] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.292337] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.292379] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_Passive::checkChange()\n'}
[4.292421] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.292463] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.292505] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.292547] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.292589] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.292630] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.292675] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.292716] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.292757] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_StepTest.cpp':\n"}
[4.292799] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.292841] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_StepTest.cpp\n'}
[4.292882] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_StepTest.cpp.uncrustify\n'}
[4.292928] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,5 +6,6 @@\n'}
[4.292971] (unitree_guide2) StdoutLine: {'line': b'3: -State_StepTest::State_StepTest(CtrlComponents *ctrlComp)\n'}
[4.293013] (unitree_guide2) StdoutLine: {'line': b'3: -                  :FSMState(ctrlComp, FSMStateName::STEPTEST, "stepTest"),\n'}
[4.293055] (unitree_guide2) StdoutLine: {'line': b'3: -                  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel), \n'}
[4.293098] (unitree_guide2) StdoutLine: {'line': b'3: -                  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact),\n'}
[4.293140] (unitree_guide2) StdoutLine: {'line': b'3: -                  _phase(ctrlComp->phase){\n'}
[4.293183] (unitree_guide2) StdoutLine: {'line': b'3: +State_StepTest::State_StepTest(CtrlComponents * ctrlComp)\n'}
[4.293224] (unitree_guide2) StdoutLine: {'line': b'3: +: FSMState(ctrlComp, FSMStateName::STEPTEST, "stepTest"),\n'}
[4.293266] (unitree_guide2) StdoutLine: {'line': b'3: +  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel),\n'}
[4.293308] (unitree_guide2) StdoutLine: {'line': b'3: +  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact),\n'}
[4.293350] (unitree_guide2) StdoutLine: {'line': b'3: +  _phase(ctrlComp->phase)\n'}
[4.293391] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.293432] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12 +13 @@\n'}
[4.293474] (unitree_guide2) StdoutLine: {'line': b'3: -    _gaitHeight = 0.05;\n'}
[4.293515] (unitree_guide2) StdoutLine: {'line': b'3: +  _gaitHeight = 0.05;\n'}
[4.293558] (unitree_guide2) StdoutLine: {'line': b'3: @@ -14,2 +15,2 @@\n'}
[4.293600] (unitree_guide2) StdoutLine: {'line': b'3: -    _KpSwing = Vec3(600, 600, 200).asDiagonal();\n'}
[4.293650] (unitree_guide2) StdoutLine: {'line': b'3: -    _KdSwing = Vec3(20, 20, 5).asDiagonal();\n'}
[4.293735] (unitree_guide2) StdoutLine: {'line': b'3: +  _KpSwing = Vec3(600, 600, 200).asDiagonal();\n'}
[4.293798] (unitree_guide2) StdoutLine: {'line': b'3: +  _KdSwing = Vec3(20, 20, 5).asDiagonal();\n'}
[4.293842] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17,4 +18,4 @@\n'}
[4.293885] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kpp = Vec3(50, 50, 300).asDiagonal();\n'}
[4.293942] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kpw = Vec3(600, 600, 600).asDiagonal();\n'}
[4.293984] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdp = Vec3(5, 5, 20).asDiagonal();\n'}
[4.294026] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdw = Vec3(10, 10, 10).asDiagonal();\n'}
[4.294068] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kpp = Vec3(50, 50, 300).asDiagonal();\n'}
[4.294109] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kpw = Vec3(600, 600, 600).asDiagonal();\n'}
[4.294151] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdp = Vec3(5, 5, 20).asDiagonal();\n'}
[4.294192] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdw = Vec3(10, 10, 10).asDiagonal();\n'}
[4.294234] (unitree_guide2) StdoutLine: {'line': b'3: @@ -23,7 +24,8 @@\n'}
[4.294394] (unitree_guide2) StdoutLine: {'line': b'3: -void State_StepTest::enter(){\n'}
[4.294459] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd = _est->getPosition();\n'}
[4.294503] (unitree_guide2) StdoutLine: {'line': b'3: -    _Rd  = _lowState->getRotMat();\n'}
[4.294544] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeetGlobalInit = _est->getFeetPos();\n'}
[4.294588] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeetGlobalGoal = _posFeetGlobalInit;\n'}
[4.294634] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setStartWave();\n'}
[4.294800] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.294851] (unitree_guide2) StdoutLine: {'line': b'3: +void State_StepTest::enter()\n'}
[4.294933] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.294982] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd = _est->getPosition();\n'}
[4.295024] (unitree_guide2) StdoutLine: {'line': b'3: +  _Rd = _lowState->getRotMat();\n'}
[4.295067] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeetGlobalInit = _est->getFeetPos();\n'}
[4.295109] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeetGlobalGoal = _posFeetGlobalInit;\n'}
[4.295150] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setStartWave();\n'}
[4.295192] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.295234] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32,3 +34,4 @@\n'}
[4.295276] (unitree_guide2) StdoutLine: {'line': b'3: -void State_StepTest::run(){\n'}
[4.295319] (unitree_guide2) StdoutLine: {'line': b'3: -    _posBody = _est->getPosition();\n'}
[4.295361] (unitree_guide2) StdoutLine: {'line': b'3: -    _velBody = _est->getVelocity();\n'}
[4.295403] (unitree_guide2) StdoutLine: {'line': b'3: +void State_StepTest::run()\n'}
[4.295445] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.295487] (unitree_guide2) StdoutLine: {'line': b'3: +  _posBody = _est->getPosition();\n'}
[4.295529] (unitree_guide2) StdoutLine: {'line': b'3: +  _velBody = _est->getVelocity();\n'}
[4.295609] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36,2 +39,2 @@\n'}
[4.295653] (unitree_guide2) StdoutLine: {'line': b'3: -    _B2G_RotMat = _lowState->getRotMat();\n'}
[4.295708] (unitree_guide2) StdoutLine: {'line': b'3: -    _G2B_RotMat = _B2G_RotMat.transpose();\n'}
[4.295749] (unitree_guide2) StdoutLine: {'line': b'3: +  _B2G_RotMat = _lowState->getRotMat();\n'}
[4.295863] (unitree_guide2) StdoutLine: {'line': b'3: +  _G2B_RotMat = _B2G_RotMat.transpose();\n'}
[4.295925] (unitree_guide2) StdoutLine: {'line': b'3: @@ -40,5 +43,6 @@\n'}
[4.295967] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.296008] (unitree_guide2) StdoutLine: {'line': b'3: -        if((*_contact)(i) == 0){\n'}
[4.296049] (unitree_guide2) StdoutLine: {'line': b'3: -            _posFeetGlobalGoal(2, i) = _posFeetGlobalInit(2, i) + (1-cos((*_phase)(i)*2*M_PI))*_gaitHeight;\n'}
[4.296091] (unitree_guide2) StdoutLine: {'line': b'3: -            _velFeetGlobalGoal(2, i) = sin((*_phase)(i)*2*M_PI)*2*M_PI*_gaitHeight;\n'}
[4.296132] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.296173] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.296214] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((*_contact)(i) == 0) {\n'}
[4.296255] (unitree_guide2) StdoutLine: {'line': b'3: +      _posFeetGlobalGoal(\n'}
[4.296296] (unitree_guide2) StdoutLine: {'line': b'3: +        2,\n'}
[4.296337] (unitree_guide2) StdoutLine: {'line': b'3: +        i) = _posFeetGlobalInit(2, i) + (1 - cos((*_phase)(i) * 2 * M_PI)) * _gaitHeight;\n'}
[4.296378] (unitree_guide2) StdoutLine: {'line': b'3: +      _velFeetGlobalGoal(2, i) = sin((*_phase)(i) * 2 * M_PI) * 2 * M_PI * _gaitHeight;\n'}
[4.296420] (unitree_guide2) StdoutLine: {'line': b'3: @@ -45,0 +50 @@\n'}
[4.296461] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.296501] (unitree_guide2) StdoutLine: {'line': b'3: @@ -47 +52 @@\n'}
[4.296544] (unitree_guide2) StdoutLine: {'line': b'3: -    calcTau();\n'}
[4.296593] (unitree_guide2) StdoutLine: {'line': b'3: +  calcTau();\n'}
[4.296634] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49,2 +54,2 @@\n'}
[4.296674] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setZeroGain();\n'}
[4.296714] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setTau(_tau);\n'}
[4.296755] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setZeroGain();\n'}
[4.296795] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setTau(_tau);\n'}
[4.296836] (unitree_guide2) StdoutLine: {'line': b'3: @@ -53,3 +58,4 @@\n'}
[4.296876] (unitree_guide2) StdoutLine: {'line': b'3: -void State_StepTest::exit(){\n'}
[4.296917] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.296957] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setAllSwing();\n'}
[4.297002] (unitree_guide2) StdoutLine: {'line': b'3: +void State_StepTest::exit()\n'}
[4.297043] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.297084] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.297125] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setAllSwing();\n'}
[4.297166] (unitree_guide2) StdoutLine: {'line': b'3: @@ -58,10 +64,9 @@\n'}
[4.297207] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_StepTest::checkChange(){\n'}
[4.297247] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.297287] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.297328] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.297367] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.297408] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.297447] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.297488] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.297533] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::STEPTEST;\n'}
[4.297621] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.297695] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_StepTest::checkChange()\n'}
[4.297737] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.297778] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.297819] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.297860] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.297901] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.297942] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.297983] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::STEPTEST;\n'}
[4.298024] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.298064] (unitree_guide2) StdoutLine: {'line': b'3: @@ -70,3 +75,5 @@\n'}
[4.298103] (unitree_guide2) StdoutLine: {'line': b'3: -void State_StepTest::calcTau(){\n'}
[4.298144] (unitree_guide2) StdoutLine: {'line': b'3: -    _ddPcd = _Kpp*(_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);\n'}
[4.298185] (unitree_guide2) StdoutLine: {'line': b'3: -    _dWbd  = _Kpw*rotMatToExp(_Rd*_G2B_RotMat) + _Kdw * (Vec3(0, 0, 0) - _lowState->getGyroGlobal());\n'}
[4.298225] (unitree_guide2) StdoutLine: {'line': b'3: +void State_StepTest::calcTau()\n'}
[4.298265] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.298306] (unitree_guide2) StdoutLine: {'line': b'3: +  _ddPcd = _Kpp * (_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);\n'}
[4.298346] (unitree_guide2) StdoutLine: {'line': b'3: +  _dWbd = _Kpw * rotMatToExp(_Rd * _G2B_RotMat) + _Kdw *\n'}
[4.298388] (unitree_guide2) StdoutLine: {'line': b'3: +    (Vec3(0, 0, 0) - _lowState->getGyroGlobal());\n'}
[4.298429] (unitree_guide2) StdoutLine: {'line': b'3: @@ -74,9 +81,9 @@\n'}
[4.298470] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeet2BGlobal = _est->getPosFeet2BGlobal();\n'}
[4.298524] (unitree_guide2) StdoutLine: {'line': b'3: -    _forceFeetGlobal = - _balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);\n'}
[4.298657] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.298704] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeetGlobal = _est->getFeetPos();\n'}
[4.298747] (unitree_guide2) StdoutLine: {'line': b'3: -    _velFeetGlobal = _est->getFeetVel();\n'}
[4.298788] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.298829] (unitree_guide2) StdoutLine: {'line': b'3: -        if((*_contact)(i) == 0){\n'}
[4.298869] (unitree_guide2) StdoutLine: {'line': b'3: -            _forceFeetGlobal.col(i) = _KpSwing*(_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) + _KdSwing*(_velFeetGlobalGoal.col(i)-_velFeetGlobal.col(i));\n'}
[4.298912] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.298953] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeet2BGlobal = _est->getPosFeet2BGlobal();\n'}
[4.298994] (unitree_guide2) StdoutLine: {'line': b'3: +  _forceFeetGlobal = -_balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);\n'}
[4.299035] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.299076] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeetGlobal = _est->getFeetPos();\n'}
[4.299116] (unitree_guide2) StdoutLine: {'line': b'3: +  _velFeetGlobal = _est->getFeetVel();\n'}
[4.299157] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.299197] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((*_contact)(i) == 0) {\n'}
[4.299238] (unitree_guide2) StdoutLine: {'line': b'3: +      _forceFeetGlobal.col(i) = _KpSwing * (_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) +\n'}
[4.299280] (unitree_guide2) StdoutLine: {'line': b'3: +        _KdSwing * (_velFeetGlobalGoal.col(i) - _velFeetGlobal.col(i));\n'}
[4.299322] (unitree_guide2) StdoutLine: {'line': b'3: @@ -84,2 +91 @@\n'}
[4.299363] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.299404] (unitree_guide2) StdoutLine: {'line': b'3: -    _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;\n'}
[4.299446] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.299581] (unitree_guide2) StdoutLine: {'line': b'3: @@ -87,3 +93,5 @@\n'}
[4.299644] (unitree_guide2) StdoutLine: {'line': b'3: -    _q = vec34ToVec12(_lowState->getQ());\n'}
[4.299686] (unitree_guide2) StdoutLine: {'line': b'3: -    _tau = _robModel->getTau(_q, _forceFeetBody);\n'}
[4.299728] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.299768] (unitree_guide2) StdoutLine: {'line': b'3: +  _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;\n'}
[4.299808] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.299849] (unitree_guide2) StdoutLine: {'line': b'3: +  _q = vec34ToVec12(_lowState->getQ());\n'}
[4.299889] (unitree_guide2) StdoutLine: {'line': b'3: +  _tau = _robModel->getTau(_q, _forceFeetBody);\n'}
[4.299930] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.299970] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.300011] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_SwingTest.cpp':\n"}
[4.300052] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.300092] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_SwingTest.cpp\n'}
[4.300133] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_SwingTest.cpp.uncrustify\n'}
[4.300174] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,8 +6,9 @@\n'}
[4.300215] (unitree_guide2) StdoutLine: {'line': b'3: -State_SwingTest::State_SwingTest(CtrlComponents *ctrlComp)\n'}
[4.300257] (unitree_guide2) StdoutLine: {'line': b'3: -                :FSMState(ctrlComp, FSMStateName::SWINGTEST, "swingTest"){\n'}
[4.300298] (unitree_guide2) StdoutLine: {'line': b'3: -    _xMin = -0.15;\n'}
[4.300339] (unitree_guide2) StdoutLine: {'line': b'3: -    _xMax =  0.10;\n'}
[4.300380] (unitree_guide2) StdoutLine: {'line': b'3: -    _yMin = -0.15;\n'}
[4.300420] (unitree_guide2) StdoutLine: {'line': b'3: -    _yMax =  0.15;\n'}
[4.300464] (unitree_guide2) StdoutLine: {'line': b'3: -    _zMin = -0.05;\n'}
[4.300512] (unitree_guide2) StdoutLine: {'line': b'3: -    _zMax =  0.20;\n'}
[4.300552] (unitree_guide2) StdoutLine: {'line': b'3: +State_SwingTest::State_SwingTest(CtrlComponents * ctrlComp)\n'}
[4.300607] (unitree_guide2) StdoutLine: {'line': b'3: +: FSMState(ctrlComp, FSMStateName::SWINGTEST, "swingTest")\n'}
[4.300649] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.300690] (unitree_guide2) StdoutLine: {'line': b'3: +  _xMin = -0.15;\n'}
[4.300731] (unitree_guide2) StdoutLine: {'line': b'3: +  _xMax = 0.10;\n'}
[4.300772] (unitree_guide2) StdoutLine: {'line': b'3: +  _yMin = -0.15;\n'}
[4.300814] (unitree_guide2) StdoutLine: {'line': b'3: +  _yMax = 0.15;\n'}
[4.300856] (unitree_guide2) StdoutLine: {'line': b'3: +  _zMin = -0.05;\n'}
[4.300901] (unitree_guide2) StdoutLine: {'line': b'3: +  _zMax = 0.20;\n'}
[4.300944] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16,10 +17,7 @@\n'}
[4.300986] (unitree_guide2) StdoutLine: {'line': b'3: -void State_SwingTest::enter(){\n'}
[4.301028] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i=0; i<4; i++){\n'}
[4.301070] (unitree_guide2) StdoutLine: {'line': b'3: -        if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){\n'}
[4.301111] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setSimStanceGain(i);\n'}
[4.301152] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.301193] (unitree_guide2) StdoutLine: {'line': b'3: -        else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){\n'}
[4.301235] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setRealStanceGain(i);\n'}
[4.301278] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.301319] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->setZeroDq(i);\n'}
[4.301360] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->setZeroTau(i);\n'}
[4.301402] (unitree_guide2) StdoutLine: {'line': b'3: +void State_SwingTest::enter()\n'}
[4.301447] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.301489] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < 4; i++) {\n'}
[4.301531] (unitree_guide2) StdoutLine: {'line': b'3: +    if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {\n'}
[4.301572] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setSimStanceGain(i);\n'}
[4.301614] (unitree_guide2) StdoutLine: {'line': b'3: +    } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {\n'}
[4.301679] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setRealStanceGain(i);\n'}
[4.301722] (unitree_guide2) StdoutLine: {'line': b'3: @@ -27 +25,4 @@\n'}
[4.301766] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setSwingGain(0);\n'}
[4.301809] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->setZeroDq(i);\n'}
[4.301865] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->setZeroTau(i);\n'}
[4.301906] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.301947] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setSwingGain(0);\n'}
[4.301988] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29,2 +30,2 @@\n'}
[4.302035] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kp = Vec3(20, 20, 50).asDiagonal();\n'}
[4.302076] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kd = Vec3( 5,  5, 20).asDiagonal();\n'}
[4.302118] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kp = Vec3(20, 20, 50).asDiagonal();\n'}
[4.302159] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kd = Vec3(5, 5, 20).asDiagonal();\n'}
[4.302224] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32,3 +33,3 @@\n'}
[4.302267] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i=0; i<12; i++){\n'}
[4.302327] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;\n'}
[4.302369] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.302411] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < 12; i++) {\n'}
[4.302482] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;\n'}
[4.302549] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.302591] (unitree_guide2) StdoutLine: {'line': b'3: @@ -36,3 +37,3 @@\n'}
[4.302634] (unitree_guide2) StdoutLine: {'line': b'3: -    _initFeetPos = _ctrlComp->robotModel->getFeet2BPositions(*_lowState, FrameType::HIP);\n'}
[4.302677] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetPos = _initFeetPos;\n'}
[4.302719] (unitree_guide2) StdoutLine: {'line': b'3: -    _initPos = _initFeetPos.col(0);\n'}
[4.302773] (unitree_guide2) StdoutLine: {'line': b'3: +  _initFeetPos = _ctrlComp->robotModel->getFeet2BPositions(*_lowState, FrameType::HIP);\n'}
[4.302814] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetPos = _initFeetPos;\n'}
[4.302854] (unitree_guide2) StdoutLine: {'line': b'3: +  _initPos = _initFeetPos.col(0);\n'}
[4.302895] (unitree_guide2) StdoutLine: {'line': b'3: @@ -40 +41 @@\n'}
[4.302935] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setAllSwing();\n'}
[4.302975] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setAllSwing();\n'}
[4.303015] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,2 +44,3 @@\n'}
[4.303056] (unitree_guide2) StdoutLine: {'line': b'3: -void State_SwingTest::run(){\n'}
[4.303097] (unitree_guide2) StdoutLine: {'line': b'3: -    _userValue = _lowState->userValue;\n'}
[4.303138] (unitree_guide2) StdoutLine: {'line': b'3: +void State_SwingTest::run()\n'}
[4.303180] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.303221] (unitree_guide2) StdoutLine: {'line': b'3: +  _userValue = _lowState->userValue;\n'}
[4.303263] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46,11 +48,5 @@\n'}
[4.303306] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_userValue.ly > 0){\n'}
[4.303349] (unitree_guide2) StdoutLine: {'line': b'3: -        _posGoal(0) = invNormalize(_userValue.ly, _initPos(0), _initPos(0)+_xMax, 0, 1);\n'}
[4.303391] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[4.303435] (unitree_guide2) StdoutLine: {'line': b'3: -        _posGoal(0) = invNormalize(_userValue.ly, _initPos(0)+_xMin, _initPos(0), -1, 0);\n'}
[4.303477] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.303517] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.303620] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_userValue.lx > 0){\n'}
[4.303756] (unitree_guide2) StdoutLine: {'line': b'3: -        _posGoal(1) = invNormalize(_userValue.lx, _initPos(1, 0), _initPos(1)+_yMax, 0, 1);\n'}
[4.303805] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[4.303847] (unitree_guide2) StdoutLine: {'line': b'3: -        _posGoal(1) = invNormalize(_userValue.lx, _initPos(1)+_yMin, _initPos(1), -1, 0);\n'}
[4.303889] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.303930] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_userValue.ly > 0) {\n'}
[4.303972] (unitree_guide2) StdoutLine: {'line': b'3: +    _posGoal(0) = invNormalize(_userValue.ly, _initPos(0), _initPos(0) + _xMax, 0, 1);\n'}
[4.304015] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.304056] (unitree_guide2) StdoutLine: {'line': b'3: +    _posGoal(0) = invNormalize(_userValue.ly, _initPos(0) + _xMin, _initPos(0), -1, 0);\n'}
[4.304098] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.304141] (unitree_guide2) StdoutLine: {'line': b'3: @@ -58,5 +54,5 @@\n'}
[4.304183] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_userValue.ry > 0){\n'}
[4.304225] (unitree_guide2) StdoutLine: {'line': b'3: -        _posGoal(2) = invNormalize(_userValue.ry, _initPos(2), _initPos(2)+_zMax, 0, 1);\n'}
[4.304268] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[4.304310] (unitree_guide2) StdoutLine: {'line': b'3: -        _posGoal(2) = invNormalize(_userValue.ry, _initPos(2)+_zMin, _initPos(2), -1, 0);\n'}
[4.304352] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.304396] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_userValue.lx > 0) {\n'}
[4.304439] (unitree_guide2) StdoutLine: {'line': b'3: +    _posGoal(1) = invNormalize(_userValue.lx, _initPos(1, 0), _initPos(1) + _yMax, 0, 1);\n'}
[4.304481] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.304530] (unitree_guide2) StdoutLine: {'line': b'3: +    _posGoal(1) = invNormalize(_userValue.lx, _initPos(1) + _yMin, _initPos(1), -1, 0);\n'}
[4.304579] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.304633] (unitree_guide2) StdoutLine: {'line': b'3: @@ -64,2 +60,8 @@\n'}
[4.304674] (unitree_guide2) StdoutLine: {'line': b'3: -    _positionCtrl();\n'}
[4.304714] (unitree_guide2) StdoutLine: {'line': b'3: -    _torqueCtrl();\n'}
[4.304755] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_userValue.ry > 0) {\n'}
[4.304795] (unitree_guide2) StdoutLine: {'line': b'3: +    _posGoal(2) = invNormalize(_userValue.ry, _initPos(2), _initPos(2) + _zMax, 0, 1);\n'}
[4.304840] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.304882] (unitree_guide2) StdoutLine: {'line': b'3: +    _posGoal(2) = invNormalize(_userValue.ry, _initPos(2) + _zMin, _initPos(2), -1, 0);\n'}
[4.304924] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.304964] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.305004] (unitree_guide2) StdoutLine: {'line': b'3: +  _positionCtrl();\n'}
[4.305045] (unitree_guide2) StdoutLine: {'line': b'3: +  _torqueCtrl();\n'}
[4.305086] (unitree_guide2) StdoutLine: {'line': b'3: @@ -68,2 +70,3 @@\n'}
[4.305126] (unitree_guide2) StdoutLine: {'line': b'3: -void State_SwingTest::exit(){\n'}
[4.305166] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.305206] (unitree_guide2) StdoutLine: {'line': b'3: +void State_SwingTest::exit()\n'}
[4.305247] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.305287] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.305327] (unitree_guide2) StdoutLine: {'line': b'3: @@ -72,10 +75,9 @@\n'}
[4.305370] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_SwingTest::checkChange(){\n'}
[4.305412] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.305452] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.305493] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.305534] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.305575] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.305616] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.305657] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.305712] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::SWINGTEST;\n'}
[4.305753] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.305795] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_SwingTest::checkChange()\n'}
[4.305836] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.305878] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.305919] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.305961] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.306002] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.306044] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.306086] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::SWINGTEST;\n'}
[4.306127] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.306168] (unitree_guide2) StdoutLine: {'line': b'3: @@ -84,4 +86,5 @@\n'}
[4.306209] (unitree_guide2) StdoutLine: {'line': b'3: -void State_SwingTest::_positionCtrl(){\n'}
[4.306251] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetPos.col(0) = _posGoal;\n'}
[4.306293] (unitree_guide2) StdoutLine: {'line': b'3: -    _targetPos = _ctrlComp->robotModel->getQ(_feetPos, FrameType::HIP);\n'}
[4.306336] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setQ(_targetPos);\n'}
[4.306381] (unitree_guide2) StdoutLine: {'line': b'3: +void State_SwingTest::_positionCtrl()\n'}
[4.306424] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.306470] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetPos.col(0) = _posGoal;\n'}
[4.306511] (unitree_guide2) StdoutLine: {'line': b'3: +  _targetPos = _ctrlComp->robotModel->getQ(_feetPos, FrameType::HIP);\n'}
[4.306553] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setQ(_targetPos);\n'}
[4.306595] (unitree_guide2) StdoutLine: {'line': b'3: @@ -90,3 +93,4 @@\n'}
[4.306636] (unitree_guide2) StdoutLine: {'line': b'3: -void State_SwingTest::_torqueCtrl(){\n'}
[4.306677] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 pos0 = _ctrlComp->robotModel->getFootPosition(*_lowState, 0, FrameType::HIP);\n'}
[4.306718] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 vel0 = _ctrlComp->robotModel->getFootVelocity(*_lowState, 0);\n'}
[4.306760] (unitree_guide2) StdoutLine: {'line': b'3: +void State_SwingTest::_torqueCtrl()\n'}
[4.306802] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.306844] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 pos0 = _ctrlComp->robotModel->getFootPosition(*_lowState, 0, FrameType::HIP);\n'}
[4.306886] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 vel0 = _ctrlComp->robotModel->getFootVelocity(*_lowState, 0);\n'}
[4.306929] (unitree_guide2) StdoutLine: {'line': b'3: @@ -94 +98 @@\n'}
[4.306971] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 force0 = _Kp*(_posGoal - pos0) + _Kd*(-vel0);\n'}
[4.307013] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 force0 = _Kp * (_posGoal - pos0) + _Kd * (-vel0);\n'}
[4.307056] (unitree_guide2) StdoutLine: {'line': b'3: @@ -96,2 +100,2 @@\n'}
[4.307097] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 torque;\n'}
[4.307139] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 jaco0 = _ctrlComp->robotModel->getJaco(*_lowState, 0);\n'}
[4.307180] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 torque;\n'}
[4.307221] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 jaco0 = _ctrlComp->robotModel->getJaco(*_lowState, 0);\n'}
[4.307263] (unitree_guide2) StdoutLine: {'line': b'3: @@ -99 +103 @@\n'}
[4.307304] (unitree_guide2) StdoutLine: {'line': b'3: -    torque.segment(0, 3) = jaco0.transpose() * force0;\n'}
[4.307350] (unitree_guide2) StdoutLine: {'line': b'3: +  torque.segment(0, 3) = jaco0.transpose() * force0;\n'}
[4.307392] (unitree_guide2) StdoutLine: {'line': b'3: @@ -101,2 +105,2 @@\n'}
[4.307434] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setTau(torque);\n'}
[4.307475] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.307517] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setTau(torque);\n'}
[4.307558] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.307600] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.307642] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_Trotting.cpp':\n"}
[4.307685] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.307727] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_Trotting.cpp\n'}
[4.307769] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_Trotting.cpp.uncrustify\n'}
[4.307811] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7,8 +7,9 @@\n'}
[4.307852] (unitree_guide2) StdoutLine: {'line': b'3: -State_Trotting::State_Trotting(CtrlComponents *ctrlComp)\n'}
[4.307893] (unitree_guide2) StdoutLine: {'line': b'3: -             :FSMState(ctrlComp, FSMStateName::TROTTING, "trotting"), \n'}
[4.307935] (unitree_guide2) StdoutLine: {'line': b'3: -              _est(ctrlComp->estimator), _phase(ctrlComp->phase), \n'}
[4.307977] (unitree_guide2) StdoutLine: {'line': b'3: -              _contact(ctrlComp->contact), _robModel(ctrlComp->robotModel), \n'}
[4.308019] (unitree_guide2) StdoutLine: {'line': b'3: -              _balCtrl(ctrlComp->balCtrl){\n'}
[4.308060] (unitree_guide2) StdoutLine: {'line': b'3: -    _gait = new GaitGenerator(ctrlComp);\n'}
[4.308102] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.308143] (unitree_guide2) StdoutLine: {'line': b'3: -    _gaitHeight = 0.08;\n'}
[4.308185] (unitree_guide2) StdoutLine: {'line': b'3: +State_Trotting::State_Trotting(CtrlComponents * ctrlComp)\n'}
[4.308235] (unitree_guide2) StdoutLine: {'line': b'3: +: FSMState(ctrlComp, FSMStateName::TROTTING, "trotting"),\n'}
[4.308277] (unitree_guide2) StdoutLine: {'line': b'3: +  _est(ctrlComp->estimator), _phase(ctrlComp->phase),\n'}
[4.308325] (unitree_guide2) StdoutLine: {'line': b'3: +  _contact(ctrlComp->contact), _robModel(ctrlComp->robotModel),\n'}
[4.308368] (unitree_guide2) StdoutLine: {'line': b'3: +  _balCtrl(ctrlComp->balCtrl)\n'}
[4.308414] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.308457] (unitree_guide2) StdoutLine: {'line': b'3: +  _gait = new GaitGenerator(ctrlComp);\n'}
[4.308499] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.308541] (unitree_guide2) StdoutLine: {'line': b'3: +  _gaitHeight = 0.08;\n'}
[4.308596] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17,6 +18,6 @@\n'}
[4.308637] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kpp = Vec3(70, 70, 70).asDiagonal();\n'}
[4.308678] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdp = Vec3(10, 10, 10).asDiagonal();\n'}
[4.308719] (unitree_guide2) StdoutLine: {'line': b'3: -    _kpw = 780; \n'}
[4.308759] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdw = Vec3(70, 70, 70).asDiagonal();\n'}
[4.308800] (unitree_guide2) StdoutLine: {'line': b'3: -    _KpSwing = Vec3(400, 400, 400).asDiagonal();\n'}
[4.308841] (unitree_guide2) StdoutLine: {'line': b'3: -    _KdSwing = Vec3(10, 10, 10).asDiagonal();\n'}
[4.308882] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kpp = Vec3(70, 70, 70).asDiagonal();\n'}
[4.308923] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdp = Vec3(10, 10, 10).asDiagonal();\n'}
[4.308963] (unitree_guide2) StdoutLine: {'line': b'3: +  _kpw = 780;\n'}
[4.309004] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdw = Vec3(70, 70, 70).asDiagonal();\n'}
[4.309045] (unitree_guide2) StdoutLine: {'line': b'3: +  _KpSwing = Vec3(400, 400, 400).asDiagonal();\n'}
[4.309093] (unitree_guide2) StdoutLine: {'line': b'3: +  _KdSwing = Vec3(10, 10, 10).asDiagonal();\n'}
[4.309135] (unitree_guide2) StdoutLine: {'line': b'3: @@ -26,6 +27,6 @@\n'}
[4.309176] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kpp = Vec3(20, 20, 100).asDiagonal();\n'}
[4.309217] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdp = Vec3(20, 20, 20).asDiagonal();\n'}
[4.309258] (unitree_guide2) StdoutLine: {'line': b'3: -    _kpw = 400;\n'}
[4.309309] (unitree_guide2) StdoutLine: {'line': b'3: -    _Kdw = Vec3(50, 50, 50).asDiagonal();\n'}
[4.309351] (unitree_guide2) StdoutLine: {'line': b'3: -    _KpSwing = Vec3(400, 400, 400).asDiagonal();\n'}
[4.309427] (unitree_guide2) StdoutLine: {'line': b'3: -    _KdSwing = Vec3(10, 10, 10).asDiagonal();\n'}
[4.309468] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kpp = Vec3(20, 20, 100).asDiagonal();\n'}
[4.309508] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdp = Vec3(20, 20, 20).asDiagonal();\n'}
[4.309548] (unitree_guide2) StdoutLine: {'line': b'3: +  _kpw = 400;\n'}
[4.309588] (unitree_guide2) StdoutLine: {'line': b'3: +  _Kdw = Vec3(50, 50, 50).asDiagonal();\n'}
[4.309629] (unitree_guide2) StdoutLine: {'line': b'3: +  _KpSwing = Vec3(400, 400, 400).asDiagonal();\n'}
[4.309669] (unitree_guide2) StdoutLine: {'line': b'3: +  _KdSwing = Vec3(10, 10, 10).asDiagonal();\n'}
[4.309725] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34,30 +35,79 @@\n'}
[4.309767] (unitree_guide2) StdoutLine: {'line': b'3: -    _vxLim = _robModel->getRobVelLimitX();\n'}
[4.309809] (unitree_guide2) StdoutLine: {'line': b'3: -    _vyLim = _robModel->getRobVelLimitY();\n'}
[4.309851] (unitree_guide2) StdoutLine: {'line': b'3: -    _wyawLim = _robModel->getRobVelLimitYaw();\n'}
[4.309893] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.309935] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.309977] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.310018] (unitree_guide2) StdoutLine: {'line': b'3: -State_Trotting::~State_Trotting(){\n'}
[4.310060] (unitree_guide2) StdoutLine: {'line': b'3: -    delete _gait;\n'}
[4.310101] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.310147] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.310188] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::enter(){\n'}
[4.310230] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd = _est->getPosition();\n'}
[4.310277] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd(2) = -_robModel->getFeetPosIdeal()(2, 0);\n'}
[4.310319] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdBody.setZero();\n'}
[4.310361] (unitree_guide2) StdoutLine: {'line': b'3: -    _yawCmd = _lowState->getYaw();\n'}
[4.310403] (unitree_guide2) StdoutLine: {'line': b'3: -    _Rd = rotz(_yawCmd);\n'}
[4.310445] (unitree_guide2) StdoutLine: {'line': b'3: -    _wCmdGlobal.setZero();\n'}
[4.310487] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.310529] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.310571] (unitree_guide2) StdoutLine: {'line': b'3: -    _gait->restart();\n'}
[4.310627] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.310668] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.310709] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::exit(){\n'}
[4.310750] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.310791] (unitree_guide2) StdoutLine: {'line': b'3: -    _ctrlComp->setAllSwing();\n'}
[4.310831] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.310872] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.310912] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_Trotting::checkChange(){\n'}
[4.310952] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.310993] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.311035] (unitree_guide2) StdoutLine: {'line': b'3: +  _vxLim = _robModel->getRobVelLimitX();\n'}
[4.311075] (unitree_guide2) StdoutLine: {'line': b'3: +  _vyLim = _robModel->getRobVelLimitY();\n'}
[4.311115] (unitree_guide2) StdoutLine: {'line': b'3: +  _wyawLim = _robModel->getRobVelLimitYaw();\n'}
[4.311156] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.311198] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.311243] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.311341] (unitree_guide2) StdoutLine: {'line': b'3: +State_Trotting::~State_Trotting()\n'}
[4.311432] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.311474] (unitree_guide2) StdoutLine: {'line': b'3: +  delete _gait;\n'}
[4.311515] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.311556] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.311612] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::enter()\n'}
[4.311654] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.311696] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd = _est->getPosition();\n'}
[4.311737] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd(2) = -_robModel->getFeetPosIdeal()(2, 0);\n'}
[4.311779] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdBody.setZero();\n'}
[4.311821] (unitree_guide2) StdoutLine: {'line': b'3: +  _yawCmd = _lowState->getYaw();\n'}
[4.311862] (unitree_guide2) StdoutLine: {'line': b'3: +  _Rd = rotz(_yawCmd);\n'}
[4.311904] (unitree_guide2) StdoutLine: {'line': b'3: +  _wCmdGlobal.setZero();\n'}
[4.311946] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.311987] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.312029] (unitree_guide2) StdoutLine: {'line': b'3: +  _gait->restart();\n'}
[4.312071] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.312113] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.312156] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::exit()\n'}
[4.312198] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.312246] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->ioInter->zeroCmdPanel();\n'}
[4.312288] (unitree_guide2) StdoutLine: {'line': b'3: +  _ctrlComp->setAllSwing();\n'}
[4.312330] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.312372] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.312420] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_Trotting::checkChange()\n'}
[4.312462] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.312542] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.312655] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.312699] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.312741] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.312783] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.312824] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::TROTTING;\n'}
[4.312865] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.312906] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.312947] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.312988] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::run()\n'}
[4.313030] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.313071] (unitree_guide2) StdoutLine: {'line': b'3: +  _posBody = _est->getPosition();\n'}
[4.313112] (unitree_guide2) StdoutLine: {'line': b'3: +  _velBody = _est->getVelocity();\n'}
[4.313161] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeet2BGlobal = _est->getPosFeet2BGlobal();\n'}
[4.313211] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeetGlobal = _est->getFeetPos();\n'}
[4.313253] (unitree_guide2) StdoutLine: {'line': b'3: +  _velFeetGlobal = _est->getFeetVel();\n'}
[4.313328] (unitree_guide2) StdoutLine: {'line': b'3: +  _B2G_RotMat = _lowState->getRotMat();\n'}
[4.313371] (unitree_guide2) StdoutLine: {'line': b'3: +  _G2B_RotMat = _B2G_RotMat.transpose();\n'}
[4.313412] (unitree_guide2) StdoutLine: {'line': b'3: +  _yaw = _lowState->getYaw();\n'}
[4.313453] (unitree_guide2) StdoutLine: {'line': b'3: +  _dYaw = _lowState->getDYaw();\n'}
[4.313494] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.313535] (unitree_guide2) StdoutLine: {'line': b'3: +  _userValue = _lowState->userValue;\n'}
[4.313575] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.313616] (unitree_guide2) StdoutLine: {'line': b'3: +  getUserCmd();\n'}
[4.313657] (unitree_guide2) StdoutLine: {'line': b'3: +  calcCmd();\n'}
[4.313699] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.313739] (unitree_guide2) StdoutLine: {'line': b'3: +  _gait->setGait(_vCmdGlobal.segment(0, 2), _wCmdGlobal(2), _gaitHeight);\n'}
[4.313781] (unitree_guide2) StdoutLine: {'line': b'3: +  _gait->run(_posFeetGlobalGoal, _velFeetGlobalGoal);\n'}
[4.313823] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.313863] (unitree_guide2) StdoutLine: {'line': b'3: +  calcTau();\n'}
[4.313905] (unitree_guide2) StdoutLine: {'line': b'3: +  calcQQd();\n'}
[4.313946] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.313987] (unitree_guide2) StdoutLine: {'line': b'3: +  if (checkStepOrNot()) {\n'}
[4.314028] (unitree_guide2) StdoutLine: {'line': b'3: +    _ctrlComp->setStartWave();\n'}
[4.314069] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.314109] (unitree_guide2) StdoutLine: {'line': b'3: +    _ctrlComp->setAllStance();\n'}
[4.314150] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.314216] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.314259] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setTau(_tau);\n'}
[4.314301] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setQ(vec34ToVec12(_qGoal));\n'}
[4.314344] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowCmd->setQd(vec34ToVec12(_qdGoal));\n'}
[4.314387] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.314429] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.314472] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((*_contact)(i) == 0) {\n'}
[4.314517] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setSwingGain(i);\n'}
[4.314561] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.314604] (unitree_guide2) StdoutLine: {'line': b'3: +      _lowCmd->setStableGain(i);\n'}
[4.314661] (unitree_guide2) StdoutLine: {'line': b'3: @@ -65,2 +115,91 @@\n'}
[4.314704] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.314748] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.314791] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.314835] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.314910] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.314953] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.314997] (unitree_guide2) StdoutLine: {'line': b'3: +bool State_Trotting::checkStepOrNot()\n'}
[4.315041] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.315084] (unitree_guide2) StdoutLine: {'line': b'3: +  if ( (fabs(_vCmdBody(0)) > 0.03) ||\n'}
[4.315130] (unitree_guide2) StdoutLine: {'line': b'3: +    (fabs(_vCmdBody(1)) > 0.03) ||\n'}
[4.315178] (unitree_guide2) StdoutLine: {'line': b'3: +    (fabs(_posError(0)) > 0.08) ||\n'}
[4.315221] (unitree_guide2) StdoutLine: {'line': b'3: +    (fabs(_posError(1)) > 0.08) ||\n'}
[4.315264] (unitree_guide2) StdoutLine: {'line': b'3: +    (fabs(_velError(0)) > 0.05) ||\n'}
[4.315309] (unitree_guide2) StdoutLine: {'line': b'3: +    (fabs(_velError(1)) > 0.05) ||\n'}
[4.315352] (unitree_guide2) StdoutLine: {'line': b'3: +    (fabs(_dYawCmd) > 0.20) )\n'}
[4.315398] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.315442] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.315487] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.315534] (unitree_guide2) StdoutLine: {'line': b'3: +    return false;\n'}
[4.315578] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.315623] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.315667] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.315726] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::setHighCmd(double vx, double vy, double wz)\n'}
[4.315772] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.315818] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdBody(0) = vx;\n'}
[4.315862] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdBody(1) = vy;\n'}
[4.315905] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdBody(2) = 0;\n'}
[4.315949] (unitree_guide2) StdoutLine: {'line': b'3: +  _dYawCmd = wz;\n'}
[4.315994] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.316038] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.316082] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::getUserCmd()\n'}
[4.316135] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.316180] (unitree_guide2) StdoutLine: {'line': b'3: +  /* Movement */\n'}
[4.316225] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdBody(0) = invNormalize(_userValue.ly, _vxLim(0), _vxLim(1));\n'}
[4.316270] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdBody(1) = -invNormalize(_userValue.lx, _vyLim(0), _vyLim(1));\n'}
[4.316314] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdBody(2) = 0;\n'}
[4.316358] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.316403] (unitree_guide2) StdoutLine: {'line': b'3: +  /* Turning */\n'}
[4.316447] (unitree_guide2) StdoutLine: {'line': b'3: +  _dYawCmd = -invNormalize(_userValue.rx, _wyawLim(0), _wyawLim(1));\n'}
[4.316491] (unitree_guide2) StdoutLine: {'line': b'3: +  _dYawCmd = 0.9 * _dYawCmdPast + (1 - 0.9) * _dYawCmd;\n'}
[4.316535] (unitree_guide2) StdoutLine: {'line': b'3: +  _dYawCmdPast = _dYawCmd;\n'}
[4.316578] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.316621] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.316663] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::calcCmd()\n'}
[4.316718] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.316759] (unitree_guide2) StdoutLine: {'line': b'3: +  /* Movement */\n'}
[4.316800] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdGlobal = _B2G_RotMat * _vCmdBody;\n'}
[4.316841] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.316882] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdGlobal(0) = saturation(_vCmdGlobal(0), Vec2(_velBody(0) - 0.2, _velBody(0) + 0.2));\n'}
[4.316930] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdGlobal(1) = saturation(_vCmdGlobal(1), Vec2(_velBody(1) - 0.2, _velBody(1) + 0.2));\n'}
[4.316972] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.317012] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd(0) =\n'}
[4.317053] (unitree_guide2) StdoutLine: {'line': b'3: +    saturation(\n'}
[4.317097] (unitree_guide2) StdoutLine: {'line': b'3: +    _pcd(0) + _vCmdGlobal(0) * _ctrlComp->dt, Vec2(\n'}
[4.317138] (unitree_guide2) StdoutLine: {'line': b'3: +      _posBody(0) - 0.05, _posBody(\n'}
[4.317179] (unitree_guide2) StdoutLine: {'line': b'3: +        0) + 0.05));\n'}
[4.317219] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcd(1) =\n'}
[4.317259] (unitree_guide2) StdoutLine: {'line': b'3: +    saturation(\n'}
[4.317300] (unitree_guide2) StdoutLine: {'line': b'3: +    _pcd(1) + _vCmdGlobal(1) * _ctrlComp->dt, Vec2(\n'}
[4.317341] (unitree_guide2) StdoutLine: {'line': b'3: +      _posBody(1) - 0.05, _posBody(\n'}
[4.317381] (unitree_guide2) StdoutLine: {'line': b'3: +        1) + 0.05));\n'}
[4.317421] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.317462] (unitree_guide2) StdoutLine: {'line': b'3: +  _vCmdGlobal(2) = 0;\n'}
[4.317503] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.317543] (unitree_guide2) StdoutLine: {'line': b'3: +  /* Turning */\n'}
[4.317584] (unitree_guide2) StdoutLine: {'line': b'3: +  _yawCmd = _yawCmd + _dYawCmd * _ctrlComp->dt;\n'}
[4.317625] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.317666] (unitree_guide2) StdoutLine: {'line': b'3: +  _Rd = rotz(_yawCmd);\n'}
[4.317708] (unitree_guide2) StdoutLine: {'line': b'3: +  _wCmdGlobal(2) = _dYawCmd;\n'}
[4.317749] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.317789] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.317830] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::calcTau()\n'}
[4.317871] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.317912] (unitree_guide2) StdoutLine: {'line': b'3: +  _posError = _pcd - _posBody;\n'}
[4.317953] (unitree_guide2) StdoutLine: {'line': b'3: +  _velError = _vCmdGlobal - _velBody;\n'}
[4.317994] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.318037] (unitree_guide2) StdoutLine: {'line': b'3: +  _ddPcd = _Kpp * _posError + _Kdp * _velError;\n'}
[4.318116] (unitree_guide2) StdoutLine: {'line': b'3: +  _dWbd = _kpw * rotMatToExp(_Rd * _G2B_RotMat) + _Kdw * (_wCmdGlobal - _lowState->getGyroGlobal());\n'}
[4.318164] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.318210] (unitree_guide2) StdoutLine: {'line': b'3: +  _ddPcd(0) = saturation(_ddPcd(0), Vec2(-3, 3));\n'}
[4.318269] (unitree_guide2) StdoutLine: {'line': b'3: +  _ddPcd(1) = saturation(_ddPcd(1), Vec2(-3, 3));\n'}
[4.318811] (unitree_guide2) StdoutLine: {'line': b'3: +  _ddPcd(2) = saturation(_ddPcd(2), Vec2(-5, 5));\n'}
[4.318932] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.318985] (unitree_guide2) StdoutLine: {'line': b'3: +  _dWbd(0) = saturation(_dWbd(0), Vec2(-40, 40));\n'}
[4.319032] (unitree_guide2) StdoutLine: {'line': b'3: +  _dWbd(1) = saturation(_dWbd(1), Vec2(-40, 40));\n'}
[4.319077] (unitree_guide2) StdoutLine: {'line': b'3: +  _dWbd(2) = saturation(_dWbd(2), Vec2(-10, 10));\n'}
[4.319122] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.319167] (unitree_guide2) StdoutLine: {'line': b'3: +  _forceFeetGlobal = -_balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);\n'}
[4.319214] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.319258] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.319304] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((*_contact)(i) == 0) {\n'}
[4.319348] (unitree_guide2) StdoutLine: {'line': b'3: +      _forceFeetGlobal.col(i) = _KpSwing * (_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) +\n'}
[4.319393] (unitree_guide2) StdoutLine: {'line': b'3: +        _KdSwing * (_velFeetGlobalGoal.col(i) - _velFeetGlobal.col(i));\n'}
[4.319439] (unitree_guide2) StdoutLine: {'line': b'3: @@ -68,142 +207,22 @@\n'}
[4.319514] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.319559] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::TROTTING;\n'}
[4.319713] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.319809] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.319901] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.319952] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::run(){\n'}
[4.319997] (unitree_guide2) StdoutLine: {'line': b'3: -    _posBody = _est->getPosition();\n'}
[4.320041] (unitree_guide2) StdoutLine: {'line': b'3: -    _velBody = _est->getVelocity();\n'}
[4.320086] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeet2BGlobal = _est->getPosFeet2BGlobal();\n'}
[4.320130] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeetGlobal = _est->getFeetPos();\n'}
[4.320175] (unitree_guide2) StdoutLine: {'line': b'3: -    _velFeetGlobal = _est->getFeetVel();\n'}
[4.320219] (unitree_guide2) StdoutLine: {'line': b'3: -    _B2G_RotMat = _lowState->getRotMat();\n'}
[4.320264] (unitree_guide2) StdoutLine: {'line': b'3: -    _G2B_RotMat = _B2G_RotMat.transpose();\n'}
[4.320308] (unitree_guide2) StdoutLine: {'line': b'3: -    _yaw = _lowState->getYaw();\n'}
[4.320351] (unitree_guide2) StdoutLine: {'line': b'3: -    _dYaw = _lowState->getDYaw();\n'}
[4.320395] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.320439] (unitree_guide2) StdoutLine: {'line': b'3: -    _userValue = _lowState->userValue;\n'}
[4.320483] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.320526] (unitree_guide2) StdoutLine: {'line': b'3: -    getUserCmd();\n'}
[4.320570] (unitree_guide2) StdoutLine: {'line': b'3: -    calcCmd();\n'}
[4.320613] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.320657] (unitree_guide2) StdoutLine: {'line': b'3: -    _gait->setGait(_vCmdGlobal.segment(0,2), _wCmdGlobal(2), _gaitHeight);\n'}
[4.320702] (unitree_guide2) StdoutLine: {'line': b'3: -    _gait->run(_posFeetGlobalGoal, _velFeetGlobalGoal);\n'}
[4.320745] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.320788] (unitree_guide2) StdoutLine: {'line': b'3: -    calcTau();\n'}
[4.320831] (unitree_guide2) StdoutLine: {'line': b'3: -    calcQQd();\n'}
[4.320875] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.320918] (unitree_guide2) StdoutLine: {'line': b'3: -    if(checkStepOrNot()){\n'}
[4.320962] (unitree_guide2) StdoutLine: {'line': b'3: -        _ctrlComp->setStartWave();\n'}
[4.321006] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[4.321056] (unitree_guide2) StdoutLine: {'line': b'3: -        _ctrlComp->setAllStance();\n'}
[4.321102] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.321147] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.321192] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setTau(_tau);\n'}
[4.321236] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setQ(vec34ToVec12(_qGoal));\n'}
[4.321279] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowCmd->setQd(vec34ToVec12(_qdGoal));\n'}
[4.321322] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.321366] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.321410] (unitree_guide2) StdoutLine: {'line': b'3: -        if((*_contact)(i) == 0){\n'}
[4.321455] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setSwingGain(i);\n'}
[4.321524] (unitree_guide2) StdoutLine: {'line': b'3: -        }else{\n'}
[4.321596] (unitree_guide2) StdoutLine: {'line': b'3: -            _lowCmd->setStableGain(i);\n'}
[4.321663] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.321731] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.321798] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.321867] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.321938] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.322010] (unitree_guide2) StdoutLine: {'line': b'3: -bool State_Trotting::checkStepOrNot(){\n'}
[4.322076] (unitree_guide2) StdoutLine: {'line': b'3: -    if( (fabs(_vCmdBody(0)) > 0.03) ||\n'}
[4.322150] (unitree_guide2) StdoutLine: {'line': b'3: -        (fabs(_vCmdBody(1)) > 0.03) ||\n'}
[4.322282] (unitree_guide2) StdoutLine: {'line': b'3: -        (fabs(_posError(0)) > 0.08) ||\n'}
[4.322358] (unitree_guide2) StdoutLine: {'line': b'3: -        (fabs(_posError(1)) > 0.08) ||\n'}
[4.322424] (unitree_guide2) StdoutLine: {'line': b'3: -        (fabs(_velError(0)) > 0.05) ||\n'}
[4.322488] (unitree_guide2) StdoutLine: {'line': b'3: -        (fabs(_velError(1)) > 0.05) ||\n'}
[4.322532] (unitree_guide2) StdoutLine: {'line': b'3: -        (fabs(_dYawCmd) > 0.20) ){\n'}
[4.322576] (unitree_guide2) StdoutLine: {'line': b'3: -        return true;\n'}
[4.322620] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[4.322663] (unitree_guide2) StdoutLine: {'line': b'3: -        return false;\n'}
[4.322706] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.322761] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.322804] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.322847] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::setHighCmd(double vx, double vy, double wz){\n'}
[4.322891] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdBody(0) = vx;\n'}
[4.322934] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdBody(1) = vy;\n'}
[4.322977] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdBody(2) = 0; \n'}
[4.323020] (unitree_guide2) StdoutLine: {'line': b'3: -    _dYawCmd = wz;\n'}
[4.323062] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.323105] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.323149] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::getUserCmd(){\n'}
[4.323193] (unitree_guide2) StdoutLine: {'line': b'3: -    /* Movement */\n'}
[4.323238] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdBody(0) =  invNormalize(_userValue.ly, _vxLim(0), _vxLim(1));\n'}
[4.323284] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdBody(1) = -invNormalize(_userValue.lx, _vyLim(0), _vyLim(1));\n'}
[4.323327] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdBody(2) = 0;\n'}
[4.323371] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.323413] (unitree_guide2) StdoutLine: {'line': b'3: -    /* Turning */\n'}
[4.323456] (unitree_guide2) StdoutLine: {'line': b'3: -    _dYawCmd = -invNormalize(_userValue.rx, _wyawLim(0), _wyawLim(1));\n'}
[4.323499] (unitree_guide2) StdoutLine: {'line': b'3: -    _dYawCmd = 0.9*_dYawCmdPast + (1-0.9) * _dYawCmd;\n'}
[4.323542] (unitree_guide2) StdoutLine: {'line': b'3: -    _dYawCmdPast = _dYawCmd;\n'}
[4.323585] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.323628] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.323671] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::calcCmd(){\n'}
[4.323718] (unitree_guide2) StdoutLine: {'line': b'3: -    /* Movement */\n'}
[4.323762] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdGlobal = _B2G_RotMat * _vCmdBody;\n'}
[4.323806] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.323849] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdGlobal(0) = saturation(_vCmdGlobal(0), Vec2(_velBody(0)-0.2, _velBody(0)+0.2));\n'}
[4.323894] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdGlobal(1) = saturation(_vCmdGlobal(1), Vec2(_velBody(1)-0.2, _velBody(1)+0.2));\n'}
[4.323937] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.323981] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd(0) = saturation(_pcd(0) + _vCmdGlobal(0) * _ctrlComp->dt, Vec2(_posBody(0) - 0.05, _posBody(0) + 0.05));\n'}
[4.324025] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcd(1) = saturation(_pcd(1) + _vCmdGlobal(1) * _ctrlComp->dt, Vec2(_posBody(1) - 0.05, _posBody(1) + 0.05));\n'}
[4.324069] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.324111] (unitree_guide2) StdoutLine: {'line': b'3: -    _vCmdGlobal(2) = 0;\n'}
[4.324154] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.324197] (unitree_guide2) StdoutLine: {'line': b'3: -    /* Turning */\n'}
[4.324239] (unitree_guide2) StdoutLine: {'line': b'3: -    _yawCmd = _yawCmd + _dYawCmd * _ctrlComp->dt;\n'}
[4.324281] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.324328] (unitree_guide2) StdoutLine: {'line': b'3: -    _Rd = rotz(_yawCmd);\n'}
[4.324371] (unitree_guide2) StdoutLine: {'line': b'3: -    _wCmdGlobal(2) = _dYawCmd;\n'}
[4.324414] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.324472] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.324516] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::calcTau(){\n'}
[4.324560] (unitree_guide2) StdoutLine: {'line': b'3: -    _posError = _pcd - _posBody;\n'}
[4.324605] (unitree_guide2) StdoutLine: {'line': b'3: -    _velError = _vCmdGlobal - _velBody;\n'}
[4.324649] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.324694] (unitree_guide2) StdoutLine: {'line': b'3: -    _ddPcd = _Kpp * _posError + _Kdp * _velError;\n'}
[4.324739] (unitree_guide2) StdoutLine: {'line': b'3: -    _dWbd  = _kpw*rotMatToExp(_Rd*_G2B_RotMat) + _Kdw * (_wCmdGlobal - _lowState->getGyroGlobal());\n'}
[4.324784] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.324829] (unitree_guide2) StdoutLine: {'line': b'3: -    _ddPcd(0) = saturation(_ddPcd(0), Vec2(-3, 3));\n'}
[4.324873] (unitree_guide2) StdoutLine: {'line': b'3: -    _ddPcd(1) = saturation(_ddPcd(1), Vec2(-3, 3));\n'}
[4.324917] (unitree_guide2) StdoutLine: {'line': b'3: -    _ddPcd(2) = saturation(_ddPcd(2), Vec2(-5, 5));\n'}
[4.324961] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.325005] (unitree_guide2) StdoutLine: {'line': b'3: -    _dWbd(0) = saturation(_dWbd(0), Vec2(-40, 40));\n'}
[4.325049] (unitree_guide2) StdoutLine: {'line': b'3: -    _dWbd(1) = saturation(_dWbd(1), Vec2(-40, 40));\n'}
[4.325093] (unitree_guide2) StdoutLine: {'line': b'3: -    _dWbd(2) = saturation(_dWbd(2), Vec2(-10, 10));\n'}
[4.325137] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.325181] (unitree_guide2) StdoutLine: {'line': b'3: -    _forceFeetGlobal = - _balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);\n'}
[4.325227] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.325271] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.325316] (unitree_guide2) StdoutLine: {'line': b'3: -        if((*_contact)(i) == 0){\n'}
[4.325361] (unitree_guide2) StdoutLine: {'line': b'3: -            _forceFeetGlobal.col(i) = _KpSwing*(_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) + _KdSwing*(_velFeetGlobalGoal.col(i)-_velFeetGlobal.col(i));\n'}
[4.325407] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.325465] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.325510] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.325555] (unitree_guide2) StdoutLine: {'line': b'3: -    _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;\n'}
[4.325601] (unitree_guide2) StdoutLine: {'line': b'3: -    _q = vec34ToVec12(_lowState->getQ());\n'}
[4.325646] (unitree_guide2) StdoutLine: {'line': b'3: -    _tau = _robModel->getTau(_q, _forceFeetBody);\n'}
[4.325691] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.325737] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.325781] (unitree_guide2) StdoutLine: {'line': b'3: -void State_Trotting::calcQQd(){\n'}
[4.325826] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.325871] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 _posFeet2B;\n'}
[4.325916] (unitree_guide2) StdoutLine: {'line': b'3: -    _posFeet2B = _robModel->getFeet2BPositions(*_lowState,FrameType::BODY);\n'}
[4.325962] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.326007] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.326052] (unitree_guide2) StdoutLine: {'line': b'3: -        _posFeet2BGoal.col(i) = _G2B_RotMat * (_posFeetGlobalGoal.col(i) - _posBody);\n'}
[4.326098] (unitree_guide2) StdoutLine: {'line': b'3: -        _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody); \n'}
[4.326144] (unitree_guide2) StdoutLine: {'line': b'3: -        // _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody - _B2G_RotMat * (skew(_lowState->getGyro()) * _posFeet2B.col(i)) );  //  c.f formula (6.12) \n'}
[4.326191] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.326240] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.326286] (unitree_guide2) StdoutLine: {'line': b'3: -    _qGoal = vec12ToVec34(_robModel->getQ(_posFeet2BGoal, FrameType::BODY));\n'}
[4.326332] (unitree_guide2) StdoutLine: {'line': b'3: -    _qdGoal = vec12ToVec34(_robModel->getQd(_posFeet2B, _velFeet2BGoal, FrameType::BODY));\n'}
[4.326377] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.326422] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.326482] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.326528] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.326574] (unitree_guide2) StdoutLine: {'line': b'3: +  _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;\n'}
[4.326621] (unitree_guide2) StdoutLine: {'line': b'3: +  _q = vec34ToVec12(_lowState->getQ());\n'}
[4.326667] (unitree_guide2) StdoutLine: {'line': b'3: +  _tau = _robModel->getTau(_q, _forceFeetBody);\n'}
[4.326713] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.326759] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.326805] (unitree_guide2) StdoutLine: {'line': b'3: +void State_Trotting::calcQQd()\n'}
[4.326852] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.326900] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.326946] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 _posFeet2B;\n'}
[4.326993] (unitree_guide2) StdoutLine: {'line': b'3: +  _posFeet2B = _robModel->getFeet2BPositions(*_lowState, FrameType::BODY);\n'}
[4.327040] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.327087] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.327134] (unitree_guide2) StdoutLine: {'line': b'3: +    _posFeet2BGoal.col(i) = _G2B_RotMat * (_posFeetGlobalGoal.col(i) - _posBody);\n'}
[4.327181] (unitree_guide2) StdoutLine: {'line': b'3: +    _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody);\n'}
[4.327227] (unitree_guide2) StdoutLine: {'line': b'3: +    // _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody - _B2G_RotMat * (skew(_lowState->getGyro()) * _posFeet2B.col(i)) );  //  c.f formula (6.12)\n'}
[4.327275] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.327321] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.327366] (unitree_guide2) StdoutLine: {'line': b'3: +  _qGoal = vec12ToVec34(_robModel->getQ(_posFeet2BGoal, FrameType::BODY));\n'}
[4.327424] (unitree_guide2) StdoutLine: {'line': b'3: +  _qdGoal = vec12ToVec34(_robModel->getQd(_posFeet2B, _velFeet2BGoal, FrameType::BODY));\n'}
[4.327471] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.327531] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.327577] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/FSM/State_move_base.cpp':\n"}
[4.327624] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.327669] (unitree_guide2) StdoutLine: {'line': b'3: --- src/FSM/State_move_base.cpp\n'}
[4.327717] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/FSM/State_move_base.cpp.uncrustify\n'}
[4.327763] (unitree_guide2) StdoutLine: {'line': b'3: @@ -8,6 +8,7 @@\n'}
[4.327809] (unitree_guide2) StdoutLine: {'line': b'3: -State_move_base::State_move_base(CtrlComponents *ctrlComp)\n'}
[4.327854] (unitree_guide2) StdoutLine: {'line': b'3: -    :State_Trotting(ctrlComp){\n'}
[4.327900] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateName = FSMStateName::MOVE_BASE;\n'}
[4.327945] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateNameString = "move_base";\n'}
[4.327991] (unitree_guide2) StdoutLine: {'line': b'3: -    initRecv();\n'}
[4.328036] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.328081] (unitree_guide2) StdoutLine: {'line': b'3: +State_move_base::State_move_base(CtrlComponents * ctrlComp)\n'}
[4.328126] (unitree_guide2) StdoutLine: {'line': b'3: +: State_Trotting(ctrlComp)\n'}
[4.328171] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.328215] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateName = FSMStateName::MOVE_BASE;\n'}
[4.328261] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateNameString = "move_base";\n'}
[4.328311] (unitree_guide2) StdoutLine: {'line': b'3: +  initRecv();\n'}
[4.328356] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.328402] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16,10 +17,9 @@\n'}
[4.328448] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_move_base::checkChange(){\n'}
[4.328507] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.328551] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.328595] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.328640] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.328685] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.328730] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.328774] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.328818] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::MOVE_BASE;\n'}
[4.328862] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.328906] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_move_base::checkChange()\n'}
[4.328949] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.328993] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.329037] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.329081] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.329124] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.329168] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.329212] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::MOVE_BASE;\n'}
[4.329257] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.329301] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,3 +28,4 @@\n'}
[4.329346] (unitree_guide2) StdoutLine: {'line': b'3: -void State_move_base::getUserCmd(){\n'}
[4.329391] (unitree_guide2) StdoutLine: {'line': b'3: -    setHighCmd(_vx, _vy, _wz);\n'}
[4.329435] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::spinOnce();\n'}
[4.329479] (unitree_guide2) StdoutLine: {'line': b'3: +void State_move_base::getUserCmd()\n'}
[4.329537] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.329581] (unitree_guide2) StdoutLine: {'line': b'3: +  setHighCmd(_vx, _vy, _wz);\n'}
[4.329626] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::spinOnce();\n'}
[4.329671] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,4 +34,5 @@\n'}
[4.329716] (unitree_guide2) StdoutLine: {'line': b'3: -void State_move_base::twistCallback(const geometry_msgs::Twist& msg){\n'}
[4.329761] (unitree_guide2) StdoutLine: {'line': b'3: -    _vx = msg.linear.x;\n'}
[4.329806] (unitree_guide2) StdoutLine: {'line': b'3: -    _vy = msg.linear.y;\n'}
[4.329852] (unitree_guide2) StdoutLine: {'line': b'3: -    _wz = msg.angular.z;\n'}
[4.329897] (unitree_guide2) StdoutLine: {'line': b'3: +void State_move_base::twistCallback(const geometry_msgs::Twist & msg)\n'}
[4.329943] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.329989] (unitree_guide2) StdoutLine: {'line': b'3: +  _vx = msg.linear.x;\n'}
[4.330035] (unitree_guide2) StdoutLine: {'line': b'3: +  _vy = msg.linear.y;\n'}
[4.330081] (unitree_guide2) StdoutLine: {'line': b'3: +  _wz = msg.angular.z;\n'}
[4.330126] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39,2 +41,3 @@\n'}
[4.330171] (unitree_guide2) StdoutLine: {'line': b'3: -void State_move_base::initRecv(){\n'}
[4.330216] (unitree_guide2) StdoutLine: {'line': b'3: -    _cmdSub = _nm.subscribe("/cmd_vel", 1, &State_move_base::twistCallback, this);\n'}
[4.330261] (unitree_guide2) StdoutLine: {'line': b'3: +void State_move_base::initRecv()\n'}
[4.330306] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.330351] (unitree_guide2) StdoutLine: {'line': b'3: +  _cmdSub = _nm.subscribe("/cmd_vel", 1, &State_move_base::twistCallback, this);\n'}
[4.330402] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49,11 +52,13 @@\n'}
[4.330447] (unitree_guide2) StdoutLine: {'line': b'3: -State_move_base::State_move_base(CtrlComponents *ctrlComp)\n'}
[4.330492] (unitree_guide2) StdoutLine: {'line': b'3: -    :State_Trotting(ctrlComp){\n'}
[4.330537] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateName = FSMStateName::MOVE_BASE;\n'}
[4.330582] (unitree_guide2) StdoutLine: {'line': b'3: -    _stateNameString = "move_base";\n'}
[4.330628] (unitree_guide2) StdoutLine: {'line': b'3: -    _nm = rclcpp::Node::make_shared("state_mb");\n'}
[4.330673] (unitree_guide2) StdoutLine: {'line': b'3: -    auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(\n'}
[4.330719] (unitree_guide2) StdoutLine: {'line': b'3: -        rclcpp::ExecutorOptions(), 1\n'}
[4.330765] (unitree_guide2) StdoutLine: {'line': b'3: -    );\n'}
[4.330810] (unitree_guide2) StdoutLine: {'line': b'3: -    executor->add_node(_nm);\n'}
[4.330855] (unitree_guide2) StdoutLine: {'line': b'3: -    executor_thread = std::thread([executor] (){\n'}
[4.330901] (unitree_guide2) StdoutLine: {'line': b'3: -        executor->spin();\n'}
[4.330946] (unitree_guide2) StdoutLine: {'line': b'3: +State_move_base::State_move_base(CtrlComponents * ctrlComp)\n'}
[4.330992] (unitree_guide2) StdoutLine: {'line': b'3: +: State_Trotting(ctrlComp)\n'}
[4.331036] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.331081] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateName = FSMStateName::MOVE_BASE;\n'}
[4.331126] (unitree_guide2) StdoutLine: {'line': b'3: +  _stateNameString = "move_base";\n'}
[4.331171] (unitree_guide2) StdoutLine: {'line': b'3: +  _nm = rclcpp::Node::make_shared("state_mb");\n'}
[4.331216] (unitree_guide2) StdoutLine: {'line': b'3: +  auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(\n'}
[4.331262] (unitree_guide2) StdoutLine: {'line': b'3: +    rclcpp::ExecutorOptions(), 1\n'}
[4.331307] (unitree_guide2) StdoutLine: {'line': b'3: +  );\n'}
[4.331353] (unitree_guide2) StdoutLine: {'line': b'3: +  executor->add_node(_nm);\n'}
[4.331398] (unitree_guide2) StdoutLine: {'line': b'3: +  executor_thread = std::thread(\n'}
[4.331444] (unitree_guide2) StdoutLine: {'line': b'3: +    [executor]() {\n'}
[4.331490] (unitree_guide2) StdoutLine: {'line': b'3: +      executor->spin();\n'}
[4.331535] (unitree_guide2) StdoutLine: {'line': b'3: @@ -61,2 +66,2 @@\n'}
[4.331584] (unitree_guide2) StdoutLine: {'line': b'3: -    executor_thread.detach();\n'}
[4.331631] (unitree_guide2) StdoutLine: {'line': b'3: -    initRecv();\n'}
[4.331676] (unitree_guide2) StdoutLine: {'line': b'3: +  executor_thread.detach();\n'}
[4.331721] (unitree_guide2) StdoutLine: {'line': b'3: +  initRecv();\n'}
[4.331766] (unitree_guide2) StdoutLine: {'line': b'3: @@ -65,10 +70,9 @@\n'}
[4.331811] (unitree_guide2) StdoutLine: {'line': b'3: -FSMStateName State_move_base::checkChange(){\n'}
[4.331856] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_lowState->userCmd == UserCommand::L2_B){\n'}
[4.331901] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::PASSIVE;\n'}
[4.331946] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.331991] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(_lowState->userCmd == UserCommand::L2_A){\n'}
[4.332037] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::FIXEDSTAND;\n'}
[4.332082] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.332127] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.332172] (unitree_guide2) StdoutLine: {'line': b'3: -        return FSMStateName::MOVE_BASE;\n'}
[4.332217] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.332261] (unitree_guide2) StdoutLine: {'line': b'3: +FSMStateName State_move_base::checkChange()\n'}
[4.332306] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.332352] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_lowState->userCmd == UserCommand::L2_B) {\n'}
[4.332397] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::PASSIVE;\n'}
[4.332446] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {\n'}
[4.332504] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::FIXEDSTAND;\n'}
[4.332595] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.332639] (unitree_guide2) StdoutLine: {'line': b'3: +    return FSMStateName::MOVE_BASE;\n'}
[4.332683] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.332727] (unitree_guide2) StdoutLine: {'line': b'3: @@ -77,2 +81,3 @@\n'}
[4.332771] (unitree_guide2) StdoutLine: {'line': b'3: -void State_move_base::getUserCmd(){\n'}
[4.332815] (unitree_guide2) StdoutLine: {'line': b'3: -    setHighCmd(_vx, _vy, _wz);\n'}
[4.332859] (unitree_guide2) StdoutLine: {'line': b'3: +void State_move_base::getUserCmd()\n'}
[4.332912] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.332957] (unitree_guide2) StdoutLine: {'line': b'3: +  setHighCmd(_vx, _vy, _wz);\n'}
[4.333002] (unitree_guide2) StdoutLine: {'line': b'3: @@ -81,4 +86,5 @@\n'}
[4.333047] (unitree_guide2) StdoutLine: {'line': b'3: -void State_move_base::twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg){\n'}
[4.333093] (unitree_guide2) StdoutLine: {'line': b'3: -    _vx = msg->linear.x;\n'}
[4.333137] (unitree_guide2) StdoutLine: {'line': b'3: -    _vy = msg->linear.y;\n'}
[4.333184] (unitree_guide2) StdoutLine: {'line': b'3: -    _wz = msg->angular.z;\n'}
[4.333230] (unitree_guide2) StdoutLine: {'line': b'3: +void State_move_base::twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg)\n'}
[4.333275] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.333320] (unitree_guide2) StdoutLine: {'line': b'3: +  _vx = msg->linear.x;\n'}
[4.333365] (unitree_guide2) StdoutLine: {'line': b'3: +  _vy = msg->linear.y;\n'}
[4.333409] (unitree_guide2) StdoutLine: {'line': b'3: +  _wz = msg->angular.z;\n'}
[4.333454] (unitree_guide2) StdoutLine: {'line': b'3: @@ -87,3 +93,7 @@\n'}
[4.333498] (unitree_guide2) StdoutLine: {'line': b'3: -void State_move_base::initRecv(){\n'}
[4.333541] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "Initialized cmd vel sub" << std::endl;\n'}
[4.333586] (unitree_guide2) StdoutLine: {'line': b'3: -    _cmdSub = _nm->create_subscription<geometry_msgs::msg::Twist>("/cmd_vel", 1, std::bind(&State_move_base::twistCallback, this, std::placeholders::_1));\n'}
[4.333632] (unitree_guide2) StdoutLine: {'line': b'3: +void State_move_base::initRecv()\n'}
[4.333689] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.333733] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "Initialized cmd vel sub" << std::endl;\n'}
[4.333776] (unitree_guide2) StdoutLine: {'line': b'3: +  _cmdSub =\n'}
[4.333819] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<geometry_msgs::msg::Twist>(\n'}
[4.333863] (unitree_guide2) StdoutLine: {'line': b'3: +    "/cmd_vel", 1,\n'}
[4.333906] (unitree_guide2) StdoutLine: {'line': b'3: +    std::bind(&State_move_base::twistCallback, this, std::placeholders::_1));\n'}
[4.333949] (unitree_guide2) StdoutLine: {'line': b'3: @@ -92 +102 @@\n'}
[4.333993] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // COMPILE_WITH_ROS2_MB\n'}
[4.334037] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // COMPILE_WITH_ROS2_MB\n'}
[4.334081] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.334124] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/Gait/FeetEndCal.cpp':\n"}
[4.334168] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.334210] (unitree_guide2) StdoutLine: {'line': b'3: --- src/Gait/FeetEndCal.cpp\n'}
[4.338150] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/Gait/FeetEndCal.cpp.uncrustify\n'}
[4.338331] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,5 +6,6 @@\n'}
[4.338382] (unitree_guide2) StdoutLine: {'line': b'3: -FeetEndCal::FeetEndCal(CtrlComponents *ctrlComp)\n'}
[4.338429] (unitree_guide2) StdoutLine: {'line': b'3: -           : _est(ctrlComp->estimator), _lowState(ctrlComp->lowState),\n'}
[4.338494] (unitree_guide2) StdoutLine: {'line': b'3: -             _robModel(ctrlComp->robotModel){\n'}
[4.338560] (unitree_guide2) StdoutLine: {'line': b'3: -    _Tstance  = ctrlComp->waveGen->getTstance();\n'}
[4.338608] (unitree_guide2) StdoutLine: {'line': b'3: -    _Tswing   = ctrlComp->waveGen->getTswing();\n'}
[4.338656] (unitree_guide2) StdoutLine: {'line': b'3: +FeetEndCal::FeetEndCal(CtrlComponents * ctrlComp)\n'}
[4.338703] (unitree_guide2) StdoutLine: {'line': b'3: +: _est(ctrlComp->estimator), _lowState(ctrlComp->lowState),\n'}
[4.338759] (unitree_guide2) StdoutLine: {'line': b'3: +  _robModel(ctrlComp->robotModel)\n'}
[4.338804] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.338848] (unitree_guide2) StdoutLine: {'line': b'3: +  _Tstance = ctrlComp->waveGen->getTstance();\n'}
[4.338892] (unitree_guide2) StdoutLine: {'line': b'3: +  _Tswing = ctrlComp->waveGen->getTswing();\n'}
[4.338961] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,3 +13,3 @@\n'}
[4.339033] (unitree_guide2) StdoutLine: {'line': b'3: -    _kx = 0.005;\n'}
[4.339078] (unitree_guide2) StdoutLine: {'line': b'3: -    _ky = 0.005;\n'}
[4.339120] (unitree_guide2) StdoutLine: {'line': b'3: -    _kyaw = 0.005;\n'}
[4.339163] (unitree_guide2) StdoutLine: {'line': b'3: +  _kx = 0.005;\n'}
[4.339206] (unitree_guide2) StdoutLine: {'line': b'3: +  _ky = 0.005;\n'}
[4.339248] (unitree_guide2) StdoutLine: {'line': b'3: +  _kyaw = 0.005;\n'}
[4.339291] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16,5 +17,5 @@\n'}
[4.339334] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 feetPosBody = _robModel->getFeetPosIdeal();\n'}
[4.339377] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.339420] (unitree_guide2) StdoutLine: {'line': b'3: -        _feetRadius(i)    = sqrt( pow(feetPosBody(0, i), 2) + pow(feetPosBody(1, i), 2) );\n'}
[4.339464] (unitree_guide2) StdoutLine: {'line': b'3: -        _feetInitAngle(i) = atan2(feetPosBody(1, i), feetPosBody(0, i));\n'}
[4.339508] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.339551] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 feetPosBody = _robModel->getFeetPosIdeal();\n'}
[4.339595] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.339638] (unitree_guide2) StdoutLine: {'line': b'3: +    _feetRadius(i) = sqrt(pow(feetPosBody(0, i), 2) + pow(feetPosBody(1, i), 2) );\n'}
[4.339683] (unitree_guide2) StdoutLine: {'line': b'3: +    _feetInitAngle(i) = atan2(feetPosBody(1, i), feetPosBody(0, i));\n'}
[4.339736] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.339920] (unitree_guide2) StdoutLine: {'line': b'3: @@ -23 +24,2 @@\n'}
[4.339975] (unitree_guide2) StdoutLine: {'line': b'3: -FeetEndCal::~FeetEndCal(){\n'}
[4.340020] (unitree_guide2) StdoutLine: {'line': b'3: +FeetEndCal::~FeetEndCal()\n'}
[4.340064] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.340107] (unitree_guide2) StdoutLine: {'line': b'3: @@ -27,3 +29,4 @@\n'}
[4.340151] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 FeetEndCal::calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase){\n'}
[4.340196] (unitree_guide2) StdoutLine: {'line': b'3: -    _bodyVelGlobal = _est->getVelocity();\n'}
[4.340239] (unitree_guide2) StdoutLine: {'line': b'3: -    _bodyWGlobal = _lowState->getGyroGlobal();\n'}
[4.340282] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 FeetEndCal::calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase)\n'}
[4.340327] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.340370] (unitree_guide2) StdoutLine: {'line': b'3: +  _bodyVelGlobal = _est->getVelocity();\n'}
[4.340414] (unitree_guide2) StdoutLine: {'line': b'3: +  _bodyWGlobal = _lowState->getGyroGlobal();\n'}
[4.340458] (unitree_guide2) StdoutLine: {'line': b'3: @@ -31,3 +34,5 @@\n'}
[4.340501] (unitree_guide2) StdoutLine: {'line': b'3: -    _nextStep(0) = _bodyVelGlobal(0)*(1-phase)*_Tswing + _bodyVelGlobal(0)*_Tstance/2 + _kx*(_bodyVelGlobal(0) - vxyGoalGlobal(0));\n'}
[4.340548] (unitree_guide2) StdoutLine: {'line': b'3: -    _nextStep(1) = _bodyVelGlobal(1)*(1-phase)*_Tswing + _bodyVelGlobal(1)*_Tstance/2 + _ky*(_bodyVelGlobal(1) - vxyGoalGlobal(1));\n'}
[4.340611] (unitree_guide2) StdoutLine: {'line': b'3: -    _nextStep(2) = 0;\n'}
[4.340671] (unitree_guide2) StdoutLine: {'line': b'3: +  _nextStep(0) = _bodyVelGlobal(0) * (1 - phase) * _Tswing + _bodyVelGlobal(0) * _Tstance / 2 +\n'}
[4.340723] (unitree_guide2) StdoutLine: {'line': b'3: +    _kx * (_bodyVelGlobal(0) - vxyGoalGlobal(0));\n'}
[4.340766] (unitree_guide2) StdoutLine: {'line': b'3: +  _nextStep(1) = _bodyVelGlobal(1) * (1 - phase) * _Tswing + _bodyVelGlobal(1) * _Tstance / 2 +\n'}
[4.340811] (unitree_guide2) StdoutLine: {'line': b'3: +    _ky * (_bodyVelGlobal(1) - vxyGoalGlobal(1));\n'}
[4.340855] (unitree_guide2) StdoutLine: {'line': b'3: +  _nextStep(2) = 0;\n'}
[4.340898] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35,3 +40,3 @@\n'}
[4.340941] (unitree_guide2) StdoutLine: {'line': b'3: -    _yaw = _lowState->getYaw();\n'}
[4.340984] (unitree_guide2) StdoutLine: {'line': b'3: -    _dYaw = _lowState->getDYaw();\n'}
[4.341029] (unitree_guide2) StdoutLine: {'line': b'3: -    _nextYaw = _dYaw*(1-phase)*_Tswing + _dYaw*_Tstance/2 + _kyaw*(dYawGoal - _dYaw);\n'}
[4.341073] (unitree_guide2) StdoutLine: {'line': b'3: +  _yaw = _lowState->getYaw();\n'}
[4.341116] (unitree_guide2) StdoutLine: {'line': b'3: +  _dYaw = _lowState->getDYaw();\n'}
[4.341159] (unitree_guide2) StdoutLine: {'line': b'3: +  _nextYaw = _dYaw * (1 - phase) * _Tswing + _dYaw * _Tstance / 2 + _kyaw * (dYawGoal - _dYaw);\n'}
[4.341203] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39,2 +44,2 @@\n'}
[4.341249] (unitree_guide2) StdoutLine: {'line': b'3: -    _nextStep(0) += _feetRadius(legID) * cos(_yaw + _feetInitAngle(legID) + _nextYaw);\n'}
[4.341305] (unitree_guide2) StdoutLine: {'line': b'3: -    _nextStep(1) += _feetRadius(legID) * sin(_yaw + _feetInitAngle(legID) + _nextYaw);\n'}
[4.341350] (unitree_guide2) StdoutLine: {'line': b'3: +  _nextStep(0) += _feetRadius(legID) * cos(_yaw + _feetInitAngle(legID) + _nextYaw);\n'}
[4.341394] (unitree_guide2) StdoutLine: {'line': b'3: +  _nextStep(1) += _feetRadius(legID) * sin(_yaw + _feetInitAngle(legID) + _nextYaw);\n'}
[4.341438] (unitree_guide2) StdoutLine: {'line': b'3: @@ -42,2 +47,2 @@\n'}
[4.341482] (unitree_guide2) StdoutLine: {'line': b'3: -    _footPos = _est->getPosition() + _nextStep;\n'}
[4.341526] (unitree_guide2) StdoutLine: {'line': b'3: -    _footPos(2) = 0.0;\n'}
[4.341570] (unitree_guide2) StdoutLine: {'line': b'3: +  _footPos = _est->getPosition() + _nextStep;\n'}
[4.341696] (unitree_guide2) StdoutLine: {'line': b'3: +  _footPos(2) = 0.0;\n'}
[4.341755] (unitree_guide2) StdoutLine: {'line': b'3: @@ -45,2 +50,2 @@\n'}
[4.341800] (unitree_guide2) StdoutLine: {'line': b'3: -    return _footPos;\n'}
[4.341844] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.341888] (unitree_guide2) StdoutLine: {'line': b'3: +  return _footPos;\n'}
[4.341931] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.341974] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.342017] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/Gait/GaitGenerator.cpp':\n"}
[4.342061] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.342104] (unitree_guide2) StdoutLine: {'line': b'3: --- src/Gait/GaitGenerator.cpp\n'}
[4.342148] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/Gait/GaitGenerator.cpp.uncrustify\n'}
[4.342191] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,6 +6,7 @@\n'}
[4.342235] (unitree_guide2) StdoutLine: {'line': b'3: -GaitGenerator::GaitGenerator(CtrlComponents *ctrlComp)\n'}
[4.342279] (unitree_guide2) StdoutLine: {'line': b'3: -              : _waveG(ctrlComp->waveGen), _est(ctrlComp->estimator), \n'}
[4.342324] (unitree_guide2) StdoutLine: {'line': b'3: -                _phase(ctrlComp->phase), _contact(ctrlComp->contact), \n'}
[4.342368] (unitree_guide2) StdoutLine: {'line': b'3: -                _robModel(ctrlComp->robotModel), _state(ctrlComp->lowState){\n'}
[4.342412] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetCal = new FeetEndCal(ctrlComp);\n'}
[4.342457] (unitree_guide2) StdoutLine: {'line': b'3: -    _firstRun = true;\n'}
[4.342510] (unitree_guide2) StdoutLine: {'line': b'3: +GaitGenerator::GaitGenerator(CtrlComponents * ctrlComp)\n'}
[4.342554] (unitree_guide2) StdoutLine: {'line': b'3: +: _waveG(ctrlComp->waveGen), _est(ctrlComp->estimator),\n'}
[4.342597] (unitree_guide2) StdoutLine: {'line': b'3: +  _phase(ctrlComp->phase), _contact(ctrlComp->contact),\n'}
[4.342704] (unitree_guide2) StdoutLine: {'line': b'3: +  _robModel(ctrlComp->robotModel), _state(ctrlComp->lowState)\n'}
[4.342754] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.342797] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetCal = new FeetEndCal(ctrlComp);\n'}
[4.342840] (unitree_guide2) StdoutLine: {'line': b'3: +  _firstRun = true;\n'}
[4.342883] (unitree_guide2) StdoutLine: {'line': b'3: @@ -14 +15,2 @@\n'}
[4.342926] (unitree_guide2) StdoutLine: {'line': b'3: -GaitGenerator::~GaitGenerator(){\n'}
[4.342969] (unitree_guide2) StdoutLine: {'line': b'3: +GaitGenerator::~GaitGenerator()\n'}
[4.343012] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.343056] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17,4 +19,5 @@\n'}
[4.343099] (unitree_guide2) StdoutLine: {'line': b'3: -void GaitGenerator::setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight){\n'}
[4.343144] (unitree_guide2) StdoutLine: {'line': b'3: -    _vxyGoal = vxyGoalGlobal;\n'}
[4.343188] (unitree_guide2) StdoutLine: {'line': b'3: -    _dYawGoal = dYawGoal;\n'}
[4.343231] (unitree_guide2) StdoutLine: {'line': b'3: -    _gaitHeight = gaitHeight;\n'}
[4.343274] (unitree_guide2) StdoutLine: {'line': b'3: +void GaitGenerator::setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight)\n'}
[4.343324] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.343369] (unitree_guide2) StdoutLine: {'line': b'3: +  _vxyGoal = vxyGoalGlobal;\n'}
[4.343412] (unitree_guide2) StdoutLine: {'line': b'3: +  _dYawGoal = dYawGoal;\n'}
[4.343456] (unitree_guide2) StdoutLine: {'line': b'3: +  _gaitHeight = gaitHeight;\n'}
[4.343499] (unitree_guide2) StdoutLine: {'line': b'3: @@ -23,3 +26,4 @@\n'}
[4.343542] (unitree_guide2) StdoutLine: {'line': b'3: -void GaitGenerator::restart(){\n'}
[4.343716] (unitree_guide2) StdoutLine: {'line': b'3: -    _firstRun = true;\n'}
[4.343774] (unitree_guide2) StdoutLine: {'line': b'3: -    _vxyGoal.setZero();\n'}
[4.343822] (unitree_guide2) StdoutLine: {'line': b'3: +void GaitGenerator::restart()\n'}
[4.343868] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.343916] (unitree_guide2) StdoutLine: {'line': b'3: +  _firstRun = true;\n'}
[4.343961] (unitree_guide2) StdoutLine: {'line': b'3: +  _vxyGoal.setZero();\n'}
[4.344025] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,4 +32,19 @@\n'}
[4.344070] (unitree_guide2) StdoutLine: {'line': b'3: -void GaitGenerator::run(Vec34 &feetPos, Vec34 &feetVel){\n'}
[4.344118] (unitree_guide2) StdoutLine: {'line': b'3: -    if(_firstRun){\n'}
[4.344164] (unitree_guide2) StdoutLine: {'line': b'3: -        _startP = _est->getFeetPos();\n'}
[4.344286] (unitree_guide2) StdoutLine: {'line': b'3: -        _firstRun = false;\n'}
[4.344343] (unitree_guide2) StdoutLine: {'line': b'3: +void GaitGenerator::run(Vec34 & feetPos, Vec34 & feetVel)\n'}
[4.344387] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.344455] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_firstRun) {\n'}
[4.344521] (unitree_guide2) StdoutLine: {'line': b'3: +    _startP = _est->getFeetPos();\n'}
[4.344569] (unitree_guide2) StdoutLine: {'line': b'3: +    _firstRun = false;\n'}
[4.344668] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.344738] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.344787] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.344918] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((*_contact)(i) == 1) {\n'}
[4.344968] (unitree_guide2) StdoutLine: {'line': b'3: +      if ((*_phase)(i) < 0.5) {\n'}
[4.345012] (unitree_guide2) StdoutLine: {'line': b'3: +        _startP.col(i) = _est->getFootPos(i);\n'}
[4.345057] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.345100] (unitree_guide2) StdoutLine: {'line': b'3: +      feetPos.col(i) = _startP.col(i);\n'}
[4.345167] (unitree_guide2) StdoutLine: {'line': b'3: +      feetVel.col(i).setZero();\n'}
[4.345212] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.345270] (unitree_guide2) StdoutLine: {'line': b'3: +      _endP.col(i) = _feetCal->calFootPos(i, _vxyGoal, _dYawGoal, (*_phase)(i));\n'}
[4.345327] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.345371] (unitree_guide2) StdoutLine: {'line': b'3: +      feetPos.col(i) = getFootPos(i);\n'}
[4.345415] (unitree_guide2) StdoutLine: {'line': b'3: +      feetVel.col(i) = getFootVel(i);\n'}
[4.345491] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,18 +52,3 @@\n'}
[4.345539] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.345582] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.345625] (unitree_guide2) StdoutLine: {'line': b'3: -        if((*_contact)(i) == 1){\n'}
[4.345689] (unitree_guide2) StdoutLine: {'line': b'3: -            if((*_phase)(i) < 0.5){\n'}
[4.345736] (unitree_guide2) StdoutLine: {'line': b'3: -                _startP.col(i) = _est->getFootPos(i);\n'}
[4.345786] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[4.345833] (unitree_guide2) StdoutLine: {'line': b'3: -            feetPos.col(i) = _startP.col(i);\n'}
[4.345882] (unitree_guide2) StdoutLine: {'line': b'3: -            feetVel.col(i).setZero();\n'}
[4.345929] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.345978] (unitree_guide2) StdoutLine: {'line': b'3: -        else{\n'}
[4.346025] (unitree_guide2) StdoutLine: {'line': b'3: -            _endP.col(i) = _feetCal->calFootPos(i, _vxyGoal, _dYawGoal, (*_phase)(i));\n'}
[4.346075] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.346121] (unitree_guide2) StdoutLine: {'line': b'3: -            feetPos.col(i) = getFootPos(i);\n'}
[4.346173] (unitree_guide2) StdoutLine: {'line': b'3: -            feetVel.col(i) = getFootVel(i);\n'}
[4.346226] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.346273] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.346319] (unitree_guide2) StdoutLine: {'line': b'3: -    _pastP = feetPos;\n'}
[4.346366] (unitree_guide2) StdoutLine: {'line': b'3: -    _phasePast = *_phase;\n'}
[4.346412] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.346459] (unitree_guide2) StdoutLine: {'line': b'3: +  _pastP = feetPos;\n'}
[4.346505] (unitree_guide2) StdoutLine: {'line': b'3: +  _phasePast = *_phase;\n'}
[4.346552] (unitree_guide2) StdoutLine: {'line': b'3: @@ -53,2 +57,3 @@\n'}
[4.346618] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 GaitGenerator::getFootPos(int i){\n'}
[4.346744] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 footPos;\n'}
[4.346814] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 GaitGenerator::getFootPos(int i)\n'}
[4.346890] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.346975] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 footPos;\n'}
[4.347048] (unitree_guide2) StdoutLine: {'line': b'3: @@ -56,5 +61,5 @@\n'}
[4.347095] (unitree_guide2) StdoutLine: {'line': b'3: -    footPos(0) = cycloidXYPosition(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));\n'}
[4.347141] (unitree_guide2) StdoutLine: {'line': b'3: -    footPos(1) = cycloidXYPosition(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));\n'}
[4.347185] (unitree_guide2) StdoutLine: {'line': b'3: -    footPos(2) =  cycloidZPosition(_startP.col(i)(2), _gaitHeight, (*_phase)(i));\n'}
[4.347231] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.347275] (unitree_guide2) StdoutLine: {'line': b'3: -    return footPos;\n'}
[4.347319] (unitree_guide2) StdoutLine: {'line': b'3: +  footPos(0) = cycloidXYPosition(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));\n'}
[4.347363] (unitree_guide2) StdoutLine: {'line': b'3: +  footPos(1) = cycloidXYPosition(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));\n'}
[4.347441] (unitree_guide2) StdoutLine: {'line': b'3: +  footPos(2) = cycloidZPosition(_startP.col(i)(2), _gaitHeight, (*_phase)(i));\n'}
[4.347487] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.347536] (unitree_guide2) StdoutLine: {'line': b'3: +  return footPos;\n'}
[4.347580] (unitree_guide2) StdoutLine: {'line': b'3: @@ -63,2 +68,3 @@\n'}
[4.347623] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 GaitGenerator::getFootVel(int i){\n'}
[4.347667] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 footVel;\n'}
[4.347718] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 GaitGenerator::getFootVel(int i)\n'}
[4.347770] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.347818] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 footVel;\n'}
[4.347864] (unitree_guide2) StdoutLine: {'line': b'3: @@ -66,3 +72,3 @@\n'}
[4.347911] (unitree_guide2) StdoutLine: {'line': b'3: -    footVel(0) = cycloidXYVelocity(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));\n'}
[4.347958] (unitree_guide2) StdoutLine: {'line': b'3: -    footVel(1) = cycloidXYVelocity(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));\n'}
[4.348006] (unitree_guide2) StdoutLine: {'line': b'3: -    footVel(2) =  cycloidZVelocity(_gaitHeight, (*_phase)(i));\n'}
[4.348054] (unitree_guide2) StdoutLine: {'line': b'3: +  footVel(0) = cycloidXYVelocity(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));\n'}
[4.348102] (unitree_guide2) StdoutLine: {'line': b'3: +  footVel(1) = cycloidXYVelocity(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));\n'}
[4.348149] (unitree_guide2) StdoutLine: {'line': b'3: +  footVel(2) = cycloidZVelocity(_gaitHeight, (*_phase)(i));\n'}
[4.348200] (unitree_guide2) StdoutLine: {'line': b'3: @@ -70 +76 @@\n'}
[4.348253] (unitree_guide2) StdoutLine: {'line': b'3: -    return footVel;\n'}
[4.348315] (unitree_guide2) StdoutLine: {'line': b'3: +  return footVel;\n'}
[4.348360] (unitree_guide2) StdoutLine: {'line': b'3: @@ -73,3 +79,4 @@\n'}
[4.348405] (unitree_guide2) StdoutLine: {'line': b'3: -float GaitGenerator::cycloidXYPosition(float start, float end, float phase){\n'}
[4.348468] (unitree_guide2) StdoutLine: {'line': b'3: -    float phasePI = 2 * M_PI * phase;\n'}
[4.348516] (unitree_guide2) StdoutLine: {'line': b'3: -    return (end - start)*(phasePI - sin(phasePI))/(2*M_PI) + start;\n'}
[4.348561] (unitree_guide2) StdoutLine: {'line': b'3: +float GaitGenerator::cycloidXYPosition(float start, float end, float phase)\n'}
[4.348608] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.348652] (unitree_guide2) StdoutLine: {'line': b'3: +  float phasePI = 2 * M_PI * phase;\n'}
[4.348698] (unitree_guide2) StdoutLine: {'line': b'3: +  return (end - start) * (phasePI - sin(phasePI)) / (2 * M_PI) + start;\n'}
[4.348743] (unitree_guide2) StdoutLine: {'line': b'3: @@ -78,3 +85,4 @@\n'}
[4.348796] (unitree_guide2) StdoutLine: {'line': b'3: -float GaitGenerator::cycloidXYVelocity(float start, float end, float phase){\n'}
[4.348842] (unitree_guide2) StdoutLine: {'line': b'3: -    float phasePI = 2 * M_PI * phase;\n'}
[4.348886] (unitree_guide2) StdoutLine: {'line': b'3: -    return (end - start)*(1 - cos(phasePI)) / _waveG->getTswing();\n'}
[4.348933] (unitree_guide2) StdoutLine: {'line': b'3: +float GaitGenerator::cycloidXYVelocity(float start, float end, float phase)\n'}
[4.348978] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.349024] (unitree_guide2) StdoutLine: {'line': b'3: +  float phasePI = 2 * M_PI * phase;\n'}
[4.349088] (unitree_guide2) StdoutLine: {'line': b'3: +  return (end - start) * (1 - cos(phasePI)) / _waveG->getTswing();\n'}
[4.349137] (unitree_guide2) StdoutLine: {'line': b'3: @@ -83,3 +91,4 @@\n'}
[4.349183] (unitree_guide2) StdoutLine: {'line': b'3: -float GaitGenerator::cycloidZPosition(float start, float h, float phase){\n'}
[4.349233] (unitree_guide2) StdoutLine: {'line': b'3: -    float phasePI = 2 * M_PI * phase;\n'}
[4.349279] (unitree_guide2) StdoutLine: {'line': b'3: -    return h*(1 - cos(phasePI))/2 + start;\n'}
[4.349334] (unitree_guide2) StdoutLine: {'line': b'3: +float GaitGenerator::cycloidZPosition(float start, float h, float phase)\n'}
[4.349382] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.349430] (unitree_guide2) StdoutLine: {'line': b'3: +  float phasePI = 2 * M_PI * phase;\n'}
[4.349481] (unitree_guide2) StdoutLine: {'line': b'3: +  return h * (1 - cos(phasePI)) / 2 + start;\n'}
[4.349528] (unitree_guide2) StdoutLine: {'line': b'3: @@ -88,4 +97,5 @@\n'}
[4.349574] (unitree_guide2) StdoutLine: {'line': b'3: -float GaitGenerator::cycloidZVelocity(float h, float phase){\n'}
[4.349621] (unitree_guide2) StdoutLine: {'line': b'3: -    float phasePI = 2 * M_PI * phase;\n'}
[4.349667] (unitree_guide2) StdoutLine: {'line': b'3: -    return h*M_PI * sin(phasePI) / _waveG->getTswing();\n'}
[4.349715] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.349760] (unitree_guide2) StdoutLine: {'line': b'3: +float GaitGenerator::cycloidZVelocity(float h, float phase)\n'}
[4.349810] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.349863] (unitree_guide2) StdoutLine: {'line': b'3: +  float phasePI = 2 * M_PI * phase;\n'}
[4.349911] (unitree_guide2) StdoutLine: {'line': b'3: +  return h * M_PI * sin(phasePI) / _waveG->getTswing();\n'}
[4.349957] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.350005] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.350051] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/Gait/WaveGenerator.cpp':\n"}
[4.350099] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.350145] (unitree_guide2) StdoutLine: {'line': b'3: --- src/Gait/WaveGenerator.cpp\n'}
[4.350192] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/Gait/WaveGenerator.cpp.uncrustify\n'}
[4.350238] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10 +10 @@\n'}
[4.350361] (unitree_guide2) StdoutLine: {'line': b'3: -    : _period(period), _stRatio(stancePhaseRatio), _bias(bias)\n'}
[4.350428] (unitree_guide2) StdoutLine: {'line': b'3: +: _period(period), _stRatio(stancePhaseRatio), _bias(bias)\n'}
[4.350474] (unitree_guide2) StdoutLine: {'line': b'3: @@ -13,4 +13,9 @@\n'}
[4.350531] (unitree_guide2) StdoutLine: {'line': b'3: -    if ((_stRatio >= 1) || (_stRatio <= 0))\n'}
[4.350575] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.350619] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] The stancePhaseRatio of WaveGenerator should between (0, 1)" << std::endl;\n'}
[4.350665] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[4.350709] (unitree_guide2) StdoutLine: {'line': b'3: +  if ((_stRatio >= 1) || (_stRatio <= 0)) {\n'}
[4.350753] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] The stancePhaseRatio of WaveGenerator should between (0, 1)" << std::endl;\n'}
[4.350798] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[4.350843] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.350888] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.350933] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < bias.rows(); ++i) {\n'}
[4.350978] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((bias(i) > 1) || (bias(i) < 0)) {\n'}
[4.351023] (unitree_guide2) StdoutLine: {'line': b'3: +      std::cout << "[ERROR] The bias of WaveGenerator should between [0, 1]" << std::endl;\n'}
[4.351069] (unitree_guide2) StdoutLine: {'line': b'3: +      exit(-1);\n'}
[4.351114] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17,0 +23 @@\n'}
[4.351159] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.351205] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,13 +25,4 @@\n'}
[4.351249] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i(0); i < bias.rows(); ++i)\n'}
[4.351293] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.351337] (unitree_guide2) StdoutLine: {'line': b'3: -        if ((bias(i) > 1) || (bias(i) < 0))\n'}
[4.351382] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.351425] (unitree_guide2) StdoutLine: {'line': b'3: -            std::cout << "[ERROR] The bias of WaveGenerator should between [0, 1]" << std::endl;\n'}
[4.351470] (unitree_guide2) StdoutLine: {'line': b'3: -            exit(-1);\n'}
[4.351514] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.351580] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.351626] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.351690] (unitree_guide2) StdoutLine: {'line': b'3: -    _startT = getSystemTime();\n'}
[4.351738] (unitree_guide2) StdoutLine: {'line': b'3: -    _contactPast.setZero();\n'}
[4.351785] (unitree_guide2) StdoutLine: {'line': b'3: -    _phasePast << 0.5, 0.5, 0.5, 0.5;\n'}
[4.351831] (unitree_guide2) StdoutLine: {'line': b'3: -    _statusPast = WaveStatus::SWING_ALL;\n'}
[4.351877] (unitree_guide2) StdoutLine: {'line': b'3: +  _startT = getSystemTime();\n'}
[4.351922] (unitree_guide2) StdoutLine: {'line': b'3: +  _contactPast.setZero();\n'}
[4.351968] (unitree_guide2) StdoutLine: {'line': b'3: +  _phasePast << 0.5, 0.5, 0.5, 0.5;\n'}
[4.352013] (unitree_guide2) StdoutLine: {'line': b'3: +  _statusPast = WaveStatus::SWING_ALL;\n'}
[4.352063] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38 +35 @@\n'}
[4.352113] (unitree_guide2) StdoutLine: {'line': b'3: -void WaveGenerator::calcContactPhase(Vec4 &phaseResult, VecInt4 &contactResult, WaveStatus status)\n'}
[4.352174] (unitree_guide2) StdoutLine: {'line': b'3: +void WaveGenerator::calcContactPhase(Vec4 & phaseResult, VecInt4 & contactResult, WaveStatus status)\n'}
[4.352223] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41 +38 @@\n'}
[4.352269] (unitree_guide2) StdoutLine: {'line': b'3: -    calcWave(_phase, _contact, status);\n'}
[4.352317] (unitree_guide2) StdoutLine: {'line': b'3: +  calcWave(_phase, _contact, status);\n'}
[4.352368] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,16 +40,3 @@\n'}
[4.352416] (unitree_guide2) StdoutLine: {'line': b'3: -    if (status != _statusPast)\n'}
[4.352463] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.352511] (unitree_guide2) StdoutLine: {'line': b'3: -        if (_switchStatus.sum() == 0)\n'}
[4.352585] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.352633] (unitree_guide2) StdoutLine: {'line': b'3: -            _switchStatus.setOnes();\n'}
[4.352684] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.352733] (unitree_guide2) StdoutLine: {'line': b'3: -        calcWave(_phasePast, _contactPast, _statusPast);\n'}
[4.352784] (unitree_guide2) StdoutLine: {'line': b'3: -        // two special case\n'}
[4.352834] (unitree_guide2) StdoutLine: {'line': b'3: -        if ((status == WaveStatus::STANCE_ALL) && (_statusPast == WaveStatus::SWING_ALL))\n'}
[4.352884] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.352932] (unitree_guide2) StdoutLine: {'line': b'3: -            _contactPast.setOnes();\n'}
[4.352983] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.353030] (unitree_guide2) StdoutLine: {'line': b'3: -        else if ((status == WaveStatus::SWING_ALL) && (_statusPast == WaveStatus::STANCE_ALL))\n'}
[4.353079] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.353132] (unitree_guide2) StdoutLine: {'line': b'3: -            _contactPast.setZero();\n'}
[4.353182] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.353228] (unitree_guide2) StdoutLine: {'line': b'3: +  if (status != _statusPast) {\n'}
[4.353279] (unitree_guide2) StdoutLine: {'line': b'3: +    if (_switchStatus.sum() == 0) {\n'}
[4.353328] (unitree_guide2) StdoutLine: {'line': b'3: +      _switchStatus.setOnes();\n'}
[4.353379] (unitree_guide2) StdoutLine: {'line': b'3: @@ -59,0 +44,8 @@\n'}
[4.353429] (unitree_guide2) StdoutLine: {'line': b'3: +    calcWave(_phasePast, _contactPast, _statusPast);\n'}
[4.353484] (unitree_guide2) StdoutLine: {'line': b'3: +    // two special case\n'}
[4.353559] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((status == WaveStatus::STANCE_ALL) && (_statusPast == WaveStatus::SWING_ALL)) {\n'}
[4.353628] (unitree_guide2) StdoutLine: {'line': b'3: +      _contactPast.setOnes();\n'}
[4.353682] (unitree_guide2) StdoutLine: {'line': b'3: +    } else if ((status == WaveStatus::SWING_ALL) && (_statusPast == WaveStatus::STANCE_ALL)) {\n'}
[4.353747] (unitree_guide2) StdoutLine: {'line': b'3: +      _contactPast.setZero();\n'}
[4.353798] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.353851] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.353956] (unitree_guide2) StdoutLine: {'line': b'3: @@ -61,18 +53,8 @@\n'}
[4.354004] (unitree_guide2) StdoutLine: {'line': b'3: -    if (_switchStatus.sum() != 0)\n'}
[4.354052] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.354100] (unitree_guide2) StdoutLine: {'line': b'3: -        for (int i(0); i < 4; ++i)\n'}
[4.354148] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.354196] (unitree_guide2) StdoutLine: {'line': b'3: -            if (_contact(i) == _contactPast(i))\n'}
[4.354243] (unitree_guide2) StdoutLine: {'line': b'3: -            {\n'}
[4.354291] (unitree_guide2) StdoutLine: {'line': b'3: -                _switchStatus(i) = 0;\n'}
[4.354337] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[4.354385] (unitree_guide2) StdoutLine: {'line': b'3: -            else\n'}
[4.354432] (unitree_guide2) StdoutLine: {'line': b'3: -            {\n'}
[4.354479] (unitree_guide2) StdoutLine: {'line': b'3: -                _contact(i) = _contactPast(i);\n'}
[4.354527] (unitree_guide2) StdoutLine: {'line': b'3: -                _phase(i) = _phasePast(i);\n'}
[4.354591] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[4.354638] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.354690] (unitree_guide2) StdoutLine: {'line': b'3: -        if (_switchStatus.sum() == 0)\n'}
[4.354755] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.354819] (unitree_guide2) StdoutLine: {'line': b'3: -            _statusPast = status;\n'}
[4.354885] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.354955] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_switchStatus.sum() != 0) {\n'}
[4.355022] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[4.355089] (unitree_guide2) StdoutLine: {'line': b'3: +      if (_contact(i) == _contactPast(i)) {\n'}
[4.355159] (unitree_guide2) StdoutLine: {'line': b'3: +        _switchStatus(i) = 0;\n'}
[4.355222] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.355289] (unitree_guide2) StdoutLine: {'line': b'3: +        _contact(i) = _contactPast(i);\n'}
[4.355356] (unitree_guide2) StdoutLine: {'line': b'3: +        _phase(i) = _phasePast(i);\n'}
[4.355419] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.355485] (unitree_guide2) StdoutLine: {'line': b'3: @@ -79,0 +62,4 @@\n'}
[4.355563] (unitree_guide2) StdoutLine: {'line': b'3: +    if (_switchStatus.sum() == 0) {\n'}
[4.355620] (unitree_guide2) StdoutLine: {'line': b'3: +      _statusPast = status;\n'}
[4.355665] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.355711] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.355756] (unitree_guide2) StdoutLine: {'line': b'3: @@ -81,2 +67,2 @@\n'}
[4.355801] (unitree_guide2) StdoutLine: {'line': b'3: -    phaseResult = _phase;\n'}
[4.355846] (unitree_guide2) StdoutLine: {'line': b'3: -    contactResult = _contact;\n'}
[4.355891] (unitree_guide2) StdoutLine: {'line': b'3: +  phaseResult = _phase;\n'}
[4.355935] (unitree_guide2) StdoutLine: {'line': b'3: +  contactResult = _contact;\n'}
[4.355980] (unitree_guide2) StdoutLine: {'line': b'3: @@ -87 +73 @@\n'}
[4.356025] (unitree_guide2) StdoutLine: {'line': b'3: -    return _period * _stRatio;\n'}
[4.356070] (unitree_guide2) StdoutLine: {'line': b'3: +  return _period * _stRatio;\n'}
[4.356115] (unitree_guide2) StdoutLine: {'line': b'3: @@ -92 +78 @@\n'}
[4.356160] (unitree_guide2) StdoutLine: {'line': b'3: -    return _period * (1 - _stRatio);\n'}
[4.356206] (unitree_guide2) StdoutLine: {'line': b'3: +  return _period * (1 - _stRatio);\n'}
[4.356252] (unitree_guide2) StdoutLine: {'line': b'3: @@ -97 +83 @@\n'}
[4.356298] (unitree_guide2) StdoutLine: {'line': b'3: -    return _period;\n'}
[4.356343] (unitree_guide2) StdoutLine: {'line': b'3: +  return _period;\n'}
[4.356389] (unitree_guide2) StdoutLine: {'line': b'3: @@ -100 +86 @@\n'}
[4.356434] (unitree_guide2) StdoutLine: {'line': b'3: -void WaveGenerator::calcWave(Vec4 &phase, VecInt4 &contact, WaveStatus status)\n'}
[4.356496] (unitree_guide2) StdoutLine: {'line': b'3: +void WaveGenerator::calcWave(Vec4 & phase, VecInt4 & contact, WaveStatus status)\n'}
[4.356554] (unitree_guide2) StdoutLine: {'line': b'3: @@ -102,17 +88,11 @@\n'}
[4.356601] (unitree_guide2) StdoutLine: {'line': b'3: -    if (status == WaveStatus::WAVE_ALL)\n'}
[4.356647] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.356693] (unitree_guide2) StdoutLine: {'line': b'3: -        _passT = (double)(getSystemTime() - _startT) * 1e-6;\n'}
[4.356740] (unitree_guide2) StdoutLine: {'line': b'3: -        for (int i(0); i < 4; ++i)\n'}
[4.356786] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.356833] (unitree_guide2) StdoutLine: {'line': b'3: -            _normalT(i) = fmod(_passT + _period - _period * _bias(i), _period) / _period;\n'}
[4.356880] (unitree_guide2) StdoutLine: {'line': b'3: -            if (_normalT(i) < _stRatio)\n'}
[4.356928] (unitree_guide2) StdoutLine: {'line': b'3: -            {\n'}
[4.356975] (unitree_guide2) StdoutLine: {'line': b'3: -                contact(i) = 1;\n'}
[4.357022] (unitree_guide2) StdoutLine: {'line': b'3: -                phase(i) = _normalT(i) / _stRatio;\n'}
[4.357069] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[4.357116] (unitree_guide2) StdoutLine: {'line': b'3: -            else\n'}
[4.357162] (unitree_guide2) StdoutLine: {'line': b'3: -            {\n'}
[4.357208] (unitree_guide2) StdoutLine: {'line': b'3: -                contact(i) = 0;\n'}
[4.357254] (unitree_guide2) StdoutLine: {'line': b'3: -                phase(i) = (_normalT(i) - _stRatio) / (1 - _stRatio);\n'}
[4.357300] (unitree_guide2) StdoutLine: {'line': b'3: -            }\n'}
[4.357347] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.357398] (unitree_guide2) StdoutLine: {'line': b'3: +  if (status == WaveStatus::WAVE_ALL) {\n'}
[4.357584] (unitree_guide2) StdoutLine: {'line': b'3: +    _passT = (double)(getSystemTime() - _startT) * 1e-6;\n'}
[4.357651] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[4.357697] (unitree_guide2) StdoutLine: {'line': b'3: +      _normalT(i) = fmod(_passT + _period - _period * _bias(i), _period) / _period;\n'}
[4.357744] (unitree_guide2) StdoutLine: {'line': b'3: +      if (_normalT(i) < _stRatio) {\n'}
[4.357789] (unitree_guide2) StdoutLine: {'line': b'3: +        contact(i) = 1;\n'}
[4.357834] (unitree_guide2) StdoutLine: {'line': b'3: +        phase(i) = _normalT(i) / _stRatio;\n'}
[4.357880] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.357927] (unitree_guide2) StdoutLine: {'line': b'3: +        contact(i) = 0;\n'}
[4.357972] (unitree_guide2) StdoutLine: {'line': b'3: +        phase(i) = (_normalT(i) - _stRatio) / (1 - _stRatio);\n'}
[4.358019] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.358065] (unitree_guide2) StdoutLine: {'line': b'3: @@ -120,11 +100,8 @@\n'}
[4.358110] (unitree_guide2) StdoutLine: {'line': b'3: -    else if (status == WaveStatus::SWING_ALL)\n'}
[4.358155] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.358200] (unitree_guide2) StdoutLine: {'line': b'3: -        contact.setZero();\n'}
[4.358245] (unitree_guide2) StdoutLine: {'line': b'3: -        phase << 0.5, 0.5, 0.5, 0.5;\n'}
[4.358290] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.358334] (unitree_guide2) StdoutLine: {'line': b'3: -    else if (status == WaveStatus::STANCE_ALL)\n'}
[4.358393] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.358440] (unitree_guide2) StdoutLine: {'line': b'3: -        contact.setOnes();\n'}
[4.358485] (unitree_guide2) StdoutLine: {'line': b'3: -        phase << 0.5, 0.5, 0.5, 0.5;\n'}
[4.358542] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.358586] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.358630] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (status == WaveStatus::SWING_ALL) {\n'}
[4.358674] (unitree_guide2) StdoutLine: {'line': b'3: +    contact.setZero();\n'}
[4.358718] (unitree_guide2) StdoutLine: {'line': b'3: +    phase << 0.5, 0.5, 0.5, 0.5;\n'}
[4.358762] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (status == WaveStatus::STANCE_ALL) {\n'}
[4.358812] (unitree_guide2) StdoutLine: {'line': b'3: +    contact.setOnes();\n'}
[4.358856] (unitree_guide2) StdoutLine: {'line': b'3: +    phase << 0.5, 0.5, 0.5, 0.5;\n'}
[4.358901] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.358944] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.358988] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.359032] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/common/LowPassFilter.cpp':\n"}
[4.359077] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.359121] (unitree_guide2) StdoutLine: {'line': b'3: --- src/common/LowPassFilter.cpp\n'}
[4.359164] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/common/LowPassFilter.cpp.uncrustify\n'}
[4.359209] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7,3 +7,4 @@\n'}
[4.359253] (unitree_guide2) StdoutLine: {'line': b'3: -LPFilter::LPFilter(double samplePeriod, double cutFrequency){\n'}
[4.359297] (unitree_guide2) StdoutLine: {'line': b'3: -    _weight = 1.0 / ( 1.0 + 1.0/(2.0*M_PI * samplePeriod * cutFrequency) );\n'}
[4.359342] (unitree_guide2) StdoutLine: {'line': b'3: -    _start  = false;\n'}
[4.359386] (unitree_guide2) StdoutLine: {'line': b'3: +LPFilter::LPFilter(double samplePeriod, double cutFrequency)\n'}
[4.359431] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.359476] (unitree_guide2) StdoutLine: {'line': b'3: +  _weight = 1.0 / ( 1.0 + 1.0 / (2.0 * M_PI * samplePeriod * cutFrequency) );\n'}
[4.359534] (unitree_guide2) StdoutLine: {'line': b'3: +  _start = false;\n'}
[4.359577] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,6 +13,7 @@\n'}
[4.359620] (unitree_guide2) StdoutLine: {'line': b'3: -void LPFilter::addValue(double newValue){\n'}
[4.359663] (unitree_guide2) StdoutLine: {'line': b'3: -    if(!_start){\n'}
[4.359706] (unitree_guide2) StdoutLine: {'line': b'3: -        _start = true;\n'}
[4.359749] (unitree_guide2) StdoutLine: {'line': b'3: -        _pastValue = newValue;\n'}
[4.359792] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.359834] (unitree_guide2) StdoutLine: {'line': b'3: -    _pastValue = _weight*newValue + (1-_weight)*_pastValue;\n'}
[4.359876] (unitree_guide2) StdoutLine: {'line': b'3: +void LPFilter::addValue(double newValue)\n'}
[4.359919] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.359961] (unitree_guide2) StdoutLine: {'line': b'3: +  if (!_start) {\n'}
[4.360004] (unitree_guide2) StdoutLine: {'line': b'3: +    _start = true;\n'}
[4.360047] (unitree_guide2) StdoutLine: {'line': b'3: +    _pastValue = newValue;\n'}
[4.360091] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.360135] (unitree_guide2) StdoutLine: {'line': b'3: +  _pastValue = _weight * newValue + (1 - _weight) * _pastValue;\n'}
[4.360179] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,2 +22,3 @@\n'}
[4.360223] (unitree_guide2) StdoutLine: {'line': b'3: -double LPFilter::getValue(){\n'}
[4.360266] (unitree_guide2) StdoutLine: {'line': b'3: -    return _pastValue;\n'}
[4.360309] (unitree_guide2) StdoutLine: {'line': b'3: +double LPFilter::getValue()\n'}
[4.360352] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.360395] (unitree_guide2) StdoutLine: {'line': b'3: +  return _pastValue;\n'}
[4.360438] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24,3 +27,4 @@\n'}
[4.360494] (unitree_guide2) StdoutLine: {'line': b'3: -void LPFilter::clear(){\n'}
[4.360538] (unitree_guide2) StdoutLine: {'line': b'3: -    _start = false;\n'}
[4.360582] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.360625] (unitree_guide2) StdoutLine: {'line': b'3: +void LPFilter::clear()\n'}
[4.360668] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.360712] (unitree_guide2) StdoutLine: {'line': b'3: +  _start = false;\n'}
[4.360756] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.360800] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.360844] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/common/unitreeLeg.cpp':\n"}
[4.360888] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.360937] (unitree_guide2) StdoutLine: {'line': b'3: --- src/common/unitreeLeg.cpp\n'}
[4.360981] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/common/unitreeLeg.cpp.uncrustify\n'}
[4.361026] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,14 +11,16 @@\n'}
[4.361070] (unitree_guide2) StdoutLine: {'line': b'3: -QuadrupedLeg::QuadrupedLeg(int legID, float abadLinkLength, float hipLinkLength, \n'}
[4.361114] (unitree_guide2) StdoutLine: {'line': b'3: -                           float kneeLinkLength, Vec3 pHip2B)\n'}
[4.361158] (unitree_guide2) StdoutLine: {'line': b'3: -            :_abadLinkLength(abadLinkLength), \n'}
[4.361202] (unitree_guide2) StdoutLine: {'line': b'3: -             _hipLinkLength(hipLinkLength), \n'}
[4.361245] (unitree_guide2) StdoutLine: {'line': b'3: -             _kneeLinkLength(kneeLinkLength), \n'}
[4.361289] (unitree_guide2) StdoutLine: {'line': b'3: -             _pHip2B(pHip2B){\n'}
[4.361332] (unitree_guide2) StdoutLine: {'line': b'3: -    if (legID == 0 || legID == 2)\n'}
[4.361376] (unitree_guide2) StdoutLine: {'line': b'3: -        _sideSign = -1;\n'}
[4.361420] (unitree_guide2) StdoutLine: {'line': b'3: -    else if (legID == 1 || legID == 3)\n'}
[4.361464] (unitree_guide2) StdoutLine: {'line': b'3: -        _sideSign = 1;\n'}
[4.361522] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.361567] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "Leg ID incorrect!" << std::endl;\n'}
[4.361613] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[4.361658] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.361704] (unitree_guide2) StdoutLine: {'line': b'3: +QuadrupedLeg::QuadrupedLeg(\n'}
[4.361749] (unitree_guide2) StdoutLine: {'line': b'3: +  int legID, float abadLinkLength, float hipLinkLength,\n'}
[4.361795] (unitree_guide2) StdoutLine: {'line': b'3: +  float kneeLinkLength, Vec3 pHip2B)\n'}
[4.361840] (unitree_guide2) StdoutLine: {'line': b'3: +: _abadLinkLength(abadLinkLength),\n'}
[4.361885] (unitree_guide2) StdoutLine: {'line': b'3: +  _hipLinkLength(hipLinkLength),\n'}
[4.361934] (unitree_guide2) StdoutLine: {'line': b'3: +  _kneeLinkLength(kneeLinkLength),\n'}
[4.361979] (unitree_guide2) StdoutLine: {'line': b'3: +  _pHip2B(pHip2B)\n'}
[4.362023] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.362068] (unitree_guide2) StdoutLine: {'line': b'3: +  if (legID == 0 || legID == 2) {\n'}
[4.362112] (unitree_guide2) StdoutLine: {'line': b'3: +    _sideSign = -1;\n'}
[4.362157] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (legID == 1 || legID == 3) {\n'}
[4.362202] (unitree_guide2) StdoutLine: {'line': b'3: +    _sideSign = 1;\n'}
[4.362247] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.362292] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Leg ID incorrect!" << std::endl;\n'}
[4.362337] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[4.362383] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.362428] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28,4 +30,5 @@\n'}
[4.362473] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedLeg::calcPEe2H(Vec3 q){\n'}
[4.362534] (unitree_guide2) StdoutLine: {'line': b'3: -    float l1 = _sideSign * _abadLinkLength;\n'}
[4.362581] (unitree_guide2) StdoutLine: {'line': b'3: -    float l2 = -_hipLinkLength;\n'}
[4.362628] (unitree_guide2) StdoutLine: {'line': b'3: -    float l3 = -_kneeLinkLength;\n'}
[4.362674] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedLeg::calcPEe2H(Vec3 q)\n'}
[4.362720] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.362766] (unitree_guide2) StdoutLine: {'line': b'3: +  float l1 = _sideSign * _abadLinkLength;\n'}
[4.362813] (unitree_guide2) StdoutLine: {'line': b'3: +  float l2 = -_hipLinkLength;\n'}
[4.362859] (unitree_guide2) StdoutLine: {'line': b'3: +  float l3 = -_kneeLinkLength;\n'}
[4.362905] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,3 +36,3 @@\n'}
[4.362952] (unitree_guide2) StdoutLine: {'line': b'3: -    float s1 = std::sin(q(0));\n'}
[4.362998] (unitree_guide2) StdoutLine: {'line': b'3: -    float s2 = std::sin(q(1));\n'}
[4.363049] (unitree_guide2) StdoutLine: {'line': b'3: -    float s3 = std::sin(q(2));\n'}
[4.363096] (unitree_guide2) StdoutLine: {'line': b'3: +  float s1 = std::sin(q(0));\n'}
[4.363143] (unitree_guide2) StdoutLine: {'line': b'3: +  float s2 = std::sin(q(1));\n'}
[4.363189] (unitree_guide2) StdoutLine: {'line': b'3: +  float s3 = std::sin(q(2));\n'}
[4.363236] (unitree_guide2) StdoutLine: {'line': b'3: @@ -37,3 +40,3 @@\n'}
[4.363283] (unitree_guide2) StdoutLine: {'line': b'3: -    float c1 = std::cos(q(0));\n'}
[4.363330] (unitree_guide2) StdoutLine: {'line': b'3: -    float c2 = std::cos(q(1));\n'}
[4.363376] (unitree_guide2) StdoutLine: {'line': b'3: -    float c3 = std::cos(q(2));\n'}
[4.363422] (unitree_guide2) StdoutLine: {'line': b'3: +  float c1 = std::cos(q(0));\n'}
[4.363467] (unitree_guide2) StdoutLine: {'line': b'3: +  float c2 = std::cos(q(1));\n'}
[4.363528] (unitree_guide2) StdoutLine: {'line': b'3: +  float c3 = std::cos(q(2));\n'}
[4.363577] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41,2 +44,2 @@\n'}
[4.363627] (unitree_guide2) StdoutLine: {'line': b'3: -    float c23 = c2 * c3 - s2 * s3;\n'}
[4.363675] (unitree_guide2) StdoutLine: {'line': b'3: -    float s23 = s2 * c3 + c2 * s3;\n'}
[4.363722] (unitree_guide2) StdoutLine: {'line': b'3: +  float c23 = c2 * c3 - s2 * s3;\n'}
[4.363770] (unitree_guide2) StdoutLine: {'line': b'3: +  float s23 = s2 * c3 + c2 * s3;\n'}
[4.363818] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44 +47 @@\n'}
[4.363865] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 pEe2H;\n'}
[4.363913] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 pEe2H;\n'}
[4.363961] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46,3 +49,3 @@\n'}
[4.364009] (unitree_guide2) StdoutLine: {'line': b'3: -    pEe2H(0) = l3 * s23 + l2 * s2;\n'}
[4.364057] (unitree_guide2) StdoutLine: {'line': b'3: -    pEe2H(1) = -l3 * s1 * c23 + l1 * c1 - l2 * c2 * s1;\n'}
[4.364106] (unitree_guide2) StdoutLine: {'line': b'3: -    pEe2H(2) =  l3 * c1 * c23 + l1 * s1 + l2 * c1 * c2;\n'}
[4.364153] (unitree_guide2) StdoutLine: {'line': b'3: +  pEe2H(0) = l3 * s23 + l2 * s2;\n'}
[4.364209] (unitree_guide2) StdoutLine: {'line': b'3: +  pEe2H(1) = -l3 * s1 * c23 + l1 * c1 - l2 * c2 * s1;\n'}
[4.364257] (unitree_guide2) StdoutLine: {'line': b'3: +  pEe2H(2) = l3 * c1 * c23 + l1 * s1 + l2 * c1 * c2;\n'}
[4.364304] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50 +53 @@\n'}
[4.364352] (unitree_guide2) StdoutLine: {'line': b'3: -    return pEe2H;\n'}
[4.364399] (unitree_guide2) StdoutLine: {'line': b'3: +  return pEe2H;\n'}
[4.364446] (unitree_guide2) StdoutLine: {'line': b'3: @@ -54,2 +57,3 @@\n'}
[4.364494] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedLeg::calcPEe2B(Vec3 q){\n'}
[4.364556] (unitree_guide2) StdoutLine: {'line': b'3: -    return _pHip2B + calcPEe2H(q);\n'}
[4.364605] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedLeg::calcPEe2B(Vec3 q)\n'}
[4.364654] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.364703] (unitree_guide2) StdoutLine: {'line': b'3: +  return _pHip2B + calcPEe2H(q);\n'}
[4.364753] (unitree_guide2) StdoutLine: {'line': b'3: @@ -59,2 +63,3 @@\n'}
[4.364803] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedLeg::calcVEe(Vec3 q, Vec3 qd){\n'}
[4.364853] (unitree_guide2) StdoutLine: {'line': b'3: -    return calcJaco(q) * qd;\n'}
[4.364902] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedLeg::calcVEe(Vec3 q, Vec3 qd)\n'}
[4.364982] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.365055] (unitree_guide2) StdoutLine: {'line': b'3: +  return calcJaco(q) * qd;\n'}
[4.365106] (unitree_guide2) StdoutLine: {'line': b'3: @@ -64,10 +69,11 @@\n'}
[4.365156] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedLeg::calcQ(Vec3 pEe, FrameType frame){\n'}
[4.365206] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 pEe2H;\n'}
[4.365255] (unitree_guide2) StdoutLine: {'line': b'3: -    if(frame == FrameType::HIP)\n'}
[4.365304] (unitree_guide2) StdoutLine: {'line': b'3: -        pEe2H = pEe;\n'}
[4.365360] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(frame == FrameType::BODY)\n'}
[4.365410] (unitree_guide2) StdoutLine: {'line': b'3: -        pEe2H = pEe - _pHip2B;\n'}
[4.365489] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.365539] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] The frame of QuadrupedLeg::calcQ can only be HIP or BODY!" << std::endl;\n'}
[4.365589] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[4.365639] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.365688] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedLeg::calcQ(Vec3 pEe, FrameType frame)\n'}
[4.365738] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.365788] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 pEe2H;\n'}
[4.365837] (unitree_guide2) StdoutLine: {'line': b'3: +  if (frame == FrameType::HIP) {\n'}
[4.365887] (unitree_guide2) StdoutLine: {'line': b'3: +    pEe2H = pEe;\n'}
[4.365937] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (frame == FrameType::BODY) {\n'}
[4.365986] (unitree_guide2) StdoutLine: {'line': b'3: +    pEe2H = pEe - _pHip2B;\n'}
[4.366035] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.366084] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] The frame of QuadrupedLeg::calcQ can only be HIP or BODY!" << std::endl;\n'}
[4.366134] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[4.366182] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.366231] (unitree_guide2) StdoutLine: {'line': b'3: @@ -75,4 +81,4 @@\n'}
[4.366311] (unitree_guide2) StdoutLine: {'line': b'3: -    float q1, q2, q3;\n'}
[4.366486] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 qResult;\n'}
[4.366560] (unitree_guide2) StdoutLine: {'line': b'3: -    float px, py, pz;\n'}
[4.366624] (unitree_guide2) StdoutLine: {'line': b'3: -    float b2y, b3z, b4z, a, b, c;\n'}
[4.366673] (unitree_guide2) StdoutLine: {'line': b'3: +  float q1, q2, q3;\n'}
[4.366720] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 qResult;\n'}
[4.366769] (unitree_guide2) StdoutLine: {'line': b'3: +  float px, py, pz;\n'}
[4.366816] (unitree_guide2) StdoutLine: {'line': b'3: +  float b2y, b3z, b4z, a, b, c;\n'}
[4.366864] (unitree_guide2) StdoutLine: {'line': b'3: @@ -80,3 +86,3 @@\n'}
[4.366913] (unitree_guide2) StdoutLine: {'line': b'3: -    px = pEe2H(0);\n'}
[4.366961] (unitree_guide2) StdoutLine: {'line': b'3: -    py = pEe2H(1);\n'}
[4.367010] (unitree_guide2) StdoutLine: {'line': b'3: -    pz = pEe2H(2);\n'}
[4.367058] (unitree_guide2) StdoutLine: {'line': b'3: +  px = pEe2H(0);\n'}
[4.367106] (unitree_guide2) StdoutLine: {'line': b'3: +  py = pEe2H(1);\n'}
[4.367163] (unitree_guide2) StdoutLine: {'line': b'3: +  pz = pEe2H(2);\n'}
[4.367212] (unitree_guide2) StdoutLine: {'line': b'3: @@ -84,6 +90,6 @@\n'}
[4.367260] (unitree_guide2) StdoutLine: {'line': b'3: -    b2y = _abadLinkLength * _sideSign;\n'}
[4.367308] (unitree_guide2) StdoutLine: {'line': b'3: -    b3z = -_hipLinkLength;\n'}
[4.367356] (unitree_guide2) StdoutLine: {'line': b'3: -    b4z = -_kneeLinkLength;\n'}
[4.367404] (unitree_guide2) StdoutLine: {'line': b'3: -    a = _abadLinkLength;\n'}
[4.367451] (unitree_guide2) StdoutLine: {'line': b'3: -    c = sqrt(pow(px, 2) + pow(py, 2) + pow(pz, 2)); // whole length\n'}
[4.367500] (unitree_guide2) StdoutLine: {'line': b'3: -    b = sqrt(pow(c, 2) - pow(a, 2)); // distance between shoulder and footpoint\n'}
[4.367548] (unitree_guide2) StdoutLine: {'line': b'3: +  b2y = _abadLinkLength * _sideSign;\n'}
[4.367611] (unitree_guide2) StdoutLine: {'line': b'3: +  b3z = -_hipLinkLength;\n'}
[4.367658] (unitree_guide2) StdoutLine: {'line': b'3: +  b4z = -_kneeLinkLength;\n'}
[4.367705] (unitree_guide2) StdoutLine: {'line': b'3: +  a = _abadLinkLength;\n'}
[4.367752] (unitree_guide2) StdoutLine: {'line': b'3: +  c = sqrt(pow(px, 2) + pow(py, 2) + pow(pz, 2));   // whole length\n'}
[4.367800] (unitree_guide2) StdoutLine: {'line': b'3: +  b = sqrt(pow(c, 2) - pow(a, 2));   // distance between shoulder and footpoint\n'}
[4.367853] (unitree_guide2) StdoutLine: {'line': b'3: @@ -91,3 +97,3 @@\n'}
[4.367901] (unitree_guide2) StdoutLine: {'line': b'3: -    q1 = q1_ik(py, pz, b2y);\n'}
[4.367948] (unitree_guide2) StdoutLine: {'line': b'3: -    q3 = q3_ik(b3z, b4z, b);\n'}
[4.367995] (unitree_guide2) StdoutLine: {'line': b'3: -    q2 = q2_ik(q1, q3, px, py, pz, b3z, b4z);\n'}
[4.368042] (unitree_guide2) StdoutLine: {'line': b'3: +  q1 = q1_ik(py, pz, b2y);\n'}
[4.368088] (unitree_guide2) StdoutLine: {'line': b'3: +  q3 = q3_ik(b3z, b4z, b);\n'}
[4.368134] (unitree_guide2) StdoutLine: {'line': b'3: +  q2 = q2_ik(q1, q3, px, py, pz, b3z, b4z);\n'}
[4.368180] (unitree_guide2) StdoutLine: {'line': b'3: @@ -95,3 +101,3 @@\n'}
[4.368226] (unitree_guide2) StdoutLine: {'line': b'3: -    qResult(0) = q1;\n'}
[4.368272] (unitree_guide2) StdoutLine: {'line': b'3: -    qResult(1) = q2;\n'}
[4.368318] (unitree_guide2) StdoutLine: {'line': b'3: -    qResult(2) = q3;\n'}
[4.368364] (unitree_guide2) StdoutLine: {'line': b'3: +  qResult(0) = q1;\n'}
[4.368411] (unitree_guide2) StdoutLine: {'line': b'3: +  qResult(1) = q2;\n'}
[4.368457] (unitree_guide2) StdoutLine: {'line': b'3: +  qResult(2) = q3;\n'}
[4.368504] (unitree_guide2) StdoutLine: {'line': b'3: @@ -99 +105 @@\n'}
[4.368551] (unitree_guide2) StdoutLine: {'line': b'3: -    return qResult;\n'}
[4.368598] (unitree_guide2) StdoutLine: {'line': b'3: +  return qResult;\n'}
[4.368645] (unitree_guide2) StdoutLine: {'line': b'3: @@ -103,2 +109,3 @@\n'}
[4.368692] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedLeg::calcQd(Vec3 q, Vec3 vEe){\n'}
[4.368740] (unitree_guide2) StdoutLine: {'line': b'3: -    return calcJaco(q).inverse() * vEe;\n'}
[4.368801] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedLeg::calcQd(Vec3 q, Vec3 vEe)\n'}
[4.368847] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.368893] (unitree_guide2) StdoutLine: {'line': b'3: +  return calcJaco(q).inverse() * vEe;\n'}
[4.368938] (unitree_guide2) StdoutLine: {'line': b'3: @@ -108,3 +115,4 @@\n'}
[4.368984] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedLeg::calcQd(Vec3 pEe, Vec3 vEe, FrameType frame){\n'}
[4.369029] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 q = calcQ(pEe, frame);\n'}
[4.369074] (unitree_guide2) StdoutLine: {'line': b'3: -    return calcJaco(q).inverse() * vEe;\n'}
[4.369119] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedLeg::calcQd(Vec3 pEe, Vec3 vEe, FrameType frame)\n'}
[4.369164] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.369211] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 q = calcQ(pEe, frame);\n'}
[4.369258] (unitree_guide2) StdoutLine: {'line': b'3: +  return calcJaco(q).inverse() * vEe;\n'}
[4.369304] (unitree_guide2) StdoutLine: {'line': b'3: @@ -114,2 +122,3 @@\n'}
[4.369350] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedLeg::calcTau(Vec3 q, Vec3 force){\n'}
[4.369396] (unitree_guide2) StdoutLine: {'line': b'3: -    return calcJaco(q).transpose() * force;\n'}
[4.369442] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedLeg::calcTau(Vec3 q, Vec3 force)\n'}
[4.369488] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.369533] (unitree_guide2) StdoutLine: {'line': b'3: +  return calcJaco(q).transpose() * force;\n'}
[4.369579] (unitree_guide2) StdoutLine: {'line': b'3: @@ -119,2 +128,3 @@\n'}
[4.369625] (unitree_guide2) StdoutLine: {'line': b'3: -Mat3 QuadrupedLeg::calcJaco(Vec3 q){\n'}
[4.369670] (unitree_guide2) StdoutLine: {'line': b'3: -    Mat3 jaco;\n'}
[4.369715] (unitree_guide2) StdoutLine: {'line': b'3: +Mat3 QuadrupedLeg::calcJaco(Vec3 q)\n'}
[4.369761] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.369819] (unitree_guide2) StdoutLine: {'line': b'3: +  Mat3 jaco;\n'}
[4.369863] (unitree_guide2) StdoutLine: {'line': b'3: @@ -122,3 +132,3 @@\n'}
[4.369907] (unitree_guide2) StdoutLine: {'line': b'3: -    float l1 = _abadLinkLength * _sideSign;\n'}
[4.369951] (unitree_guide2) StdoutLine: {'line': b'3: -    float l2 = -_hipLinkLength;\n'}
[4.369995] (unitree_guide2) StdoutLine: {'line': b'3: -    float l3 = -_kneeLinkLength;\n'}
[4.370048] (unitree_guide2) StdoutLine: {'line': b'3: +  float l1 = _abadLinkLength * _sideSign;\n'}
[4.370092] (unitree_guide2) StdoutLine: {'line': b'3: +  float l2 = -_hipLinkLength;\n'}
[4.370136] (unitree_guide2) StdoutLine: {'line': b'3: +  float l3 = -_kneeLinkLength;\n'}
[4.370181] (unitree_guide2) StdoutLine: {'line': b'3: @@ -126,3 +136,3 @@\n'}
[4.370225] (unitree_guide2) StdoutLine: {'line': b'3: -    float s1 = std::sin(q(0));\n'}
[4.370270] (unitree_guide2) StdoutLine: {'line': b'3: -    float s2 = std::sin(q(1));\n'}
[4.370314] (unitree_guide2) StdoutLine: {'line': b'3: -    float s3 = std::sin(q(2));\n'}
[4.370358] (unitree_guide2) StdoutLine: {'line': b'3: +  float s1 = std::sin(q(0));\n'}
[4.370402] (unitree_guide2) StdoutLine: {'line': b'3: +  float s2 = std::sin(q(1));\n'}
[4.370485] (unitree_guide2) StdoutLine: {'line': b'3: +  float s3 = std::sin(q(2));\n'}
[4.370530] (unitree_guide2) StdoutLine: {'line': b'3: @@ -130,3 +140,3 @@\n'}
[4.370574] (unitree_guide2) StdoutLine: {'line': b'3: -    float c1 = std::cos(q(0));\n'}
[4.370618] (unitree_guide2) StdoutLine: {'line': b'3: -    float c2 = std::cos(q(1));\n'}
[4.370670] (unitree_guide2) StdoutLine: {'line': b'3: -    float c3 = std::cos(q(2));\n'}
[4.370717] (unitree_guide2) StdoutLine: {'line': b'3: +  float c1 = std::cos(q(0));\n'}
[4.370761] (unitree_guide2) StdoutLine: {'line': b'3: +  float c2 = std::cos(q(1));\n'}
[4.370804] (unitree_guide2) StdoutLine: {'line': b'3: +  float c3 = std::cos(q(2));\n'}
[4.370861] (unitree_guide2) StdoutLine: {'line': b'3: @@ -134,11 +144,11 @@\n'}
[4.370904] (unitree_guide2) StdoutLine: {'line': b'3: -    float c23 = c2 * c3 - s2 * s3;\n'}
[4.370947] (unitree_guide2) StdoutLine: {'line': b'3: -    float s23 = s2 * c3 + c2 * s3;\n'}
[4.370990] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(0, 0) = 0;\n'}
[4.371045] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(1, 0) = -l3 * c1 * c23 - l2 * c1 * c2 - l1 * s1;\n'}
[4.371179] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(2, 0) = -l3 * s1 * c23 - l2 * c2 * s1 + l1 * c1;\n'}
[4.371237] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(0, 1) = l3 * c23 + l2 * c2;\n'}
[4.371297] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(1, 1) = l3 * s1 * s23 + l2 * s1 * s2;\n'}
[4.371350] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(2, 1) = -l3 * c1 * s23 - l2 * c1 * s2;\n'}
[4.371407] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(0, 2) = l3 * c23;\n'}
[4.371464] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(1, 2) = l3 * s1 * s23;\n'}
[4.371521] (unitree_guide2) StdoutLine: {'line': b'3: -    jaco(2, 2) = -l3 * c1 * s23;\n'}
[4.371580] (unitree_guide2) StdoutLine: {'line': b'3: +  float c23 = c2 * c3 - s2 * s3;\n'}
[4.371648] (unitree_guide2) StdoutLine: {'line': b'3: +  float s23 = s2 * c3 + c2 * s3;\n'}
[4.371735] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(0, 0) = 0;\n'}
[4.371807] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(1, 0) = -l3 * c1 * c23 - l2 * c1 * c2 - l1 * s1;\n'}
[4.371878] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(2, 0) = -l3 * s1 * c23 - l2 * c2 * s1 + l1 * c1;\n'}
[4.371941] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(0, 1) = l3 * c23 + l2 * c2;\n'}
[4.372049] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(1, 1) = l3 * s1 * s23 + l2 * s1 * s2;\n'}
[4.372112] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(2, 1) = -l3 * c1 * s23 - l2 * c1 * s2;\n'}
[4.372171] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(0, 2) = l3 * c23;\n'}
[4.372240] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(1, 2) = l3 * s1 * s23;\n'}
[4.372300] (unitree_guide2) StdoutLine: {'line': b'3: +  jaco(2, 2) = -l3 * c1 * s23;\n'}
[4.372359] (unitree_guide2) StdoutLine: {'line': b'3: @@ -146 +156 @@\n'}
[4.372402] (unitree_guide2) StdoutLine: {'line': b'3: -    return jaco;\n'}
[4.372446] (unitree_guide2) StdoutLine: {'line': b'3: +  return jaco;\n'}
[4.372490] (unitree_guide2) StdoutLine: {'line': b'3: @@ -149,5 +159,6 @@\n'}
[4.372557] (unitree_guide2) StdoutLine: {'line': b'3: -float QuadrupedLeg::q1_ik(float py, float pz, float l1){\n'}
[4.372611] (unitree_guide2) StdoutLine: {'line': b'3: -    float q1;\n'}
[4.372655] (unitree_guide2) StdoutLine: {'line': b'3: -    float L = sqrt(pow(py,2)+pow(pz,2)-pow(l1,2));\n'}
[4.372699] (unitree_guide2) StdoutLine: {'line': b'3: -    q1 = atan2(pz*l1+py*L, py*l1-pz*L);\n'}
[4.372743] (unitree_guide2) StdoutLine: {'line': b'3: -    return q1;\n'}
[4.372787] (unitree_guide2) StdoutLine: {'line': b'3: +float QuadrupedLeg::q1_ik(float py, float pz, float l1)\n'}
[4.372831] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.372875] (unitree_guide2) StdoutLine: {'line': b'3: +  float q1;\n'}
[4.372920] (unitree_guide2) StdoutLine: {'line': b'3: +  float L = sqrt(pow(py, 2) + pow(pz, 2) - pow(l1, 2));\n'}
[4.372964] (unitree_guide2) StdoutLine: {'line': b'3: +  q1 = atan2(pz * l1 + py * L, py * l1 - pz * L);\n'}
[4.373008] (unitree_guide2) StdoutLine: {'line': b'3: +  return q1;\n'}
[4.373052] (unitree_guide2) StdoutLine: {'line': b'3: @@ -156,8 +167,9 @@\n'}
[4.373096] (unitree_guide2) StdoutLine: {'line': b'3: -float QuadrupedLeg::q3_ik(float b3z, float b4z, float b){\n'}
[4.373141] (unitree_guide2) StdoutLine: {'line': b'3: -    float q3, temp;\n'}
[4.373185] (unitree_guide2) StdoutLine: {'line': b'3: -    temp = (pow(b3z, 2) + pow(b4z, 2) - pow(b, 2))/(2*fabs(b3z*b4z));\n'}
[4.373230] (unitree_guide2) StdoutLine: {'line': b'3: -    if(temp>1) temp = 1;\n'}
[4.373275] (unitree_guide2) StdoutLine: {'line': b'3: -    if(temp<-1) temp = -1;\n'}
[4.373319] (unitree_guide2) StdoutLine: {'line': b'3: -    q3 = acos(temp);\n'}
[4.373363] (unitree_guide2) StdoutLine: {'line': b'3: -    q3 = -(M_PI - q3); //0~180\n'}
[4.373406] (unitree_guide2) StdoutLine: {'line': b'3: -    return q3;\n'}
[4.373450] (unitree_guide2) StdoutLine: {'line': b'3: +float QuadrupedLeg::q3_ik(float b3z, float b4z, float b)\n'}
[4.373508] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.373553] (unitree_guide2) StdoutLine: {'line': b'3: +  float q3, temp;\n'}
[4.373600] (unitree_guide2) StdoutLine: {'line': b'3: +  temp = (pow(b3z, 2) + pow(b4z, 2) - pow(b, 2)) / (2 * fabs(b3z * b4z));\n'}
[4.373652] (unitree_guide2) StdoutLine: {'line': b'3: +  if (temp > 1) {temp = 1;}\n'}
[4.373699] (unitree_guide2) StdoutLine: {'line': b'3: +  if (temp < -1) {temp = -1;}\n'}
[4.373745] (unitree_guide2) StdoutLine: {'line': b'3: +  q3 = acos(temp);\n'}
[4.373790] (unitree_guide2) StdoutLine: {'line': b'3: +  q3 = -(M_PI - q3);   //0~180\n'}
[4.373837] (unitree_guide2) StdoutLine: {'line': b'3: +  return q3;\n'}
[4.373882] (unitree_guide2) StdoutLine: {'line': b'3: @@ -166,9 +178,10 @@\n'}
[4.373928] (unitree_guide2) StdoutLine: {'line': b'3: -float QuadrupedLeg::q2_ik(float q1, float q3, float px, float py, float pz, float b3z, float b4z){\n'}
[4.373974] (unitree_guide2) StdoutLine: {'line': b'3: -    float q2, a1, a2, m1, m2;\n'}
[4.374019] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.374064] (unitree_guide2) StdoutLine: {'line': b'3: -    a1 = py*sin(q1) - pz*cos(q1);\n'}
[4.374109] (unitree_guide2) StdoutLine: {'line': b'3: -    a2 = px;\n'}
[4.374154] (unitree_guide2) StdoutLine: {'line': b'3: -    m1 = b4z*sin(q3);\n'}
[4.374198] (unitree_guide2) StdoutLine: {'line': b'3: -    m2 = b3z + b4z*cos(q3);\n'}
[4.374243] (unitree_guide2) StdoutLine: {'line': b'3: -    q2 = atan2(m1*a1+m2*a2, m1*a2-m2*a1);\n'}
[4.374288] (unitree_guide2) StdoutLine: {'line': b'3: -    return q2;\n'}
[4.374332] (unitree_guide2) StdoutLine: {'line': b'3: +float QuadrupedLeg::q2_ik(float q1, float q3, float px, float py, float pz, float b3z, float b4z)\n'}
[4.374378] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.374423] (unitree_guide2) StdoutLine: {'line': b'3: +  float q2, a1, a2, m1, m2;\n'}
[4.374469] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.374514] (unitree_guide2) StdoutLine: {'line': b'3: +  a1 = py * sin(q1) - pz * cos(q1);\n'}
[4.374575] (unitree_guide2) StdoutLine: {'line': b'3: +  a2 = px;\n'}
[4.374622] (unitree_guide2) StdoutLine: {'line': b'3: +  m1 = b4z * sin(q3);\n'}
[4.374675] (unitree_guide2) StdoutLine: {'line': b'3: +  m2 = b3z + b4z * cos(q3);\n'}
[4.374723] (unitree_guide2) StdoutLine: {'line': b'3: +  q2 = atan2(m1 * a1 + m2 * a2, m1 * a2 - m2 * a1);\n'}
[4.374771] (unitree_guide2) StdoutLine: {'line': b'3: +  return q2;\n'}
[4.374819] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.374865] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/common/unitreeRobot.cpp':\n"}
[4.374913] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.374959] (unitree_guide2) StdoutLine: {'line': b'3: --- src/common/unitreeRobot.cpp\n'}
[4.375005] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/common/unitreeRobot.cpp.uncrustify\n'}
[4.375052] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7,2 +7,3 @@\n'}
[4.375099] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedRobot::getX(LowlevelState &state){\n'}
[4.375145] (unitree_guide2) StdoutLine: {'line': b'3: -    return getFootPosition(state, 0, FrameType::BODY);\n'}
[4.375192] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedRobot::getX(LowlevelState & state)\n'}
[4.375239] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.375287] (unitree_guide2) StdoutLine: {'line': b'3: +  return getFootPosition(state, 0, FrameType::BODY);\n'}
[4.375334] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,4 +12,5 @@\n'}
[4.375381] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 QuadrupedRobot::getVecXP(LowlevelState &state){\n'}
[4.375428] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec3 x = getX(state);\n'}
[4.375475] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 vecXP, qLegs;\n'}
[4.375537] (unitree_guide2) StdoutLine: {'line': b'3: -    qLegs = state.getQ();\n'}
[4.375584] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 QuadrupedRobot::getVecXP(LowlevelState & state)\n'}
[4.375632] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.375680] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec3 x = getX(state);\n'}
[4.375727] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 vecXP, qLegs;\n'}
[4.375775] (unitree_guide2) StdoutLine: {'line': b'3: +  qLegs = state.getQ();\n'}
[4.375822] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16,4 +18,4 @@\n'}
[4.375869] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.375917] (unitree_guide2) StdoutLine: {'line': b'3: -        vecXP.col(i) = _Legs[i]->calcPEe2B(qLegs.col(i)) - x;\n'}
[4.375965] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.376013] (unitree_guide2) StdoutLine: {'line': b'3: -    return vecXP;\n'}
[4.376061] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.376109] (unitree_guide2) StdoutLine: {'line': b'3: +    vecXP.col(i) = _Legs[i]->calcPEe2B(qLegs.col(i)) - x;\n'}
[4.376157] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.376206] (unitree_guide2) StdoutLine: {'line': b'3: +  return vecXP;\n'}
[4.376254] (unitree_guide2) StdoutLine: {'line': b'3: @@ -22,6 +24,7 @@\n'}
[4.376303] (unitree_guide2) StdoutLine: {'line': b'3: -Vec12 QuadrupedRobot::getQ(const Vec34 &vecP, FrameType frame){\n'}
[4.376366] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 q;\n'}
[4.376415] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.376464] (unitree_guide2) StdoutLine: {'line': b'3: -        q.segment(3*i, 3) = _Legs[i]->calcQ(vecP.col(i), frame);\n'}
[4.376526] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.376572] (unitree_guide2) StdoutLine: {'line': b'3: -    return q;\n'}
[4.376619] (unitree_guide2) StdoutLine: {'line': b'3: +Vec12 QuadrupedRobot::getQ(const Vec34 & vecP, FrameType frame)\n'}
[4.376665] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.376712] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 q;\n'}
[4.376759] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.376805] (unitree_guide2) StdoutLine: {'line': b'3: +    q.segment(3 * i, 3) = _Legs[i]->calcQ(vecP.col(i), frame);\n'}
[4.376852] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.376899] (unitree_guide2) StdoutLine: {'line': b'3: +  return q;\n'}
[4.376950] (unitree_guide2) StdoutLine: {'line': b'3: @@ -30,6 +33,7 @@\n'}
[4.376997] (unitree_guide2) StdoutLine: {'line': b'3: -Vec12 QuadrupedRobot::getQd(const Vec34 &pos, const Vec34 &vel, FrameType frame){\n'}
[4.377045] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 qd;\n'}
[4.377092] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.377140] (unitree_guide2) StdoutLine: {'line': b'3: -        qd.segment(3*i, 3) = _Legs[i]->calcQd(pos.col(i), vel.col(i), frame);\n'}
[4.377187] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.377234] (unitree_guide2) StdoutLine: {'line': b'3: -    return qd;\n'}
[4.377281] (unitree_guide2) StdoutLine: {'line': b'3: +Vec12 QuadrupedRobot::getQd(const Vec34 & pos, const Vec34 & vel, FrameType frame)\n'}
[4.377328] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.377375] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 qd;\n'}
[4.377421] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.377468] (unitree_guide2) StdoutLine: {'line': b'3: +    qd.segment(3 * i, 3) = _Legs[i]->calcQd(pos.col(i), vel.col(i), frame);\n'}
[4.377515] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.377573] (unitree_guide2) StdoutLine: {'line': b'3: +  return qd;\n'}
[4.377618] (unitree_guide2) StdoutLine: {'line': b'3: @@ -38,6 +42,7 @@\n'}
[4.377662] (unitree_guide2) StdoutLine: {'line': b'3: -Vec12 QuadrupedRobot::getTau(const Vec12 &q, const Vec34 feetForce){\n'}
[4.377708] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 tau;\n'}
[4.377752] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.377797] (unitree_guide2) StdoutLine: {'line': b'3: -        tau.segment(3*i, 3) = _Legs[i]->calcTau(q.segment(3*i, 3), feetForce.col(i));\n'}
[4.377843] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.377889] (unitree_guide2) StdoutLine: {'line': b'3: -    return tau;\n'}
[4.377934] (unitree_guide2) StdoutLine: {'line': b'3: +Vec12 QuadrupedRobot::getTau(const Vec12 & q, const Vec34 feetForce)\n'}
[4.377981] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.378026] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 tau;\n'}
[4.378072] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.378117] (unitree_guide2) StdoutLine: {'line': b'3: +    tau.segment(3 * i, 3) = _Legs[i]->calcTau(q.segment(3 * i, 3), feetForce.col(i));\n'}
[4.378163] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.378208] (unitree_guide2) StdoutLine: {'line': b'3: +  return tau;\n'}
[4.378253] (unitree_guide2) StdoutLine: {'line': b'3: @@ -47,2 +52,3 @@\n'}
[4.378298] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedRobot::getFootPosition(LowlevelState &state, int id, FrameType frame){\n'}
[4.378344] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 qLegs= state.getQ();\n'}
[4.378390] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedRobot::getFootPosition(LowlevelState & state, int id, FrameType frame)\n'}
[4.378436] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.378496] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 qLegs = state.getQ();\n'}
[4.378543] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50,8 +56,9 @@\n'}
[4.378590] (unitree_guide2) StdoutLine: {'line': b'3: -    if(frame == FrameType::BODY){\n'}
[4.378637] (unitree_guide2) StdoutLine: {'line': b'3: -        return _Legs[id]->calcPEe2B(qLegs.col(id));\n'}
[4.378685] (unitree_guide2) StdoutLine: {'line': b'3: -    }else if(frame == FrameType::HIP){\n'}
[4.378733] (unitree_guide2) StdoutLine: {'line': b'3: -        return _Legs[id]->calcPEe2H(qLegs.col(id));\n'}
[4.378779] (unitree_guide2) StdoutLine: {'line': b'3: -    }else{\n'}
[4.378827] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] The frame of function: getFootPosition can only be BODY or HIP." << std::endl;\n'}
[4.378876] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[4.378923] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.378969] (unitree_guide2) StdoutLine: {'line': b'3: +  if (frame == FrameType::BODY) {\n'}
[4.379020] (unitree_guide2) StdoutLine: {'line': b'3: +    return _Legs[id]->calcPEe2B(qLegs.col(id));\n'}
[4.379068] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (frame == FrameType::HIP) {\n'}
[4.379114] (unitree_guide2) StdoutLine: {'line': b'3: +    return _Legs[id]->calcPEe2H(qLegs.col(id));\n'}
[4.379160] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.379207] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] The frame of function: getFootPosition can only be BODY or HIP." <<\n'}
[4.379253] (unitree_guide2) StdoutLine: {'line': b'3: +      std::endl;\n'}
[4.379299] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[4.379345] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.379392] (unitree_guide2) StdoutLine: {'line': b'3: @@ -61,4 +68,5 @@\n'}
[4.379439] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 QuadrupedRobot::getFootVelocity(LowlevelState &state, int id){\n'}
[4.379486] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 qLegs = state.getQ();\n'}
[4.379546] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 qdLegs= state.getQd();\n'}
[4.379592] (unitree_guide2) StdoutLine: {'line': b'3: -    return _Legs[id]->calcVEe(qLegs.col(id), qdLegs.col(id));\n'}
[4.379639] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 QuadrupedRobot::getFootVelocity(LowlevelState & state, int id)\n'}
[4.379685] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.379730] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 qLegs = state.getQ();\n'}
[4.379776] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 qdLegs = state.getQd();\n'}
[4.379820] (unitree_guide2) StdoutLine: {'line': b'3: +  return _Legs[id]->calcVEe(qLegs.col(id), qdLegs.col(id));\n'}
[4.379866] (unitree_guide2) StdoutLine: {'line': b'3: @@ -68,7 +76,6 @@\n'}
[4.379911] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 QuadrupedRobot::getFeet2BPositions(LowlevelState &state, FrameType frame){\n'}
[4.379957] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 feetPos;\n'}
[4.380002] (unitree_guide2) StdoutLine: {'line': b'3: -    if(frame == FrameType::GLOBAL){\n'}
[4.380047] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<4; ++i){\n'}
[4.380093] (unitree_guide2) StdoutLine: {'line': b'3: -            feetPos.col(i) = getFootPosition(state, i, FrameType::BODY);\n'}
[4.380137] (-) TimerEvent: {}
[4.380450] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.380553] (unitree_guide2) StdoutLine: {'line': b'3: -        feetPos = state.getRotMat() * feetPos;\n'}
[4.380627] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 QuadrupedRobot::getFeet2BPositions(LowlevelState & state, FrameType frame)\n'}
[4.380681] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.380728] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 feetPos;\n'}
[4.380781] (unitree_guide2) StdoutLine: {'line': b'3: +  if (frame == FrameType::GLOBAL) {\n'}
[4.380827] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[4.380872] (unitree_guide2) StdoutLine: {'line': b'3: +      feetPos.col(i) = getFootPosition(state, i, FrameType::BODY);\n'}
[4.380917] (unitree_guide2) StdoutLine: {'line': b'3: @@ -76,4 +83,4 @@\n'}
[4.380961] (unitree_guide2) StdoutLine: {'line': b'3: -    else if((frame == FrameType::BODY) || (frame == FrameType::HIP)){\n'}
[4.381006] (unitree_guide2) StdoutLine: {'line': b'3: -        for(int i(0); i<4; ++i){\n'}
[4.381050] (unitree_guide2) StdoutLine: {'line': b'3: -            feetPos.col(i) = getFootPosition(state, i, frame);\n'}
[4.381094] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.381138] (unitree_guide2) StdoutLine: {'line': b'3: +    feetPos = state.getRotMat() * feetPos;\n'}
[4.381183] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if ((frame == FrameType::BODY) || (frame == FrameType::HIP)) {\n'}
[4.381228] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i(0); i < 4; ++i) {\n'}
[4.381272] (unitree_guide2) StdoutLine: {'line': b'3: +      feetPos.col(i) = getFootPosition(state, i, frame);\n'}
[4.381322] (unitree_guide2) StdoutLine: {'line': b'3: @@ -81,5 +88,5 @@\n'}
[4.381367] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.381411] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] Frame error of function getFeet2BPositions" << std::endl;\n'}
[4.381457] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[4.381502] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.381559] (unitree_guide2) StdoutLine: {'line': b'3: -    return feetPos;\n'}
[4.381602] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.381652] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] Frame error of function getFeet2BPositions" << std::endl;\n'}
[4.381696] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[4.381739] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.381782] (unitree_guide2) StdoutLine: {'line': b'3: +  return feetPos;\n'}
[4.381825] (unitree_guide2) StdoutLine: {'line': b'3: @@ -88,5 +95,6 @@\n'}
[4.381868] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 QuadrupedRobot::getFeet2BVelocities(LowlevelState &state, FrameType frame){\n'}
[4.381911] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 feetVel;\n'}
[4.381954] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.381998] (unitree_guide2) StdoutLine: {'line': b'3: -        feetVel.col(i) = getFootVelocity(state, i);\n'}
[4.382042] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.382085] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 QuadrupedRobot::getFeet2BVelocities(LowlevelState & state, FrameType frame)\n'}
[4.382130] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.382173] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 feetVel;\n'}
[4.382217] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.382260] (unitree_guide2) StdoutLine: {'line': b'3: +    feetVel.col(i) = getFootVelocity(state, i);\n'}
[4.382324] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.382443] (unitree_guide2) StdoutLine: {'line': b'3: @@ -94,12 +102,10 @@\n'}
[4.382525] (unitree_guide2) StdoutLine: {'line': b'3: -    if(frame == FrameType::GLOBAL){\n'}
[4.382586] (unitree_guide2) StdoutLine: {'line': b'3: -        Vec34 feetPos = getFeet2BPositions(state, FrameType::BODY);\n'}
[4.382631] (unitree_guide2) StdoutLine: {'line': b'3: -        feetVel += skew(state.getGyro()) * feetPos;\n'}
[4.382692] (unitree_guide2) StdoutLine: {'line': b'3: -        return state.getRotMat() * feetVel;\n'}
[4.382749] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.382792] (unitree_guide2) StdoutLine: {'line': b'3: -    else if((frame == FrameType::BODY) || (frame == FrameType::HIP)){\n'}
[4.382878] (unitree_guide2) StdoutLine: {'line': b'3: -        return feetVel;\n'}
[4.382920] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.382962] (unitree_guide2) StdoutLine: {'line': b'3: -    else{\n'}
[4.383024] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] Frame error of function getFeet2BVelocities" << std::endl;\n'}
[4.383081] (unitree_guide2) StdoutLine: {'line': b'3: -        exit(-1);\n'}
[4.383144] (unitree_guide2) StdoutLine: {'line': b'3: -    }   \n'}
[4.383201] (unitree_guide2) StdoutLine: {'line': b'3: +  if (frame == FrameType::GLOBAL) {\n'}
[4.383244] (unitree_guide2) StdoutLine: {'line': b'3: +    Vec34 feetPos = getFeet2BPositions(state, FrameType::BODY);\n'}
[4.383307] (unitree_guide2) StdoutLine: {'line': b'3: +    feetVel += skew(state.getGyro()) * feetPos;\n'}
[4.383351] (unitree_guide2) StdoutLine: {'line': b'3: +    return state.getRotMat() * feetVel;\n'}
[4.383394] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if ((frame == FrameType::BODY) || (frame == FrameType::HIP)) {\n'}
[4.383438] (unitree_guide2) StdoutLine: {'line': b'3: +    return feetVel;\n'}
[4.383481] (unitree_guide2) StdoutLine: {'line': b'3: +  } else {\n'}
[4.383537] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] Frame error of function getFeet2BVelocities" << std::endl;\n'}
[4.383589] (unitree_guide2) StdoutLine: {'line': b'3: +    exit(-1);\n'}
[4.383631] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.383687] (unitree_guide2) StdoutLine: {'line': b'3: @@ -108,2 +114,3 @@\n'}
[4.383728] (unitree_guide2) StdoutLine: {'line': b'3: -Mat3 QuadrupedRobot::getJaco(LowlevelState &state, int legID){\n'}
[4.383769] (unitree_guide2) StdoutLine: {'line': b'3: -    return _Legs[legID]->calcJaco(state.getQ().col(legID));\n'}
[4.383810] (unitree_guide2) StdoutLine: {'line': b'3: +Mat3 QuadrupedRobot::getJaco(LowlevelState & state, int legID)\n'}
[4.383851] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.383892] (unitree_guide2) StdoutLine: {'line': b'3: +  return _Legs[legID]->calcJaco(state.getQ().col(legID));\n'}
[4.383934] (unitree_guide2) StdoutLine: {'line': b'3: @@ -112,5 +119,6 @@\n'}
[4.383975] (unitree_guide2) StdoutLine: {'line': b'3: -A1Robot::A1Robot(){\n'}
[4.384016] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[0] = new A1Leg(0, Vec3( 0.1805, -0.047, 0));\n'}
[4.384057] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[1] = new A1Leg(1, Vec3( 0.1805,  0.047, 0));\n'}
[4.384098] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[2] = new A1Leg(2, Vec3(-0.1805, -0.047, 0));\n'}
[4.384139] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[3] = new A1Leg(3, Vec3(-0.1805,  0.047, 0));\n'}
[4.384180] (unitree_guide2) StdoutLine: {'line': b'3: +A1Robot::A1Robot()\n'}
[4.384220] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.384261] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[0] = new A1Leg(0, Vec3(0.1805, -0.047, 0));\n'}
[4.384302] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[1] = new A1Leg(1, Vec3(0.1805, 0.047, 0));\n'}
[4.384343] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[2] = new A1Leg(2, Vec3(-0.1805, -0.047, 0));\n'}
[4.384384] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[3] = new A1Leg(3, Vec3(-0.1805, 0.047, 0));\n'}
[4.384424] (unitree_guide2) StdoutLine: {'line': b'3: @@ -118,3 +126,3 @@\n'}
[4.384493] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetPosNormalStand <<  0.1805,  0.1805, -0.1805, -0.1805, \n'}
[4.384549] (unitree_guide2) StdoutLine: {'line': b'3: -                           -0.1308,  0.1308, -0.1308,  0.1308,\n'}
[4.384591] (unitree_guide2) StdoutLine: {'line': b'3: -                           -0.3180, -0.3180, -0.3180, -0.3180;\n'}
[4.384632] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetPosNormalStand << 0.1805, 0.1805, -0.1805, -0.1805,\n'}
[4.384696] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.1308, 0.1308, -0.1308, 0.1308,\n'}
[4.384739] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.3180, -0.3180, -0.3180, -0.3180;\n'}
[4.384782] (unitree_guide2) StdoutLine: {'line': b'3: @@ -122,3 +130,3 @@\n'}
[4.384824] (unitree_guide2) StdoutLine: {'line': b'3: -    _robVelLimitX << -0.4, 0.4;\n'}
[4.384867] (unitree_guide2) StdoutLine: {'line': b'3: -    _robVelLimitY << -0.3, 0.3;\n'}
[4.384909] (unitree_guide2) StdoutLine: {'line': b'3: -    _robVelLimitYaw << -0.5, 0.5;\n'}
[4.384971] (unitree_guide2) StdoutLine: {'line': b'3: +  _robVelLimitX << -0.4, 0.4;\n'}
[4.385027] (unitree_guide2) StdoutLine: {'line': b'3: +  _robVelLimitY << -0.3, 0.3;\n'}
[4.385069] (unitree_guide2) StdoutLine: {'line': b'3: +  _robVelLimitYaw << -0.5, 0.5;\n'}
[4.385111] (unitree_guide2) StdoutLine: {'line': b'3: @@ -127,3 +135,3 @@\n'}
[4.385153] (unitree_guide2) StdoutLine: {'line': b'3: -    _mass = 12.5;\n'}
[4.385194] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcb << 0.01, 0.0, 0.0;\n'}
[4.385235] (unitree_guide2) StdoutLine: {'line': b'3: -    _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();\n'}
[4.385278] (unitree_guide2) StdoutLine: {'line': b'3: +  _mass = 12.5;\n'}
[4.385320] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcb << 0.01, 0.0, 0.0;\n'}
[4.385362] (unitree_guide2) StdoutLine: {'line': b'3: +  _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();\n'}
[4.385403] (unitree_guide2) StdoutLine: {'line': b'3: @@ -133,3 +141,3 @@\n'}
[4.385469] (unitree_guide2) StdoutLine: {'line': b'3: -    _mass = 13.4;\n'}
[4.385512] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcb << 0.0, 0.0, 0.0;\n'}
[4.385568] (unitree_guide2) StdoutLine: {'line': b'3: -    _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();\n'}
[4.385611] (unitree_guide2) StdoutLine: {'line': b'3: +  _mass = 13.4;\n'}
[4.385666] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcb << 0.0, 0.0, 0.0;\n'}
[4.385707] (unitree_guide2) StdoutLine: {'line': b'3: +  _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();\n'}
[4.385747] (unitree_guide2) StdoutLine: {'line': b'3: @@ -139,5 +147,6 @@\n'}
[4.385787] (unitree_guide2) StdoutLine: {'line': b'3: -Go1Robot::Go1Robot(){\n'}
[4.385828] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[0] = new Go1Leg(0, Vec3( 0.1881, -0.04675, 0));\n'}
[4.385868] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[1] = new Go1Leg(1, Vec3( 0.1881,  0.04675, 0));\n'}
[4.385909] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[2] = new Go1Leg(2, Vec3(-0.1881, -0.04675, 0));\n'}
[4.385949] (unitree_guide2) StdoutLine: {'line': b'3: -    _Legs[3] = new Go1Leg(3, Vec3(-0.1881,  0.04675, 0));\n'}
[4.385989] (unitree_guide2) StdoutLine: {'line': b'3: +Go1Robot::Go1Robot()\n'}
[4.386029] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.386070] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[0] = new Go1Leg(0, Vec3(0.1881, -0.04675, 0));\n'}
[4.386112] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[1] = new Go1Leg(1, Vec3(0.1881, 0.04675, 0));\n'}
[4.386154] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[2] = new Go1Leg(2, Vec3(-0.1881, -0.04675, 0));\n'}
[4.386195] (unitree_guide2) StdoutLine: {'line': b'3: +  _Legs[3] = new Go1Leg(3, Vec3(-0.1881, 0.04675, 0));\n'}
[4.386236] (unitree_guide2) StdoutLine: {'line': b'3: @@ -145,3 +154,3 @@\n'}
[4.386278] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetPosNormalStand <<  0.1881,  0.1881, -0.1881, -0.1881,\n'}
[4.386319] (unitree_guide2) StdoutLine: {'line': b'3: -                           -0.1300,  0.1300, -0.1300,  0.1300,\n'}
[4.386367] (unitree_guide2) StdoutLine: {'line': b'3: -                           -0.3200, -0.3200, -0.3200, -0.3200;\n'}
[4.386408] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetPosNormalStand << 0.1881, 0.1881, -0.1881, -0.1881,\n'}
[4.386449] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.1300, 0.1300, -0.1300, 0.1300,\n'}
[4.386490] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.3200, -0.3200, -0.3200, -0.3200;\n'}
[4.386531] (unitree_guide2) StdoutLine: {'line': b'3: @@ -149,3 +158,3 @@\n'}
[4.386571] (unitree_guide2) StdoutLine: {'line': b'3: -    _robVelLimitX << -0.4, 0.4;\n'}
[4.386612] (unitree_guide2) StdoutLine: {'line': b'3: -    _robVelLimitY << -0.3, 0.3;\n'}
[4.386652] (unitree_guide2) StdoutLine: {'line': b'3: -    _robVelLimitYaw << -0.5, 0.5;\n'}
[4.386692] (unitree_guide2) StdoutLine: {'line': b'3: +  _robVelLimitX << -0.4, 0.4;\n'}
[4.386733] (unitree_guide2) StdoutLine: {'line': b'3: +  _robVelLimitY << -0.3, 0.3;\n'}
[4.386774] (unitree_guide2) StdoutLine: {'line': b'3: +  _robVelLimitYaw << -0.5, 0.5;\n'}
[4.386814] (unitree_guide2) StdoutLine: {'line': b'3: @@ -155,3 +164,3 @@\n'}
[4.386855] (unitree_guide2) StdoutLine: {'line': b'3: -    _mass = 10.5;\n'}
[4.386896] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcb << 0.04, 0.0, 0.0;\n'}
[4.386938] (unitree_guide2) StdoutLine: {'line': b'3: -    _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();\n'}
[4.386979] (unitree_guide2) StdoutLine: {'line': b'3: +  _mass = 10.5;\n'}
[4.387020] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcb << 0.04, 0.0, 0.0;\n'}
[4.387060] (unitree_guide2) StdoutLine: {'line': b'3: +  _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();\n'}
[4.387101] (unitree_guide2) StdoutLine: {'line': b'3: @@ -161,3 +170,3 @@\n'}
[4.387144] (unitree_guide2) StdoutLine: {'line': b'3: -    _mass = 12.0;\n'}
[4.387185] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcb << 0.0, 0.0, 0.0;\n'}
[4.387225] (unitree_guide2) StdoutLine: {'line': b'3: -    _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();\n'}
[4.387269] (unitree_guide2) StdoutLine: {'line': b'3: +  _mass = 12.0;\n'}
[4.387310] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcb << 0.0, 0.0, 0.0;\n'}
[4.387351] (unitree_guide2) StdoutLine: {'line': b'3: +  _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();\n'}
[4.387392] (unitree_guide2) StdoutLine: {'line': b'3: @@ -165 +174 @@\n'}
[4.387433] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.387474] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.387515] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.387557] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/control/BalanceCtrl.cpp':\n"}
[4.387598] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.387639] (unitree_guide2) StdoutLine: {'line': b'3: --- src/control/BalanceCtrl.cpp\n'}
[4.387680] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/control/BalanceCtrl.cpp.uncrustify\n'}
[4.387721] (unitree_guide2) StdoutLine: {'line': b'3: @@ -9,9 +9,10 @@\n'}
[4.387762] (unitree_guide2) StdoutLine: {'line': b'3: -            : _mass(mass), _Ib(Ib), _S(S), _alpha(alpha), _beta(beta){\n'}
[4.387804] (unitree_guide2) StdoutLine: {'line': b'3: -    _Fprev.setZero();\n'}
[4.387845] (unitree_guide2) StdoutLine: {'line': b'3: -    _g << 0, 0, -9.81;\n'}
[4.387886] (unitree_guide2) StdoutLine: {'line': b'3: -    _fricRatio = 0.3;\n'}
[4.387926] (unitree_guide2) StdoutLine: {'line': b'3: -    _fricMat <<  1,  0, _fricRatio,\n'}
[4.387967] (unitree_guide2) StdoutLine: {'line': b'3: -                -1,  0, _fricRatio,\n'}
[4.388008] (unitree_guide2) StdoutLine: {'line': b'3: -                 0,  1, _fricRatio,\n'}
[4.388048] (unitree_guide2) StdoutLine: {'line': b'3: -                 0, -1, _fricRatio,\n'}
[4.388089] (unitree_guide2) StdoutLine: {'line': b'3: -                 0,  0, 1;\n'}
[4.388130] (unitree_guide2) StdoutLine: {'line': b'3: +: _mass(mass), _Ib(Ib), _S(S), _alpha(alpha), _beta(beta)\n'}
[4.388172] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.388213] (unitree_guide2) StdoutLine: {'line': b'3: +  _Fprev.setZero();\n'}
[4.388254] (unitree_guide2) StdoutLine: {'line': b'3: +  _g << 0, 0, -9.81;\n'}
[4.388295] (unitree_guide2) StdoutLine: {'line': b'3: +  _fricRatio = 0.3;\n'}
[4.388336] (unitree_guide2) StdoutLine: {'line': b'3: +  _fricMat << 1, 0, _fricRatio,\n'}
[4.388377] (unitree_guide2) StdoutLine: {'line': b'3: +    -1, 0, _fricRatio,\n'}
[4.388418] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 1, _fricRatio,\n'}
[4.388492] (unitree_guide2) StdoutLine: {'line': b'3: +    0, -1, _fricRatio,\n'}
[4.388536] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 1;\n'}
[4.388578] (unitree_guide2) StdoutLine: {'line': b'3: @@ -20,3 +21,4 @@\n'}
[4.388619] (unitree_guide2) StdoutLine: {'line': b'3: -BalanceCtrl::BalanceCtrl(QuadrupedRobot *robModel){\n'}
[4.388660] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec6 s;\n'}
[4.388701] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec12 w, u;\n'}
[4.388757] (unitree_guide2) StdoutLine: {'line': b'3: +BalanceCtrl::BalanceCtrl(QuadrupedRobot * robModel)\n'}
[4.388800] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.388843] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec6 s;\n'}
[4.388885] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec12 w, u;\n'}
[4.388928] (unitree_guide2) StdoutLine: {'line': b'3: @@ -24,4 +26,4 @@\n'}
[4.388970] (unitree_guide2) StdoutLine: {'line': b'3: -    _mass = robModel->getRobMass();\n'}
[4.389012] (unitree_guide2) StdoutLine: {'line': b'3: -    _pcb = robModel->getPcb();\n'}
[4.389054] (unitree_guide2) StdoutLine: {'line': b'3: -    _Ib = robModel->getRobInertial();\n'}
[4.389096] (unitree_guide2) StdoutLine: {'line': b'3: -    _g << 0, 0, -9.81;\n'}
[4.389138] (unitree_guide2) StdoutLine: {'line': b'3: +  _mass = robModel->getRobMass();\n'}
[4.389179] (unitree_guide2) StdoutLine: {'line': b'3: +  _pcb = robModel->getPcb();\n'}
[4.389221] (unitree_guide2) StdoutLine: {'line': b'3: +  _Ib = robModel->getRobInertial();\n'}
[4.389262] (unitree_guide2) StdoutLine: {'line': b'3: +  _g << 0, 0, -9.81;\n'}
[4.389308] (unitree_guide2) StdoutLine: {'line': b'3: @@ -29,5 +31,5 @@\n'}
[4.389350] (unitree_guide2) StdoutLine: {'line': b'3: -    w << 10, 10, 4, 10, 10, 4, 10, 10, 4, 10, 10, 4;\n'}
[4.389392] (unitree_guide2) StdoutLine: {'line': b'3: -    u << 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3;\n'}
[4.389434] (unitree_guide2) StdoutLine: {'line': b'3: -    _alpha = 0.001;\n'}
[4.389476] (unitree_guide2) StdoutLine: {'line': b'3: -    _beta  = 0.1;\n'}
[4.389518] (unitree_guide2) StdoutLine: {'line': b'3: -    _fricRatio = 0.4;\n'}
[4.389560] (unitree_guide2) StdoutLine: {'line': b'3: +  w << 10, 10, 4, 10, 10, 4, 10, 10, 4, 10, 10, 4;\n'}
[4.389602] (unitree_guide2) StdoutLine: {'line': b'3: +  u << 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3;\n'}
[4.389644] (unitree_guide2) StdoutLine: {'line': b'3: +  _alpha = 0.001;\n'}
[4.389686] (unitree_guide2) StdoutLine: {'line': b'3: +  _beta = 0.1;\n'}
[4.389728] (unitree_guide2) StdoutLine: {'line': b'3: +  _fricRatio = 0.4;\n'}
[4.389770] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35 +37 @@\n'}
[4.389812] (unitree_guide2) StdoutLine: {'line': b'3: -    s << 20, 20, 50, 450, 450, 450; \n'}
[4.389854] (unitree_guide2) StdoutLine: {'line': b'3: +  s << 20, 20, 50, 450, 450, 450;\n'}
[4.389896] (unitree_guide2) StdoutLine: {'line': b'3: @@ -37,10 +39,10 @@\n'}
[4.389938] (unitree_guide2) StdoutLine: {'line': b'3: -    _S = s.asDiagonal();\n'}
[4.389979] (unitree_guide2) StdoutLine: {'line': b'3: -    _W = w.asDiagonal();\n'}
[4.390021] (unitree_guide2) StdoutLine: {'line': b'3: -    _U = u.asDiagonal();\n'}
[4.390062] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.390103] (unitree_guide2) StdoutLine: {'line': b'3: -    _Fprev.setZero();\n'}
[4.390145] (unitree_guide2) StdoutLine: {'line': b'3: -    _fricMat <<  1,  0, _fricRatio,\n'}
[4.390187] (unitree_guide2) StdoutLine: {'line': b'3: -                -1,  0, _fricRatio,\n'}
[4.390229] (unitree_guide2) StdoutLine: {'line': b'3: -                 0,  1, _fricRatio,\n'}
[4.390271] (unitree_guide2) StdoutLine: {'line': b'3: -                 0, -1, _fricRatio,\n'}
[4.390313] (unitree_guide2) StdoutLine: {'line': b'3: -                 0,  0, 1;\n'}
[4.390355] (unitree_guide2) StdoutLine: {'line': b'3: +  _S = s.asDiagonal();\n'}
[4.390398] (unitree_guide2) StdoutLine: {'line': b'3: +  _W = w.asDiagonal();\n'}
[4.390440] (unitree_guide2) StdoutLine: {'line': b'3: +  _U = u.asDiagonal();\n'}
[4.390481] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.390523] (unitree_guide2) StdoutLine: {'line': b'3: +  _Fprev.setZero();\n'}
[4.390565] (unitree_guide2) StdoutLine: {'line': b'3: +  _fricMat << 1, 0, _fricRatio,\n'}
[4.390607] (unitree_guide2) StdoutLine: {'line': b'3: +    -1, 0, _fricRatio,\n'}
[4.390664] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 1, _fricRatio,\n'}
[4.390708] (unitree_guide2) StdoutLine: {'line': b'3: +    0, -1, _fricRatio,\n'}
[4.390751] (unitree_guide2) StdoutLine: {'line': b'3: +    0, 0, 1;\n'}
[4.390794] (unitree_guide2) StdoutLine: {'line': b'3: @@ -49,4 +51,5 @@\n'}
[4.390837] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 BalanceCtrl::calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact){\n'}
[4.390881] (unitree_guide2) StdoutLine: {'line': b'3: -    calMatrixA(feetPos2B, rotM, contact);\n'}
[4.390924] (unitree_guide2) StdoutLine: {'line': b'3: -    calVectorBd(ddPcd, dWbd, rotM);\n'}
[4.390968] (unitree_guide2) StdoutLine: {'line': b'3: -    calConstraints(contact);\n'}
[4.391011] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 BalanceCtrl::calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact)\n'}
[4.391055] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.391098] (unitree_guide2) StdoutLine: {'line': b'3: +  calMatrixA(feetPos2B, rotM, contact);\n'}
[4.391142] (unitree_guide2) StdoutLine: {'line': b'3: +  calVectorBd(ddPcd, dWbd, rotM);\n'}
[4.391185] (unitree_guide2) StdoutLine: {'line': b'3: +  calConstraints(contact);\n'}
[4.391229] (unitree_guide2) StdoutLine: {'line': b'3: @@ -54,2 +57,2 @@\n'}
[4.391272] (unitree_guide2) StdoutLine: {'line': b'3: -    _G = _A.transpose()*_S*_A + _alpha*_W + _beta*_U;\n'}
[4.391320] (unitree_guide2) StdoutLine: {'line': b'3: -    _g0T = -_bd.transpose()*_S*_A - _beta*_Fprev.transpose()*_U;\n'}
[4.391364] (unitree_guide2) StdoutLine: {'line': b'3: +  _G = _A.transpose() * _S * _A + _alpha * _W + _beta * _U;\n'}
[4.391407] (unitree_guide2) StdoutLine: {'line': b'3: +  _g0T = -_bd.transpose() * _S * _A - _beta * _Fprev.transpose() * _U;\n'}
[4.391451] (unitree_guide2) StdoutLine: {'line': b'3: @@ -57 +60 @@\n'}
[4.391504] (unitree_guide2) StdoutLine: {'line': b'3: -    solveQP();\n'}
[4.391547] (unitree_guide2) StdoutLine: {'line': b'3: +  solveQP();\n'}
[4.391590] (unitree_guide2) StdoutLine: {'line': b'3: @@ -59,2 +62,2 @@\n'}
[4.391633] (unitree_guide2) StdoutLine: {'line': b'3: -    _Fprev = _F;\n'}
[4.391676] (unitree_guide2) StdoutLine: {'line': b'3: -    return vec12ToVec34(_F);\n'}
[4.391720] (unitree_guide2) StdoutLine: {'line': b'3: +  _Fprev = _F;\n'}
[4.391763] (unitree_guide2) StdoutLine: {'line': b'3: +  return vec12ToVec34(_F);\n'}
[4.391806] (unitree_guide2) StdoutLine: {'line': b'3: @@ -63,5 +66,6 @@\n'}
[4.391849] (unitree_guide2) StdoutLine: {'line': b'3: -void BalanceCtrl::calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact){\n'}
[4.391893] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.391937] (unitree_guide2) StdoutLine: {'line': b'3: -        _A.block(0, 3*i, 3, 3) = I3;\n'}
[4.391980] (unitree_guide2) StdoutLine: {'line': b'3: -        _A.block(3, 3*i, 3, 3) = skew(feetPos2B.col(i) - rotM*_pcb);\n'}
[4.392024] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.392067] (unitree_guide2) StdoutLine: {'line': b'3: +void BalanceCtrl::calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact)\n'}
[4.392111] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.392154] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.392197] (unitree_guide2) StdoutLine: {'line': b'3: +    _A.block(0, 3 * i, 3, 3) = I3;\n'}
[4.392241] (unitree_guide2) StdoutLine: {'line': b'3: +    _A.block(3, 3 * i, 3, 3) = skew(feetPos2B.col(i) - rotM * _pcb);\n'}
[4.392284] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.392327] (unitree_guide2) StdoutLine: {'line': b'3: @@ -70,3 +74,4 @@\n'}
[4.392370] (unitree_guide2) StdoutLine: {'line': b'3: -void BalanceCtrl::calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM){\n'}
[4.392500] (unitree_guide2) StdoutLine: {'line': b'3: -    _bd.head(3) = _mass * (ddPcd - _g);\n'}
[4.392554] (unitree_guide2) StdoutLine: {'line': b'3: -    _bd.tail(3) = (rotM * _Ib * rotM.transpose()) * dWbd;\n'}
[4.392599] (unitree_guide2) StdoutLine: {'line': b'3: +void BalanceCtrl::calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM)\n'}
[4.392650] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.392694] (unitree_guide2) StdoutLine: {'line': b'3: +  _bd.head(3) = _mass * (ddPcd - _g);\n'}
[4.392738] (unitree_guide2) StdoutLine: {'line': b'3: +  _bd.tail(3) = (rotM * _Ib * rotM.transpose()) * dWbd;\n'}
[4.392782] (unitree_guide2) StdoutLine: {'line': b'3: @@ -75,6 +80,6 @@\n'}
[4.392826] (unitree_guide2) StdoutLine: {'line': b'3: -void BalanceCtrl::calConstraints(VecInt4 contact){\n'}
[4.392869] (unitree_guide2) StdoutLine: {'line': b'3: -    int contactLegNum = 0;\n'}
[4.392911] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.392954] (unitree_guide2) StdoutLine: {'line': b'3: -        if(contact(i) == 1){\n'}
[4.392997] (unitree_guide2) StdoutLine: {'line': b'3: -            contactLegNum += 1;\n'}
[4.393040] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.393082] (unitree_guide2) StdoutLine: {'line': b'3: +void BalanceCtrl::calConstraints(VecInt4 contact)\n'}
[4.393125] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.393168] (unitree_guide2) StdoutLine: {'line': b'3: +  int contactLegNum = 0;\n'}
[4.393211] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.393253] (unitree_guide2) StdoutLine: {'line': b'3: +    if (contact(i) == 1) {\n'}
[4.393296] (unitree_guide2) StdoutLine: {'line': b'3: +      contactLegNum += 1;\n'}
[4.393344] (unitree_guide2) StdoutLine: {'line': b'3: @@ -81,0 +87 @@\n'}
[4.393387] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.393430] (unitree_guide2) StdoutLine: {'line': b'3: @@ -83,4 +89,4 @@\n'}
[4.393474] (unitree_guide2) StdoutLine: {'line': b'3: -    _CI.resize(5*contactLegNum, 12);\n'}
[4.393518] (unitree_guide2) StdoutLine: {'line': b'3: -    _ci0.resize(5*contactLegNum);\n'}
[4.393561] (unitree_guide2) StdoutLine: {'line': b'3: -    _CE.resize(3*(4 - contactLegNum), 12);\n'}
[4.393604] (unitree_guide2) StdoutLine: {'line': b'3: -    _ce0.resize(3*(4 - contactLegNum));\n'}
[4.393647] (unitree_guide2) StdoutLine: {'line': b'3: +  _CI.resize(5 * contactLegNum, 12);\n'}
[4.393689] (unitree_guide2) StdoutLine: {'line': b'3: +  _ci0.resize(5 * contactLegNum);\n'}
[4.393732] (unitree_guide2) StdoutLine: {'line': b'3: +  _CE.resize(3 * (4 - contactLegNum), 12);\n'}
[4.393775] (unitree_guide2) StdoutLine: {'line': b'3: +  _ce0.resize(3 * (4 - contactLegNum));\n'}
[4.393817] (unitree_guide2) StdoutLine: {'line': b'3: @@ -88,4 +94,4 @@\n'}
[4.393859] (unitree_guide2) StdoutLine: {'line': b'3: -    _CI.setZero();\n'}
[4.393902] (unitree_guide2) StdoutLine: {'line': b'3: -    _ci0.setZero();\n'}
[4.393945] (unitree_guide2) StdoutLine: {'line': b'3: -    _CE.setZero();\n'}
[4.393988] (unitree_guide2) StdoutLine: {'line': b'3: -    _ce0.setZero();\n'}
[4.394030] (unitree_guide2) StdoutLine: {'line': b'3: +  _CI.setZero();\n'}
[4.394073] (unitree_guide2) StdoutLine: {'line': b'3: +  _ci0.setZero();\n'}
[4.394116] (unitree_guide2) StdoutLine: {'line': b'3: +  _CE.setZero();\n'}
[4.394159] (unitree_guide2) StdoutLine: {'line': b'3: +  _ce0.setZero();\n'}
[4.394203] (unitree_guide2) StdoutLine: {'line': b'3: @@ -93,10 +99,9 @@\n'}
[4.394246] (unitree_guide2) StdoutLine: {'line': b'3: -    int ceID = 0;\n'}
[4.394289] (unitree_guide2) StdoutLine: {'line': b'3: -    int ciID = 0;\n'}
[4.394332] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<4; ++i){\n'}
[4.394375] (unitree_guide2) StdoutLine: {'line': b'3: -        if(contact(i) == 1){\n'}
[4.394418] (unitree_guide2) StdoutLine: {'line': b'3: -            _CI.block(5*ciID, 3*i, 5, 3) = _fricMat;\n'}
[4.394462] (unitree_guide2) StdoutLine: {'line': b'3: -            ++ciID;\n'}
[4.394505] (unitree_guide2) StdoutLine: {'line': b'3: -        }else{\n'}
[4.394547] (unitree_guide2) StdoutLine: {'line': b'3: -            _CE.block(3*ceID, 3*i, 3, 3) = I3;\n'}
[4.394591] (unitree_guide2) StdoutLine: {'line': b'3: -            ++ceID;\n'}
[4.394633] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.394676] (unitree_guide2) StdoutLine: {'line': b'3: +  int ceID = 0;\n'}
[4.394719] (unitree_guide2) StdoutLine: {'line': b'3: +  int ciID = 0;\n'}
[4.394762] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.394806] (unitree_guide2) StdoutLine: {'line': b'3: +    if (contact(i) == 1) {\n'}
[4.394850] (unitree_guide2) StdoutLine: {'line': b'3: +      _CI.block(5 * ciID, 3 * i, 5, 3) = _fricMat;\n'}
[4.394893] (unitree_guide2) StdoutLine: {'line': b'3: +      ++ciID;\n'}
[4.394937] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.394981] (unitree_guide2) StdoutLine: {'line': b'3: +      _CE.block(3 * ceID, 3 * i, 3, 3) = I3;\n'}
[4.395024] (unitree_guide2) StdoutLine: {'line': b'3: +      ++ceID;\n'}
[4.395067] (unitree_guide2) StdoutLine: {'line': b'3: @@ -103,0 +109 @@\n'}
[4.395109] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.395152] (unitree_guide2) StdoutLine: {'line': b'3: @@ -106,4 +112,5 @@\n'}
[4.395195] (unitree_guide2) StdoutLine: {'line': b'3: -void BalanceCtrl::solveQP(){\n'}
[4.395238] (unitree_guide2) StdoutLine: {'line': b'3: -    int n = _F.size();\n'}
[4.395281] (unitree_guide2) StdoutLine: {'line': b'3: -    int m = _ce0.size();\n'}
[4.395324] (unitree_guide2) StdoutLine: {'line': b'3: -    int p = _ci0.size();\n'}
[4.395366] (unitree_guide2) StdoutLine: {'line': b'3: +void BalanceCtrl::solveQP()\n'}
[4.395413] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.395456] (unitree_guide2) StdoutLine: {'line': b'3: +  int n = _F.size();\n'}
[4.395499] (unitree_guide2) StdoutLine: {'line': b'3: +  int m = _ce0.size();\n'}
[4.395543] (unitree_guide2) StdoutLine: {'line': b'3: +  int p = _ci0.size();\n'}
[4.395586] (unitree_guide2) StdoutLine: {'line': b'3: @@ -111,7 +118,7 @@\n'}
[4.395629] (unitree_guide2) StdoutLine: {'line': b'3: -    G.resize(n, n);\n'}
[4.395672] (unitree_guide2) StdoutLine: {'line': b'3: -    CE.resize(n, m);\n'}
[4.395716] (unitree_guide2) StdoutLine: {'line': b'3: -    CI.resize(n, p);\n'}
[4.395760] (unitree_guide2) StdoutLine: {'line': b'3: -    g0.resize(n);\n'}
[4.395803] (unitree_guide2) StdoutLine: {'line': b'3: -    ce0.resize(m);\n'}
[4.395845] (unitree_guide2) StdoutLine: {'line': b'3: -    ci0.resize(p);\n'}
[4.395887] (unitree_guide2) StdoutLine: {'line': b'3: -    x.resize(n);\n'}
[4.395929] (unitree_guide2) StdoutLine: {'line': b'3: +  G.resize(n, n);\n'}
[4.395971] (unitree_guide2) StdoutLine: {'line': b'3: +  CE.resize(n, m);\n'}
[4.396014] (unitree_guide2) StdoutLine: {'line': b'3: +  CI.resize(n, p);\n'}
[4.396056] (unitree_guide2) StdoutLine: {'line': b'3: +  g0.resize(n);\n'}
[4.396098] (unitree_guide2) StdoutLine: {'line': b'3: +  ce0.resize(m);\n'}
[4.396141] (unitree_guide2) StdoutLine: {'line': b'3: +  ci0.resize(p);\n'}
[4.396183] (unitree_guide2) StdoutLine: {'line': b'3: +  x.resize(n);\n'}
[4.396226] (unitree_guide2) StdoutLine: {'line': b'3: @@ -119,4 +126,3 @@\n'}
[4.396269] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i = 0; i < n; ++i) {\n'}
[4.396313] (unitree_guide2) StdoutLine: {'line': b'3: -        for (int j = 0; j < n; ++j) {\n'}
[4.396356] (unitree_guide2) StdoutLine: {'line': b'3: -            G[i][j] = _G(i, j);\n'}
[4.396400] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.396443] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < n; ++i) {\n'}
[4.396486] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int j = 0; j < n; ++j) {\n'}
[4.396529] (unitree_guide2) StdoutLine: {'line': b'3: +      G[i][j] = _G(i, j);\n'}
[4.396572] (unitree_guide2) StdoutLine: {'line': b'3: @@ -123,0 +130 @@\n'}
[4.396615] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.396672] (unitree_guide2) StdoutLine: {'line': b'3: @@ -125,4 +132,3 @@\n'}
[4.396733] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i = 0; i < n; ++i) {\n'}
[4.396790] (unitree_guide2) StdoutLine: {'line': b'3: -        for (int j = 0; j < m; ++j) {\n'}
[4.396851] (unitree_guide2) StdoutLine: {'line': b'3: -            CE[i][j] = (_CE.transpose())(i, j);\n'}
[4.396908] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.396949] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < n; ++i) {\n'}
[4.397010] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int j = 0; j < m; ++j) {\n'}
[4.397053] (unitree_guide2) StdoutLine: {'line': b'3: +      CE[i][j] = (_CE.transpose())(i, j);\n'}
[4.397096] (unitree_guide2) StdoutLine: {'line': b'3: @@ -129,0 +136 @@\n'}
[4.397140] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.397197] (unitree_guide2) StdoutLine: {'line': b'3: @@ -131,4 +138,3 @@\n'}
[4.397240] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i = 0; i < n; ++i) {\n'}
[4.397282] (unitree_guide2) StdoutLine: {'line': b'3: -        for (int j = 0; j < p; ++j) {\n'}
[4.397324] (unitree_guide2) StdoutLine: {'line': b'3: -            CI[i][j] = (_CI.transpose())(i, j);\n'}
[4.397366] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.397408] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < n; ++i) {\n'}
[4.397454] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int j = 0; j < p; ++j) {\n'}
[4.397506] (unitree_guide2) StdoutLine: {'line': b'3: +      CI[i][j] = (_CI.transpose())(i, j);\n'}
[4.397549] (unitree_guide2) StdoutLine: {'line': b'3: @@ -135,0 +142 @@\n'}
[4.397590] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.397632] (unitree_guide2) StdoutLine: {'line': b'3: @@ -137,3 +144,3 @@\n'}
[4.397677] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i = 0; i < n; ++i) {\n'}
[4.397718] (unitree_guide2) StdoutLine: {'line': b'3: -        g0[i] = _g0T[i];\n'}
[4.397760] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.397801] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < n; ++i) {\n'}
[4.397842] (unitree_guide2) StdoutLine: {'line': b'3: +    g0[i] = _g0T[i];\n'}
[4.397884] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.397926] (unitree_guide2) StdoutLine: {'line': b'3: @@ -141,3 +148,3 @@\n'}
[4.397967] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i = 0; i < m; ++i) {\n'}
[4.398009] (unitree_guide2) StdoutLine: {'line': b'3: -        ce0[i] = _ce0[i];\n'}
[4.398051] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.398092] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < m; ++i) {\n'}
[4.398134] (unitree_guide2) StdoutLine: {'line': b'3: +    ce0[i] = _ce0[i];\n'}
[4.398318] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.398452] (unitree_guide2) StdoutLine: {'line': b'3: @@ -145,3 +152,3 @@\n'}
[4.398499] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i = 0; i < p; ++i) {\n'}
[4.398541] (unitree_guide2) StdoutLine: {'line': b'3: -        ci0[i] = _ci0[i];\n'}
[4.398583] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.398625] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < p; ++i) {\n'}
[4.398668] (unitree_guide2) StdoutLine: {'line': b'3: +    ci0[i] = _ci0[i];\n'}
[4.398709] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.398766] (unitree_guide2) StdoutLine: {'line': b'3: @@ -149 +156 @@\n'}
[4.398807] (unitree_guide2) StdoutLine: {'line': b'3: -    double value = solve_quadprog(G, g0, CE, ce0, CI, ci0, x);\n'}
[4.398849] (unitree_guide2) StdoutLine: {'line': b'3: +  double value = solve_quadprog(G, g0, CE, ce0, CI, ci0, x);\n'}
[4.398891] (unitree_guide2) StdoutLine: {'line': b'3: @@ -151,4 +158,4 @@\n'}
[4.398931] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int i = 0; i < n; ++i) {\n'}
[4.398973] (unitree_guide2) StdoutLine: {'line': b'3: -        _F[i] = x[i];\n'}
[4.399014] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.399055] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.399096] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i = 0; i < n; ++i) {\n'}
[4.399156] (unitree_guide2) StdoutLine: {'line': b'3: +    _F[i] = x[i];\n'}
[4.399212] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.399289] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.399335] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.399376] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/control/ControlFrame.cpp':\n"}
[4.399418] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.399458] (unitree_guide2) StdoutLine: {'line': b'3: --- src/control/ControlFrame.cpp\n'}
[4.399499] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/control/ControlFrame.cpp.uncrustify\n'}
[4.399540] (unitree_guide2) StdoutLine: {'line': b'3: @@ -6,2 +6,4 @@\n'}
[4.399580] (unitree_guide2) StdoutLine: {'line': b'3: -ControlFrame::ControlFrame(CtrlComponents *ctrlComp):_ctrlComp(ctrlComp){\n'}
[4.399638] (unitree_guide2) StdoutLine: {'line': b'3: -    _FSMController = new FSM(_ctrlComp);\n'}
[4.399680] (unitree_guide2) StdoutLine: {'line': b'3: +ControlFrame::ControlFrame(CtrlComponents * ctrlComp)\n'}
[4.399722] (unitree_guide2) StdoutLine: {'line': b'3: +: _ctrlComp(ctrlComp)\n'}
[4.399763] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.399805] (unitree_guide2) StdoutLine: {'line': b'3: +  _FSMController = new FSM(_ctrlComp);\n'}
[4.399847] (unitree_guide2) StdoutLine: {'line': b'3: @@ -10,3 +12,4 @@\n'}
[4.399889] (unitree_guide2) StdoutLine: {'line': b'3: -void ControlFrame::run(){\n'}
[4.399931] (unitree_guide2) StdoutLine: {'line': b'3: -    _FSMController->run();\n'}
[4.399973] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.400014] (unitree_guide2) StdoutLine: {'line': b'3: +void ControlFrame::run()\n'}
[4.400056] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.400105] (unitree_guide2) StdoutLine: {'line': b'3: +  _FSMController->run();\n'}
[4.400147] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.400188] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.400230] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/control/Estimator.cpp':\n"}
[4.400271] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.400313] (unitree_guide2) StdoutLine: {'line': b'3: --- src/control/Estimator.cpp\n'}
[4.400356] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/control/Estimator.cpp.uncrustify\n'}
[4.400398] (unitree_guide2) StdoutLine: {'line': b'3: @@ -8,24 +8,25 @@\n'}
[4.400440] (unitree_guide2) StdoutLine: {'line': b'3: -Estimator::Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, \n'}
[4.400482] (unitree_guide2) StdoutLine: {'line': b'3: -                     VecInt4 *contact, Vec4 *phase, double dt, Vec18 Qdig,\n'}
[4.400525] (unitree_guide2) StdoutLine: {'line': b'3: -                     std::string testName)\n'}
[4.400567] (unitree_guide2) StdoutLine: {'line': b'3: -          :_robModel(robotModel), _lowState(lowState), _contact(contact),\n'}
[4.400609] (unitree_guide2) StdoutLine: {'line': b'3: -           _phase(phase), _dt(dt), _Qdig(Qdig), _estName(testName){\n'}
[4.400652] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.400694] (unitree_guide2) StdoutLine: {'line': b'3: -    _initSystem();\n'}
[4.400736] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.400777] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.400819] (unitree_guide2) StdoutLine: {'line': b'3: -Estimator::Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, \n'}
[4.400861] (unitree_guide2) StdoutLine: {'line': b'3: -                     VecInt4 *contact, Vec4 *phase, double dt)\n'}
[4.400903] (unitree_guide2) StdoutLine: {'line': b'3: -          :_robModel(robotModel), _lowState(lowState), _contact(contact), \n'}
[4.400945] (unitree_guide2) StdoutLine: {'line': b'3: -           _phase(phase), _dt(dt){\n'}
[4.400987] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.401028] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<_Qdig.rows(); ++i){\n'}
[4.401070] (unitree_guide2) StdoutLine: {'line': b'3: -        if(i < 3){\n'}
[4.401112] (unitree_guide2) StdoutLine: {'line': b'3: -            _Qdig(i) = 0.0003;\n'}
[4.401154] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.401196] (unitree_guide2) StdoutLine: {'line': b'3: -        else if(i < 6){\n'}
[4.401238] (unitree_guide2) StdoutLine: {'line': b'3: -            _Qdig(i) = 0.0003;\n'}
[4.401281] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.401323] (unitree_guide2) StdoutLine: {'line': b'3: -        else{\n'}
[4.401365] (unitree_guide2) StdoutLine: {'line': b'3: -            _Qdig(i) = 0.01;\n'}
[4.401408] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.401450] (unitree_guide2) StdoutLine: {'line': b'3: +Estimator::Estimator(\n'}
[4.401496] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * robotModel, LowlevelState * lowState,\n'}
[4.401539] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * contact, Vec4 * phase, double dt, Vec18 Qdig,\n'}
[4.401601] (unitree_guide2) StdoutLine: {'line': b'3: +  std::string testName)\n'}
[4.401658] (unitree_guide2) StdoutLine: {'line': b'3: +: _robModel(robotModel), _lowState(lowState), _contact(contact),\n'}
[4.401701] (unitree_guide2) StdoutLine: {'line': b'3: +  _phase(phase), _dt(dt), _Qdig(Qdig), _estName(testName)\n'}
[4.401744] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.401786] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.401828] (unitree_guide2) StdoutLine: {'line': b'3: +  _initSystem();\n'}
[4.401870] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.401912] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.401955] (unitree_guide2) StdoutLine: {'line': b'3: +Estimator::Estimator(\n'}
[4.401998] (unitree_guide2) StdoutLine: {'line': b'3: +  QuadrupedRobot * robotModel, LowlevelState * lowState,\n'}
[4.402040] (unitree_guide2) StdoutLine: {'line': b'3: +  VecInt4 * contact, Vec4 * phase, double dt)\n'}
[4.402088] (unitree_guide2) StdoutLine: {'line': b'3: +: _robModel(robotModel), _lowState(lowState), _contact(contact),\n'}
[4.402135] (unitree_guide2) StdoutLine: {'line': b'3: +  _phase(phase), _dt(dt)\n'}
[4.402178] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.402219] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.402262] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < _Qdig.rows(); ++i) {\n'}
[4.402304] (unitree_guide2) StdoutLine: {'line': b'3: +    if (i < 3) {\n'}
[4.402346] (unitree_guide2) StdoutLine: {'line': b'3: +      _Qdig(i) = 0.0003;\n'}
[4.402388] (unitree_guide2) StdoutLine: {'line': b'3: +    } else if (i < 6) {\n'}
[4.402429] (unitree_guide2) StdoutLine: {'line': b'3: +      _Qdig(i) = 0.0003;\n'}
[4.402471] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.402512] (unitree_guide2) StdoutLine: {'line': b'3: +      _Qdig(i) = 0.01;\n'}
[4.402554] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,86 +34,145 @@\n'}
[4.402596] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.402639] (unitree_guide2) StdoutLine: {'line': b'3: -    _estName = "current";\n'}
[4.402701] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.402757] (unitree_guide2) StdoutLine: {'line': b'3: -    _initSystem();\n'}
[4.402800] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.402841] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.402883] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.402925] (unitree_guide2) StdoutLine: {'line': b'3: -Estimator::~Estimator(){\n'}
[4.402967] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.403009] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.403051] (unitree_guide2) StdoutLine: {'line': b'3: -void Estimator::_initSystem(){\n'}
[4.403092] (unitree_guide2) StdoutLine: {'line': b'3: -    _g << 0, 0, -9.81;\n'}
[4.403135] (unitree_guide2) StdoutLine: {'line': b'3: -    _largeVariance = 100;\n'}
[4.403176] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.403218] (unitree_guide2) StdoutLine: {'line': b'3: -    _xhat.setZero();\n'}
[4.403260] (unitree_guide2) StdoutLine: {'line': b'3: -    _u.setZero();\n'}
[4.403302] (unitree_guide2) StdoutLine: {'line': b'3: -    _A.setZero();\n'}
[4.403344] (unitree_guide2) StdoutLine: {'line': b'3: -    _A.block(0, 0, 3, 3) = I3;\n'}
[4.403386] (unitree_guide2) StdoutLine: {'line': b'3: -    _A.block(0, 3, 3, 3) = I3 * _dt;\n'}
[4.403429] (unitree_guide2) StdoutLine: {'line': b'3: -    _A.block(3, 3, 3, 3) = I3;\n'}
[4.403471] (unitree_guide2) StdoutLine: {'line': b'3: -    _A.block(6, 6, 12, 12) = I12;\n'}
[4.403512] (unitree_guide2) StdoutLine: {'line': b'3: -    _B.setZero();\n'}
[4.403555] (unitree_guide2) StdoutLine: {'line': b'3: -    _B.block(3, 0, 3, 3) = I3 * _dt;\n'}
[4.403596] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.setZero();\n'}
[4.403638] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(0, 0, 3, 3) = -I3;\n'}
[4.403680] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(3, 0, 3, 3) = -I3;\n'}
[4.403722] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(6, 0, 3, 3) = -I3;\n'}
[4.403764] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(9, 0, 3, 3) = -I3;\n'}
[4.403805] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(12, 3, 3, 3) = -I3;\n'}
[4.403857] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(15, 3, 3, 3) = -I3;\n'}
[4.403899] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(18, 3, 3, 3) = -I3;\n'}
[4.403941] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(21, 3, 3, 3) = -I3;\n'}
[4.403984] (unitree_guide2) StdoutLine: {'line': b'3: -    _C.block(0, 6, 12, 12) = I12;\n'}
[4.404026] (unitree_guide2) StdoutLine: {'line': b'3: -    _C(24, 8) = 1;\n'}
[4.404068] (unitree_guide2) StdoutLine: {'line': b'3: -    _C(25, 11) = 1;\n'}
[4.404111] (unitree_guide2) StdoutLine: {'line': b'3: -    _C(26, 14) = 1;\n'}
[4.404153] (unitree_guide2) StdoutLine: {'line': b'3: -    _C(27, 17) = 1;\n'}
[4.404195] (unitree_guide2) StdoutLine: {'line': b'3: -    _P.setIdentity();\n'}
[4.404242] (unitree_guide2) StdoutLine: {'line': b'3: -    _P = _largeVariance * _P;\n'}
[4.404284] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.404326] (unitree_guide2) StdoutLine: {'line': b'3: -    _RInit <<  0.008 , 0.012 ,-0.000 ,-0.009 , 0.012 , 0.000 , 0.009 ,-0.009 ,-0.000 ,-0.009 ,-0.009 , 0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 ,-0.000 ,-0.001 ,-0.002 , 0.000 ,-0.000 ,-0.003 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.404371] (unitree_guide2) StdoutLine: {'line': b'3: -               0.012 , 0.019 ,-0.001 ,-0.014 , 0.018 ,-0.000 , 0.014 ,-0.013 ,-0.000 ,-0.014 ,-0.014 , 0.001 ,-0.001 , 0.001 ,-0.001 , 0.000 , 0.000 ,-0.001 ,-0.003 , 0.000 ,-0.001 ,-0.004 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.404414] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.000, -0.001,  0.001,  0.001, -0.001,  0.000, -0.000,  0.000, -0.000,  0.001,  0.000, -0.000,  0.000, -0.000,  0.000,  0.000, -0.000, -0.000,  0.000, -0.000, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404458] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.009, -0.014,  0.001,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001,  0.000,  0.000,  0.001, -0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404500] (unitree_guide2) StdoutLine: {'line': b'3: -               0.012 , 0.018 ,-0.001 ,-0.013 , 0.018 ,-0.000 , 0.013 ,-0.013 ,-0.000 ,-0.013 ,-0.013 , 0.001 ,-0.001 , 0.000 ,-0.001 , 0.000 , 0.001 ,-0.001 ,-0.003 , 0.000 ,-0.001 ,-0.004 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.404543] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 , 0.001 , 0.000 , 0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.404586] (unitree_guide2) StdoutLine: {'line': b'3: -               0.009 , 0.014 ,-0.000 ,-0.010 , 0.013 , 0.000 , 0.010 ,-0.010 ,-0.000 ,-0.010 ,-0.010 , 0.000 ,-0.001 , 0.000 ,-0.001 , 0.000 ,-0.000 ,-0.001 ,-0.001 , 0.000 ,-0.000 ,-0.003 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.404629] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.009, -0.013,  0.000,  0.010, -0.013,  0.000, -0.010,  0.009,  0.000,  0.010,  0.010, -0.000,  0.001, -0.000,  0.000, -0.000,  0.000,  0.001,  0.002,  0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404672] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.000, -0.000, -0.000,  0.000, -0.000, -0.000, -0.000,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000,  0.000, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404715] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.009, -0.014,  0.001,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001,  0.000,  0.000, -0.000, -0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404763] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.009, -0.014,  0.000,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001, -0.000,  0.000, -0.000,  0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.001,  0.001,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404807] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.001 ,-0.000 ,-0.000 , 0.001 ,-0.000 , 0.000 ,-0.000 , 0.000 ,-0.000 ,-0.000 , 0.001 , 0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.404850] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.000, -0.001,  0.000,  0.001, -0.001, -0.000, -0.001,  0.001,  0.000,  0.001,  0.001,  0.000,  1.708,  0.048,  0.784,  0.062,  0.042,  0.053,  0.077,  0.001, -0.061,  0.046, -0.019, -0.029,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404894] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.001 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 ,-0.000 , 0.048 , 5.001 ,-1.631 ,-0.036 , 0.144 , 0.040 , 0.036 , 0.016 ,-0.051 ,-0.067 ,-0.024 ,-0.005 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.404942] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.000, -0.001,  0.000,  0.000, -0.001, -0.000, -0.001,  0.000,  0.000,  0.000,  0.000, -0.000,  0.784, -1.631,  1.242,  0.057, -0.037,  0.018,  0.034, -0.017, -0.015,  0.058, -0.021, -0.029,  0.000,  0.000,  0.000,  0.000,\n'}
[4.404985] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.000 , 0.000 , 0.001 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 , 0.062 ,-0.036 , 0.057 , 6.228 ,-0.014 , 0.932 , 0.059 , 0.053 ,-0.069 , 0.148 , 0.015 ,-0.031 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.405035] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.000,  0.000, -0.000, -0.000,  0.001,  0.000, -0.000,  0.000,  0.000, -0.000,  0.000,  0.000,  0.042,  0.144, -0.037, -0.014,  3.011,  0.986,  0.076,  0.030, -0.052, -0.027,  0.057,  0.051,  0.000,  0.000,  0.000,  0.000,\n'}
[4.405078] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.001, -0.001, -0.000,  0.001, -0.001,  0.000, -0.001,  0.001, -0.000,  0.001,  0.001,  0.000,  0.053,  0.040,  0.018,  0.932,  0.986,  0.885,  0.090,  0.044, -0.055,  0.057,  0.051, -0.003,  0.000,  0.000,  0.000,  0.000,\n'}
[4.405121] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.002, -0.003,  0.000,  0.002, -0.003, -0.000, -0.001,  0.002,  0.000,  0.002,  0.002, -0.000,  0.077,  0.036,  0.034,  0.059,  0.076,  0.090,  6.230,  0.139,  0.763,  0.013, -0.019, -0.024,  0.000,  0.000,  0.000,  0.000,\n'}
[4.405163] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.001 , 0.016 ,-0.017 , 0.053 , 0.030 , 0.044 , 0.139 , 3.130 ,-1.128 ,-0.010 , 0.131 , 0.018 , 0.000 , 0.000 , 0.000 , 0.000,\n'}
[4.405206] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.000, -0.001, -0.000,  0.000, -0.001, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,  0.000, -0.061, -0.051, -0.015, -0.069, -0.052, -0.055,  0.763, -1.128,  0.866, -0.022, -0.053,  0.007,  0.000,  0.000,  0.000,  0.000,\n'}
[4.405249] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.003, -0.004, -0.000,  0.003, -0.004, -0.000, -0.003,  0.003,  0.000,  0.003,  0.003,  0.000,  0.046, -0.067,  0.058,  0.148, -0.027,  0.057,  0.013, -0.010, -0.022,  2.437, -0.102,  0.938,  0.000,  0.000,  0.000,  0.000,\n'}
[4.405291] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.000, -0.000,  0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000,  0.001,  0.000, -0.019, -0.024, -0.021,  0.015,  0.057,  0.051, -0.019,  0.131, -0.053, -0.102,  4.944,  1.724,  0.000,  0.000,  0.000,  0.000,\n'}
[4.405334] (unitree_guide2) StdoutLine: {'line': b'3: -               -0.001, -0.001,  0.000,  0.001, -0.001,  0.000, -0.001,  0.001, -0.000,  0.001,  0.001,  0.000, -0.029, -0.005, -0.029, -0.031,  0.051, -0.003, -0.024,  0.018,  0.007,  0.938,  1.724,  1.569,  0.000,  0.000,  0.000,  0.000,\n'}
[4.405376] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000 , 0.000 , 0.000,\n'}
[4.405419] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000 , 0.000,\n'}
[4.405465] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000,\n'}
[4.405512] (unitree_guide2) StdoutLine: {'line': b'3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0;\n'}
[4.405556] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.405599] (unitree_guide2) StdoutLine: {'line': b'3: -    /* A1 Worked */\n'}
[4.405641] (unitree_guide2) StdoutLine: {'line': b'3: -    _Cu <<   268.573,  -43.819, -147.211,\n'}
[4.405684] (unitree_guide2) StdoutLine: {'line': b'3: -            -43.819 ,  92.949 ,  58.082,\n'}
[4.405726] (unitree_guide2) StdoutLine: {'line': b'3: -            -147.211,   58.082,  302.120;\n'}
[4.405768] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.405809] (unitree_guide2) StdoutLine: {'line': b'3: -    _QInit = _Qdig.asDiagonal();\n'}
[4.405851] (unitree_guide2) StdoutLine: {'line': b'3: -    _QInit +=  _B * _Cu * _B.transpose();\n'}
[4.405892] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.405934] (unitree_guide2) StdoutLine: {'line': b'3: -    _RCheck  = new AvgCov(28, _estName + " R");\n'}
[4.405976] (unitree_guide2) StdoutLine: {'line': b'3: -    _uCheck  = new AvgCov(3,  _estName + " u");\n'}
[4.406018] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.406060] (unitree_guide2) StdoutLine: {'line': b'3: -    _vxFilter = new LPFilter(_dt, 3.0);\n'}
[4.406102] (unitree_guide2) StdoutLine: {'line': b'3: -    _vyFilter = new LPFilter(_dt, 3.0);\n'}
[4.406143] (unitree_guide2) StdoutLine: {'line': b'3: -    _vzFilter = new LPFilter(_dt, 3.0);\n'}
[4.406185] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.406227] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.406270] (unitree_guide2) StdoutLine: {'line': b'3: -    /* ROS odometry publisher */\n'}
[4.406312] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.406354] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.406396] (unitree_guide2) StdoutLine: {'line': b'3: +  _estName = "current";\n'}
[4.406438] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.406480] (unitree_guide2) StdoutLine: {'line': b'3: +  _initSystem();\n'}
[4.406522] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.406564] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.406605] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.406646] (unitree_guide2) StdoutLine: {'line': b'3: +Estimator::~Estimator()\n'}
[4.406688] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.406730] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.406771] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.406813] (unitree_guide2) StdoutLine: {'line': b'3: +void Estimator::_initSystem()\n'}
[4.406855] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.406897] (unitree_guide2) StdoutLine: {'line': b'3: +  _g << 0, 0, -9.81;\n'}
[4.406939] (unitree_guide2) StdoutLine: {'line': b'3: +  _largeVariance = 100;\n'}
[4.406981] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.407023] (unitree_guide2) StdoutLine: {'line': b'3: +  _xhat.setZero();\n'}
[4.407066] (unitree_guide2) StdoutLine: {'line': b'3: +  _u.setZero();\n'}
[4.407107] (unitree_guide2) StdoutLine: {'line': b'3: +  _A.setZero();\n'}
[4.407150] (unitree_guide2) StdoutLine: {'line': b'3: +  _A.block(0, 0, 3, 3) = I3;\n'}
[4.407191] (unitree_guide2) StdoutLine: {'line': b'3: +  _A.block(0, 3, 3, 3) = I3 * _dt;\n'}
[4.407233] (unitree_guide2) StdoutLine: {'line': b'3: +  _A.block(3, 3, 3, 3) = I3;\n'}
[4.407274] (unitree_guide2) StdoutLine: {'line': b'3: +  _A.block(6, 6, 12, 12) = I12;\n'}
[4.407315] (unitree_guide2) StdoutLine: {'line': b'3: +  _B.setZero();\n'}
[4.407356] (unitree_guide2) StdoutLine: {'line': b'3: +  _B.block(3, 0, 3, 3) = I3 * _dt;\n'}
[4.407397] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.setZero();\n'}
[4.407439] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(0, 0, 3, 3) = -I3;\n'}
[4.407491] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(3, 0, 3, 3) = -I3;\n'}
[4.407534] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(6, 0, 3, 3) = -I3;\n'}
[4.407581] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(9, 0, 3, 3) = -I3;\n'}
[4.407657] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(12, 3, 3, 3) = -I3;\n'}
[4.407700] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(15, 3, 3, 3) = -I3;\n'}
[4.407743] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(18, 3, 3, 3) = -I3;\n'}
[4.407785] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(21, 3, 3, 3) = -I3;\n'}
[4.407827] (unitree_guide2) StdoutLine: {'line': b'3: +  _C.block(0, 6, 12, 12) = I12;\n'}
[4.407870] (unitree_guide2) StdoutLine: {'line': b'3: +  _C(24, 8) = 1;\n'}
[4.407913] (unitree_guide2) StdoutLine: {'line': b'3: +  _C(25, 11) = 1;\n'}
[4.407955] (unitree_guide2) StdoutLine: {'line': b'3: +  _C(26, 14) = 1;\n'}
[4.407996] (unitree_guide2) StdoutLine: {'line': b'3: +  _C(27, 17) = 1;\n'}
[4.408038] (unitree_guide2) StdoutLine: {'line': b'3: +  _P.setIdentity();\n'}
[4.408080] (unitree_guide2) StdoutLine: {'line': b'3: +  _P = _largeVariance * _P;\n'}
[4.408122] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.408164] (unitree_guide2) StdoutLine: {'line': b'3: +  _RInit << 0.008, 0.012, -0.000, -0.009, 0.012, 0.000, 0.009, -0.009, -0.000, -0.009, -0.009,\n'}
[4.408209] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, -0.000, 0.000, -0.000, 0.000, -0.000, -0.001, -0.002, 0.000, -0.000, -0.003, -0.000,\n'}
[4.408253] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.001, 0.000, 0.000, 0.000, 0.000,\n'}
[4.408295] (unitree_guide2) StdoutLine: {'line': b'3: +    0.012, 0.019, -0.001, -0.014, 0.018, -0.000, 0.014, -0.013, -0.000, -0.014, -0.014, 0.001,\n'}
[4.408338] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.001, 0.001, -0.001, 0.000, 0.000, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001,\n'}
[4.408381] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000,\n'}
[4.408424] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, -0.001, 0.001, 0.001, -0.001, 0.000, -0.000, 0.000, -0.000, 0.001, 0.000, -0.000, 0.000,\n'}
[4.408467] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.408509] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.408552] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001,\n'}
[4.408628] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.001, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000,\n'}
[4.408670] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.408712] (unitree_guide2) StdoutLine: {'line': b'3: +    0.012, 0.018, -0.001, -0.013, 0.018, -0.000, 0.013, -0.013, -0.000, -0.013, -0.013, 0.001,\n'}
[4.408755] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.001, 0.000, -0.001, 0.000, 0.001, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001,\n'}
[4.408796] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000,\n'}
[4.408838] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, -0.000, 0.000, 0.000, -0.000, 0.001, 0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000,\n'}
[4.408880] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, -0.000, 0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.408926] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.408969] (unitree_guide2) StdoutLine: {'line': b'3: +    0.009, 0.014, -0.000, -0.010, 0.013, 0.000, 0.010, -0.010, -0.000, -0.010, -0.010, 0.000,\n'}
[4.409012] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.001, 0.000, -0.001, 0.000, -0.000, -0.001, -0.001, 0.000, -0.000, -0.003, -0.000, -0.001,\n'}
[4.409054] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000,\n'}
[4.409096] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.009, -0.013, 0.000, 0.010, -0.013, 0.000, -0.010, 0.009, 0.000, 0.010, 0.010, -0.000, 0.001,\n'}
[4.409139] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, 0.000, -0.000, 0.000, 0.001, 0.002, 0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000,\n'}
[4.409186] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.409229] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,\n'}
[4.409272] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, 0.000,\n'}
[4.409316] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.409358] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001,\n'}
[4.409400] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, -0.000, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000,\n'}
[4.409442] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.409484] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.009, -0.014, 0.000, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001,\n'}
[4.409526] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, 0.000, -0.000, 0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.001, 0.001, 0.000, 0.000,\n'}
[4.409568] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.409623] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.001, -0.000, -0.000, 0.001, -0.000, 0.000, -0.000, 0.000, -0.000, -0.000, 0.001, 0.000,\n'}
[4.409664] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, -0.000, -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.409705] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.409746] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, -0.001, 0.000, 0.001, -0.001, -0.000, -0.001, 0.001, 0.000, 0.001, 0.001, 0.000, 1.708,\n'}
[4.409787] (unitree_guide2) StdoutLine: {'line': b'3: +    0.048, 0.784, 0.062, 0.042, 0.053, 0.077, 0.001, -0.061, 0.046, -0.019, -0.029, 0.000, 0.000,\n'}
[4.409829] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.409870] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.001, -0.000, 0.000, 0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, -0.000, 0.048,\n'}
[4.409912] (unitree_guide2) StdoutLine: {'line': b'3: +    5.001, -1.631, -0.036, 0.144, 0.040, 0.036, 0.016, -0.051, -0.067, -0.024, -0.005, 0.000, 0.000,\n'}
[4.409954] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.409995] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, -0.001, 0.000, 0.000, -0.001, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000, -0.000, 0.784,\n'}
[4.410036] (unitree_guide2) StdoutLine: {'line': b'3: +    -1.631, 1.242, 0.057, -0.037, 0.018, 0.034, -0.017, -0.015, 0.058, -0.021, -0.029, 0.000, 0.000,\n'}
[4.410077] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.410117] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, -0.000, 0.062,\n'}
[4.410158] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.036, 0.057, 6.228, -0.014, 0.932, 0.059, 0.053, -0.069, 0.148, 0.015, -0.031, 0.000, 0.000,\n'}
[4.410206] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.410247] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, 0.000, -0.000, -0.000, 0.001, 0.000, -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.042,\n'}
[4.410288] (unitree_guide2) StdoutLine: {'line': b'3: +    0.144, -0.037, -0.014, 3.011, 0.986, 0.076, 0.030, -0.052, -0.027, 0.057, 0.051, 0.000, 0.000,\n'}
[4.410330] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.410370] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.001, -0.001, -0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, 0.053,\n'}
[4.410411] (unitree_guide2) StdoutLine: {'line': b'3: +    0.040, 0.018, 0.932, 0.986, 0.885, 0.090, 0.044, -0.055, 0.057, 0.051, -0.003, 0.000, 0.000,\n'}
[4.410453] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.410498] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.002, -0.003, 0.000, 0.002, -0.003, -0.000, -0.001, 0.002, 0.000, 0.002, 0.002, -0.000, 0.077,\n'}
[4.410540] (unitree_guide2) StdoutLine: {'line': b'3: +    0.036, 0.034, 0.059, 0.076, 0.090, 6.230, 0.139, 0.763, 0.013, -0.019, -0.024, 0.000, 0.000,\n'}
[4.410581] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.410623] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, -0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001,\n'}
[4.410679] (unitree_guide2) StdoutLine: {'line': b'3: +    0.016, -0.017, 0.053, 0.030, 0.044, 0.139, 3.130, -1.128, -0.010, 0.131, 0.018, 0.000, 0.000,\n'}
[4.410721] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.410763] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, -0.001, -0.000, 0.000, -0.001, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.410806] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.061, -0.051, -0.015, -0.069, -0.052, -0.055, 0.763, -1.128, 0.866, -0.022, -0.053, 0.007,\n'}
[4.410848] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000,\n'}
[4.410889] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.003, -0.004, -0.000, 0.003, -0.004, -0.000, -0.003, 0.003, 0.000, 0.003, 0.003, 0.000, 0.046,\n'}
[4.410935] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.067, 0.058, 0.148, -0.027, 0.057, 0.013, -0.010, -0.022, 2.437, -0.102, 0.938, 0.000, 0.000,\n'}
[4.410977] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.411019] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.000, -0.000, 0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.001, 0.000, -0.019,\n'}
[4.411062] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.024, -0.021, 0.015, 0.057, 0.051, -0.019, 0.131, -0.053, -0.102, 4.944, 1.724, 0.000, 0.000,\n'}
[4.411103] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.411145] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.001, -0.001, 0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, -0.029,\n'}
[4.411187] (unitree_guide2) StdoutLine: {'line': b'3: +    -0.005, -0.029, -0.031, 0.051, -0.003, -0.024, 0.018, 0.007, 0.938, 1.724, 1.569, 0.000, 0.000,\n'}
[4.411229] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000,\n'}
[4.411345] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.411406] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000, 0.000,\n'}
[4.411449] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000,\n'}
[4.411493] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.411593] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000,\n'}
[4.411647] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000,\n'}
[4.411690] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.411733] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0,\n'}
[4.411775] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000,\n'}
[4.411817] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.411859] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,\n'}
[4.411901] (unitree_guide2) StdoutLine: {'line': b'3: +    0.000, 1.0;\n'}
[4.411942] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.411984] (unitree_guide2) StdoutLine: {'line': b'3: +  /* A1 Worked */\n'}
[4.412027] (unitree_guide2) StdoutLine: {'line': b'3: +  _Cu << 268.573, -43.819, -147.211,\n'}
[4.412077] (unitree_guide2) StdoutLine: {'line': b'3: +    -43.819, 92.949, 58.082,\n'}
[4.412118] (unitree_guide2) StdoutLine: {'line': b'3: +    -147.211, 58.082, 302.120;\n'}
[4.412160] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.412203] (unitree_guide2) StdoutLine: {'line': b'3: +  _QInit = _Qdig.asDiagonal();\n'}
[4.412245] (unitree_guide2) StdoutLine: {'line': b'3: +  _QInit += _B * _Cu * _B.transpose();\n'}
[4.412287] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.412329] (unitree_guide2) StdoutLine: {'line': b'3: +  _RCheck = new AvgCov(28, _estName + " R");\n'}
[4.412372] (unitree_guide2) StdoutLine: {'line': b'3: +  _uCheck = new AvgCov(3, _estName + " u");\n'}
[4.412414] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.412455] (unitree_guide2) StdoutLine: {'line': b'3: +  _vxFilter = new LPFilter(_dt, 3.0);\n'}
[4.412497] (unitree_guide2) StdoutLine: {'line': b'3: +  _vyFilter = new LPFilter(_dt, 3.0);\n'}
[4.412539] (unitree_guide2) StdoutLine: {'line': b'3: +  _vzFilter = new LPFilter(_dt, 3.0);\n'}
[4.412580] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.412622] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.412663] (unitree_guide2) StdoutLine: {'line': b'3: +  /* ROS odometry publisher */\n'}
[4.412718] (unitree_guide2) StdoutLine: {'line': b'3: @@ -120 +180 @@\n'}
[4.412760] (unitree_guide2) StdoutLine: {'line': b'3: -        _pub = _nh.advertise<nav_msgs::Odometry>("odom", 1);\n'}
[4.412801] (unitree_guide2) StdoutLine: {'line': b'3: +  _pub = _nh.advertise<nav_msgs::Odometry>("odom", 1);\n'}
[4.412842] (unitree_guide2) StdoutLine: {'line': b'3: @@ -124,3 +184,3 @@\n'}
[4.412883] (unitree_guide2) StdoutLine: {'line': b'3: -        _nh = rclcpp::Node::make_shared("estimator");\n'}
[4.412924] (unitree_guide2) StdoutLine: {'line': b'3: -        _pub = _nh->create_publisher<nav_msgs::msg::Odometry>("odom", 1);\n'}
[4.412966] (unitree_guide2) StdoutLine: {'line': b'3: -        _odomBroadcaster = std::make_shared<tf2_ros::TransformBroadcaster>(_nh); \n'}
[4.413008] (unitree_guide2) StdoutLine: {'line': b'3: +  _nh = rclcpp::Node::make_shared("estimator");\n'}
[4.413049] (unitree_guide2) StdoutLine: {'line': b'3: +  _pub = _nh->create_publisher<nav_msgs::msg::Odometry>("odom", 1);\n'}
[4.413090] (unitree_guide2) StdoutLine: {'line': b'3: +  _odomBroadcaster = std::make_shared<tf2_ros::TransformBroadcaster>(_nh);\n'}
[4.413131] (unitree_guide2) StdoutLine: {'line': b'3: @@ -130,22 +190,21 @@\n'}
[4.413172] (unitree_guide2) StdoutLine: {'line': b'3: -void Estimator::run(){\n'}
[4.413212] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetH.setZero();\n'}
[4.413253] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetPosGlobalKine = _robModel->getFeet2BPositions(*_lowState, FrameType::GLOBAL);\n'}
[4.413294] (unitree_guide2) StdoutLine: {'line': b'3: -    _feetVelGlobalKine = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);\n'}
[4.413341] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.413382] (unitree_guide2) StdoutLine: {'line': b'3: -    _Q = _QInit;\n'}
[4.413423] (unitree_guide2) StdoutLine: {'line': b'3: -    _R = _RInit;\n'}
[4.413463] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.413504] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.413545] (unitree_guide2) StdoutLine: {'line': b'3: -        if((*_contact)(i) == 0){\n'}
[4.413587] (unitree_guide2) StdoutLine: {'line': b'3: -            _Q.block(6+3*i, 6+3*i, 3, 3) = _largeVariance * I3;\n'}
[4.413628] (unitree_guide2) StdoutLine: {'line': b'3: -            _R.block(12+3*i, 12+3*i, 3, 3) = _largeVariance * I3;\n'}
[4.413669] (unitree_guide2) StdoutLine: {'line': b'3: -            _R(24+i, 24+i) = _largeVariance;\n'}
[4.413710] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.413765] (unitree_guide2) StdoutLine: {'line': b'3: -        else{\n'}
[4.413806] (unitree_guide2) StdoutLine: {'line': b'3: -            _trust = windowFunc((*_phase)(i), 0.2);\n'}
[4.413848] (unitree_guide2) StdoutLine: {'line': b'3: -            _Q.block(6+3*i, 6+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _QInit.block(6+3*i, 6+3*i, 3, 3);\n'}
[4.413896] (unitree_guide2) StdoutLine: {'line': b'3: -            _R.block(12+3*i, 12+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _RInit.block(12+3*i, 12+3*i, 3, 3);\n'}
[4.413938] (unitree_guide2) StdoutLine: {'line': b'3: -            _R(24+i, 24+i) = (1 + (1-_trust)*_largeVariance) * _RInit(24+i, 24+i);\n'}
[4.413984] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.414026] (unitree_guide2) StdoutLine: {'line': b'3: -        _feetPos2Body.segment(3*i, 3) = _feetPosGlobalKine.col(i);\n'}
[4.414068] (unitree_guide2) StdoutLine: {'line': b'3: -        _feetVel2Body.segment(3*i, 3) = _feetVelGlobalKine.col(i);\n'}
[4.414109] (unitree_guide2) StdoutLine: {'line': b'3: +void Estimator::run()\n'}
[4.414151] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.414193] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetH.setZero();\n'}
[4.414235] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetPosGlobalKine = _robModel->getFeet2BPositions(*_lowState, FrameType::GLOBAL);\n'}
[4.414278] (unitree_guide2) StdoutLine: {'line': b'3: +  _feetVelGlobalKine = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);\n'}
[4.414337] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.414543] (unitree_guide2) StdoutLine: {'line': b'3: +  _Q = _QInit;\n'}
[4.414591] (unitree_guide2) StdoutLine: {'line': b'3: +  _R = _RInit;\n'}
[4.414634] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.414690] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.414732] (unitree_guide2) StdoutLine: {'line': b'3: +    if ((*_contact)(i) == 0) {\n'}
[4.414773] (unitree_guide2) StdoutLine: {'line': b'3: +      _Q.block(6 + 3 * i, 6 + 3 * i, 3, 3) = _largeVariance * I3;\n'}
[4.414815] (unitree_guide2) StdoutLine: {'line': b'3: +      _R.block(12 + 3 * i, 12 + 3 * i, 3, 3) = _largeVariance * I3;\n'}
[4.414857] (unitree_guide2) StdoutLine: {'line': b'3: +      _R(24 + i, 24 + i) = _largeVariance;\n'}
[4.414898] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.414939] (unitree_guide2) StdoutLine: {'line': b'3: +      _trust = windowFunc((*_phase)(i), 0.2);\n'}
[4.414981] (unitree_guide2) StdoutLine: {'line': b'3: +      _Q.block(6 + 3 * i, 6 + 3 * i, 3, 3) = (1 + (1 - _trust) * _largeVariance) * _QInit.block(\n'}
[4.415022] (unitree_guide2) StdoutLine: {'line': b'3: +        6 + 3 * i, 6 + 3 * i, 3, 3);\n'}
[4.415063] (unitree_guide2) StdoutLine: {'line': b'3: +      _R.block(12 + 3 * i, 12 + 3 * i, 3, 3) = (1 + (1 - _trust) * _largeVariance) * _RInit.block(\n'}
[4.415104] (unitree_guide2) StdoutLine: {'line': b'3: +        12 + 3 * i, 12 + 3 * i, 3, 3);\n'}
[4.415146] (unitree_guide2) StdoutLine: {'line': b'3: +      _R(24 + i, 24 + i) = (1 + (1 - _trust) * _largeVariance) * _RInit(24 + i, 24 + i);\n'}
[4.415190] (unitree_guide2) StdoutLine: {'line': b'3: @@ -153,23 +212,26 @@\n'}
[4.415234] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.415285] (unitree_guide2) StdoutLine: {'line': b'3: -    _rotMatB2G = _lowState->getRotMat();\n'}
[4.415330] (unitree_guide2) StdoutLine: {'line': b'3: -    _u = _rotMatB2G * _lowState->getAcc() + _g;\n'}
[4.415375] (unitree_guide2) StdoutLine: {'line': b'3: -    _xhat = _A * _xhat + _B * _u;\n'}
[4.415473] (unitree_guide2) StdoutLine: {'line': b'3: -    _yhat = _C * _xhat;\n'}
[4.415535] (unitree_guide2) StdoutLine: {'line': b'3: -    _y << _feetPos2Body, _feetVel2Body, _feetH;\n'}
[4.415579] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.415621] (unitree_guide2) StdoutLine: {'line': b'3: -    _Ppriori = _A * _P * _A.transpose() + _Q;\n'}
[4.415663] (unitree_guide2) StdoutLine: {'line': b'3: -    _S =  _R + _C * _Ppriori * _C.transpose();\n'}
[4.415704] (unitree_guide2) StdoutLine: {'line': b'3: -    _Slu = _S.lu();\n'}
[4.415746] (unitree_guide2) StdoutLine: {'line': b'3: -    _Sy = _Slu.solve(_y - _yhat);\n'}
[4.415787] (unitree_guide2) StdoutLine: {'line': b'3: -    _Sc = _Slu.solve(_C);\n'}
[4.415828] (unitree_guide2) StdoutLine: {'line': b'3: -    _SR = _Slu.solve(_R);\n'}
[4.415878] (unitree_guide2) StdoutLine: {'line': b'3: -    _STC = (_S.transpose()).lu().solve(_C);\n'}
[4.415919] (unitree_guide2) StdoutLine: {'line': b'3: -    _IKC = I18 - _Ppriori*_C.transpose()*_Sc;\n'}
[4.415960] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.416001] (unitree_guide2) StdoutLine: {'line': b'3: -    _xhat += _Ppriori * _C.transpose() * _Sy;\n'}
[4.416042] (unitree_guide2) StdoutLine: {'line': b'3: -    _P =  _IKC * _Ppriori * _IKC.transpose()\n'}
[4.416084] (unitree_guide2) StdoutLine: {'line': b'3: -        + _Ppriori * _C.transpose() * _SR * _STC * _Ppriori.transpose();\n'}
[4.416127] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.416169] (unitree_guide2) StdoutLine: {'line': b'3: -    _vxFilter->addValue(_xhat(3));\n'}
[4.416210] (unitree_guide2) StdoutLine: {'line': b'3: -    _vyFilter->addValue(_xhat(4));\n'}
[4.416252] (unitree_guide2) StdoutLine: {'line': b'3: -    _vzFilter->addValue(_xhat(5));\n'}
[4.416295] (unitree_guide2) StdoutLine: {'line': b'3: +    _feetPos2Body.segment(3 * i, 3) = _feetPosGlobalKine.col(i);\n'}
[4.416337] (unitree_guide2) StdoutLine: {'line': b'3: +    _feetVel2Body.segment(3 * i, 3) = _feetVelGlobalKine.col(i);\n'}
[4.416400] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.416445] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.416488] (unitree_guide2) StdoutLine: {'line': b'3: +  _rotMatB2G = _lowState->getRotMat();\n'}
[4.416531] (unitree_guide2) StdoutLine: {'line': b'3: +  _u = _rotMatB2G * _lowState->getAcc() + _g;\n'}
[4.416574] (unitree_guide2) StdoutLine: {'line': b'3: +  _xhat = _A * _xhat + _B * _u;\n'}
[4.416631] (unitree_guide2) StdoutLine: {'line': b'3: +  _yhat = _C * _xhat;\n'}
[4.416672] (unitree_guide2) StdoutLine: {'line': b'3: +  _y << _feetPos2Body, _feetVel2Body, _feetH;\n'}
[4.416713] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.416754] (unitree_guide2) StdoutLine: {'line': b'3: +  _Ppriori = _A * _P * _A.transpose() + _Q;\n'}
[4.416795] (unitree_guide2) StdoutLine: {'line': b'3: +  _S = _R + _C * _Ppriori * _C.transpose();\n'}
[4.416836] (unitree_guide2) StdoutLine: {'line': b'3: +  _Slu = _S.lu();\n'}
[4.416877] (unitree_guide2) StdoutLine: {'line': b'3: +  _Sy = _Slu.solve(_y - _yhat);\n'}
[4.416918] (unitree_guide2) StdoutLine: {'line': b'3: +  _Sc = _Slu.solve(_C);\n'}
[4.416960] (unitree_guide2) StdoutLine: {'line': b'3: +  _SR = _Slu.solve(_R);\n'}
[4.417001] (unitree_guide2) StdoutLine: {'line': b'3: +  _STC = (_S.transpose()).lu().solve(_C);\n'}
[4.417043] (unitree_guide2) StdoutLine: {'line': b'3: +  _IKC = I18 - _Ppriori * _C.transpose() * _Sc;\n'}
[4.417084] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.417126] (unitree_guide2) StdoutLine: {'line': b'3: +  _xhat += _Ppriori * _C.transpose() * _Sy;\n'}
[4.417167] (unitree_guide2) StdoutLine: {'line': b'3: +  _P = _IKC * _Ppriori * _IKC.transpose() +\n'}
[4.417208] (unitree_guide2) StdoutLine: {'line': b'3: +    _Ppriori * _C.transpose() * _SR * _STC * _Ppriori.transpose();\n'}
[4.417250] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.417292] (unitree_guide2) StdoutLine: {'line': b'3: +  _vxFilter->addValue(_xhat(3));\n'}
[4.417353] (unitree_guide2) StdoutLine: {'line': b'3: +  _vyFilter->addValue(_xhat(4));\n'}
[4.417396] (unitree_guide2) StdoutLine: {'line': b'3: +  _vzFilter->addValue(_xhat(5));\n'}
[4.417439] (unitree_guide2) StdoutLine: {'line': b'3: @@ -178,46 +240,46 @@\n'}
[4.417496] (unitree_guide2) StdoutLine: {'line': b'3: -        if(_count % ((int)( 1.0/(_dt*_pubFreq))) == 0){\n'}
[4.417538] (unitree_guide2) StdoutLine: {'line': b'3: -            _currentTime = ros::Time::now();\n'}
[4.417580] (unitree_guide2) StdoutLine: {'line': b'3: -            /* tf */\n'}
[4.417621] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.header.stamp = _currentTime;\n'}
[4.417662] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.header.frame_id = "odom";\n'}
[4.417703] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.child_frame_id  = "base_link";\n'}
[4.417757] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.417798] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.translation.x = _xhat(0);\n'}
[4.417848] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.translation.y = _xhat(1);\n'}
[4.417899] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.translation.z = _xhat(2);\n'}
[4.417940] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];\n'}
[4.417981] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];\n'}
[4.418051] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];\n'}
[4.418093] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];\n'}
[4.418135] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.418175] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomBroadcaster.sendTransform(_odomTF);\n'}
[4.418291] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.418354] (unitree_guide2) StdoutLine: {'line': b'3: -            /* odometry */\n'}
[4.418398] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.header.stamp = _currentTime;\n'}
[4.418441] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.header.frame_id = "odom";\n'}
[4.418484] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.418527] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.position.x = _xhat(0);\n'}
[4.418570] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.position.y = _xhat(1);\n'}
[4.418614] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.position.z = _xhat(2);\n'}
[4.418660] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.418704] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];\n'}
[4.418751] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];\n'}
[4.418797] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];\n'}
[4.418842] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];\n'}
[4.418886] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.covariance = _odom_pose_covariance;\n'}
[4.418931] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.418975] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.child_frame_id = "base_link";\n'}
[4.419019] (unitree_guide2) StdoutLine: {'line': b'3: -            _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);\n'}
[4.419063] (unitree_guide2) StdoutLine: {'line': b'3: -            _wBody   = _lowState->imu.getGyro();\n'}
[4.419106] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.linear.x = _velBody(0);\n'}
[4.419150] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.linear.y = _velBody(1);\n'}
[4.419193] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.linear.z = _velBody(2);\n'}
[4.419237] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.angular.x = _wBody(0);\n'}
[4.419281] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.angular.y = _wBody(1);\n'}
[4.419324] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.angular.z = _wBody(2);\n'}
[4.419367] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.covariance = _odom_twist_covariance;\n'}
[4.419412] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.419456] (unitree_guide2) StdoutLine: {'line': b'3: -            _pub.publish(_odomMsg);\n'}
[4.419501] (unitree_guide2) StdoutLine: {'line': b'3: -            _count = 1;\n'}
[4.419546] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.419609] (unitree_guide2) StdoutLine: {'line': b'3: -        ++_count;\n'}
[4.419653] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_count % ((int)( 1.0 / (_dt * _pubFreq))) == 0) {\n'}
[4.419696] (unitree_guide2) StdoutLine: {'line': b'3: +    _currentTime = ros::Time::now();\n'}
[4.419753] (unitree_guide2) StdoutLine: {'line': b'3: +    /* tf */\n'}
[4.419794] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.header.stamp = _currentTime;\n'}
[4.419836] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.header.frame_id = "odom";\n'}
[4.419877] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.child_frame_id = "base_link";\n'}
[4.419918] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.419959] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.translation.x = _xhat(0);\n'}
[4.420001] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.translation.y = _xhat(1);\n'}
[4.420042] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.translation.z = _xhat(2);\n'}
[4.420083] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];\n'}
[4.420125] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];\n'}
[4.420167] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];\n'}
[4.420208] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];\n'}
[4.420269] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.420324] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomBroadcaster.sendTransform(_odomTF);\n'}
[4.420365] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.420405] (unitree_guide2) StdoutLine: {'line': b'3: +    /* odometry */\n'}
[4.420446] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.header.stamp = _currentTime;\n'}
[4.420486] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.header.frame_id = "odom";\n'}
[4.420526] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.420566] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.position.x = _xhat(0);\n'}
[4.420607] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.position.y = _xhat(1);\n'}
[4.420647] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.position.z = _xhat(2);\n'}
[4.420687] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.420727] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];\n'}
[4.420768] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];\n'}
[4.420809] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];\n'}
[4.420850] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];\n'}
[4.420891] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.covariance = _odom_pose_covariance;\n'}
[4.420933] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.420974] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.child_frame_id = "base_link";\n'}
[4.421014] (unitree_guide2) StdoutLine: {'line': b'3: +    _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);\n'}
[4.421060] (unitree_guide2) StdoutLine: {'line': b'3: +    _wBody = _lowState->imu.getGyro();\n'}
[4.421101] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.linear.x = _velBody(0);\n'}
[4.421142] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.linear.y = _velBody(1);\n'}
[4.421184] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.linear.z = _velBody(2);\n'}
[4.421243] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.angular.x = _wBody(0);\n'}
[4.421299] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.angular.y = _wBody(1);\n'}
[4.421341] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.angular.z = _wBody(2);\n'}
[4.421389] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.covariance = _odom_twist_covariance;\n'}
[4.421431] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.421473] (unitree_guide2) StdoutLine: {'line': b'3: +    _pub.publish(_odomMsg);\n'}
[4.421514] (unitree_guide2) StdoutLine: {'line': b'3: +    _count = 1;\n'}
[4.421556] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.421597] (unitree_guide2) StdoutLine: {'line': b'3: +  ++_count;\n'}
[4.421638] (unitree_guide2) StdoutLine: {'line': b'3: @@ -227,46 +289,46 @@\n'}
[4.421680] (unitree_guide2) StdoutLine: {'line': b'3: -        if(_count % ((int)( 1.0/(_dt*_pubFreq))) == 0){\n'}
[4.421722] (unitree_guide2) StdoutLine: {'line': b'3: -            _currentTime = _nh->get_clock()->now();\n'}
[4.421764] (unitree_guide2) StdoutLine: {'line': b'3: -            /* tf */\n'}
[4.421805] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.header.stamp = _currentTime;\n'}
[4.421854] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.header.frame_id = "odom";\n'}
[4.421896] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.child_frame_id  = "base";\n'}
[4.421937] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.421978] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.translation.x = _xhat(0);\n'}
[4.422020] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.translation.y = _xhat(1);\n'}
[4.422061] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.translation.z = _xhat(2);\n'}
[4.422103] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];\n'}
[4.422144] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];\n'}
[4.422186] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];\n'}
[4.422247] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];\n'}
[4.422302] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.422343] (unitree_guide2) StdoutLine: {'line': b'3: -            // _odomBroadcaster->sendTransform(_odomTF);\n'}
[4.422385] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.422426] (unitree_guide2) StdoutLine: {'line': b'3: -            /* odometry */\n'}
[4.422467] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.header.stamp = _currentTime;\n'}
[4.422508] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.header.frame_id = "odom";\n'}
[4.422549] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.422589] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.position.x = _xhat(0);\n'}
[4.422630] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.position.y = _xhat(1);\n'}
[4.422671] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.position.z = _xhat(2);\n'}
[4.422711] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.422752] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];\n'}
[4.422793] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];\n'}
[4.422834] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];\n'}
[4.422876] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];\n'}
[4.422919] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.pose.covariance = _odom_pose_covariance;\n'}
[4.422962] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.423006] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.child_frame_id = "base";\n'}
[4.423050] (unitree_guide2) StdoutLine: {'line': b'3: -            _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);\n'}
[4.423097] (unitree_guide2) StdoutLine: {'line': b'3: -            _wBody   = _lowState->imu.getGyro();\n'}
[4.423140] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.linear.x = _velBody(0);\n'}
[4.423199] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.linear.y = _velBody(1);\n'}
[4.423254] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.linear.z = _velBody(2);\n'}
[4.423295] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.angular.x = _wBody(0);\n'}
[4.423335] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.angular.y = _wBody(1);\n'}
[4.423376] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.twist.angular.z = _wBody(2);\n'}
[4.423417] (unitree_guide2) StdoutLine: {'line': b'3: -            _odomMsg.twist.covariance = _odom_twist_covariance;\n'}
[4.423458] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.423499] (unitree_guide2) StdoutLine: {'line': b'3: -            // _pub->publish(_odomMsg);\n'}
[4.423541] (unitree_guide2) StdoutLine: {'line': b'3: -            _count = 1;\n'}
[4.423582] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.423623] (unitree_guide2) StdoutLine: {'line': b'3: -        ++_count;\n'}
[4.423665] (unitree_guide2) StdoutLine: {'line': b'3: +  if (_count % ((int)( 1.0 / (_dt * _pubFreq))) == 0) {\n'}
[4.423706] (unitree_guide2) StdoutLine: {'line': b'3: +    _currentTime = _nh->get_clock()->now();\n'}
[4.423747] (unitree_guide2) StdoutLine: {'line': b'3: +    /* tf */\n'}
[4.423788] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.header.stamp = _currentTime;\n'}
[4.423829] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.header.frame_id = "odom";\n'}
[4.423870] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.child_frame_id = "base";\n'}
[4.423911] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.423951] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.translation.x = _xhat(0);\n'}
[4.423992] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.translation.y = _xhat(1);\n'}
[4.424032] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.translation.z = _xhat(2);\n'}
[4.424073] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];\n'}
[4.424113] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];\n'}
[4.424172] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];\n'}
[4.424232] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];\n'}
[4.424273] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.424315] (unitree_guide2) StdoutLine: {'line': b'3: +    // _odomBroadcaster->sendTransform(_odomTF);\n'}
[4.424356] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.424397] (unitree_guide2) StdoutLine: {'line': b'3: +    /* odometry */\n'}
[4.424440] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.header.stamp = _currentTime;\n'}
[4.424482] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.header.frame_id = "odom";\n'}
[4.424523] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.424565] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.position.x = _xhat(0);\n'}
[4.424606] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.position.y = _xhat(1);\n'}
[4.424647] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.position.z = _xhat(2);\n'}
[4.424688] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.424728] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];\n'}
[4.424769] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];\n'}
[4.424810] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];\n'}
[4.424856] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];\n'}
[4.424897] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.pose.covariance = _odom_pose_covariance;\n'}
[4.424938] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.424979] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.child_frame_id = "base";\n'}
[4.425020] (unitree_guide2) StdoutLine: {'line': b'3: +    _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);\n'}
[4.425062] (unitree_guide2) StdoutLine: {'line': b'3: +    _wBody = _lowState->imu.getGyro();\n'}
[4.425104] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.linear.x = _velBody(0);\n'}
[4.425164] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.linear.y = _velBody(1);\n'}
[4.425220] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.linear.z = _velBody(2);\n'}
[4.425262] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.angular.x = _wBody(0);\n'}
[4.425303] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.angular.y = _wBody(1);\n'}
[4.425344] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.twist.angular.z = _wBody(2);\n'}
[4.425385] (unitree_guide2) StdoutLine: {'line': b'3: +    _odomMsg.twist.covariance = _odom_twist_covariance;\n'}
[4.425426] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.425466] (unitree_guide2) StdoutLine: {'line': b'3: +    // _pub->publish(_odomMsg);\n'}
[4.425506] (unitree_guide2) StdoutLine: {'line': b'3: +    _count = 1;\n'}
[4.425553] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.425594] (unitree_guide2) StdoutLine: {'line': b'3: +  ++_count;\n'}
[4.425635] (unitree_guide2) StdoutLine: {'line': b'3: @@ -276,36 +338,43 @@\n'}
[4.425675] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 Estimator::getPosition(){\n'}
[4.425716] (unitree_guide2) StdoutLine: {'line': b'3: -    return _xhat.segment(0, 3);\n'}
[4.425757] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.425798] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.425838] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 Estimator::getVelocity(){\n'}
[4.425880] (unitree_guide2) StdoutLine: {'line': b'3: -    return _xhat.segment(3, 3);\n'}
[4.425920] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.425961] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.426002] (unitree_guide2) StdoutLine: {'line': b'3: -Vec3 Estimator::getFootPos(int i){\n'}
[4.426042] (unitree_guide2) StdoutLine: {'line': b'3: -    return getPosition() + _lowState->getRotMat() * _robModel->getFootPosition(*_lowState, i, FrameType::BODY);\n'}
[4.426084] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.426143] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.426197] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 Estimator::getFeetPos(){\n'}
[4.426238] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 feetPos;\n'}
[4.426278] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.426319] (unitree_guide2) StdoutLine: {'line': b'3: -        feetPos.col(i) = getFootPos(i);\n'}
[4.426359] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.426400] (unitree_guide2) StdoutLine: {'line': b'3: -    return feetPos;\n'}
[4.426441] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.426482] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.426522] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 Estimator::getFeetVel(){\n'}
[4.426564] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 feetVel = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);\n'}
[4.426607] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.426649] (unitree_guide2) StdoutLine: {'line': b'3: -        feetVel.col(i) += getVelocity();\n'}
[4.426690] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.426730] (unitree_guide2) StdoutLine: {'line': b'3: -    return feetVel;\n'}
[4.426771] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.426812] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.426857] (unitree_guide2) StdoutLine: {'line': b'3: -Vec34 Estimator::getPosFeet2BGlobal(){\n'}
[4.426899] (unitree_guide2) StdoutLine: {'line': b'3: -    Vec34 feet2BPos;\n'}
[4.426940] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 4; ++i){\n'}
[4.426981] (unitree_guide2) StdoutLine: {'line': b'3: -        feet2BPos.col(i) = getFootPos(i) - getPosition();\n'}
[4.427022] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.427063] (unitree_guide2) StdoutLine: {'line': b'3: -    return feet2BPos;\n'}
[4.427124] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.427178] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.427220] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 Estimator::getPosition()\n'}
[4.427261] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.427303] (unitree_guide2) StdoutLine: {'line': b'3: +  return _xhat.segment(0, 3);\n'}
[4.427344] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.427385] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.427426] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 Estimator::getVelocity()\n'}
[4.427467] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.427507] (unitree_guide2) StdoutLine: {'line': b'3: +  return _xhat.segment(3, 3);\n'}
[4.427548] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.427589] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.427629] (unitree_guide2) StdoutLine: {'line': b'3: +Vec3 Estimator::getFootPos(int i)\n'}
[4.427670] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.427711] (unitree_guide2) StdoutLine: {'line': b'3: +  return getPosition() + _lowState->getRotMat() * _robModel->getFootPosition(\n'}
[4.427752] (unitree_guide2) StdoutLine: {'line': b'3: +    *_lowState, i,\n'}
[4.427793] (unitree_guide2) StdoutLine: {'line': b'3: +    FrameType::BODY);\n'}
[4.427835] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.427876] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.427917] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 Estimator::getFeetPos()\n'}
[4.427958] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.427999] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 feetPos;\n'}
[4.428040] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.428100] (unitree_guide2) StdoutLine: {'line': b'3: +    feetPos.col(i) = getFootPos(i);\n'}
[4.428144] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.428198] (unitree_guide2) StdoutLine: {'line': b'3: +  return feetPos;\n'}
[4.428239] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.428279] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.428319] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 Estimator::getFeetVel()\n'}
[4.428360] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.428401] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 feetVel = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);\n'}
[4.428441] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.428483] (unitree_guide2) StdoutLine: {'line': b'3: +    feetVel.col(i) += getVelocity();\n'}
[4.428524] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.428565] (unitree_guide2) StdoutLine: {'line': b'3: +  return feetVel;\n'}
[4.428606] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.428647] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.428691] (unitree_guide2) StdoutLine: {'line': b'3: +Vec34 Estimator::getPosFeet2BGlobal()\n'}
[4.428733] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.428774] (unitree_guide2) StdoutLine: {'line': b'3: +  Vec34 feet2BPos;\n'}
[4.428814] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 4; ++i) {\n'}
[4.428855] (unitree_guide2) StdoutLine: {'line': b'3: +    feet2BPos.col(i) = getFootPos(i) - getPosition();\n'}
[4.428897] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.428937] (unitree_guide2) StdoutLine: {'line': b'3: +  return feet2BPos;\n'}
[4.428978] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.429019] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.429099] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/interface/IOROS.cpp':\n"}
[4.429236] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.429329] (unitree_guide2) StdoutLine: {'line': b'3: --- src/interface/IOROS.cpp\n'}
[4.429372] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/interface/IOROS.cpp.uncrustify\n'}
[4.429414] (unitree_guide2) StdoutLine: {'line': b'3: @@ -12,95 +12,140 @@\n'}
[4.429455] (unitree_guide2) StdoutLine: {'line': b'3: -void RosShutDown(int sig){\n'}
[4.429496] (unitree_guide2) StdoutLine: {'line': b'3: -\tROS_INFO("ROS interface shutting down!");\n'}
[4.429537] (unitree_guide2) StdoutLine: {'line': b'3: -\tros::shutdown();\n'}
[4.429579] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.429620] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.429662] (unitree_guide2) StdoutLine: {'line': b'3: -IOROS::IOROS():IOInterface(){\n'}
[4.429703] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;\n'}
[4.429745] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::param::get("/robot_name", _robot_name);\n'}
[4.429786] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "robot_name: " << _robot_name << std::endl;\n'}
[4.429828] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.429869] (unitree_guide2) StdoutLine: {'line': b'3: -    // start subscriber\n'}
[4.429910] (unitree_guide2) StdoutLine: {'line': b'3: -    initRecv();\n'}
[4.429951] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::AsyncSpinner subSpinner(1); // one threads\n'}
[4.429991] (unitree_guide2) StdoutLine: {'line': b'3: -    subSpinner.start();\n'}
[4.430051] (unitree_guide2) StdoutLine: {'line': b'3: -    usleep(300000);     //wait for subscribers start\n'}
[4.430105] (unitree_guide2) StdoutLine: {'line': b'3: -    // initialize publisher\n'}
[4.430146] (unitree_guide2) StdoutLine: {'line': b'3: -    initSend();   \n'}
[4.430187] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.430227] (unitree_guide2) StdoutLine: {'line': b'3: -    signal(SIGINT, RosShutDown);\n'}
[4.430269] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.430310] (unitree_guide2) StdoutLine: {'line': b'3: -    cmdPanel = new KeyBoard();\n'}
[4.430403] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.430511] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.430572] (unitree_guide2) StdoutLine: {'line': b'3: -IOROS::~IOROS(){\n'}
[4.430615] (unitree_guide2) StdoutLine: {'line': b'3: -    delete cmdPanel;\n'}
[4.430657] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::shutdown();\n'}
[4.430698] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.430739] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.430780] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::sendRecv(const LowlevelCmd *cmd, LowlevelState *state){\n'}
[4.430821] (unitree_guide2) StdoutLine: {'line': b'3: -    sendCmd(cmd);\n'}
[4.430863] (unitree_guide2) StdoutLine: {'line': b'3: -    recvState(state);\n'}
[4.430904] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.430944] (unitree_guide2) StdoutLine: {'line': b'3: -    state->userCmd = cmdPanel->getUserCmd();\n'}
[4.430985] (unitree_guide2) StdoutLine: {'line': b'3: -    state->userValue = cmdPanel->getUserValue();\n'}
[4.431059] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.431099] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.431140] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::sendCmd(const LowlevelCmd *lowCmd){\n'}
[4.431181] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 12; ++i){\n'}
[4.431223] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].mode = lowCmd->motorCmd[i].mode;\n'}
[4.431265] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].q = lowCmd->motorCmd[i].q;\n'}
[4.431307] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].dq = lowCmd->motorCmd[i].dq;\n'}
[4.431348] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].tau = lowCmd->motorCmd[i].tau;\n'}
[4.431398] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].Kd = lowCmd->motorCmd[i].Kd;\n'}
[4.431440] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].Kp = lowCmd->motorCmd[i].Kp;\n'}
[4.431547] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.431595] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int m(0); m < 12; ++m){\n'}
[4.431637] (unitree_guide2) StdoutLine: {'line': b'3: -        _servo_pub[m].publish(_lowCmd.motorCmd[m]);\n'}
[4.431683] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.431727] (unitree_guide2) StdoutLine: {'line': b'3: -    ros::spinOnce();\n'}
[4.431772] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.431816] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.431892] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::recvState(LowlevelState *state){\n'}
[4.431936] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 12; ++i){\n'}
[4.431997] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].q = _lowState.motorState[i].q;\n'}
[4.432052] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].dq = _lowState.motorState[i].dq;\n'}
[4.432094] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].ddq = _lowState.motorState[i].ddq;\n'}
[4.432135] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].tauEst = _lowState.motorState[i].tauEst;\n'}
[4.432187] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.432229] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 3; ++i){\n'}
[4.432270] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.quaternion[i] = _lowState.imu.quaternion[i];\n'}
[4.432312] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];\n'}
[4.432353] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];\n'}
[4.432395] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.432436] (unitree_guide2) StdoutLine: {'line': b'3: -    state->imu.quaternion[3] = _lowState.imu.quaternion[3];\n'}
[4.432477] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.432548] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.432589] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::initSend(){\n'}
[4.432630] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[0] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FR_hip_controller/command", 1);\n'}
[4.432672] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[1] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FR_thigh_controller/command", 1);\n'}
[4.432714] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[2] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FR_calf_controller/command", 1);\n'}
[4.432755] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[3] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FL_hip_controller/command", 1);\n'}
[4.432796] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[4] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FL_thigh_controller/command", 1);\n'}
[4.432842] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[5] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FL_calf_controller/command", 1);\n'}
[4.432884] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[6] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RR_hip_controller/command", 1);\n'}
[4.432925] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[7] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RR_thigh_controller/command", 1);\n'}
[4.432986] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[8] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RR_calf_controller/command", 1);\n'}
[4.433043] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[9] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RL_hip_controller/command", 1);\n'}
[4.433089] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[10] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RL_thigh_controller/command", 1);\n'}
[4.433132] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub[11] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RL_calf_controller/command", 1);\n'}
[4.433174] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.433215] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.433256] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::initRecv(){\n'}
[4.433297] (unitree_guide2) StdoutLine: {'line': b'3: -    _imu_sub = _nm.subscribe("/trunk_imu", 1, &IOROS::imuCallback, this);\n'}
[4.433338] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[0] = _nm.subscribe("/" + _robot_name + "_gazebo/FR_hip_controller/state", 1, &IOROS::FRhipCallback, this);\n'}
[4.433380] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[1] = _nm.subscribe("/" + _robot_name + "_gazebo/FR_thigh_controller/state", 1, &IOROS::FRthighCallback, this);\n'}
[4.433421] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[2] = _nm.subscribe("/" + _robot_name + "_gazebo/FR_calf_controller/state", 1, &IOROS::FRcalfCallback, this);\n'}
[4.433462] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[3] = _nm.subscribe("/" + _robot_name + "_gazebo/FL_hip_controller/state", 1, &IOROS::FLhipCallback, this);\n'}
[4.433503] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[4] = _nm.subscribe("/" + _robot_name + "_gazebo/FL_thigh_controller/state", 1, &IOROS::FLthighCallback, this);\n'}
[4.433545] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[5] = _nm.subscribe("/" + _robot_name + "_gazebo/FL_calf_controller/state", 1, &IOROS::FLcalfCallback, this);\n'}
[4.433586] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[6] = _nm.subscribe("/" + _robot_name + "_gazebo/RR_hip_controller/state", 1, &IOROS::RRhipCallback, this);\n'}
[4.433627] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[7] = _nm.subscribe("/" + _robot_name + "_gazebo/RR_thigh_controller/state", 1, &IOROS::RRthighCallback, this);\n'}
[4.433669] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[8] = _nm.subscribe("/" + _robot_name + "_gazebo/RR_calf_controller/state", 1, &IOROS::RRcalfCallback, this);\n'}
[4.433711] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[9] = _nm.subscribe("/" + _robot_name + "_gazebo/RL_hip_controller/state", 1, &IOROS::RLhipCallback, this);\n'}
[4.433753] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[10] = _nm.subscribe("/" + _robot_name + "_gazebo/RL_thigh_controller/state", 1, &IOROS::RLthighCallback, this);\n'}
[4.433795] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub[11] = _nm.subscribe("/" + _robot_name + "_gazebo/RL_calf_controller/state", 1, &IOROS::RLcalfCallback, this);\n'}
[4.433837] (unitree_guide2) StdoutLine: {'line': b'3: +void RosShutDown(int sig)\n'}
[4.433878] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.433919] (unitree_guide2) StdoutLine: {'line': b'3: +  ROS_INFO("ROS interface shutting down!");\n'}
[4.433995] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::shutdown();\n'}
[4.434036] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.434077] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.434118] (unitree_guide2) StdoutLine: {'line': b'3: +IOROS::IOROS()\n'}
[4.434159] (unitree_guide2) StdoutLine: {'line': b'3: +: IOInterface()\n'}
[4.434200] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.434241] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;\n'}
[4.434282] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::param::get("/robot_name", _robot_name);\n'}
[4.434323] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "robot_name: " << _robot_name << std::endl;\n'}
[4.434364] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.434410] (unitree_guide2) StdoutLine: {'line': b'3: +  // start subscriber\n'}
[4.434452] (unitree_guide2) StdoutLine: {'line': b'3: +  initRecv();\n'}
[4.434493] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::AsyncSpinner subSpinner(1);   // one threads\n'}
[4.434541] (unitree_guide2) StdoutLine: {'line': b'3: +  subSpinner.start();\n'}
[4.434583] (unitree_guide2) StdoutLine: {'line': b'3: +  usleep(300000);       //wait for subscribers start\n'}
[4.434625] (unitree_guide2) StdoutLine: {'line': b'3: +  // initialize publisher\n'}
[4.434666] (unitree_guide2) StdoutLine: {'line': b'3: +  initSend();\n'}
[4.434706] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.434748] (unitree_guide2) StdoutLine: {'line': b'3: +  signal(SIGINT, RosShutDown);\n'}
[4.434788] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.434830] (unitree_guide2) StdoutLine: {'line': b'3: +  cmdPanel = new KeyBoard();\n'}
[4.434871] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.434975] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.435023] (unitree_guide2) StdoutLine: {'line': b'3: +IOROS::~IOROS()\n'}
[4.435066] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.435109] (unitree_guide2) StdoutLine: {'line': b'3: +  delete cmdPanel;\n'}
[4.435153] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::shutdown();\n'}
[4.435196] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.435239] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.435283] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::sendRecv(const LowlevelCmd * cmd, LowlevelState * state)\n'}
[4.435327] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.435370] (unitree_guide2) StdoutLine: {'line': b'3: +  sendCmd(cmd);\n'}
[4.435413] (unitree_guide2) StdoutLine: {'line': b'3: +  recvState(state);\n'}
[4.435456] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.435499] (unitree_guide2) StdoutLine: {'line': b'3: +  state->userCmd = cmdPanel->getUserCmd();\n'}
[4.435550] (unitree_guide2) StdoutLine: {'line': b'3: +  state->userValue = cmdPanel->getUserValue();\n'}
[4.435595] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.435638] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.435681] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::sendCmd(const LowlevelCmd * lowCmd)\n'}
[4.435724] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.435767] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 12; ++i) {\n'}
[4.435809] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].mode = lowCmd->motorCmd[i].mode;\n'}
[4.435853] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].q = lowCmd->motorCmd[i].q;\n'}
[4.435896] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].dq = lowCmd->motorCmd[i].dq;\n'}
[4.435939] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].tau = lowCmd->motorCmd[i].tau;\n'}
[4.435983] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].Kd = lowCmd->motorCmd[i].Kd;\n'}
[4.436026] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].Kp = lowCmd->motorCmd[i].Kp;\n'}
[4.436083] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.436124] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int m(0); m < 12; ++m) {\n'}
[4.436165] (unitree_guide2) StdoutLine: {'line': b'3: +    _servo_pub[m].publish(_lowCmd.motorCmd[m]);\n'}
[4.436206] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.436246] (unitree_guide2) StdoutLine: {'line': b'3: +  ros::spinOnce();\n'}
[4.436287] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.436328] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.436369] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::recvState(LowlevelState * state)\n'}
[4.436411] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.436452] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 12; ++i) {\n'}
[4.436629] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].q = _lowState.motorState[i].q;\n'}
[4.436692] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].dq = _lowState.motorState[i].dq;\n'}
[4.436752] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].ddq = _lowState.motorState[i].ddq;\n'}
[4.436797] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].tauEst = _lowState.motorState[i].tauEst;\n'}
[4.436939] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.436996] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 3; ++i) {\n'}
[4.437038] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.quaternion[i] = _lowState.imu.quaternion[i];\n'}
[4.437113] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];\n'}
[4.437155] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];\n'}
[4.437198] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.437240] (unitree_guide2) StdoutLine: {'line': b'3: +  state->imu.quaternion[3] = _lowState.imu.quaternion[3];\n'}
[4.437282] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.437324] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.437365] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::initSend()\n'}
[4.437407] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.437448] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[0] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.437490] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FR_hip_controller/command", 1);\n'}
[4.437531] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[1] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.437574] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FR_thigh_controller/command", 1);\n'}
[4.437615] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[2] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.437657] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FR_calf_controller/command", 1);\n'}
[4.437698] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[3] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.437739] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FL_hip_controller/command", 1);\n'}
[4.437780] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[4] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.437822] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FL_thigh_controller/command", 1);\n'}
[4.437929] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[5] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.438032] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FL_calf_controller/command", 1);\n'}
[4.438124] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[6] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.438184] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RR_hip_controller/command", 1);\n'}
[4.438240] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[7] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.438313] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RR_thigh_controller/command", 1);\n'}
[4.438373] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[8] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.438446] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RR_calf_controller/command", 1);\n'}
[4.438502] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[9] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.438575] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RL_hip_controller/command", 1);\n'}
[4.438635] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[10] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.438689] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RL_thigh_controller/command", 1);\n'}
[4.438762] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub[11] = _nm.advertise<unitree_legged_msgs::MotorCmd>(\n'}
[4.438814] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RL_calf_controller/command", 1);\n'}
[4.438856] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.438897] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.438938] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::initRecv()\n'}
[4.438981] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.439043] (unitree_guide2) StdoutLine: {'line': b'3: +  _imu_sub = _nm.subscribe("/trunk_imu", 1, &IOROS::imuCallback, this);\n'}
[4.439147] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[0] = _nm.subscribe(\n'}
[4.439213] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FR_hip_controller/state", 1,\n'}
[4.439270] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::FRhipCallback, this);\n'}
[4.439312] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[1] = _nm.subscribe(\n'}
[4.439354] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FR_thigh_controller/state", 1,\n'}
[4.439395] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::FRthighCallback, this);\n'}
[4.439436] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[2] = _nm.subscribe(\n'}
[4.439483] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FR_calf_controller/state", 1,\n'}
[4.439548] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::FRcalfCallback, this);\n'}
[4.439597] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[3] = _nm.subscribe(\n'}
[4.439702] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FL_hip_controller/state", 1,\n'}
[4.439802] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::FLhipCallback, this);\n'}
[4.439846] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[4] = _nm.subscribe(\n'}
[4.439887] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FL_thigh_controller/state", 1,\n'}
[4.439928] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::FLthighCallback, this);\n'}
[4.439970] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[5] = _nm.subscribe(\n'}
[4.440011] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/FL_calf_controller/state", 1,\n'}
[4.440053] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::FLcalfCallback, this);\n'}
[4.440095] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[6] = _nm.subscribe(\n'}
[4.440136] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RR_hip_controller/state", 1,\n'}
[4.440179] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::RRhipCallback, this);\n'}
[4.440221] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[7] = _nm.subscribe(\n'}
[4.440262] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RR_thigh_controller/state", 1,\n'}
[4.440303] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::RRthighCallback, this);\n'}
[4.440345] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[8] = _nm.subscribe(\n'}
[4.440386] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RR_calf_controller/state", 1,\n'}
[4.440427] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::RRcalfCallback, this);\n'}
[4.440468] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[9] = _nm.subscribe(\n'}
[4.440509] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RL_hip_controller/state", 1,\n'}
[4.440570] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::RLhipCallback, this);\n'}
[4.440625] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[10] = _nm.subscribe(\n'}
[4.440665] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RL_thigh_controller/state", 1,\n'}
[4.440707] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::RLthighCallback, this);\n'}
[4.440767] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub[11] = _nm.subscribe(\n'}
[4.440822] (unitree_guide2) StdoutLine: {'line': b'3: +    "/" + _robot_name + "_gazebo/RL_calf_controller/state", 1,\n'}
[4.440873] (unitree_guide2) StdoutLine: {'line': b'3: +    &IOROS::RLcalfCallback, this);\n'}
[4.440915] (unitree_guide2) StdoutLine: {'line': b'3: @@ -110,109 +155,109 @@\n'}
[4.440956] (unitree_guide2) StdoutLine: {'line': b'3: -{ \n'}
[4.440999] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[0] = msg.orientation.w;\n'}
[4.441041] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[1] = msg.orientation.x;\n'}
[4.441082] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[2] = msg.orientation.y;\n'}
[4.441124] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[3] = msg.orientation.z;\n'}
[4.441165] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.441206] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.gyroscope[0] = msg.angular_velocity.x;\n'}
[4.441247] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.gyroscope[1] = msg.angular_velocity.y;\n'}
[4.441288] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.gyroscope[2] = msg.angular_velocity.z;\n'}
[4.441328] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.441369] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.accelerometer[0] = msg.linear_acceleration.x;\n'}
[4.441411] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.accelerometer[1] = msg.linear_acceleration.y;\n'}
[4.441452] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.accelerometer[2] = msg.linear_acceleration.z;\n'}
[4.441493] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.441567] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.441609] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::FRhipCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.441651] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.441693] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[0].mode = msg.mode;\n'}
[4.441734] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[0].q = msg.q;\n'}
[4.441775] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[0].dq = msg.dq;\n'}
[4.441816] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[0].tauEst = msg.tauEst;\n'}
[4.441857] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.441898] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.441938] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::FRthighCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.441979] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.442020] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[1].mode = msg.mode;\n'}
[4.442061] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[1].q = msg.q;\n'}
[4.442102] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[1].dq = msg.dq;\n'}
[4.442143] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[1].tauEst = msg.tauEst;\n'}
[4.442185] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.442226] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.442267] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::FRcalfCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.442309] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.442351] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[2].mode = msg.mode;\n'}
[4.442392] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[2].q = msg.q;\n'}
[4.442434] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[2].dq = msg.dq;\n'}
[4.442474] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[2].tauEst = msg.tauEst;\n'}
[4.442549] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.442591] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.442633] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::FLhipCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.442675] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.442717] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[3].mode = msg.mode;\n'}
[4.442766] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[3].q = msg.q;\n'}
[4.442808] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[3].dq = msg.dq;\n'}
[4.442875] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[3].tauEst = msg.tauEst;\n'}
[4.442969] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.443044] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.443137] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::FLthighCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.443206] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.443284] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[4].mode = msg.mode;\n'}
[4.443368] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[4].q = msg.q;\n'}
[4.443421] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[4].dq = msg.dq;\n'}
[4.443479] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[4].tauEst = msg.tauEst;\n'}
[4.443522] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.443565] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.443607] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::FLcalfCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.443650] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.443698] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[5].mode = msg.mode;\n'}
[4.443744] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[5].q = msg.q;\n'}
[4.443789] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[5].dq = msg.dq;\n'}
[4.443836] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[5].tauEst = msg.tauEst;\n'}
[4.443881] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.443929] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.443981] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::RRhipCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.444028] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.444074] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[6].mode = msg.mode;\n'}
[4.444120] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[6].q = msg.q;\n'}
[4.444165] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[6].dq = msg.dq;\n'}
[4.444209] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[6].tauEst = msg.tauEst;\n'}
[4.444256] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.444301] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.444347] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::RRthighCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.444392] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.444461] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[7].mode = msg.mode;\n'}
[4.444513] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[7].q = msg.q;\n'}
[4.444573] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[7].dq = msg.dq;\n'}
[4.444618] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[7].tauEst = msg.tauEst;\n'}
[4.444673] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.444717] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.444763] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::RRcalfCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.444807] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.444852] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[8].mode = msg.mode;\n'}
[4.444896] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[8].q = msg.q;\n'}
[4.444940] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[8].dq = msg.dq;\n'}
[4.444990] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[8].tauEst = msg.tauEst;\n'}
[4.445038] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.445084] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.445134] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::RLhipCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.445181] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.445226] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[9].mode = msg.mode;\n'}
[4.445272] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[9].q = msg.q;\n'}
[4.445318] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[9].dq = msg.dq;\n'}
[4.445364] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[9].tauEst = msg.tauEst;\n'}
[4.445408] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.445453] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.445501] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::RLthighCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.445567] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.445613] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[10].mode = msg.mode;\n'}
[4.445659] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[10].q = msg.q;\n'}
[4.445705] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[10].dq = msg.dq;\n'}
[4.445751] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[10].tauEst = msg.tauEst;\n'}
[4.445798] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.445843] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.445890] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::RLcalfCallback(const unitree_legged_msgs::MotorState& msg)\n'}
[4.445935] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.445982] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[11].mode = msg.mode;\n'}
[4.446033] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[11].q = msg.q;\n'}
[4.446084] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[11].dq = msg.dq;\n'}
[4.446131] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motorState[11].tauEst = msg.tauEst;\n'}
[4.446178] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.446224] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[0] = msg.orientation.w;\n'}
[4.446272] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[1] = msg.orientation.x;\n'}
[4.446317] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[2] = msg.orientation.y;\n'}
[4.446412] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[3] = msg.orientation.z;\n'}
[4.446498] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.446556] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.gyroscope[0] = msg.angular_velocity.x;\n'}
[4.446613] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.gyroscope[1] = msg.angular_velocity.y;\n'}
[4.446656] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.gyroscope[2] = msg.angular_velocity.z;\n'}
[4.446697] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.446739] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.accelerometer[0] = msg.linear_acceleration.x;\n'}
[4.446782] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.accelerometer[1] = msg.linear_acceleration.y;\n'}
[4.446823] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.accelerometer[2] = msg.linear_acceleration.z;\n'}
[4.446865] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.446906] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.446948] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::FRhipCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.446991] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.447032] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[0].mode = msg.mode;\n'}
[4.447074] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[0].q = msg.q;\n'}
[4.447117] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[0].dq = msg.dq;\n'}
[4.447160] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[0].tauEst = msg.tauEst;\n'}
[4.447209] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.447252] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.447294] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::FRthighCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.447336] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.447377] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[1].mode = msg.mode;\n'}
[4.447418] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[1].q = msg.q;\n'}
[4.447460] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[1].dq = msg.dq;\n'}
[4.447501] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[1].tauEst = msg.tauEst;\n'}
[4.447557] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.447599] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.447641] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::FRcalfCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.447688] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.447731] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[2].mode = msg.mode;\n'}
[4.447774] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[2].q = msg.q;\n'}
[4.447817] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[2].dq = msg.dq;\n'}
[4.447860] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[2].tauEst = msg.tauEst;\n'}
[4.447904] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.447947] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.447989] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::FLhipCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.448033] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.448076] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[3].mode = msg.mode;\n'}
[4.448119] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[3].q = msg.q;\n'}
[4.448161] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[3].dq = msg.dq;\n'}
[4.448204] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[3].tauEst = msg.tauEst;\n'}
[4.448246] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.448289] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.448332] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::FLthighCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.448375] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.448418] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[4].mode = msg.mode;\n'}
[4.448461] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[4].q = msg.q;\n'}
[4.448504] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[4].dq = msg.dq;\n'}
[4.448547] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[4].tauEst = msg.tauEst;\n'}
[4.448591] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.448634] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.448710] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::FLcalfCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.448896] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.448945] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[5].mode = msg.mode;\n'}
[4.448991] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[5].q = msg.q;\n'}
[4.449036] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[5].dq = msg.dq;\n'}
[4.449080] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[5].tauEst = msg.tauEst;\n'}
[4.449123] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.449167] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.449210] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::RRhipCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.449254] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.449296] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[6].mode = msg.mode;\n'}
[4.449339] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[6].q = msg.q;\n'}
[4.449382] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[6].dq = msg.dq;\n'}
[4.449432] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[6].tauEst = msg.tauEst;\n'}
[4.449476] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.449519] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.449562] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::RRthighCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.449619] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.449661] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[7].mode = msg.mode;\n'}
[4.449703] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[7].q = msg.q;\n'}
[4.449746] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[7].dq = msg.dq;\n'}
[4.449789] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[7].tauEst = msg.tauEst;\n'}
[4.449831] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.449873] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.449916] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::RRcalfCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.449958] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.450000] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[8].mode = msg.mode;\n'}
[4.450052] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[8].q = msg.q;\n'}
[4.450094] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[8].dq = msg.dq;\n'}
[4.450136] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[8].tauEst = msg.tauEst;\n'}
[4.450179] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.450221] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.450262] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::RLhipCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.450304] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.450408] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[9].mode = msg.mode;\n'}
[4.450469] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[9].q = msg.q;\n'}
[4.450513] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[9].dq = msg.dq;\n'}
[4.450570] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[9].tauEst = msg.tauEst;\n'}
[4.450614] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.450658] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.450701] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::RLthighCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.450745] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.450788] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[10].mode = msg.mode;\n'}
[4.450831] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[10].q = msg.q;\n'}
[4.450874] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[10].dq = msg.dq;\n'}
[4.450918] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[10].tauEst = msg.tauEst;\n'}
[4.450961] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.451003] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.451046] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::RLcalfCallback(const unitree_legged_msgs::MotorState & msg)\n'}
[4.451088] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.451131] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[11].mode = msg.mode;\n'}
[4.451175] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[11].q = msg.q;\n'}
[4.451218] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[11].dq = msg.dq;\n'}
[4.451261] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motorState[11].tauEst = msg.tauEst;\n'}
[4.451304] (unitree_guide2) StdoutLine: {'line': b'3: @@ -236,6 +281,7 @@\n'}
[4.451385] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::RosShutDown(int sig){\n'}
[4.451440] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.451485] (unitree_guide2) StdoutLine: {'line': b'3: -\t// RCLCPP_INFO_ONCE(_nm->get_logger(), "ROS 2 interface shutting down!");\n'}
[4.451552] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "ROS 2 interface shutting down!" << std::endl;\n'}
[4.451618] (unitree_guide2) StdoutLine: {'line': b'3: -    // executor_thread.join();\n'}
[4.451679] (unitree_guide2) StdoutLine: {'line': b'3: -\trclcpp::shutdown();\n'}
[4.451722] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::RosShutDown(int sig)\n'}
[4.451764] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.451807] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.451849] (unitree_guide2) StdoutLine: {'line': b'3: +  // RCLCPP_INFO_ONCE(_nm->get_logger(), "ROS 2 interface shutting down!");\n'}
[4.451891] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "ROS 2 interface shutting down!" << std::endl;\n'}
[4.451934] (unitree_guide2) StdoutLine: {'line': b'3: +  // executor_thread.join();\n'}
[4.451975] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::shutdown();\n'}
[4.452023] (unitree_guide2) StdoutLine: {'line': b'3: @@ -246 +292 @@\n'}
[4.452071] (unitree_guide2) StdoutLine: {'line': b'3: -//     joint_index_map["FL_thigh_joint"] = 1;         \n'}
[4.452116] (unitree_guide2) StdoutLine: {'line': b'3: +//     joint_index_map["FL_thigh_joint"] = 1;\n'}
[4.452159] (unitree_guide2) StdoutLine: {'line': b'3: @@ -250 +296 @@\n'}
[4.452201] (unitree_guide2) StdoutLine: {'line': b'3: -//     joint_index_map["FR_calf_joint"] = 5;         \n'}
[4.452265] (unitree_guide2) StdoutLine: {'line': b'3: +//     joint_index_map["FR_calf_joint"] = 5;\n'}
[4.452311] (unitree_guide2) StdoutLine: {'line': b'3: @@ -252 +298 @@\n'}
[4.452357] (unitree_guide2) StdoutLine: {'line': b'3: -//     joint_index_map["RL_thigh_joint"] = 7;         \n'}
[4.452408] (unitree_guide2) StdoutLine: {'line': b'3: +//     joint_index_map["RL_thigh_joint"] = 7;\n'}
[4.452459] (unitree_guide2) StdoutLine: {'line': b'3: @@ -254,2 +300,2 @@\n'}
[4.452510] (unitree_guide2) StdoutLine: {'line': b'3: -//     joint_index_map["RR_hip_joint"] = 9;          \n'}
[4.452561] (unitree_guide2) StdoutLine: {'line': b'3: -//     joint_index_map["RR_thigh_joint"] = 10;        \n'}
[4.452609] (unitree_guide2) StdoutLine: {'line': b'3: +//     joint_index_map["RR_hip_joint"] = 9;\n'}
[4.452662] (unitree_guide2) StdoutLine: {'line': b'3: +//     joint_index_map["RR_thigh_joint"] = 10;\n'}
[4.452726] (unitree_guide2) StdoutLine: {'line': b'3: @@ -259,31 +305,34 @@\n'}
[4.452772] (unitree_guide2) StdoutLine: {'line': b'3: -IOROS::IOROS(rclcpp::Node::SharedPtr node_ptr) : IOInterface(){\n'}
[4.452817] (unitree_guide2) StdoutLine: {'line': b'3: -    _nm = node_ptr;\n'}
[4.452865] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.452912] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;\n'}
[4.452958] (unitree_guide2) StdoutLine: {'line': b'3: -    _nm->declare_parameter("robot_name", "go2");\n'}
[4.453003] (unitree_guide2) StdoutLine: {'line': b'3: -    _nm->get_parameter("robot_name", _robot_name);\n'}
[4.453048] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "robot_name: " << _robot_name << std::endl;\n'}
[4.453093] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.453138] (unitree_guide2) StdoutLine: {'line': b'3: -    // initialize map\n'}
[4.453183] (unitree_guide2) StdoutLine: {'line': b'3: -    // initializeJointIndexMap();\n'}
[4.453230] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.453276] (unitree_guide2) StdoutLine: {'line': b'3: -    // _joint_cmd = std_msgs::msg::Float64MultiArray();\n'}
[4.453321] (unitree_guide2) StdoutLine: {'line': b'3: -    // for(int i = 0; i < 12; i++){\n'}
[4.453367] (unitree_guide2) StdoutLine: {'line': b'3: -    //     _joint_cmd.data.push_back(0.0);\n'}
[4.453412] (unitree_guide2) StdoutLine: {'line': b'3: -    // }\n'}
[4.453456] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.453502] (unitree_guide2) StdoutLine: {'line': b'3: -    // start subscriber\n'}
[4.453564] (unitree_guide2) StdoutLine: {'line': b'3: -    initRecv();\n'}
[4.453608] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "init recv" << std::endl;\n'}
[4.453678] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.453724] (unitree_guide2) StdoutLine: {'line': b'3: -    // ros::AsyncSpinner subSpinner(1); // one threads\n'}
[4.453771] (unitree_guide2) StdoutLine: {'line': b'3: -    // subSpinner.start();\n'}
[4.453821] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.453867] (unitree_guide2) StdoutLine: {'line': b'3: -    // ROS 2 equivalent\n'}
[4.453914] (unitree_guide2) StdoutLine: {'line': b'3: -    auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(\n'}
[4.453963] (unitree_guide2) StdoutLine: {'line': b'3: -        rclcpp::ExecutorOptions(), 1\n'}
[4.454010] (unitree_guide2) StdoutLine: {'line': b'3: -    );\n'}
[4.454056] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.454100] (unitree_guide2) StdoutLine: {'line': b'3: -    executor->add_node(_nm);\n'}
[4.454145] (unitree_guide2) StdoutLine: {'line': b'3: -    executor_thread = std::thread([executor] (){\n'}
[4.454190] (unitree_guide2) StdoutLine: {'line': b'3: -        executor->spin();\n'}
[4.454234] (unitree_guide2) StdoutLine: {'line': b'3: +IOROS::IOROS(rclcpp::Node::SharedPtr node_ptr)\n'}
[4.454277] (unitree_guide2) StdoutLine: {'line': b'3: +: IOInterface()\n'}
[4.454320] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.454363] (unitree_guide2) StdoutLine: {'line': b'3: +  _nm = node_ptr;\n'}
[4.454406] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.454449] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;\n'}
[4.454492] (unitree_guide2) StdoutLine: {'line': b'3: +  _nm->declare_parameter("robot_name", "go2");\n'}
[4.454535] (unitree_guide2) StdoutLine: {'line': b'3: +  _nm->get_parameter("robot_name", _robot_name);\n'}
[4.454591] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "robot_name: " << _robot_name << std::endl;\n'}
[4.454634] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.454676] (unitree_guide2) StdoutLine: {'line': b'3: +  // initialize map\n'}
[4.454719] (unitree_guide2) StdoutLine: {'line': b'3: +  // initializeJointIndexMap();\n'}
[4.454761] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.454803] (unitree_guide2) StdoutLine: {'line': b'3: +  // _joint_cmd = std_msgs::msg::Float64MultiArray();\n'}
[4.454845] (unitree_guide2) StdoutLine: {'line': b'3: +  // for(int i = 0; i < 12; i++){\n'}
[4.454887] (unitree_guide2) StdoutLine: {'line': b'3: +  //     _joint_cmd.data.push_back(0.0);\n'}
[4.454929] (unitree_guide2) StdoutLine: {'line': b'3: +  // }\n'}
[4.454971] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.455014] (unitree_guide2) StdoutLine: {'line': b'3: +  // start subscriber\n'}
[4.455056] (unitree_guide2) StdoutLine: {'line': b'3: +  initRecv();\n'}
[4.455098] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "init recv" << std::endl;\n'}
[4.455140] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.455182] (unitree_guide2) StdoutLine: {'line': b'3: +  // ros::AsyncSpinner subSpinner(1); // one threads\n'}
[4.455245] (unitree_guide2) StdoutLine: {'line': b'3: +  // subSpinner.start();\n'}
[4.455302] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.455344] (unitree_guide2) StdoutLine: {'line': b'3: +  // ROS 2 equivalent\n'}
[4.455387] (unitree_guide2) StdoutLine: {'line': b'3: +  auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(\n'}
[4.455446] (unitree_guide2) StdoutLine: {'line': b'3: +    rclcpp::ExecutorOptions(), 1\n'}
[4.455489] (unitree_guide2) StdoutLine: {'line': b'3: +  );\n'}
[4.455545] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.455589] (unitree_guide2) StdoutLine: {'line': b'3: +  executor->add_node(_nm);\n'}
[4.455633] (unitree_guide2) StdoutLine: {'line': b'3: +  executor_thread = std::thread(\n'}
[4.455677] (unitree_guide2) StdoutLine: {'line': b'3: +    [executor]() {\n'}
[4.455720] (unitree_guide2) StdoutLine: {'line': b'3: +      executor->spin();\n'}
[4.455763] (unitree_guide2) StdoutLine: {'line': b'3: @@ -291,92 +340,165 @@\n'}
[4.455810] (unitree_guide2) StdoutLine: {'line': b'3: -    executor_thread.detach();\n'}
[4.455854] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "executor thread detached and running" << std::endl;\n'}
[4.455897] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.455941] (unitree_guide2) StdoutLine: {'line': b'3: -    usleep(300000);     // wait for subscribers start\n'}
[4.455984] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.456028] (unitree_guide2) StdoutLine: {'line': b'3: -    initSend();   \n'}
[4.456071] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.456114] (unitree_guide2) StdoutLine: {'line': b'3: -    signal(SIGINT, IOROS::RosShutDown);\n'}
[4.456159] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.456202] (unitree_guide2) StdoutLine: {'line': b'3: -    cmdPanel = new KeyBoard();\n'}
[4.456246] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.456289] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.456333] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.456376] (unitree_guide2) StdoutLine: {'line': b'3: -IOROS::~IOROS(){\n'}
[4.456420] (unitree_guide2) StdoutLine: {'line': b'3: -    delete cmdPanel;\n'}
[4.456463] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::shutdown();\n'}
[4.456506] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.456549] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.456592] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::sendRecv(const LowlevelCmd *cmd, LowlevelState *state){\n'}
[4.456640] (unitree_guide2) StdoutLine: {'line': b'3: -    sendCmd(cmd);\n'}
[4.456684] (unitree_guide2) StdoutLine: {'line': b'3: -    recvState(state);\n'}
[4.456727] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.456771] (unitree_guide2) StdoutLine: {'line': b'3: -    state->userCmd = cmdPanel->getUserCmd();\n'}
[4.456814] (unitree_guide2) StdoutLine: {'line': b'3: -    state->userValue = cmdPanel->getUserValue();\n'}
[4.456857] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.456901] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.456944] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::sendCmd(const LowlevelCmd *lowCmd){\n'}
[4.456988] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.457031] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 12; ++i){\n'}
[4.457075] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motor_cmd[i].mode = lowCmd->motorCmd[i].mode;\n'}
[4.457119] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motor_cmd[i].q = lowCmd->motorCmd[i].q;\n'}
[4.457162] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motor_cmd[i].dq = lowCmd->motorCmd[i].dq;\n'}
[4.457206] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motor_cmd[i].tau = lowCmd->motorCmd[i].tau;\n'}
[4.457249] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motor_cmd[i].kd = lowCmd->motorCmd[i].Kd;\n'}
[4.457291] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motor_cmd[i].kp = lowCmd->motorCmd[i].Kp;\n'}
[4.457334] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.457376] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.457419] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int m(0); m < 12; ++m){\n'}
[4.457463] (unitree_guide2) StdoutLine: {'line': b'3: -        _servo_pub[m]->publish(_lowCmd.motor_cmd[m]);\n'}
[4.457506] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.457562] (unitree_guide2) StdoutLine: {'line': b'3: -    // _joint_cmd_pub->publish(_joint_cmd);\n'}
[4.457605] (unitree_guide2) StdoutLine: {'line': b'3: -    // rclcpp::spin_once();\n'}
[4.457648] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.457690] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.457732] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.457774] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.457817] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::recvState(LowlevelState *state){\n'}
[4.457859] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 12; ++i){\n'}
[4.457906] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].q = _lowState.motor_state[i].q;\n'}
[4.457949] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].dq = _lowState.motor_state[i].dq;\n'}
[4.457991] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].ddq = _lowState.motor_state[i].ddq;\n'}
[4.458033] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].tauEst = _lowState.motor_state[i].tau_est;\n'}
[4.458075] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.458117] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 3; ++i){\n'}
[4.458178] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.quaternion[i] = _lowState.imu.quaternion[i];\n'}
[4.458234] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];\n'}
[4.458276] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];\n'}
[4.458319] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.458361] (unitree_guide2) StdoutLine: {'line': b'3: -    state->imu.quaternion[3] = _lowState.imu.quaternion[3];\n'}
[4.458404] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.458446] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.458489] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::initSend(){\n'}
[4.458531] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FR_hip_controller/command", 1));\n'}
[4.458589] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FR_thigh_controller/command", 1));\n'}
[4.458634] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FR_calf_controller/command", 1));\n'}
[4.458678] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FL_hip_controller/command", 1));\n'}
[4.458721] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FL_thigh_controller/command", 1));\n'}
[4.458765] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FL_calf_controller/command", 1));\n'}
[4.458808] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RR_hip_controller/command", 1));\n'}
[4.458852] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RR_thigh_controller/command", 1));\n'}
[4.458895] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RR_calf_controller/command", 1));\n'}
[4.458939] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RL_hip_controller/command", 1));\n'}
[4.458983] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RL_thigh_controller/command", 1));\n'}
[4.459027] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RL_calf_controller/command", 1));\n'}
[4.459070] (unitree_guide2) StdoutLine: {'line': b'3: -    // _joint_cmd_pub = _nm->create_publisher<std_msgs::msg::Float64MultiArray>("/joint_group_position_controller/commands", 1);\n'}
[4.459115] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.459158] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.459202] (unitree_guide2) StdoutLine: {'line': b'3: -void IOROS::initRecv(){\n'}
[4.459246] (unitree_guide2) StdoutLine: {'line': b'3: -    _imu_sub = _nm->create_subscription<sensor_msgs::msg::Imu>("/imu_plugin/out", 1, std::bind(&IOROS::imuCallback, this, std::placeholders::_1));\n'}
[4.459306] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FR_hip_controller/state", 1, std::bind(&IOROS::FRhipCallback, this, std::placeholders::_1)));\n'}
[4.459360] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FR_thigh_controller/state", 1, std::bind(&IOROS::FRthighCallback, this, std::placeholders::_1)));\n'}
[4.459405] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FR_calf_controller/state", 1, std::bind(&IOROS::FRcalfCallback, this, std::placeholders::_1)));\n'}
[4.459450] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FL_hip_controller/state", 1, std::bind(&IOROS::FLhipCallback, this, std::placeholders::_1)));\n'}
[4.459494] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FL_thigh_controller/state", 1, std::bind(&IOROS::FLthighCallback, this, std::placeholders::_1)));\n'}
[4.459538] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FL_calf_controller/state", 1, std::bind(&IOROS::FLcalfCallback, this, std::placeholders::_1)));\n'}
[4.459581] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RR_hip_controller/state", 1, std::bind(&IOROS::RRhipCallback, this, std::placeholders::_1)));\n'}
[4.459625] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RR_thigh_controller/state", 1, std::bind(&IOROS::RRthighCallback, this, std::placeholders::_1)));\n'}
[4.459668] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RR_calf_controller/state", 1, std::bind(&IOROS::RRcalfCallback, this, std::placeholders::_1)));\n'}
[4.459712] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RL_hip_controller/state", 1, std::bind(&IOROS::RLhipCallback, this, std::placeholders::_1)));\n'}
[4.459756] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RL_thigh_controller/state", 1, std::bind(&IOROS::RLthighCallback, this, std::placeholders::_1)));\n'}
[4.459799] (unitree_guide2) StdoutLine: {'line': b'3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RL_calf_controller/state", 1, std::bind(&IOROS::RLcalfCallback, this, std::placeholders::_1)));\n'}
[4.459843] (unitree_guide2) StdoutLine: {'line': b'3: -    // _joint_state_sub = _nm->create_subscription<sensor_msgs::msg::JointState>("/joint_states", 1, std::bind(&IOROS::jointStateCallback, this, std::placeholders::_1));\n'}
[4.459888] (unitree_guide2) StdoutLine: {'line': b'3: +  executor_thread.detach();\n'}
[4.459932] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "executor thread detached and running" << std::endl;\n'}
[4.459976] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460020] (unitree_guide2) StdoutLine: {'line': b'3: +  usleep(300000);       // wait for subscribers start\n'}
[4.460063] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460106] (unitree_guide2) StdoutLine: {'line': b'3: +  initSend();\n'}
[4.460149] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460192] (unitree_guide2) StdoutLine: {'line': b'3: +  signal(SIGINT, IOROS::RosShutDown);\n'}
[4.460235] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460277] (unitree_guide2) StdoutLine: {'line': b'3: +  cmdPanel = new KeyBoard();\n'}
[4.460325] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460368] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.460411] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460453] (unitree_guide2) StdoutLine: {'line': b'3: +IOROS::~IOROS()\n'}
[4.460496] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.460539] (unitree_guide2) StdoutLine: {'line': b'3: +  delete cmdPanel;\n'}
[4.460583] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::shutdown();\n'}
[4.460626] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.460669] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460713] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::sendRecv(const LowlevelCmd * cmd, LowlevelState * state)\n'}
[4.460756] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.460799] (unitree_guide2) StdoutLine: {'line': b'3: +  sendCmd(cmd);\n'}
[4.460842] (unitree_guide2) StdoutLine: {'line': b'3: +  recvState(state);\n'}
[4.460885] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.460928] (unitree_guide2) StdoutLine: {'line': b'3: +  state->userCmd = cmdPanel->getUserCmd();\n'}
[4.460970] (unitree_guide2) StdoutLine: {'line': b'3: +  state->userValue = cmdPanel->getUserValue();\n'}
[4.461013] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.461056] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.461098] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::sendCmd(const LowlevelCmd * lowCmd)\n'}
[4.461141] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.461184] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.461226] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 12; ++i) {\n'}
[4.461269] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motor_cmd[i].mode = lowCmd->motorCmd[i].mode;\n'}
[4.461313] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motor_cmd[i].q = lowCmd->motorCmd[i].q;\n'}
[4.461357] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motor_cmd[i].dq = lowCmd->motorCmd[i].dq;\n'}
[4.461401] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motor_cmd[i].tau = lowCmd->motorCmd[i].tau;\n'}
[4.461445] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motor_cmd[i].kd = lowCmd->motorCmd[i].Kd;\n'}
[4.461488] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motor_cmd[i].kp = lowCmd->motorCmd[i].Kp;\n'}
[4.461531] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.461575] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.461617] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int m(0); m < 12; ++m) {\n'}
[4.461660] (unitree_guide2) StdoutLine: {'line': b'3: +    _servo_pub[m]->publish(_lowCmd.motor_cmd[m]);\n'}
[4.461708] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.461751] (unitree_guide2) StdoutLine: {'line': b'3: +  // _joint_cmd_pub->publish(_joint_cmd);\n'}
[4.461795] (unitree_guide2) StdoutLine: {'line': b'3: +  // rclcpp::spin_once();\n'}
[4.461838] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.461881] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.461923] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.461966] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.462009] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::recvState(LowlevelState * state)\n'}
[4.462053] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.462097] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 12; ++i) {\n'}
[4.462141] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].q = _lowState.motor_state[i].q;\n'}
[4.462184] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].dq = _lowState.motor_state[i].dq;\n'}
[4.462228] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].ddq = _lowState.motor_state[i].ddq;\n'}
[4.462279] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].tauEst = _lowState.motor_state[i].tau_est;\n'}
[4.462323] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.462514] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 3; ++i) {\n'}
[4.462579] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.quaternion[i] = _lowState.imu.quaternion[i];\n'}
[4.462623] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];\n'}
[4.462667] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];\n'}
[4.462710] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.462753] (unitree_guide2) StdoutLine: {'line': b'3: +  state->imu.quaternion[3] = _lowState.imu.quaternion[3];\n'}
[4.462797] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.462840] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.462883] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::initSend()\n'}
[4.462926] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.462969] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463013] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463057] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FR_hip_controller/command", 1));\n'}
[4.463101] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463145] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463189] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FR_thigh_controller/command", 1));\n'}
[4.463233] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463277] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463321] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FR_calf_controller/command", 1));\n'}
[4.463365] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463407] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463450] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FL_hip_controller/command", 1));\n'}
[4.463493] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463536] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463579] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FL_thigh_controller/command", 1));\n'}
[4.463622] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463664] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463707] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FL_calf_controller/command", 1));\n'}
[4.463750] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463794] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463837] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RR_hip_controller/command", 1));\n'}
[4.463880] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.463923] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.463967] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RR_thigh_controller/command", 1));\n'}
[4.464010] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.464053] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.464096] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RR_calf_controller/command", 1));\n'}
[4.464139] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.464181] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.464224] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RL_hip_controller/command", 1));\n'}
[4.464266] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.464308] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.464356] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RL_thigh_controller/command", 1));\n'}
[4.464399] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_pub.push_back(\n'}
[4.464441] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(\n'}
[4.464485] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RL_calf_controller/command", 1));\n'}
[4.464541] (unitree_guide2) StdoutLine: {'line': b'3: +  // _joint_cmd_pub = _nm->create_publisher<std_msgs::msg::Float64MultiArray>("/joint_group_position_controller/commands", 1);\n'}
[4.464614] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.464656] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.464699] (unitree_guide2) StdoutLine: {'line': b'3: +void IOROS::initRecv()\n'}
[4.464741] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.464784] (unitree_guide2) StdoutLine: {'line': b'3: +  _imu_sub =\n'}
[4.464826] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<sensor_msgs::msg::Imu>(\n'}
[4.464868] (unitree_guide2) StdoutLine: {'line': b'3: +    "/imu_plugin/out", 1,\n'}
[4.464910] (unitree_guide2) StdoutLine: {'line': b'3: +    std::bind(&IOROS::imuCallback, this, std::placeholders::_1));\n'}
[4.464952] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.464994] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.465036] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FR_hip_controller/state", 1,\n'}
[4.465078] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::FRhipCallback, this, std::placeholders::_1)));\n'}
[4.465120] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.465162] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.465204] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FR_thigh_controller/state", 1, std::bind(\n'}
[4.465247] (unitree_guide2) StdoutLine: {'line': b'3: +        &IOROS::FRthighCallback, this,\n'}
[4.465289] (unitree_guide2) StdoutLine: {'line': b'3: +        std::placeholders::_1)));\n'}
[4.465335] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.465378] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.465421] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FR_calf_controller/state", 1,\n'}
[4.465464] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::FRcalfCallback, this, std::placeholders::_1)));\n'}
[4.465506] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.465549] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.465591] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FL_hip_controller/state", 1,\n'}
[4.465633] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::FLhipCallback, this, std::placeholders::_1)));\n'}
[4.465676] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.465718] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.465761] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FL_thigh_controller/state", 1, std::bind(\n'}
[4.465803] (unitree_guide2) StdoutLine: {'line': b'3: +        &IOROS::FLthighCallback, this,\n'}
[4.465845] (unitree_guide2) StdoutLine: {'line': b'3: +        std::placeholders::_1)));\n'}
[4.465887] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.465929] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.465972] (unitree_guide2) StdoutLine: {'line': b'3: +      "/FL_calf_controller/state", 1,\n'}
[4.466014] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::FLcalfCallback, this, std::placeholders::_1)));\n'}
[4.466057] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.466106] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.466149] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RR_hip_controller/state", 1,\n'}
[4.466191] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::RRhipCallback, this, std::placeholders::_1)));\n'}
[4.466241] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.466283] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.466325] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RR_thigh_controller/state", 1, std::bind(\n'}
[4.466367] (unitree_guide2) StdoutLine: {'line': b'3: +        &IOROS::RRthighCallback, this,\n'}
[4.466410] (unitree_guide2) StdoutLine: {'line': b'3: +        std::placeholders::_1)));\n'}
[4.466452] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.466494] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.466536] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RR_calf_controller/state", 1,\n'}
[4.466579] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::RRcalfCallback, this, std::placeholders::_1)));\n'}
[4.466620] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.466663] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.466705] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RL_hip_controller/state", 1,\n'}
[4.466747] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::RLhipCallback, this, std::placeholders::_1)));\n'}
[4.466790] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.466833] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.466876] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RL_thigh_controller/state", 1, std::bind(\n'}
[4.466918] (unitree_guide2) StdoutLine: {'line': b'3: +        &IOROS::RLthighCallback, this,\n'}
[4.466960] (unitree_guide2) StdoutLine: {'line': b'3: +        std::placeholders::_1)));\n'}
[4.467002] (unitree_guide2) StdoutLine: {'line': b'3: +  _servo_sub.push_back(\n'}
[4.467044] (unitree_guide2) StdoutLine: {'line': b'3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(\n'}
[4.467086] (unitree_guide2) StdoutLine: {'line': b'3: +      "/RL_calf_controller/state", 1,\n'}
[4.467128] (unitree_guide2) StdoutLine: {'line': b'3: +      std::bind(&IOROS::RLcalfCallback, this, std::placeholders::_1)));\n'}
[4.467171] (unitree_guide2) StdoutLine: {'line': b'3: +  // _joint_state_sub = _nm->create_subscription<sensor_msgs::msg::JointState>("/joint_states", 1, std::bind(&IOROS::jointStateCallback, this, std::placeholders::_1));\n'}
[4.467215] (unitree_guide2) StdoutLine: {'line': b'3: @@ -387,12 +509,12 @@\n'}
[4.467258] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[0] = msg->orientation.w;\n'}
[4.467301] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[1] = msg->orientation.x;\n'}
[4.467343] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[2] = msg->orientation.y;\n'}
[4.467385] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.quaternion[3] = msg->orientation.z;\n'}
[4.467427] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.467469] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.gyroscope[0] = msg->angular_velocity.x;\n'}
[4.467512] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.gyroscope[1] = msg->angular_velocity.y;\n'}
[4.467555] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.gyroscope[2] = msg->angular_velocity.z;\n'}
[4.467597] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.467639] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.accelerometer[0] = msg->linear_acceleration.x;\n'}
[4.467687] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.accelerometer[1] = msg->linear_acceleration.y;\n'}
[4.467729] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.imu.accelerometer[2] = msg->linear_acceleration.z;\n'}
[4.467772] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[0] = msg->orientation.w;\n'}
[4.467814] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[1] = msg->orientation.x;\n'}
[4.467856] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[2] = msg->orientation.y;\n'}
[4.467898] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.quaternion[3] = msg->orientation.z;\n'}
[4.467973] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.468015] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.gyroscope[0] = msg->angular_velocity.x;\n'}
[4.468057] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.gyroscope[1] = msg->angular_velocity.y;\n'}
[4.468099] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.gyroscope[2] = msg->angular_velocity.z;\n'}
[4.468150] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.468193] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.accelerometer[0] = msg->linear_acceleration.x;\n'}
[4.468256] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.accelerometer[1] = msg->linear_acceleration.y;\n'}
[4.468313] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.imu.accelerometer[2] = msg->linear_acceleration.z;\n'}
[4.468356] (unitree_guide2) StdoutLine: {'line': b'3: @@ -404,4 +526,4 @@\n'}
[4.468398] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[0].mode = msg->mode;\n'}
[4.468440] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[0].q = msg->q;\n'}
[4.468482] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[0].dq = msg->dq;\n'}
[4.468524] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[0].tau_est = msg->tau_est;\n'}
[4.468566] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[0].mode = msg->mode;\n'}
[4.468608] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[0].q = msg->q;\n'}
[4.468649] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[0].dq = msg->dq;\n'}
[4.468705] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[0].tau_est = msg->tau_est;\n'}
[4.468746] (unitree_guide2) StdoutLine: {'line': b'3: @@ -412,4 +534,4 @@\n'}
[4.468787] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[1].mode = msg->mode;\n'}
[4.468829] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[1].q = msg->q;\n'}
[4.468890] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[1].dq = msg->dq;\n'}
[4.468946] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[1].tau_est = msg->tau_est;\n'}
[4.468988] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[1].mode = msg->mode;\n'}
[4.469029] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[1].q = msg->q;\n'}
[4.469071] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[1].dq = msg->dq;\n'}
[4.469112] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[1].tau_est = msg->tau_est;\n'}
[4.469153] (unitree_guide2) StdoutLine: {'line': b'3: @@ -420,4 +542,4 @@\n'}
[4.469194] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[2].mode = msg->mode;\n'}
[4.469235] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[2].q = msg->q;\n'}
[4.469296] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[2].dq = msg->dq;\n'}
[4.469351] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[2].tau_est = msg->tau_est;\n'}
[4.469392] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[2].mode = msg->mode;\n'}
[4.469434] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[2].q = msg->q;\n'}
[4.469481] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[2].dq = msg->dq;\n'}
[4.469522] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[2].tau_est = msg->tau_est;\n'}
[4.469563] (unitree_guide2) StdoutLine: {'line': b'3: @@ -428,4 +550,4 @@\n'}
[4.469604] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[3].mode = msg->mode;\n'}
[4.469646] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[3].q = msg->q;\n'}
[4.469687] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[3].dq = msg->dq;\n'}
[4.469728] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[3].tau_est = msg->tau_est;\n'}
[4.469778] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[3].mode = msg->mode;\n'}
[4.469820] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[3].q = msg->q;\n'}
[4.469896] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[3].dq = msg->dq;\n'}
[4.469938] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[3].tau_est = msg->tau_est;\n'}
[4.469979] (unitree_guide2) StdoutLine: {'line': b'3: @@ -436,4 +558,4 @@\n'}
[4.470020] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[4].mode = msg->mode;\n'}
[4.470061] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[4].q = msg->q;\n'}
[4.470102] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[4].dq = msg->dq;\n'}
[4.470143] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[4].tau_est = msg->tau_est;\n'}
[4.470184] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[4].mode = msg->mode;\n'}
[4.470225] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[4].q = msg->q;\n'}
[4.470267] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[4].dq = msg->dq;\n'}
[4.470307] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[4].tau_est = msg->tau_est;\n'}
[4.470349] (unitree_guide2) StdoutLine: {'line': b'3: @@ -444,4 +566,4 @@\n'}
[4.470391] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[5].mode = msg->mode;\n'}
[4.470433] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[5].q = msg->q;\n'}
[4.470474] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[5].dq = msg->dq;\n'}
[4.470536] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[5].tau_est = msg->tau_est;\n'}
[4.470591] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[5].mode = msg->mode;\n'}
[4.470650] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[5].q = msg->q;\n'}
[4.470692] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[5].dq = msg->dq;\n'}
[4.470733] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[5].tau_est = msg->tau_est;\n'}
[4.470774] (unitree_guide2) StdoutLine: {'line': b'3: @@ -452,4 +574,4 @@\n'}
[4.470815] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[6].mode = msg->mode;\n'}
[4.470856] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[6].q = msg->q;\n'}
[4.470897] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[6].dq = msg->dq;\n'}
[4.470938] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[6].tau_est = msg->tau_est;\n'}
[4.471013] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[6].mode = msg->mode;\n'}
[4.471087] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[6].q = msg->q;\n'}
[4.471169] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[6].dq = msg->dq;\n'}
[4.471247] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[6].tau_est = msg->tau_est;\n'}
[4.471317] (unitree_guide2) StdoutLine: {'line': b'3: @@ -460,4 +582,4 @@\n'}
[4.471392] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[7].mode = msg->mode;\n'}
[4.471469] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[7].q = msg->q;\n'}
[4.471604] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[7].dq = msg->dq;\n'}
[4.471700] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[7].tau_est = msg->tau_est;\n'}
[4.471802] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[7].mode = msg->mode;\n'}
[4.471881] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[7].q = msg->q;\n'}
[4.471990] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[7].dq = msg->dq;\n'}
[4.472117] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[7].tau_est = msg->tau_est;\n'}
[4.472176] (unitree_guide2) StdoutLine: {'line': b'3: @@ -468,4 +590,4 @@\n'}
[4.472234] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[8].mode = msg->mode;\n'}
[4.472296] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[8].q = msg->q;\n'}
[4.472356] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[8].dq = msg->dq;\n'}
[4.472413] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[8].tau_est = msg->tau_est;\n'}
[4.472469] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[8].mode = msg->mode;\n'}
[4.472546] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[8].q = msg->q;\n'}
[4.472596] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[8].dq = msg->dq;\n'}
[4.472639] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[8].tau_est = msg->tau_est;\n'}
[4.472683] (unitree_guide2) StdoutLine: {'line': b'3: @@ -476,4 +598,4 @@\n'}
[4.472726] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[9].mode = msg->mode;\n'}
[4.472769] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[9].q = msg->q;\n'}
[4.472812] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[9].dq = msg->dq;\n'}
[4.472854] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[9].tau_est = msg->tau_est;\n'}
[4.472896] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[9].mode = msg->mode;\n'}
[4.472938] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[9].q = msg->q;\n'}
[4.472980] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[9].dq = msg->dq;\n'}
[4.473022] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[9].tau_est = msg->tau_est;\n'}
[4.473063] (unitree_guide2) StdoutLine: {'line': b'3: @@ -484,4 +606,4 @@\n'}
[4.473105] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[10].mode = msg->mode;\n'}
[4.473147] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[10].q = msg->q;\n'}
[4.473189] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[10].dq = msg->dq;\n'}
[4.473231] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[10].tau_est = msg->tau_est;\n'}
[4.473273] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[10].mode = msg->mode;\n'}
[4.473315] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[10].q = msg->q;\n'}
[4.473358] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[10].dq = msg->dq;\n'}
[4.473400] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[10].tau_est = msg->tau_est;\n'}
[4.473441] (unitree_guide2) StdoutLine: {'line': b'3: @@ -492,8 +614,8 @@\n'}
[4.473484] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[11].mode = msg->mode;\n'}
[4.473526] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[11].q = msg->q;\n'}
[4.473568] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[11].dq = msg->dq;\n'}
[4.473609] (unitree_guide2) StdoutLine: {'line': b'3: -    _lowState.motor_state[11].tau_est = msg->tau_est;\n'}
[4.473652] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.473693] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.473735] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.473797] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // COMPILE_WITH_ROS2_MB\n'}
[4.473866] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[11].mode = msg->mode;\n'}
[4.473908] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[11].q = msg->q;\n'}
[4.473950] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[11].dq = msg->dq;\n'}
[4.473993] (unitree_guide2) StdoutLine: {'line': b'3: +  _lowState.motor_state[11].tau_est = msg->tau_est;\n'}
[4.474035] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.474077] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.474119] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.474161] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // COMPILE_WITH_ROS2_MB\n'}
[4.474203] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.474244] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/interface/IOSDK.cpp':\n"}
[4.474286] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.474327] (unitree_guide2) StdoutLine: {'line': b'3: --- src/interface/IOSDK.cpp\n'}
[4.474368] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/interface/IOSDK.cpp.uncrustify\n'}
[4.474410] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,4 +11,7 @@\n'}
[4.474452] (unitree_guide2) StdoutLine: {'line': b'3: -IOSDK::IOSDK():_safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL, 8090, "192.168.123.10", 8007){\n'}
[4.474495] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "The control interface for real robot" << std::endl;\n'}
[4.474537] (unitree_guide2) StdoutLine: {'line': b'3: -    _udp.InitCmdData(_lowCmd);\n'}
[4.474579] (unitree_guide2) StdoutLine: {'line': b'3: -    cmdPanel = new WirelessHandle();\n'}
[4.474629] (unitree_guide2) StdoutLine: {'line': b'3: +IOSDK::IOSDK()\n'}
[4.474672] (unitree_guide2) StdoutLine: {'line': b'3: +: _safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL, 8090,\n'}
[4.474715] (unitree_guide2) StdoutLine: {'line': b'3: +    "192.168.123.10", 8007)\n'}
[4.474757] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.474800] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "The control interface for real robot" << std::endl;\n'}
[4.474843] (unitree_guide2) StdoutLine: {'line': b'3: +  _udp.InitCmdData(_lowCmd);\n'}
[4.474885] (unitree_guide2) StdoutLine: {'line': b'3: +  cmdPanel = new WirelessHandle();\n'}
[4.474927] (unitree_guide2) StdoutLine: {'line': b'3: @@ -17,5 +20,5 @@\n'}
[4.474970] (unitree_guide2) StdoutLine: {'line': b'3: -    _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);\n'}
[4.475013] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.name.resize(12);\n'}
[4.475054] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.position.resize(12);\n'}
[4.475096] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.velocity.resize(12);\n'}
[4.475137] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.effort.resize(12);\n'}
[4.475179] (unitree_guide2) StdoutLine: {'line': b'3: +  _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);\n'}
[4.475221] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.name.resize(12);\n'}
[4.475263] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.position.resize(12);\n'}
[4.475305] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.velocity.resize(12);\n'}
[4.475347] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.effort.resize(12);\n'}
[4.475389] (unitree_guide2) StdoutLine: {'line': b'3: @@ -27,4 +30,6 @@\n'}
[4.475431] (unitree_guide2) StdoutLine: {'line': b'3: -IOSDK::IOSDK():_safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL){\n'}
[4.475474] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "The control interface for real robot" << std::endl;\n'}
[4.475518] (unitree_guide2) StdoutLine: {'line': b'3: -    _udp.InitCmdData(_lowCmd);\n'}
[4.475561] (unitree_guide2) StdoutLine: {'line': b'3: -    cmdPanel = new WirelessHandle();\n'}
[4.475612] (unitree_guide2) StdoutLine: {'line': b'3: +IOSDK::IOSDK()\n'}
[4.475656] (unitree_guide2) StdoutLine: {'line': b'3: +: _safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL)\n'}
[4.475698] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.475772] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "The control interface for real robot" << std::endl;\n'}
[4.475814] (unitree_guide2) StdoutLine: {'line': b'3: +  _udp.InitCmdData(_lowCmd);\n'}
[4.475856] (unitree_guide2) StdoutLine: {'line': b'3: +  cmdPanel = new WirelessHandle();\n'}
[4.475898] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,5 +38,5 @@\n'}
[4.475940] (unitree_guide2) StdoutLine: {'line': b'3: -    _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);\n'}
[4.475982] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.name.resize(12);\n'}
[4.476023] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.position.resize(12);\n'}
[4.476065] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.velocity.resize(12);\n'}
[4.476107] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.effort.resize(12);\n'}
[4.476149] (unitree_guide2) StdoutLine: {'line': b'3: +  _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);\n'}
[4.476192] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.name.resize(12);\n'}
[4.476234] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.position.resize(12);\n'}
[4.476277] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.velocity.resize(12);\n'}
[4.476319] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.effort.resize(12);\n'}
[4.476361] (unitree_guide2) StdoutLine: {'line': b'3: @@ -43,12 +48,10 @@\n'}
[4.476403] (unitree_guide2) StdoutLine: {'line': b'3: -void IOSDK::sendRecv(const LowlevelCmd *cmd, LowlevelState *state){\n'}
[4.476446] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 12; ++i){\n'}
[4.476488] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].mode = cmd->motorCmd[i].mode;\n'}
[4.476531] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].q    = cmd->motorCmd[i].q;\n'}
[4.476586] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].dq   = cmd->motorCmd[i].dq;\n'}
[4.476627] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].Kp   = cmd->motorCmd[i].Kp;\n'}
[4.476669] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].Kd   = cmd->motorCmd[i].Kd;\n'}
[4.476710] (unitree_guide2) StdoutLine: {'line': b'3: -        _lowCmd.motorCmd[i].tau  = cmd->motorCmd[i].tau;\n'}
[4.476752] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.476793] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.476835] (unitree_guide2) StdoutLine: {'line': b'3: -    _udp.SetSend(_lowCmd);\n'}
[4.476876] (unitree_guide2) StdoutLine: {'line': b'3: -    _udp.Send();\n'}
[4.476917] (unitree_guide2) StdoutLine: {'line': b'3: +void IOSDK::sendRecv(const LowlevelCmd * cmd, LowlevelState * state)\n'}
[4.476959] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.477000] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 12; ++i) {\n'}
[4.477041] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].mode = cmd->motorCmd[i].mode;\n'}
[4.477082] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].q = cmd->motorCmd[i].q;\n'}
[4.477123] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].dq = cmd->motorCmd[i].dq;\n'}
[4.477164] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].Kp = cmd->motorCmd[i].Kp;\n'}
[4.477204] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].Kd = cmd->motorCmd[i].Kd;\n'}
[4.477244] (unitree_guide2) StdoutLine: {'line': b'3: +    _lowCmd.motorCmd[i].tau = cmd->motorCmd[i].tau;\n'}
[4.477284] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.477325] (unitree_guide2) StdoutLine: {'line': b'3: @@ -56,2 +59,2 @@\n'}
[4.477365] (unitree_guide2) StdoutLine: {'line': b'3: -    _udp.Recv();\n'}
[4.477413] (unitree_guide2) StdoutLine: {'line': b'3: -    _udp.GetRecv(_lowState);\n'}
[4.477454] (unitree_guide2) StdoutLine: {'line': b'3: +  _udp.SetSend(_lowCmd);\n'}
[4.477494] (unitree_guide2) StdoutLine: {'line': b'3: +  _udp.Send();\n'}
[4.477548] (unitree_guide2) StdoutLine: {'line': b'3: @@ -59,7 +62,2 @@\n'}
[4.477589] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 12; ++i){\n'}
[4.477631] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].q = _lowState.motorState[i].q;\n'}
[4.477693] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].dq = _lowState.motorState[i].dq;\n'}
[4.477749] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].ddq = _lowState.motorState[i].ddq;\n'}
[4.477791] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].tauEst = _lowState.motorState[i].tauEst;\n'}
[4.477833] (unitree_guide2) StdoutLine: {'line': b'3: -        state->motorState[i].mode = _lowState.motorState[i].mode;\n'}
[4.477875] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.477917] (unitree_guide2) StdoutLine: {'line': b'3: +  _udp.Recv();\n'}
[4.477960] (unitree_guide2) StdoutLine: {'line': b'3: +  _udp.GetRecv(_lowState);\n'}
[4.478002] (unitree_guide2) StdoutLine: {'line': b'3: @@ -67,6 +65,7 @@\n'}
[4.478044] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i < 3; ++i){\n'}
[4.478086] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.quaternion[i] = _lowState.imu.quaternion[i];\n'}
[4.478128] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.gyroscope[i]  = _lowState.imu.gyroscope[i];\n'}
[4.478170] (unitree_guide2) StdoutLine: {'line': b'3: -        state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];\n'}
[4.478212] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.478254] (unitree_guide2) StdoutLine: {'line': b'3: -    state->imu.quaternion[3] = _lowState.imu.quaternion[3];\n'}
[4.478296] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 12; ++i) {\n'}
[4.478338] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].q = _lowState.motorState[i].q;\n'}
[4.478730] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].dq = _lowState.motorState[i].dq;\n'}
[4.478791] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].ddq = _lowState.motorState[i].ddq;\n'}
[4.478835] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].tauEst = _lowState.motorState[i].tauEst;\n'}
[4.478877] (unitree_guide2) StdoutLine: {'line': b'3: +    state->motorState[i].mode = _lowState.motorState[i].mode;\n'}
[4.478933] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.478976] (unitree_guide2) StdoutLine: {'line': b'3: @@ -74,3 +73,10 @@\n'}
[4.479018] (unitree_guide2) StdoutLine: {'line': b'3: -    cmdPanel->receiveHandle(&_lowState);\n'}
[4.479060] (unitree_guide2) StdoutLine: {'line': b'3: -    state->userCmd = cmdPanel->getUserCmd();\n'}
[4.479103] (unitree_guide2) StdoutLine: {'line': b'3: -    state->userValue = cmdPanel->getUserValue();\n'}
[4.479145] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 3; ++i) {\n'}
[4.479188] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.quaternion[i] = _lowState.imu.quaternion[i];\n'}
[4.479230] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];\n'}
[4.479275] (unitree_guide2) StdoutLine: {'line': b'3: +    state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];\n'}
[4.479318] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.479359] (unitree_guide2) StdoutLine: {'line': b'3: +  state->imu.quaternion[3] = _lowState.imu.quaternion[3];\n'}
[4.479400] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.479441] (unitree_guide2) StdoutLine: {'line': b'3: +  cmdPanel->receiveHandle(&_lowState);\n'}
[4.479482] (unitree_guide2) StdoutLine: {'line': b'3: +  state->userCmd = cmdPanel->getUserCmd();\n'}
[4.479524] (unitree_guide2) StdoutLine: {'line': b'3: +  state->userValue = cmdPanel->getUserValue();\n'}
[4.479583] (unitree_guide2) StdoutLine: {'line': b'3: @@ -79,10 +85,10 @@\n'}
[4.479625] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.header.stamp = ros::Time::now();\n'}
[4.479668] (unitree_guide2) StdoutLine: {'line': b'3: -    _joint_state.name = {"FR_hip_joint", "FR_thigh_joint", "FR_calf_joint", \n'}
[4.479710] (unitree_guide2) StdoutLine: {'line': b'3: -                         "FL_hip_joint", "FL_thigh_joint", "FL_calf_joint",  \n'}
[4.479753] (unitree_guide2) StdoutLine: {'line': b'3: -                         "RR_hip_joint", "RR_thigh_joint", "RR_calf_joint", \n'}
[4.479796] (unitree_guide2) StdoutLine: {'line': b'3: -                         "RL_hip_joint", "RL_thigh_joint", "RL_calf_joint"};\n'}
[4.479840] (unitree_guide2) StdoutLine: {'line': b'3: -    for(int i(0); i<12; ++i){\n'}
[4.479883] (unitree_guide2) StdoutLine: {'line': b'3: -        _joint_state.position[i] = state->motorState[i].q;\n'}
[4.479926] (unitree_guide2) StdoutLine: {'line': b'3: -        _joint_state.velocity[i] = state->motorState[i].dq;\n'}
[4.479969] (unitree_guide2) StdoutLine: {'line': b'3: -        _joint_state.effort[i]   = state->motorState[i].tauEst;\n'}
[4.480012] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.480054] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.header.stamp = ros::Time::now();\n'}
[4.480096] (unitree_guide2) StdoutLine: {'line': b'3: +  _joint_state.name = {"FR_hip_joint", "FR_thigh_joint", "FR_calf_joint",\n'}
[4.480138] (unitree_guide2) StdoutLine: {'line': b'3: +    "FL_hip_joint", "FL_thigh_joint", "FL_calf_joint",\n'}
[4.480178] (-) TimerEvent: {}
[4.480277] (unitree_guide2) StdoutLine: {'line': b'3: +    "RR_hip_joint", "RR_thigh_joint", "RR_calf_joint",\n'}
[4.480413] (unitree_guide2) StdoutLine: {'line': b'3: +    "RL_hip_joint", "RL_thigh_joint", "RL_calf_joint"};\n'}
[4.480462] (unitree_guide2) StdoutLine: {'line': b'3: +  for (int i(0); i < 12; ++i) {\n'}
[4.480506] (unitree_guide2) StdoutLine: {'line': b'3: +    _joint_state.position[i] = state->motorState[i].q;\n'}
[4.480549] (unitree_guide2) StdoutLine: {'line': b'3: +    _joint_state.velocity[i] = state->motorState[i].dq;\n'}
[4.480608] (unitree_guide2) StdoutLine: {'line': b'3: +    _joint_state.effort[i] = state->motorState[i].tauEst;\n'}
[4.480687] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.480780] (unitree_guide2) StdoutLine: {'line': b'3: @@ -90 +96 @@\n'}
[4.480855] (unitree_guide2) StdoutLine: {'line': b'3: -    _pub.publish(_joint_state);\n'}
[4.480934] (unitree_guide2) StdoutLine: {'line': b'3: +  _pub.publish(_joint_state);\n'}
[4.480993] (unitree_guide2) StdoutLine: {'line': b'3: @@ -94 +100 @@\n'}
[4.481038] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  // COMPILE_WITH_REAL_ROBOT\n'}
[4.481115] (unitree_guide2) StdoutLine: {'line': b'3: +#endif  // COMPILE_WITH_REAL_ROBOT\n'}
[4.481160] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.481222] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/interface/KeyBoard.cpp':\n"}
[4.481282] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.483836] (unitree_guide2) StdoutLine: {'line': b'3: --- src/interface/KeyBoard.cpp\n'}
[4.483975] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/interface/KeyBoard.cpp.uncrustify\n'}
[4.484024] (unitree_guide2) StdoutLine: {'line': b'3: @@ -7,3 +7,4 @@\n'}
[4.484068] (unitree_guide2) StdoutLine: {'line': b'3: -KeyBoard::KeyBoard(){\n'}
[4.484111] (unitree_guide2) StdoutLine: {'line': b'3: -    userCmd = UserCommand::NONE;\n'}
[4.484154] (unitree_guide2) StdoutLine: {'line': b'3: -    userValue.setZero();\n'}
[4.484197] (unitree_guide2) StdoutLine: {'line': b'3: +KeyBoard::KeyBoard()\n'}
[4.484240] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.484283] (unitree_guide2) StdoutLine: {'line': b'3: +  userCmd = UserCommand::NONE;\n'}
[4.484331] (unitree_guide2) StdoutLine: {'line': b'3: +  userValue.setZero();\n'}
[4.484376] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11,4 +12,4 @@\n'}
[4.484423] (unitree_guide2) StdoutLine: {'line': b'3: -    tcgetattr( fileno( stdin ), &_oldSettings );\n'}
[4.484482] (unitree_guide2) StdoutLine: {'line': b'3: -    _newSettings = _oldSettings;\n'}
[4.484529] (unitree_guide2) StdoutLine: {'line': b'3: -    _newSettings.c_lflag &= (~ICANON & ~ECHO);\n'}
[4.484574] (unitree_guide2) StdoutLine: {'line': b'3: -    tcsetattr( fileno( stdin ), TCSANOW, &_newSettings );\n'}
[4.484621] (unitree_guide2) StdoutLine: {'line': b'3: +  tcgetattr(fileno(stdin), &_oldSettings);\n'}
[4.484672] (unitree_guide2) StdoutLine: {'line': b'3: +  _newSettings = _oldSettings;\n'}
[4.484720] (unitree_guide2) StdoutLine: {'line': b'3: +  _newSettings.c_lflag &= (~ICANON & ~ECHO);\n'}
[4.484766] (unitree_guide2) StdoutLine: {'line': b'3: +  tcsetattr(fileno(stdin), TCSANOW, &_newSettings);\n'}
[4.484835] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16 +17 @@\n'}
[4.484895] (unitree_guide2) StdoutLine: {'line': b'3: -    pthread_create(&_tid, NULL, runKeyBoard, (void*)this);\n'}
[4.484988] (unitree_guide2) StdoutLine: {'line': b'3: +  pthread_create(&_tid, NULL, runKeyBoard, (void *)this);\n'}
[4.485056] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,4 +20,5 @@\n'}
[4.485121] (unitree_guide2) StdoutLine: {'line': b'3: -KeyBoard::~KeyBoard(){\n'}
[4.485185] (unitree_guide2) StdoutLine: {'line': b'3: -    pthread_cancel(_tid);\n'}
[4.485251] (unitree_guide2) StdoutLine: {'line': b'3: -    pthread_join(_tid, NULL);\n'}
[4.485321] (unitree_guide2) StdoutLine: {'line': b'3: -    tcsetattr( fileno( stdin ), TCSANOW, &_oldSettings );\n'}
[4.485395] (unitree_guide2) StdoutLine: {'line': b'3: +KeyBoard::~KeyBoard()\n'}
[4.485466] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.485539] (unitree_guide2) StdoutLine: {'line': b'3: +  pthread_cancel(_tid);\n'}
[4.485631] (unitree_guide2) StdoutLine: {'line': b'3: +  pthread_join(_tid, NULL);\n'}
[4.485708] (unitree_guide2) StdoutLine: {'line': b'3: +  tcsetattr(fileno(stdin), TCSANOW, &_oldSettings);\n'}
[4.485787] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,2 +27,3 @@\n'}
[4.485921] (unitree_guide2) StdoutLine: {'line': b'3: -UserCommand KeyBoard::checkCmd(){\n'}
[4.485985] (unitree_guide2) StdoutLine: {'line': b'3: -    switch (_c){\n'}
[4.486027] (unitree_guide2) StdoutLine: {'line': b'3: +UserCommand KeyBoard::checkCmd()\n'}
[4.486069] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.486111] (unitree_guide2) StdoutLine: {'line': b'3: +  switch (_c) {\n'}
[4.486153] (unitree_guide2) StdoutLine: {'line': b'3: @@ -28 +31 @@\n'}
[4.486195] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L2_B;\n'}
[4.486237] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L2_B;\n'}
[4.486280] (unitree_guide2) StdoutLine: {'line': b'3: @@ -30 +33 @@\n'}
[4.486321] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L2_A;\n'}
[4.486362] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L2_A;\n'}
[4.486403] (unitree_guide2) StdoutLine: {'line': b'3: @@ -32 +35 @@\n'}
[4.486444] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L2_X;\n'}
[4.486485] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L2_X;\n'}
[4.486525] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34 +37 @@\n'}
[4.486566] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::START;\n'}
[4.486616] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::START;\n'}
[4.486658] (unitree_guide2) StdoutLine: {'line': b'3: @@ -37 +40 @@\n'}
[4.486699] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L2_Y;\n'}
[4.486740] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L2_Y;\n'}
[4.486781] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41 +44 @@\n'}
[4.486822] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L2_Y;\n'}
[4.486863] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L2_Y;\n'}
[4.486905] (unitree_guide2) StdoutLine: {'line': b'3: @@ -44 +47 @@\n'}
[4.486946] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L1_X;\n'}
[4.486993] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L1_X;\n'}
[4.487035] (unitree_guide2) StdoutLine: {'line': b'3: @@ -46 +49 @@\n'}
[4.487076] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L1_A;\n'}
[4.487118] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L1_A;\n'}
[4.487165] (unitree_guide2) StdoutLine: {'line': b'3: @@ -48 +51 @@\n'}
[4.487207] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::L1_Y;\n'}
[4.487247] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::L1_Y;\n'}
[4.487288] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50,2 +53,2 @@\n'}
[4.487329] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.setZero();\n'}
[4.487371] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::NONE;\n'}
[4.487412] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.setZero();\n'}
[4.487453] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::NONE;\n'}
[4.487495] (unitree_guide2) StdoutLine: {'line': b'3: @@ -53,2 +56,2 @@\n'}
[4.487536] (unitree_guide2) StdoutLine: {'line': b'3: -        return UserCommand::NONE;\n'}
[4.487577] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.487619] (unitree_guide2) StdoutLine: {'line': b'3: +      return UserCommand::NONE;\n'}
[4.487661] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.487703] (unitree_guide2) StdoutLine: {'line': b'3: @@ -57,14 +60,15 @@\n'}
[4.487745] (unitree_guide2) StdoutLine: {'line': b'3: -void KeyBoard::changeValue(){\n'}
[4.487805] (unitree_guide2) StdoutLine: {'line': b'3: -    switch (_c){\n'}
[4.487861] (unitree_guide2) StdoutLine: {'line': b"3: -    case 'w':case 'W':\n"}
[4.487903] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.ly = min<float>(userValue.ly+sensitivityLeft, 1.0);\n'}
[4.487945] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.487986] (unitree_guide2) StdoutLine: {'line': b"3: -    case 's':case 'S':\n"}
[4.488028] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.ly = max<float>(userValue.ly-sensitivityLeft, -1.0);\n'}
[4.488070] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.488111] (unitree_guide2) StdoutLine: {'line': b"3: -    case 'd':case 'D':\n"}
[4.488152] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.lx = min<float>(userValue.lx+sensitivityLeft, 1.0);\n'}
[4.488194] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.488235] (unitree_guide2) StdoutLine: {'line': b"3: -    case 'a':case 'A':\n"}
[4.488277] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.lx = max<float>(userValue.lx-sensitivityLeft, -1.0);\n'}
[4.488318] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.488360] (unitree_guide2) StdoutLine: {'line': b'3: +void KeyBoard::changeValue()\n'}
[4.488402] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.488444] (unitree_guide2) StdoutLine: {'line': b'3: +  switch (_c) {\n'}
[4.488486] (unitree_guide2) StdoutLine: {'line': b"3: +    case 'w': case 'W':\n"}
[4.488527] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.ly = min<float>(userValue.ly + sensitivityLeft, 1.0);\n'}
[4.488568] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.488609] (unitree_guide2) StdoutLine: {'line': b"3: +    case 's': case 'S':\n"}
[4.488650] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.ly = max<float>(userValue.ly - sensitivityLeft, -1.0);\n'}
[4.488691] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.488732] (unitree_guide2) StdoutLine: {'line': b"3: +    case 'd': case 'D':\n"}
[4.488793] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.lx = min<float>(userValue.lx + sensitivityLeft, 1.0);\n'}
[4.488847] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.488888] (unitree_guide2) StdoutLine: {'line': b"3: +    case 'a': case 'A':\n"}
[4.488929] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.lx = max<float>(userValue.lx - sensitivityLeft, -1.0);\n'}
[4.488976] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.489018] (unitree_guide2) StdoutLine: {'line': b'3: @@ -72,12 +76,12 @@\n'}
[4.489059] (unitree_guide2) StdoutLine: {'line': b"3: -    case 'i':case 'I':\n"}
[4.489101] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.ry = min<float>(userValue.ry+sensitivityRight, 1.0);\n'}
[4.489144] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.489185] (unitree_guide2) StdoutLine: {'line': b"3: -    case 'k':case 'K':\n"}
[4.489227] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.ry = max<float>(userValue.ry-sensitivityRight, -1.0);\n'}
[4.489269] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.489310] (unitree_guide2) StdoutLine: {'line': b"3: -    case 'l':case 'L':\n"}
[4.489352] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.rx = min<float>(userValue.rx+sensitivityRight, 1.0);\n'}
[4.489393] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.489434] (unitree_guide2) StdoutLine: {'line': b"3: -    case 'j':case 'J':\n"}
[4.489474] (unitree_guide2) StdoutLine: {'line': b'3: -        userValue.rx = max<float>(userValue.rx-sensitivityRight, -1.0);\n'}
[4.489516] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.489556] (unitree_guide2) StdoutLine: {'line': b"3: +    case 'i': case 'I':\n"}
[4.489596] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.ry = min<float>(userValue.ry + sensitivityRight, 1.0);\n'}
[4.489637] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.489742] (unitree_guide2) StdoutLine: {'line': b"3: +    case 'k': case 'K':\n"}
[4.489883] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.ry = max<float>(userValue.ry - sensitivityRight, -1.0);\n'}
[4.489947] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.490012] (unitree_guide2) StdoutLine: {'line': b"3: +    case 'l': case 'L':\n"}
[4.490105] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.rx = min<float>(userValue.rx + sensitivityRight, 1.0);\n'}
[4.490172] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.490216] (unitree_guide2) StdoutLine: {'line': b"3: +    case 'j': case 'J':\n"}
[4.490266] (unitree_guide2) StdoutLine: {'line': b'3: +      userValue.rx = max<float>(userValue.rx - sensitivityRight, -1.0);\n'}
[4.490316] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.490361] (unitree_guide2) StdoutLine: {'line': b'3: @@ -85,2 +89,2 @@\n'}
[4.490419] (unitree_guide2) StdoutLine: {'line': b'3: -        break;\n'}
[4.490545] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.490692] (unitree_guide2) StdoutLine: {'line': b'3: +      break;\n'}
[4.490808] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.490874] (unitree_guide2) StdoutLine: {'line': b'3: @@ -89,3 +93,4 @@\n'}
[4.490925] (unitree_guide2) StdoutLine: {'line': b'3: -void* KeyBoard::runKeyBoard(void *arg){\n'}
[4.490998] (unitree_guide2) StdoutLine: {'line': b'3: -    ((KeyBoard*)arg)->run(NULL);\n'}
[4.491046] (unitree_guide2) StdoutLine: {'line': b'3: -    return NULL;\n'}
[4.491115] (unitree_guide2) StdoutLine: {'line': b'3: +void * KeyBoard::runKeyBoard(void * arg)\n'}
[4.491175] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.491229] (unitree_guide2) StdoutLine: {'line': b'3: +  ((KeyBoard *)arg)->run(NULL);\n'}
[4.491319] (unitree_guide2) StdoutLine: {'line': b'3: +  return NULL;\n'}
[4.491371] (unitree_guide2) StdoutLine: {'line': b'3: @@ -94,4 +99,5 @@\n'}
[4.491428] (unitree_guide2) StdoutLine: {'line': b'3: -void* KeyBoard::run(void *arg){\n'}
[4.491486] (unitree_guide2) StdoutLine: {'line': b'3: -    while(1){\n'}
[4.491531] (unitree_guide2) StdoutLine: {'line': b'3: -        FD_ZERO(&set);\n'}
[4.491575] (unitree_guide2) StdoutLine: {'line': b'3: -        FD_SET( fileno( stdin ), &set );\n'}
[4.491620] (unitree_guide2) StdoutLine: {'line': b'3: +void * KeyBoard::run(void * arg)\n'}
[4.491676] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.491754] (unitree_guide2) StdoutLine: {'line': b'3: +  while (1) {\n'}
[4.491798] (unitree_guide2) StdoutLine: {'line': b'3: +    FD_ZERO(&set);\n'}
[4.491839] (unitree_guide2) StdoutLine: {'line': b'3: +    FD_SET(fileno(stdin), &set);\n'}
[4.491880] (unitree_guide2) StdoutLine: {'line': b'3: @@ -99 +105 @@\n'}
[4.491921] (unitree_guide2) StdoutLine: {'line': b'3: -        res = select( fileno( stdin )+1, &set, NULL, NULL, NULL);\n'}
[4.491963] (unitree_guide2) StdoutLine: {'line': b'3: +    res = select(fileno(stdin) + 1, &set, NULL, NULL, NULL);\n'}
[4.492004] (unitree_guide2) StdoutLine: {'line': b'3: @@ -101,8 +107,7 @@\n'}
[4.492045] (unitree_guide2) StdoutLine: {'line': b'3: -        if(res > 0){\n'}
[4.492086] (unitree_guide2) StdoutLine: {'line': b'3: -            ret = read( fileno( stdin ), &_c, 1 );\n'}
[4.492127] (unitree_guide2) StdoutLine: {'line': b'3: -            userCmd = checkCmd();\n'}
[4.492168] (unitree_guide2) StdoutLine: {'line': b'3: -            if(userCmd == UserCommand::NONE)\n'}
[4.492209] (unitree_guide2) StdoutLine: {'line': b'3: -                changeValue();\n'}
[4.492250] (unitree_guide2) StdoutLine: {'line': b"3: -            _c = '\\0';\n"}
[4.492292] (unitree_guide2) StdoutLine: {'line': b'3: -        }\n'}
[4.492333] (unitree_guide2) StdoutLine: {'line': b'3: -        usleep(1000);\n'}
[4.492375] (unitree_guide2) StdoutLine: {'line': b'3: +    if (res > 0) {\n'}
[4.492416] (unitree_guide2) StdoutLine: {'line': b'3: +      ret = read(fileno(stdin), &_c, 1);\n'}
[4.492457] (unitree_guide2) StdoutLine: {'line': b'3: +      userCmd = checkCmd();\n'}
[4.492500] (unitree_guide2) StdoutLine: {'line': b'3: +      if (userCmd == UserCommand::NONE) {\n'}
[4.492541] (unitree_guide2) StdoutLine: {'line': b'3: +        changeValue();\n'}
[4.492582] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.492622] (unitree_guide2) StdoutLine: {'line': b"3: +      _c = '\\0';\n"}
[4.492663] (unitree_guide2) StdoutLine: {'line': b'3: @@ -110,2 +115,4 @@\n'}
[4.492704] (unitree_guide2) StdoutLine: {'line': b'3: -    return NULL;\n'}
[4.492744] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.492785] (unitree_guide2) StdoutLine: {'line': b'3: +    usleep(1000);\n'}
[4.492826] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.492867] (unitree_guide2) StdoutLine: {'line': b'3: +  return NULL;\n'}
[4.492908] (unitree_guide2) StdoutLine: {'line': b'3: +}\n'}
[4.492949] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.492990] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/interface/WirelessHandle.cpp':\n"}
[4.493032] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.493073] (unitree_guide2) StdoutLine: {'line': b'3: --- src/interface/WirelessHandle.cpp\n'}
[4.493114] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/interface/WirelessHandle.cpp.uncrustify\n'}
[4.493156] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11 +11,2 @@\n'}
[4.493197] (unitree_guide2) StdoutLine: {'line': b'3: -WirelessHandle::WirelessHandle(){\n'}
[4.493270] (unitree_guide2) StdoutLine: {'line': b'3: +WirelessHandle::WirelessHandle()\n'}
[4.493311] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.493351] (unitree_guide2) StdoutLine: {'line': b'3: @@ -14 +15,2 @@\n'}
[4.493392] (unitree_guide2) StdoutLine: {'line': b'3: -void WirelessHandle::receiveHandle(UNITREE_LEGGED_SDK::LowState *lowState){\n'}
[4.493443] (unitree_guide2) StdoutLine: {'line': b'3: +void WirelessHandle::receiveHandle(UNITREE_LEGGED_SDK::LowState * lowState)\n'}
[4.493485] (unitree_guide2) StdoutLine: {'line': b'3: +{\n'}
[4.493539] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16 +18 @@\n'}
[4.493581] (unitree_guide2) StdoutLine: {'line': b'3: -    memcpy(&_keyData, lowState->wirelessRemote, 40);  // note: available in the unitree_legged_sdk_3.2\n'}
[4.493625] (unitree_guide2) StdoutLine: {'line': b'3: +  memcpy(&_keyData, lowState->wirelessRemote, 40);    // note: available in the unitree_legged_sdk_3.2\n'}
[4.493667] (unitree_guide2) StdoutLine: {'line': b'3: @@ -19,14 +21,15 @@\n'}
[4.493710] (unitree_guide2) StdoutLine: {'line': b'3: -    memcpy(&_keyData, &lowState->wirelessRemote[0], 40);\n'}
[4.493770] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  \n'}
[4.493813] (unitree_guide2) StdoutLine: {'line': b'3: -    if(((int)_keyData.btn.components.L2 == 1) && \n'}
[4.493856] (unitree_guide2) StdoutLine: {'line': b'3: -       ((int)_keyData.btn.components.B  == 1)){\n'}
[4.493898] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L2_B;\n'}
[4.493941] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.493983] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(((int)_keyData.btn.components.L2 == 1) && \n'}
[4.494025] (unitree_guide2) StdoutLine: {'line': b'3: -            ((int)_keyData.btn.components.A  == 1)){\n'}
[4.494067] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L2_A;\n'}
[4.494108] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.494150] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(((int)_keyData.btn.components.L2 == 1) && \n'}
[4.494192] (unitree_guide2) StdoutLine: {'line': b'3: -            ((int)_keyData.btn.components.X  == 1)){\n'}
[4.494234] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L2_X;\n'}
[4.494276] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.494318] (unitree_guide2) StdoutLine: {'line': b'3: +  memcpy(&_keyData, &lowState->wirelessRemote[0], 40);\n'}
[4.494360] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.494460] (unitree_guide2) StdoutLine: {'line': b'3: +  if (((int)_keyData.btn.components.L2 == 1) &&\n'}
[4.494544] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.B == 1))\n'}
[4.494603] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.494645] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L2_B;\n'}
[4.494687] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (((int)_keyData.btn.components.L2 == 1) &&\n'}
[4.494730] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.A == 1))\n'}
[4.494772] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.494813] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L2_A;\n'}
[4.494854] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (((int)_keyData.btn.components.L2 == 1) &&\n'}
[4.494896] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.X == 1))\n'}
[4.494936] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.494976] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L2_X;\n'}
[4.495017] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.495057] (unitree_guide2) StdoutLine: {'line': b'3: @@ -35,4 +38,5 @@\n'}
[4.495098] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(((int)_keyData.btn.components.L2 == 1) && \n'}
[4.495139] (unitree_guide2) StdoutLine: {'line': b'3: -            ((int)_keyData.btn.components.Y  == 1)){\n'}
[4.495180] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L2_Y;\n'}
[4.495294] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.495340] (unitree_guide2) StdoutLine: {'line': b'3: +  else if (((int)_keyData.btn.components.L2 == 1) &&\n'}
[4.495382] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.Y == 1))\n'}
[4.495424] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.495466] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L2_Y;\n'}
[4.495508] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.495563] (unitree_guide2) StdoutLine: {'line': b'3: @@ -42,4 +46,5 @@\n'}
[4.495605] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(((int)_keyData.btn.components.L2 == 1) && \n'}
[4.495648] (unitree_guide2) StdoutLine: {'line': b'3: -            ((int)_keyData.btn.components.Y  == 1)){\n'}
[4.495697] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L2_Y;\n'}
[4.495740] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.495782] (unitree_guide2) StdoutLine: {'line': b'3: +  else if (((int)_keyData.btn.components.L2 == 1) &&\n'}
[4.495829] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.Y == 1))\n'}
[4.495871] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.495912] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L2_Y;\n'}
[4.495955] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.495997] (unitree_guide2) StdoutLine: {'line': b'3: @@ -48,15 +53,15 @@\n'}
[4.496039] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(((int)_keyData.btn.components.L1 == 1) && \n'}
[4.496082] (unitree_guide2) StdoutLine: {'line': b'3: -            ((int)_keyData.btn.components.X  == 1)){\n'}
[4.496125] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L1_X;\n'}
[4.496200] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.496243] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(((int)_keyData.btn.components.L1 == 1) && \n'}
[4.496286] (unitree_guide2) StdoutLine: {'line': b'3: -            ((int)_keyData.btn.components.A  == 1)){\n'}
[4.496328] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L1_A;\n'}
[4.496370] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.496412] (unitree_guide2) StdoutLine: {'line': b'3: -    else if(((int)_keyData.btn.components.L1 == 1) && \n'}
[4.496454] (unitree_guide2) StdoutLine: {'line': b'3: -            ((int)_keyData.btn.components.Y  == 1)){\n'}
[4.496496] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::L1_Y;\n'}
[4.496537] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.496579] (unitree_guide2) StdoutLine: {'line': b'3: -    else if((int)_keyData.btn.components.start == 1){\n'}
[4.496620] (unitree_guide2) StdoutLine: {'line': b'3: -        userCmd = UserCommand::START;\n'}
[4.496662] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.496704] (unitree_guide2) StdoutLine: {'line': b'3: +  else if (((int)_keyData.btn.components.L1 == 1) &&\n'}
[4.496745] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.X == 1))\n'}
[4.496787] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.496829] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L1_X;\n'}
[4.496871] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (((int)_keyData.btn.components.L1 == 1) &&\n'}
[4.496913] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.A == 1))\n'}
[4.496956] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.496998] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L1_A;\n'}
[4.497040] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if (((int)_keyData.btn.components.L1 == 1) &&\n'}
[4.497082] (unitree_guide2) StdoutLine: {'line': b'3: +    ((int)_keyData.btn.components.Y == 1))\n'}
[4.497123] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.497164] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::L1_Y;\n'}
[4.497206] (unitree_guide2) StdoutLine: {'line': b'3: +  } else if ((int)_keyData.btn.components.start == 1) {\n'}
[4.497248] (unitree_guide2) StdoutLine: {'line': b'3: +    userCmd = UserCommand::START;\n'}
[4.497290] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.497331] (unitree_guide2) StdoutLine: {'line': b'3: @@ -64,5 +69,5 @@\n'}
[4.497373] (unitree_guide2) StdoutLine: {'line': b'3: -    userValue.L2 = killZeroOffset(_keyData.L2, 0.08);\n'}
[4.497415] (unitree_guide2) StdoutLine: {'line': b'3: -    userValue.lx = killZeroOffset(_keyData.lx, 0.08);\n'}
[4.497457] (unitree_guide2) StdoutLine: {'line': b'3: -    userValue.ly = killZeroOffset(_keyData.ly, 0.08);\n'}
[4.497499] (unitree_guide2) StdoutLine: {'line': b'3: -    userValue.rx = killZeroOffset(_keyData.rx, 0.08);\n'}
[4.497541] (unitree_guide2) StdoutLine: {'line': b'3: -    userValue.ry = killZeroOffset(_keyData.ry, 0.08);\n'}
[4.497583] (unitree_guide2) StdoutLine: {'line': b'3: +  userValue.L2 = killZeroOffset(_keyData.L2, 0.08);\n'}
[4.497626] (unitree_guide2) StdoutLine: {'line': b'3: +  userValue.lx = killZeroOffset(_keyData.lx, 0.08);\n'}
[4.497673] (unitree_guide2) StdoutLine: {'line': b'3: +  userValue.ly = killZeroOffset(_keyData.ly, 0.08);\n'}
[4.497715] (unitree_guide2) StdoutLine: {'line': b'3: +  userValue.rx = killZeroOffset(_keyData.rx, 0.08);\n'}
[4.497757] (unitree_guide2) StdoutLine: {'line': b'3: +  userValue.ry = killZeroOffset(_keyData.ry, 0.08);\n'}
[4.497798] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.497840] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/main.cpp':\n"}
[4.497882] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.497923] (unitree_guide2) StdoutLine: {'line': b'3: --- src/main.cpp\n'}
[4.497965] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/main.cpp.uncrustify\n'}
[4.498007] (unitree_guide2) StdoutLine: {'line': b'3: @@ -33,2 +33,2 @@\n'}
[4.498056] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "stop the controller" << std::endl;\n'}
[4.498098] (unitree_guide2) StdoutLine: {'line': b'3: -    running = false;\n'}
[4.498159] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "stop the controller" << std::endl;\n'}
[4.498218] (unitree_guide2) StdoutLine: {'line': b'3: +  running = false;\n'}
[4.498260] (unitree_guide2) StdoutLine: {'line': b'3: @@ -39,7 +39,6 @@\n'}
[4.498302] (unitree_guide2) StdoutLine: {'line': b'3: -    pid_t pid = getpid();\n'}
[4.498344] (unitree_guide2) StdoutLine: {'line': b'3: -    sched_param param;\n'}
[4.498387] (unitree_guide2) StdoutLine: {'line': b'3: -    param.sched_priority = sched_get_priority_max(SCHED_FIFO);\n'}
[4.498430] (unitree_guide2) StdoutLine: {'line': b'3: -    if (sched_setscheduler(pid, SCHED_FIFO, &param) == -1)\n'}
[4.498473] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.498515] (unitree_guide2) StdoutLine: {'line': b'3: -        std::cout << "[ERROR] Function setProcessScheduler failed." << std::endl;\n'}
[4.498557] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.498599] (unitree_guide2) StdoutLine: {'line': b'3: +  pid_t pid = getpid();\n'}
[4.498641] (unitree_guide2) StdoutLine: {'line': b'3: +  sched_param param;\n'}
[4.498683] (unitree_guide2) StdoutLine: {'line': b'3: +  param.sched_priority = sched_get_priority_max(SCHED_FIFO);\n'}
[4.498726] (unitree_guide2) StdoutLine: {'line': b'3: +  if (sched_setscheduler(pid, SCHED_FIFO, &param) == -1) {\n'}
[4.498768] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "[ERROR] Function setProcessScheduler failed." << std::endl;\n'}
[4.498810] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.498851] (unitree_guide2) StdoutLine: {'line': b'3: @@ -48 +47 @@\n'}
[4.498893] (unitree_guide2) StdoutLine: {'line': b'3: -int main(int argc, char **argv)\n'}
[4.498936] (unitree_guide2) StdoutLine: {'line': b'3: +int main(int argc, char ** argv)\n'}
[4.498979] (unitree_guide2) StdoutLine: {'line': b'3: @@ -50,4 +49,4 @@\n'}
[4.499021] (unitree_guide2) StdoutLine: {'line': b'3: -    /* set real-time process */\n'}
[4.499063] (unitree_guide2) StdoutLine: {'line': b'3: -    setProcessScheduler();\n'}
[4.499105] (unitree_guide2) StdoutLine: {'line': b'3: -    /* set the print format */\n'}
[4.499147] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << std::fixed << std::setprecision(3);\n'}
[4.499189] (unitree_guide2) StdoutLine: {'line': b'3: +  /* set real-time process */\n'}
[4.499231] (unitree_guide2) StdoutLine: {'line': b'3: +  setProcessScheduler();\n'}
[4.499272] (unitree_guide2) StdoutLine: {'line': b'3: +  /* set the print format */\n'}
[4.499314] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << std::fixed << std::setprecision(3);\n'}
[4.499356] (unitree_guide2) StdoutLine: {'line': b'3: @@ -56 +55 @@\n'}
[4.499398] (unitree_guide2) StdoutLine: {'line': b'3: -    // ros::init(argc, argv, "unitree_gazebo_servo");\n'}
[4.499445] (unitree_guide2) StdoutLine: {'line': b'3: +  // ros::init(argc, argv, "unitree_gazebo_servo");\n'}
[4.499489] (unitree_guide2) StdoutLine: {'line': b'3: @@ -58,4 +57,4 @@\n'}
[4.499531] (unitree_guide2) StdoutLine: {'line': b'3: -    // ROS 2\n'}
[4.499573] (unitree_guide2) StdoutLine: {'line': b'3: -    rclcpp::init(argc, argv);\n'}
[4.499620] (unitree_guide2) StdoutLine: {'line': b'3: -    auto node = std::make_shared<rclcpp::Node>("unitree_gazebo_server");\n'}
[4.499663] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "initialized node" << std::endl;\n'}
[4.499705] (unitree_guide2) StdoutLine: {'line': b'3: +  // ROS 2\n'}
[4.499747] (unitree_guide2) StdoutLine: {'line': b'3: +  rclcpp::init(argc, argv);\n'}
[4.499790] (unitree_guide2) StdoutLine: {'line': b'3: +  auto node = std::make_shared<rclcpp::Node>("unitree_gazebo_server");\n'}
[4.499833] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "initialized node" << std::endl;\n'}
[4.499877] (unitree_guide2) StdoutLine: {'line': b'3: @@ -65,2 +64,2 @@\n'}
[4.499921] (unitree_guide2) StdoutLine: {'line': b'3: -    IOInterface *ioInter;\n'}
[4.499964] (unitree_guide2) StdoutLine: {'line': b'3: -    CtrlPlatform ctrlPlat;\n'}
[4.500005] (unitree_guide2) StdoutLine: {'line': b'3: +  IOInterface * ioInter;\n'}
[4.500047] (unitree_guide2) StdoutLine: {'line': b'3: +  CtrlPlatform ctrlPlat;\n'}
[4.500089] (unitree_guide2) StdoutLine: {'line': b'3: @@ -69,2 +68,2 @@\n'}
[4.500130] (unitree_guide2) StdoutLine: {'line': b'3: -    ioInter = new IOROS(node);\n'}
[4.500172] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlPlat = CtrlPlatform::GAZEBO;\n'}
[4.500214] (unitree_guide2) StdoutLine: {'line': b'3: +  ioInter = new IOROS(node);\n'}
[4.500256] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlPlat = CtrlPlatform::GAZEBO;\n'}
[4.500298] (unitree_guide2) StdoutLine: {'line': b'3: @@ -74,2 +73,2 @@\n'}
[4.500340] (unitree_guide2) StdoutLine: {'line': b'3: -    ioInter = new IOSDK();\n'}
[4.500383] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlPlat = CtrlPlatform::REALROBOT;\n'}
[4.500425] (unitree_guide2) StdoutLine: {'line': b'3: +  ioInter = new IOSDK();\n'}
[4.500467] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlPlat = CtrlPlatform::REALROBOT;\n'}
[4.500510] (unitree_guide2) StdoutLine: {'line': b'3: @@ -78,5 +77,5 @@\n'}
[4.500552] (unitree_guide2) StdoutLine: {'line': b'3: -    CtrlComponents *ctrlComp = new CtrlComponents(ioInter);\n'}
[4.500594] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlComp->ctrlPlatform = ctrlPlat;\n'}
[4.500636] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlComp->dt = 0.002; // run at 500hz\n'}
[4.500678] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlComp->running = &running;\n'}
[4.500720] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "initialized ctrl components" << std::endl;\n'}
[4.500763] (unitree_guide2) StdoutLine: {'line': b'3: +  CtrlComponents * ctrlComp = new CtrlComponents(ioInter);\n'}
[4.500805] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlComp->ctrlPlatform = ctrlPlat;\n'}
[4.500846] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlComp->dt = 0.002;   // run at 500hz\n'}
[4.500888] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlComp->running = &running;\n'}
[4.500931] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "initialized ctrl components" << std::endl;\n'}
[4.500974] (unitree_guide2) StdoutLine: {'line': b'3: @@ -85 +84 @@\n'}
[4.501016] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlComp->robotModel = new A1Robot();\n'}
[4.501058] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlComp->robotModel = new A1Robot();\n'}
[4.501100] (unitree_guide2) StdoutLine: {'line': b'3: @@ -88 +87 @@\n'}
[4.501143] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlComp->robotModel = new Go1Robot();\n'}
[4.501185] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlComp->robotModel = new Go1Robot();\n'}
[4.501227] (unitree_guide2) StdoutLine: {'line': b'3: @@ -91,6 +90,6 @@\n'}
[4.501270] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlComp->waveGen = new WaveGenerator(0.45, 0.5, Vec4(0, 0.5, 0.5, 0)); // Trot\n'}
[4.501313] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "initialized wave generator" << std::endl;\n'}
[4.501355] (unitree_guide2) StdoutLine: {'line': b'3: -    // ctrlComp->waveGen = new WaveGenerator(1.1, 0.75, Vec4(0, 0.25, 0.5, 0.75));  //Crawl, only for sim\n'}
[4.501403] (unitree_guide2) StdoutLine: {'line': b'3: -    // ctrlComp->waveGen = new WaveGenerator(0.4, 0.6, Vec4(0, 0.5, 0.5, 0));  //Walking Trot, only for sim\n'}
[4.501446] (unitree_guide2) StdoutLine: {'line': b'3: -    // ctrlComp->waveGen = new WaveGenerator(0.4, 0.35, Vec4(0, 0.5, 0.5, 0));  //Running Trot, only for sim\n'}
[4.501489] (unitree_guide2) StdoutLine: {'line': b'3: -    // ctrlComp->waveGen = new WaveGenerator(0.4, 0.7, Vec4(0, 0, 0, 0));  //Pronk, only for sim\n'}
[4.501579] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlComp->waveGen = new WaveGenerator(0.45, 0.5, Vec4(0, 0.5, 0.5, 0));   // Trot\n'}
[4.501623] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "initialized wave generator" << std::endl;\n'}
[4.501675] (unitree_guide2) StdoutLine: {'line': b'3: +  // ctrlComp->waveGen = new WaveGenerator(1.1, 0.75, Vec4(0, 0.25, 0.5, 0.75));  //Crawl, only for sim\n'}
[4.501734] (unitree_guide2) StdoutLine: {'line': b'3: +  // ctrlComp->waveGen = new WaveGenerator(0.4, 0.6, Vec4(0, 0.5, 0.5, 0));  //Walking Trot, only for sim\n'}
[4.501777] (unitree_guide2) StdoutLine: {'line': b'3: +  // ctrlComp->waveGen = new WaveGenerator(0.4, 0.35, Vec4(0, 0.5, 0.5, 0));  //Running Trot, only for sim\n'}
[4.501820] (unitree_guide2) StdoutLine: {'line': b'3: +  // ctrlComp->waveGen = new WaveGenerator(0.4, 0.7, Vec4(0, 0, 0, 0));  //Pronk, only for sim\n'}
[4.501863] (unitree_guide2) StdoutLine: {'line': b'3: @@ -98 +97 @@\n'}
[4.501919] (unitree_guide2) StdoutLine: {'line': b'3: -    ctrlComp->geneObj();\n'}
[4.501962] (unitree_guide2) StdoutLine: {'line': b'3: +  ctrlComp->geneObj();\n'}
[4.502027] (unitree_guide2) StdoutLine: {'line': b'3: @@ -100,2 +99,2 @@\n'}
[4.502093] (unitree_guide2) StdoutLine: {'line': b'3: -    ControlFrame ctrlFrame(ctrlComp);\n'}
[4.502138] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "initialized ctrl frame" << std::endl;\n'}
[4.502184] (unitree_guide2) StdoutLine: {'line': b'3: +  ControlFrame ctrlFrame(ctrlComp);\n'}
[4.502250] (unitree_guide2) StdoutLine: {'line': b'3: +  std::cout << "initialized ctrl frame" << std::endl;\n'}
[4.502309] (unitree_guide2) StdoutLine: {'line': b'3: @@ -103,2 +102,2 @@\n'}
[4.502351] (unitree_guide2) StdoutLine: {'line': b'3: -    signal(SIGINT, ShutDown);\n'}
[4.502392] (unitree_guide2) StdoutLine: {'line': b'3: -    // std::cout << "initialized main sig shutdown" << std::endl;\n'}
[4.502435] (unitree_guide2) StdoutLine: {'line': b'3: +  signal(SIGINT, ShutDown);\n'}
[4.502477] (unitree_guide2) StdoutLine: {'line': b'3: +  // std::cout << "initialized main sig shutdown" << std::endl;\n'}
[4.502520] (unitree_guide2) StdoutLine: {'line': b'3: @@ -106,5 +105,4 @@\n'}
[4.502562] (unitree_guide2) StdoutLine: {'line': b'3: -    while (running)\n'}
[4.502609] (unitree_guide2) StdoutLine: {'line': b'3: -    {   \n'}
[4.502652] (unitree_guide2) StdoutLine: {'line': b'3: -        // std::cout << "running main loop" << std::endl;\n'}
[4.502708] (unitree_guide2) StdoutLine: {'line': b'3: -        ctrlFrame.run();\n'}
[4.502749] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.502791] (unitree_guide2) StdoutLine: {'line': b'3: +  while (running) {\n'}
[4.502832] (unitree_guide2) StdoutLine: {'line': b'3: +    // std::cout << "running main loop" << std::endl;\n'}
[4.502873] (unitree_guide2) StdoutLine: {'line': b'3: +    ctrlFrame.run();\n'}
[4.502914] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.502955] (unitree_guide2) StdoutLine: {'line': b'3: @@ -112,2 +110,2 @@\n'}
[4.502996] (unitree_guide2) StdoutLine: {'line': b'3: -    delete ctrlComp;\n'}
[4.503037] (unitree_guide2) StdoutLine: {'line': b'3: -    return 0;\n'}
[4.503097] (unitree_guide2) StdoutLine: {'line': b'3: +  delete ctrlComp;\n'}
[4.503140] (unitree_guide2) StdoutLine: {'line': b'3: +  return 0;\n'}
[4.503182] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.503224] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/quadProgpp/Array.cc':\n"}
[4.503288] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.503329] (unitree_guide2) StdoutLine: {'line': b'3: --- src/quadProgpp/Array.cc\n'}
[4.503370] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/quadProgpp/Array.cc.uncrustify\n'}
[4.503412] (unitree_guide2) StdoutLine: {'line': b'3: @@ -2,2 +2,2 @@\n'}
[4.503453] (unitree_guide2) StdoutLine: {'line': b'3: -// This file is part of QuadProg++:  \n'}
[4.503494] (unitree_guide2) StdoutLine: {'line': b'3: -// Copyright (C) 2006--2009 Luca Di Gaspero. \n'}
[4.503535] (unitree_guide2) StdoutLine: {'line': b'3: +// This file is part of QuadProg++:\n'}
[4.503577] (unitree_guide2) StdoutLine: {'line': b'3: +// Copyright (C) 2006--2009 Luca Di Gaspero.\n'}
[4.503617] (unitree_guide2) StdoutLine: {'line': b'3: @@ -16,8 +16,6 @@\n'}
[4.503672] (unitree_guide2) StdoutLine: {'line': b'3: -std::set<unsigned int> seq(unsigned int s, unsigned int e)\n'}
[4.503715] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.503757] (unitree_guide2) StdoutLine: {'line': b'3: -\tstd::set<unsigned int> tmp;\n'}
[4.503799] (unitree_guide2) StdoutLine: {'line': b'3: -\tfor (unsigned int i = s; i <= e; i++)\n'}
[4.503840] (unitree_guide2) StdoutLine: {'line': b'3: -\t\ttmp.insert(i);\n'}
[4.503883] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.503925] (unitree_guide2) StdoutLine: {'line': b'3: -\treturn tmp;\n'}
[4.503967] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.504008] (unitree_guide2) StdoutLine: {'line': b'3: +  std::set < unsigned int > seq(unsigned int s, unsigned int e)\n'}
[4.504051] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.504093] (unitree_guide2) StdoutLine: {'line': b'3: +    std::set < unsigned int > tmp;\n'}
[4.504135] (unitree_guide2) StdoutLine: {'line': b'3: +    for (unsigned int i = s; i <= e; i++) {\n'}
[4.504178] (unitree_guide2) StdoutLine: {'line': b'3: +      tmp.insert(i);\n'}
[4.504221] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.504264] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,7 +23,10 @@\n'}
[4.504306] (unitree_guide2) StdoutLine: {'line': b'3: -std::set<unsigned int> singleton(unsigned int i)\n'}
[4.504348] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.504390] (unitree_guide2) StdoutLine: {'line': b'3: -\tstd::set<unsigned int> tmp;\n'}
[4.504432] (unitree_guide2) StdoutLine: {'line': b'3: -\ttmp.insert(i);\n'}
[4.504474] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.504517] (unitree_guide2) StdoutLine: {'line': b'3: -\treturn tmp;\n'}
[4.504558] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.504599] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.504640] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.504682] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.504723] (unitree_guide2) StdoutLine: {'line': b'3: +  std::set < unsigned int > singleton(unsigned int i)\n'}
[4.504765] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.504807] (unitree_guide2) StdoutLine: {'line': b'3: +    std::set < unsigned int > tmp;\n'}
[4.504850] (unitree_guide2) StdoutLine: {'line': b'3: +    tmp.insert(i);\n'}
[4.504892] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.504934] (unitree_guide2) StdoutLine: {'line': b'3: +    return tmp;\n'}
[4.504977] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.505019] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.505062] (unitree_guide2) StdoutLine: {'line': b"3: Code style divergence in file 'src/quadProgpp/QuadProg++.cc':\n"}
[4.505104] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.505146] (unitree_guide2) StdoutLine: {'line': b'3: --- src/quadProgpp/QuadProg++.cc\n'}
[4.505188] (unitree_guide2) StdoutLine: {'line': b'3: +++ src/quadProgpp/QuadProg++.cc.uncrustify\n'}
[4.505229] (unitree_guide2) StdoutLine: {'line': b'3: @@ -1 +1 @@\n'}
[4.505271] (unitree_guide2) StdoutLine: {'line': b'3: -/* \n'}
[4.505313] (unitree_guide2) StdoutLine: {'line': b'3: +/*\n'}
[4.505355] (unitree_guide2) StdoutLine: {'line': b'3: @@ -3 +3 @@\n'}
[4.505396] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.505438] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.505484] (unitree_guide2) StdoutLine: {'line': b'3: @@ -8 +8 @@\n'}
[4.505527] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.505568] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.505611] (unitree_guide2) StdoutLine: {'line': b'3: @@ -11 +11 @@\n'}
[4.505653] (unitree_guide2) StdoutLine: {'line': b'3: - \n'}
[4.505695] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.505737] (unitree_guide2) StdoutLine: {'line': b'3: @@ -25,6 +25,14 @@\n'}
[4.505779] (unitree_guide2) StdoutLine: {'line': b'3: -// Utility functions for updating some data needed by the solution method \n'}
[4.505821] (unitree_guide2) StdoutLine: {'line': b'3: -void compute_d(Vector<double>& d, const Matrix<double>& J, const Vector<double>& np);\n'}
[4.505864] (unitree_guide2) StdoutLine: {'line': b'3: -void update_z(Vector<double>& z, const Matrix<double>& J, const Vector<double>& d, int iq);\n'}
[4.505906] (unitree_guide2) StdoutLine: {'line': b'3: -void update_r(const Matrix<double>& R, Vector<double>& r, const Vector<double>& d, int iq);\n'}
[4.505948] (unitree_guide2) StdoutLine: {'line': b'3: -bool add_constraint(Matrix<double>& R, Matrix<double>& J, Vector<double>& d, unsigned int& iq, double& rnorm);\n'}
[4.505991] (unitree_guide2) StdoutLine: {'line': b'3: -void delete_constraint(Matrix<double>& R, Matrix<double>& J, Vector<int>& A, Vector<double>& u, unsigned int n, int p, unsigned int& iq, int l);\n'}
[4.506034] (unitree_guide2) StdoutLine: {'line': b'3: +// Utility functions for updating some data needed by the solution method\n'}
[4.506076] (unitree_guide2) StdoutLine: {'line': b'3: +  void compute_d(Vector < double > & d, const Matrix < double > & J, const Vector < double > & np);\n'}
[4.506118] (unitree_guide2) StdoutLine: {'line': b'3: +  void update_z(\n'}
[4.506160] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > & z, const Matrix < double > & J, const Vector < double > & d,\n'}
[4.506202] (unitree_guide2) StdoutLine: {'line': b'3: +    int iq);\n'}
[4.506244] (unitree_guide2) StdoutLine: {'line': b'3: +  void update_r(\n'}
[4.506286] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & R, Vector < double > & r, const Vector < double > & d,\n'}
[4.506328] (unitree_guide2) StdoutLine: {'line': b'3: +    int iq);\n'}
[4.506370] (unitree_guide2) StdoutLine: {'line': b'3: +  bool add_constraint(\n'}
[4.506412] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > & R, Matrix < double > & J, Vector < double > & d,\n'}
[4.506454] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int & iq, double & rnorm);\n'}
[4.506495] (unitree_guide2) StdoutLine: {'line': b'3: +  void delete_constraint(\n'}
[4.506537] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > & R, Matrix < double > & J, Vector < int > & A,\n'}
[4.506579] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > & u, unsigned int n, int p, unsigned int & iq, int l);\n'}
[4.506622] (unitree_guide2) StdoutLine: {'line': b'3: @@ -34,6 +42,12 @@\n'}
[4.506663] (unitree_guide2) StdoutLine: {'line': b'3: -void cholesky_decomposition(Matrix<double>& A);\n'}
[4.506706] (unitree_guide2) StdoutLine: {'line': b'3: -void cholesky_solve(const Matrix<double>& L, Vector<double>& x, const Vector<double>& b);\n'}
[4.506753] (unitree_guide2) StdoutLine: {'line': b'3: -void forward_elimination(const Matrix<double>& L, Vector<double>& y, const Vector<double>& b);\n'}
[4.506797] (unitree_guide2) StdoutLine: {'line': b'3: -void backward_elimination(const Matrix<double>& U, Vector<double>& x, const Vector<double>& y);\n'}
[4.506839] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.506881] (unitree_guide2) StdoutLine: {'line': b'3: -// Utility functions for computing the scalar product and the euclidean \n'}
[4.506933] (unitree_guide2) StdoutLine: {'line': b'3: +  void cholesky_decomposition(Matrix < double > & A);\n'}
[4.506976] (unitree_guide2) StdoutLine: {'line': b'3: +  void cholesky_solve(\n'}
[4.507052] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & L, Vector < double > & x,\n'}
[4.507099] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & b);\n'}
[4.507142] (unitree_guide2) StdoutLine: {'line': b'3: +  void forward_elimination(\n'}
[4.507185] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & L, Vector < double > & y,\n'}
[4.507228] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & b);\n'}
[4.507271] (unitree_guide2) StdoutLine: {'line': b'3: +  void backward_elimination(\n'}
[4.507312] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & U, Vector < double > & x,\n'}
[4.507354] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & y);\n'}
[4.507396] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.507447] (unitree_guide2) StdoutLine: {'line': b'3: +// Utility functions for computing the scalar product and the euclidean\n'}
[4.507554] (unitree_guide2) StdoutLine: {'line': b'3: @@ -41,2 +55,2 @@\n'}
[4.507602] (unitree_guide2) StdoutLine: {'line': b'3: -double scalar_product(const Vector<double>& x, const Vector<double>& y);\n'}
[4.507646] (unitree_guide2) StdoutLine: {'line': b'3: -double distance(double a, double b);\n'}
[4.507687] (unitree_guide2) StdoutLine: {'line': b'3: +  double scalar_product(const Vector < double > & x, const Vector < double > & y);\n'}
[4.507730] (unitree_guide2) StdoutLine: {'line': b'3: +  double distance(double a, double b);\n'}
[4.507773] (unitree_guide2) StdoutLine: {'line': b'3: @@ -45,4 +59,4 @@\n'}
[4.507814] (unitree_guide2) StdoutLine: {'line': b'3: -void print_matrix(const char* name, const Matrix<double>& A, int n = -1, int m = -1);\n'}
[4.507857] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.507899] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[4.507941] (unitree_guide2) StdoutLine: {'line': b'3: -void print_vector(const char* name, const Vector<T>& v, int n = -1);\n'}
[4.507984] (unitree_guide2) StdoutLine: {'line': b'3: +  void print_matrix(const char * name, const Matrix < double > & A, int n = -1, int m = -1);\n'}
[4.508084] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.508137] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.508180] (unitree_guide2) StdoutLine: {'line': b'3: +  void print_vector(const char * name, const Vector < T > & v, int n = -1);\n'}
[4.508223] (unitree_guide2) StdoutLine: {'line': b'3: @@ -51,44 +65,45 @@\n'}
[4.508265] (unitree_guide2) StdoutLine: {'line': b'3: -double solve_quadprog(Matrix<double>& G, Vector<double>& g0, \n'}
[4.508307] (unitree_guide2) StdoutLine: {'line': b'3: -                      const Matrix<double>& CE, const Vector<double>& ce0,  \n'}
[4.508350] (unitree_guide2) StdoutLine: {'line': b'3: -                      const Matrix<double>& CI, const Vector<double>& ci0, \n'}
[4.508392] (unitree_guide2) StdoutLine: {'line': b'3: -                      Vector<double>& x)\n'}
[4.508434] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.508476] (unitree_guide2) StdoutLine: {'line': b'3: -  std::ostringstream msg;\n'}
[4.508518] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = G.ncols(), p = CE.ncols(), m = CI.ncols();\n'}
[4.508561] (unitree_guide2) StdoutLine: {'line': b'3: -  if (G.nrows() != n)\n'}
[4.508603] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.508646] (unitree_guide2) StdoutLine: {'line': b'3: -    msg << "The matrix G is not a squared matrix (" << G.nrows() << " x " << G.ncols() << ")";\n'}
[4.508691] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error(msg.str());\n'}
[4.508734] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.508778] (unitree_guide2) StdoutLine: {'line': b'3: -  if (CE.nrows() != n)\n'}
[4.508820] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.508876] (unitree_guide2) StdoutLine: {'line': b'3: -    msg << "The matrix CE is incompatible (incorrect number of rows " << CE.nrows() << " , expecting " << n << ")";\n'}
[4.508917] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error(msg.str());\n'}
[4.508984] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.509040] (unitree_guide2) StdoutLine: {'line': b'3: -  if (ce0.size() != p)\n'}
[4.509081] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.509122] (unitree_guide2) StdoutLine: {'line': b'3: -    msg << "The vector ce0 is incompatible (incorrect dimension " << ce0.size() << ", expecting " << p << ")";\n'}
[4.509163] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error(msg.str());\n'}
[4.509204] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.509245] (unitree_guide2) StdoutLine: {'line': b'3: -  if (CI.nrows() != n)\n'}
[4.509286] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.509327] (unitree_guide2) StdoutLine: {'line': b'3: -    msg << "The matrix CI is incompatible (incorrect number of rows " << CI.nrows() << " , expecting " << n << ")";\n'}
[4.509369] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error(msg.str());\n'}
[4.509410] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.509451] (unitree_guide2) StdoutLine: {'line': b'3: -  if (ci0.size() != m)\n'}
[4.509493] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.509535] (unitree_guide2) StdoutLine: {'line': b'3: -    msg << "The vector ci0 is incompatible (incorrect dimension " << ci0.size() << ", expecting " << m << ")";\n'}
[4.509576] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::logic_error(msg.str());\n'}
[4.509631] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.509672] (unitree_guide2) StdoutLine: {'line': b'3: -  x.resize(n);\n'}
[4.509714] (unitree_guide2) StdoutLine: {'line': b'3: -  register unsigned int i, j, k, l; /* indices */\n'}
[4.509755] (unitree_guide2) StdoutLine: {'line': b'3: -  int ip; // this is the index of the constraint to be added to the active set\n'}
[4.509797] (unitree_guide2) StdoutLine: {'line': b'3: -  Matrix<double> R(n, n), J(n, n);\n'}
[4.509839] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<double> s(m + p), z(n), r(m + p), d(n), np(n), u(m + p), x_old(n), u_old(m + p);\n'}
[4.509882] (unitree_guide2) StdoutLine: {'line': b'3: -  double f_value, psi, c1, c2, sum, ss, R_norm;\n'}
[4.509923] (unitree_guide2) StdoutLine: {'line': b'3: -  double inf;\n'}
[4.509965] (unitree_guide2) StdoutLine: {'line': b'3: -  if (std::numeric_limits<double>::has_infinity)\n'}
[4.510007] (unitree_guide2) StdoutLine: {'line': b'3: -    inf = std::numeric_limits<double>::infinity();\n'}
[4.510049] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.510097] (unitree_guide2) StdoutLine: {'line': b'3: -    inf = 1.0E300;\n'}
[4.510141] (unitree_guide2) StdoutLine: {'line': b'3: -  double t, t1, t2; /* t is the step lenght, which is the minimum of the partial step length t1 \n'}
[4.510184] (unitree_guide2) StdoutLine: {'line': b'3: +  double solve_quadprog(\n'}
[4.510227] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > & G, Vector < double > & g0,\n'}
[4.510269] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & CE, const Vector < double > & ce0,\n'}
[4.510312] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & CI, const Vector < double > & ci0,\n'}
[4.510354] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > & x)\n'}
[4.510422] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.510506] (unitree_guide2) StdoutLine: {'line': b'3: +    std::ostringstream msg;\n'}
[4.510550] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = G.ncols(), p = CE.ncols(), m = CI.ncols();\n'}
[4.510593] (unitree_guide2) StdoutLine: {'line': b'3: +    if (G.nrows() != n) {\n'}
[4.510636] (unitree_guide2) StdoutLine: {'line': b'3: +      msg << "The matrix G is not a squared matrix (" << G.nrows() << " x " << G.ncols() << ")";\n'}
[4.510679] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(msg.str());\n'}
[4.510721] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.510762] (unitree_guide2) StdoutLine: {'line': b'3: +    if (CE.nrows() != n) {\n'}
[4.510805] (unitree_guide2) StdoutLine: {'line': b'3: +      msg << "The matrix CE is incompatible (incorrect number of rows " << CE.nrows() <<\n'}
[4.510854] (unitree_guide2) StdoutLine: {'line': b'3: +        " , expecting " << n << ")";\n'}
[4.510897] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(msg.str());\n'}
[4.510940] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.510982] (unitree_guide2) StdoutLine: {'line': b'3: +    if (ce0.size() != p) {\n'}
[4.511024] (unitree_guide2) StdoutLine: {'line': b'3: +      msg << "The vector ce0 is incompatible (incorrect dimension " << ce0.size() <<\n'}
[4.511075] (unitree_guide2) StdoutLine: {'line': b'3: +        ", expecting " << p << ")";\n'}
[4.511118] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(msg.str());\n'}
[4.511161] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.511203] (unitree_guide2) StdoutLine: {'line': b'3: +    if (CI.nrows() != n) {\n'}
[4.511245] (unitree_guide2) StdoutLine: {'line': b'3: +      msg << "The matrix CI is incompatible (incorrect number of rows " << CI.nrows() <<\n'}
[4.511288] (unitree_guide2) StdoutLine: {'line': b'3: +        " , expecting " << n << ")";\n'}
[4.511330] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(msg.str());\n'}
[4.511373] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.511414] (unitree_guide2) StdoutLine: {'line': b'3: +    if (ci0.size() != m) {\n'}
[4.511457] (unitree_guide2) StdoutLine: {'line': b'3: +      msg << "The vector ci0 is incompatible (incorrect dimension " << ci0.size() <<\n'}
[4.511499] (unitree_guide2) StdoutLine: {'line': b'3: +        ", expecting " << m << ")";\n'}
[4.511541] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::logic_error(msg.str());\n'}
[4.511583] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.511625] (unitree_guide2) StdoutLine: {'line': b'3: +    x.resize(n);\n'}
[4.511667] (unitree_guide2) StdoutLine: {'line': b'3: +    register unsigned int i, j, k, l; /* indices */\n'}
[4.511710] (unitree_guide2) StdoutLine: {'line': b'3: +    int ip; // this is the index of the constraint to be added to the active set\n'}
[4.511753] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > R(n, n), J(n, n);\n'}
[4.511796] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > s(m + p), z(n), r(m + p), d(n), np(n), u(m + p), x_old(n), u_old(m + p);\n'}
[4.511839] (unitree_guide2) StdoutLine: {'line': b'3: +    double f_value, psi, c1, c2, sum, ss, R_norm;\n'}
[4.511880] (unitree_guide2) StdoutLine: {'line': b'3: +    double inf;\n'}
[4.511956] (unitree_guide2) StdoutLine: {'line': b'3: +    if (std::numeric_limits < double > ::has_infinity) {\n'}
[4.511998] (unitree_guide2) StdoutLine: {'line': b'3: +      inf = std::numeric_limits < double > ::infinity();\n'}
[4.512040] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.512081] (unitree_guide2) StdoutLine: {'line': b'3: +      inf = 1.0E300;\n'}
[4.512122] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.512163] (unitree_guide2) StdoutLine: {'line': b'3: +    double t, t1, t2; /* t is the step lenght, which is the minimum of the partial step length t1\n'}
[4.512205] (unitree_guide2) StdoutLine: {'line': b'3: @@ -96,111 +111,153 @@\n'}
[4.512247] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<int> A(m + p), A_old(m + p), iai(m + p);\n'}
[4.512289] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int iq, iter = 0;\n'}
[4.512331] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<bool> iaexcl(m + p);\n'}
[4.512374] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.512417] (unitree_guide2) StdoutLine: {'line': b'3: -  /* p is the number of equality constraints */\n'}
[4.512459] (unitree_guide2) StdoutLine: {'line': b'3: -  /* m is the number of inequality constraints */\n'}
[4.512501] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.512544] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << std::endl << "Starting solve_quadprog" << std::endl;\n'}
[4.512587] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("G", G);\n'}
[4.512633] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("g0", g0);\n'}
[4.512675] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("CE", CE);\n'}
[4.512717] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("ce0", ce0);\n'}
[4.512759] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("CI", CI);\n'}
[4.512801] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("ci0", ci0);\n'}
[4.512843] (unitree_guide2) StdoutLine: {'line': b'3: -#endif  \n'}
[4.512904] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.512961] (unitree_guide2) StdoutLine: {'line': b'3: -  /*\n'}
[4.513002] (unitree_guide2) StdoutLine: {'line': b'3: -   * Preprocessing phase\n'}
[4.513044] (unitree_guide2) StdoutLine: {'line': b'3: -   */\n'}
[4.513086] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.513129] (unitree_guide2) StdoutLine: {'line': b'3: -  /* compute the trace of the original matrix G */\n'}
[4.513171] (unitree_guide2) StdoutLine: {'line': b'3: -  c1 = 0.0;\n'}
[4.513213] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.513256] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.513298] (unitree_guide2) StdoutLine: {'line': b'3: -    c1 += G[i][i];\n'}
[4.513340] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.513382] (unitree_guide2) StdoutLine: {'line': b'3: -  /* decompose the matrix G in the form L^T L */\n'}
[4.513424] (unitree_guide2) StdoutLine: {'line': b'3: -  cholesky_decomposition(G);\n'}
[4.513466] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.513508] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("G", G);\n'}
[4.513549] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.513591] (unitree_guide2) StdoutLine: {'line': b'3: -  /* initialize the matrix R */\n'}
[4.513633] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.513675] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.513717] (unitree_guide2) StdoutLine: {'line': b'3: -    d[i] = 0.0;\n'}
[4.513759] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = 0; j < n; j++)\n'}
[4.513801] (unitree_guide2) StdoutLine: {'line': b'3: -      R[i][j] = 0.0;\n'}
[4.513843] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.513919] (unitree_guide2) StdoutLine: {'line': b'3: -  R_norm = 1.0; /* this variable will hold the norm of the matrix R */\n'}
[4.513965] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.514008] (unitree_guide2) StdoutLine: {'line': b'3: -  /* compute the inverse of the factorized matrix G^-1, this is the initial value for H */\n'}
[4.514051] (unitree_guide2) StdoutLine: {'line': b'3: -  c2 = 0.0;\n'}
[4.514092] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++) \n'}
[4.514133] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.514175] (unitree_guide2) StdoutLine: {'line': b'3: -    d[i] = 1.0;\n'}
[4.514216] (unitree_guide2) StdoutLine: {'line': b'3: -    forward_elimination(G, z, d);\n'}
[4.514258] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = 0; j < n; j++)\n'}
[4.514300] (unitree_guide2) StdoutLine: {'line': b'3: -      J[i][j] = z[j];\n'}
[4.514342] (unitree_guide2) StdoutLine: {'line': b'3: -    c2 += z[i];\n'}
[4.514384] (unitree_guide2) StdoutLine: {'line': b'3: -    d[i] = 0.0;\n'}
[4.514425] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.514470] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.514578] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("J", J);\n'}
[4.514707] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.514753] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.514810] (unitree_guide2) StdoutLine: {'line': b'3: -  /* c1 * c2 is an estimate for cond(G) */\n'}
[4.514873] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.514956] (unitree_guide2) StdoutLine: {'line': b'3: -  /* \n'}
[4.515001] (unitree_guide2) StdoutLine: {'line': b'3: -    * Find the unconstrained minimizer of the quadratic form 0.5 * x G x + g0 x \n'}
[4.515056] (unitree_guide2) StdoutLine: {'line': b'3: -   * this is a feasible point in the dual space\n'}
[4.515100] (unitree_guide2) StdoutLine: {'line': b'3: -   * x = G^-1 * g0\n'}
[4.515156] (unitree_guide2) StdoutLine: {'line': b'3: -   */\n'}
[4.515198] (unitree_guide2) StdoutLine: {'line': b'3: -  cholesky_solve(G, x, g0);\n'}
[4.515240] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.515281] (unitree_guide2) StdoutLine: {'line': b'3: -    x[i] = -x[i];\n'}
[4.515322] (unitree_guide2) StdoutLine: {'line': b'3: -  /* and compute the current solution value */ \n'}
[4.515363] (unitree_guide2) StdoutLine: {'line': b'3: -  f_value = 0.5 * scalar_product(g0, x);\n'}
[4.515405] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.515446] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << "Unconstrained solution: " << f_value << std::endl;\n'}
[4.515488] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("x", x);\n'}
[4.515529] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.515569] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.515611] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Add equality constraints to the working set A */\n'}
[4.515651] (unitree_guide2) StdoutLine: {'line': b'3: -  iq = 0;\n'}
[4.515692] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < p; i++)\n'}
[4.515734] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.515906] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = 0; j < n; j++)\n'}
[4.515988] (unitree_guide2) StdoutLine: {'line': b'3: -      np[j] = CE[j][i];\n'}
[4.516034] (unitree_guide2) StdoutLine: {'line': b'3: -    compute_d(d, J, np);\n'}
[4.516076] (unitree_guide2) StdoutLine: {'line': b'3: -    update_z(z, J, d, iq);\n'}
[4.516118] (unitree_guide2) StdoutLine: {'line': b'3: -    update_r(R, r, d, iq);\n'}
[4.516159] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.516200] (unitree_guide2) StdoutLine: {'line': b'3: -    print_matrix("R", R, n, iq);\n'}
[4.516241] (unitree_guide2) StdoutLine: {'line': b'3: -    print_vector("z", z);\n'}
[4.516282] (unitree_guide2) StdoutLine: {'line': b'3: -    print_vector("r", r, iq);\n'}
[4.516322] (unitree_guide2) StdoutLine: {'line': b'3: -    print_vector("d", d);\n'}
[4.516362] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.516402] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.516443] (unitree_guide2) StdoutLine: {'line': b'3: -    /* compute full step length t2: i.e., the minimum step in primal space s.t. the contraint \n'}
[4.516485] (unitree_guide2) StdoutLine: {'line': b'3: -      becomes feasible */\n'}
[4.516526] (unitree_guide2) StdoutLine: {'line': b'3: -    t2 = 0.0;\n'}
[4.516566] (unitree_guide2) StdoutLine: {'line': b'3: -    if (fabs(scalar_product(z, z)) > std::numeric_limits<double>::epsilon()) // i.e. z != 0\n'}
[4.516608] (unitree_guide2) StdoutLine: {'line': b'3: -      t2 = (-scalar_product(np, x) - ce0[i]) / scalar_product(z, np);\n'}
[4.516648] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.516689] (unitree_guide2) StdoutLine: {'line': b'3: -    /* set x = x + t2 * z */\n'}
[4.516760] (unitree_guide2) StdoutLine: {'line': b'3: -    for (k = 0; k < n; k++)\n'}
[4.516817] (unitree_guide2) StdoutLine: {'line': b'3: -      x[k] += t2 * z[k];\n'}
[4.516895] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.516946] (unitree_guide2) StdoutLine: {'line': b'3: -    /* set u = u+ */\n'}
[4.516989] (unitree_guide2) StdoutLine: {'line': b'3: -    u[iq] = t2;\n'}
[4.517030] (unitree_guide2) StdoutLine: {'line': b'3: -    for (k = 0; k < iq; k++)\n'}
[4.517071] (unitree_guide2) StdoutLine: {'line': b'3: -      u[k] -= t2 * r[k];\n'}
[4.517113] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.517153] (unitree_guide2) StdoutLine: {'line': b'3: -    /* compute the new solution value */\n'}
[4.517194] (unitree_guide2) StdoutLine: {'line': b'3: -    f_value += 0.5 * (t2 * t2) * scalar_product(z, np);\n'}
[4.517235] (unitree_guide2) StdoutLine: {'line': b'3: -    A[i] = -i - 1;\n'}
[4.517282] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.517322] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!add_constraint(R, J, d, iq, R_norm))\n'}
[4.517364] (unitree_guide2) StdoutLine: {'line': b'3: -    {\t  \n'}
[4.517404] (unitree_guide2) StdoutLine: {'line': b'3: -      // Equality constraints are linearly dependent\n'}
[4.517446] (unitree_guide2) StdoutLine: {'line': b'3: -      throw std::runtime_error("Constraints are linearly dependent");\n'}
[4.517488] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < int > A(m + p), A_old(m + p), iai(m + p);\n'}
[4.517530] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int iq, iter = 0;\n'}
[4.517571] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < bool > iaexcl(m + p);\n'}
[4.517612] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.517653] (unitree_guide2) StdoutLine: {'line': b'3: +    /* p is the number of equality constraints */\n'}
[4.517695] (unitree_guide2) StdoutLine: {'line': b'3: +    /* m is the number of inequality constraints */\n'}
[4.517757] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.517812] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << std::endl << "Starting solve_quadprog" << std::endl;\n'}
[4.517879] (unitree_guide2) StdoutLine: {'line': b'3: +    print_matrix("G", G);\n'}
[4.517937] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("g0", g0);\n'}
[4.517979] (unitree_guide2) StdoutLine: {'line': b'3: +    print_matrix("CE", CE);\n'}
[4.518020] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("ce0", ce0);\n'}
[4.518060] (unitree_guide2) StdoutLine: {'line': b'3: +    print_matrix("CI", CI);\n'}
[4.518100] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("ci0", ci0);\n'}
[4.518141] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.518181] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.518241] (unitree_guide2) StdoutLine: {'line': b'3: +    /*\n'}
[4.518285] (unitree_guide2) StdoutLine: {'line': b'3: +     * Preprocessing phase\n'}
[4.518328] (unitree_guide2) StdoutLine: {'line': b'3: +     */\n'}
[4.518372] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.518416] (unitree_guide2) StdoutLine: {'line': b'3: +    /* compute the trace of the original matrix G */\n'}
[4.518460] (unitree_guide2) StdoutLine: {'line': b'3: +    c1 = 0.0;\n'}
[4.518504] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.518548] (unitree_guide2) StdoutLine: {'line': b'3: +      c1 += G[i][i];\n'}
[4.518592] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.518635] (unitree_guide2) StdoutLine: {'line': b'3: +    /* decompose the matrix G in the form L^T L */\n'}
[4.518678] (unitree_guide2) StdoutLine: {'line': b'3: +    cholesky_decomposition(G);\n'}
[4.518743] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.518791] (unitree_guide2) StdoutLine: {'line': b'3: +    print_matrix("G", G);\n'}
[4.518844] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.518935] (unitree_guide2) StdoutLine: {'line': b'3: +    /* initialize the matrix R */\n'}
[4.518989] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.519033] (unitree_guide2) StdoutLine: {'line': b'3: +      d[i] = 0.0;\n'}
[4.519077] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < n; j++) {\n'}
[4.519150] (unitree_guide2) StdoutLine: {'line': b'3: +        R[i][j] = 0.0;\n'}
[4.519193] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.519236] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.519279] (unitree_guide2) StdoutLine: {'line': b'3: +    R_norm = 1.0; /* this variable will hold the norm of the matrix R */\n'}
[4.519324] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.519368] (unitree_guide2) StdoutLine: {'line': b'3: +    /* compute the inverse of the factorized matrix G^-1, this is the initial value for H */\n'}
[4.519413] (unitree_guide2) StdoutLine: {'line': b'3: +    c2 = 0.0;\n'}
[4.519457] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.519516] (unitree_guide2) StdoutLine: {'line': b'3: +      d[i] = 1.0;\n'}
[4.519559] (unitree_guide2) StdoutLine: {'line': b'3: +      forward_elimination(G, z, d);\n'}
[4.519603] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < n; j++) {\n'}
[4.519646] (unitree_guide2) StdoutLine: {'line': b'3: +        J[i][j] = z[j];\n'}
[4.519689] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.519731] (unitree_guide2) StdoutLine: {'line': b'3: +      c2 += z[i];\n'}
[4.519775] (unitree_guide2) StdoutLine: {'line': b'3: +      d[i] = 0.0;\n'}
[4.519818] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.519861] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.519905] (unitree_guide2) StdoutLine: {'line': b'3: +    print_matrix("J", J);\n'}
[4.519949] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.519992] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.520037] (unitree_guide2) StdoutLine: {'line': b'3: +    /* c1 * c2 is an estimate for cond(G) */\n'}
[4.520081] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.520124] (unitree_guide2) StdoutLine: {'line': b'3: +    /*\n'}
[4.520169] (unitree_guide2) StdoutLine: {'line': b'3: +      * Find the unconstrained minimizer of the quadratic form 0.5 * x G x + g0 x\n'}
[4.520213] (unitree_guide2) StdoutLine: {'line': b'3: +     * this is a feasible point in the dual space\n'}
[4.520257] (unitree_guide2) StdoutLine: {'line': b'3: +     * x = G^-1 * g0\n'}
[4.520300] (unitree_guide2) StdoutLine: {'line': b'3: +     */\n'}
[4.520343] (unitree_guide2) StdoutLine: {'line': b'3: +    cholesky_solve(G, x, g0);\n'}
[4.520387] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.520430] (unitree_guide2) StdoutLine: {'line': b'3: +      x[i] = -x[i];\n'}
[4.520473] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.520517] (unitree_guide2) StdoutLine: {'line': b'3: +    /* and compute the current solution value */\n'}
[4.520561] (unitree_guide2) StdoutLine: {'line': b'3: +    f_value = 0.5 * scalar_product(g0, x);\n'}
[4.520604] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.520648] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Unconstrained solution: " << f_value << std::endl;\n'}
[4.520693] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("x", x);\n'}
[4.520737] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.520780] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.520824] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Add equality constraints to the working set A */\n'}
[4.520868] (unitree_guide2) StdoutLine: {'line': b'3: +    iq = 0;\n'}
[4.520912] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < p; i++) {\n'}
[4.520956] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < n; j++) {\n'}
[4.520999] (unitree_guide2) StdoutLine: {'line': b'3: +        np[j] = CE[j][i];\n'}
[4.521042] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.521085] (unitree_guide2) StdoutLine: {'line': b'3: +      compute_d(d, J, np);\n'}
[4.521128] (unitree_guide2) StdoutLine: {'line': b'3: +      update_z(z, J, d, iq);\n'}
[4.521172] (unitree_guide2) StdoutLine: {'line': b'3: +      update_r(R, r, d, iq);\n'}
[4.521215] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.521258] (unitree_guide2) StdoutLine: {'line': b'3: +      print_matrix("R", R, n, iq);\n'}
[4.521301] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("z", z);\n'}
[4.521344] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("r", r, iq);\n'}
[4.521388] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("d", d);\n'}
[4.521432] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.521477] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.521520] (unitree_guide2) StdoutLine: {'line': b'3: +      /* compute full step length t2: i.e., the minimum step in primal space s.t. the contraint\n'}
[4.521566] (unitree_guide2) StdoutLine: {'line': b'3: +        becomes feasible */\n'}
[4.521618] (unitree_guide2) StdoutLine: {'line': b'3: +      t2 = 0.0;\n'}
[4.521661] (unitree_guide2) StdoutLine: {'line': b'3: +      if (fabs(scalar_product(z, z)) > std::numeric_limits < double > ::epsilon()) { // i.e. z != 0\n'}
[4.521707] (unitree_guide2) StdoutLine: {'line': b'3: +        t2 = (-scalar_product(np, x) - ce0[i]) / scalar_product(z, np);\n'}
[4.521751] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.521794] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.521837] (unitree_guide2) StdoutLine: {'line': b'3: +      /* set x = x + t2 * z */\n'}
[4.521881] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = 0; k < n; k++) {\n'}
[4.521924] (unitree_guide2) StdoutLine: {'line': b'3: +        x[k] += t2 * z[k];\n'}
[4.521967] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.522021] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.522062] (unitree_guide2) StdoutLine: {'line': b'3: +      /* set u = u+ */\n'}
[4.522103] (unitree_guide2) StdoutLine: {'line': b'3: +      u[iq] = t2;\n'}
[4.522144] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = 0; k < iq; k++) {\n'}
[4.522186] (unitree_guide2) StdoutLine: {'line': b'3: +        u[k] -= t2 * r[k];\n'}
[4.522227] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.522269] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.522310] (unitree_guide2) StdoutLine: {'line': b'3: +      /* compute the new solution value */\n'}
[4.522352] (unitree_guide2) StdoutLine: {'line': b'3: +      f_value += 0.5 * (t2 * t2) * scalar_product(z, np);\n'}
[4.522394] (unitree_guide2) StdoutLine: {'line': b'3: +      A[i] = -i - 1;\n'}
[4.522435] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.522476] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!add_constraint(R, J, d, iq, R_norm)) {\n'}
[4.522517] (unitree_guide2) StdoutLine: {'line': b'3: +        // Equality constraints are linearly dependent\n'}
[4.522558] (unitree_guide2) StdoutLine: {'line': b'3: +        throw std::runtime_error("Constraints are linearly dependent");\n'}
[4.522629] (unitree_guide2) StdoutLine: {'line': b'3: +        return f_value;\n'}
[4.522685] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.522727] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.522769] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.522811] (unitree_guide2) StdoutLine: {'line': b'3: +    /* set iai = K \\ A */\n'}
[4.522852] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < m; i++) {\n'}
[4.522894] (unitree_guide2) StdoutLine: {'line': b'3: +      iai[i] = i;\n'}
[4.522935] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.522977] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.523018] (unitree_guide2) StdoutLine: {'line': b'3: +l1: iter++;\n'}
[4.523059] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.523100] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("x", x);\n'}
[4.523142] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.523182] (unitree_guide2) StdoutLine: {'line': b'3: +    /* step 1: choose a violated constraint */\n'}
[4.523224] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = p; i < iq; i++) {\n'}
[4.523266] (unitree_guide2) StdoutLine: {'line': b'3: +      ip = A[i];\n'}
[4.523307] (unitree_guide2) StdoutLine: {'line': b'3: +      iai[ip] = -1;\n'}
[4.523349] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.523390] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.523432] (unitree_guide2) StdoutLine: {'line': b'3: +    /* compute s[x] = ci^T * x + ci0 for all elements of K \\ A */\n'}
[4.523474] (unitree_guide2) StdoutLine: {'line': b'3: +    ss = 0.0;\n'}
[4.523517] (unitree_guide2) StdoutLine: {'line': b'3: +    psi = 0.0; /* this value will contain the sum of all infeasibilities */\n'}
[4.523584] (unitree_guide2) StdoutLine: {'line': b'3: +    ip = 0; /* ip will be the index of the chosen violated constraint */\n'}
[4.523629] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < m; i++) {\n'}
[4.523674] (unitree_guide2) StdoutLine: {'line': b'3: +      iaexcl[i] = true;\n'}
[4.523725] (unitree_guide2) StdoutLine: {'line': b'3: +      sum = 0.0;\n'}
[4.523771] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < n; j++) {\n'}
[4.523816] (unitree_guide2) StdoutLine: {'line': b'3: +        sum += CI[j][i] * x[j];\n'}
[4.523861] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.523905] (unitree_guide2) StdoutLine: {'line': b'3: +      sum += ci0[i];\n'}
[4.523948] (unitree_guide2) StdoutLine: {'line': b'3: +      s[i] = sum;\n'}
[4.524005] (unitree_guide2) StdoutLine: {'line': b'3: +      psi += std::min(0.0, sum);\n'}
[4.524047] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.524088] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.524129] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("s", s, m);\n'}
[4.524171] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.524212] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.524253] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.524294] (unitree_guide2) StdoutLine: {'line': b'3: +    if (fabs(psi) <= m * std::numeric_limits < double > ::epsilon() * c1 * c2 * 100.0) {\n'}
[4.524337] (unitree_guide2) StdoutLine: {'line': b'3: +      /* numerically there are not infeasibilities anymore */\n'}
[4.524379] (unitree_guide2) StdoutLine: {'line': b'3: @@ -209,52 +266,11 @@\n'}
[4.524421] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.524462] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.524504] (unitree_guide2) StdoutLine: {'line': b'3: -  /* set iai = K \\ A */\n'}
[4.524565] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < m; i++)\n'}
[4.524620] (unitree_guide2) StdoutLine: {'line': b'3: -    iai[i] = i;\n'}
[4.524662] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.524702] (unitree_guide2) StdoutLine: {'line': b'3: -l1:\titer++;\n'}
[4.524742] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.524783] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("x", x);\n'}
[4.524824] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.524864] (unitree_guide2) StdoutLine: {'line': b'3: -  /* step 1: choose a violated constraint */\n'}
[4.524905] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = p; i < iq; i++)\n'}
[4.524946] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.524987] (unitree_guide2) StdoutLine: {'line': b'3: -    ip = A[i];\n'}
[4.525028] (unitree_guide2) StdoutLine: {'line': b'3: -    iai[ip] = -1;\n'}
[4.525070] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.525111] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.525153] (unitree_guide2) StdoutLine: {'line': b'3: -  /* compute s[x] = ci^T * x + ci0 for all elements of K \\ A */\n'}
[4.525195] (unitree_guide2) StdoutLine: {'line': b'3: -  ss = 0.0;\n'}
[4.525237] (unitree_guide2) StdoutLine: {'line': b'3: -  psi = 0.0; /* this value will contain the sum of all infeasibilities */\n'}
[4.525279] (unitree_guide2) StdoutLine: {'line': b'3: -  ip = 0; /* ip will be the index of the chosen violated constraint */\n'}
[4.525320] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < m; i++)\n'}
[4.525361] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.525402] (unitree_guide2) StdoutLine: {'line': b'3: -    iaexcl[i] = true;\n'}
[4.525443] (unitree_guide2) StdoutLine: {'line': b'3: -    sum = 0.0;\n'}
[4.525483] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = 0; j < n; j++)\n'}
[4.525543] (unitree_guide2) StdoutLine: {'line': b'3: -      sum += CI[j][i] * x[j];\n'}
[4.525598] (unitree_guide2) StdoutLine: {'line': b'3: -    sum += ci0[i];\n'}
[4.525639] (unitree_guide2) StdoutLine: {'line': b'3: -    s[i] = sum;\n'}
[4.525679] (unitree_guide2) StdoutLine: {'line': b'3: -    psi += std::min(0.0, sum);\n'}
[4.525720] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.525760] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.525801] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("s", s, m);\n'}
[4.525843] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.525890] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.525931] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.525972] (unitree_guide2) StdoutLine: {'line': b'3: -  if (fabs(psi) <= m * std::numeric_limits<double>::epsilon() * c1 * c2* 100.0)\n'}
[4.526014] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.526056] (unitree_guide2) StdoutLine: {'line': b'3: -    /* numerically there are not infeasibilities anymore */\n'}
[4.526097] (unitree_guide2) StdoutLine: {'line': b'3: -    return f_value;\n'}
[4.526138] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.526179] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.526219] (unitree_guide2) StdoutLine: {'line': b'3: -  /* save old values for u and A */\n'}
[4.526260] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < iq; i++)\n'}
[4.526301] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.526341] (unitree_guide2) StdoutLine: {'line': b'3: -    u_old[i] = u[i];\n'}
[4.526381] (unitree_guide2) StdoutLine: {'line': b'3: -    A_old[i] = A[i];\n'}
[4.526674] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.526727] (unitree_guide2) StdoutLine: {'line': b'3: -  /* and for x */\n'}
[4.526769] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.526810] (unitree_guide2) StdoutLine: {'line': b'3: -    x_old[i] = x[i];\n'}
[4.526851] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.526892] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.526933] (unitree_guide2) StdoutLine: {'line': b'3: +    /* save old values for u and A */\n'}
[4.526975] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < iq; i++) {\n'}
[4.527016] (unitree_guide2) StdoutLine: {'line': b'3: +      u_old[i] = u[i];\n'}
[4.527058] (unitree_guide2) StdoutLine: {'line': b'3: +      A_old[i] = A[i];\n'}
[4.527100] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.527142] (unitree_guide2) StdoutLine: {'line': b'3: +    /* and for x */\n'}
[4.527184] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.527225] (unitree_guide2) StdoutLine: {'line': b'3: +      x_old[i] = x[i];\n'}
[4.527266] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.527307] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.527348] (unitree_guide2) StdoutLine: {'line': b'3: @@ -262,4 +278,2 @@\n'}
[4.527390] (unitree_guide2) StdoutLine: {'line': b'3: -    for (i = 0; i < m; i++)\n'}
[4.527431] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.527490] (unitree_guide2) StdoutLine: {'line': b'3: -      if (s[i] < ss && iai[i] != -1 && iaexcl[i])\n'}
[4.527533] (unitree_guide2) StdoutLine: {'line': b'3: -      {\n'}
[4.527642] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < m; i++) {\n'}
[4.527688] (unitree_guide2) StdoutLine: {'line': b'3: +      if (s[i] < ss && iai[i] != -1 && iaexcl[i]) {\n'}
[4.527730] (unitree_guide2) StdoutLine: {'line': b'3: @@ -270,18 +284,18 @@\n'}
[4.527771] (unitree_guide2) StdoutLine: {'line': b'3: -  if (ss >= 0.0)\n'}
[4.527812] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.527855] (unitree_guide2) StdoutLine: {'line': b'3: -    return f_value;\n'}
[4.527896] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.527938] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.527979] (unitree_guide2) StdoutLine: {'line': b'3: -  /* set np = n[ip] */\n'}
[4.528020] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.528061] (unitree_guide2) StdoutLine: {'line': b'3: -    np[i] = CI[i][ip];\n'}
[4.528102] (unitree_guide2) StdoutLine: {'line': b'3: -  /* set u = [u 0]^T */\n'}
[4.528143] (unitree_guide2) StdoutLine: {'line': b'3: -  u[iq] = 0.0;\n'}
[4.528184] (unitree_guide2) StdoutLine: {'line': b'3: -  /* add ip to the active set A */\n'}
[4.528225] (unitree_guide2) StdoutLine: {'line': b'3: -  A[iq] = ip;\n'}
[4.528265] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.528305] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.528346] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << "Trying with constraint " << ip << std::endl;\n'}
[4.528396] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("np", np);\n'}
[4.528437] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.528498] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.528555] (unitree_guide2) StdoutLine: {'line': b'3: +    if (ss >= 0.0) {\n'}
[4.528597] (unitree_guide2) StdoutLine: {'line': b'3: +      return f_value;\n'}
[4.528638] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.528680] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.528721] (unitree_guide2) StdoutLine: {'line': b'3: +    /* set np = n[ip] */\n'}
[4.528763] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.528804] (unitree_guide2) StdoutLine: {'line': b'3: +      np[i] = CI[i][ip];\n'}
[4.528845] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.528885] (unitree_guide2) StdoutLine: {'line': b'3: +    /* set u = [u 0]^T */\n'}
[4.528930] (unitree_guide2) StdoutLine: {'line': b'3: +    u[iq] = 0.0;\n'}
[4.528972] (unitree_guide2) StdoutLine: {'line': b'3: +    /* add ip to the active set A */\n'}
[4.529013] (unitree_guide2) StdoutLine: {'line': b'3: +    A[iq] = ip;\n'}
[4.529054] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.529095] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.529135] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Trying with constraint " << ip << std::endl;\n'}
[4.529178] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("np", np);\n'}
[4.529219] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.529260] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.529301] (unitree_guide2) StdoutLine: {'line': b'3: @@ -291,58 +305,78 @@\n'}
[4.529342] (unitree_guide2) StdoutLine: {'line': b'3: -  update_z(z, J, d, iq);\n'}
[4.529383] (unitree_guide2) StdoutLine: {'line': b'3: -  /* compute N* np (if q > 0): the negative of the step direction in the dual space */\n'}
[4.529444] (unitree_guide2) StdoutLine: {'line': b'3: -  update_r(R, r, d, iq);\n'}
[4.529501] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.529543] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << "Step direction z" << std::endl;\n'}
[4.529584] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("z", z);\n'}
[4.529625] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("r", r, iq + 1);\n'}
[4.529666] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("u", u, iq + 1);\n'}
[4.529714] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("d", d);\n'}
[4.529755] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("A", A, iq + 1);\n'}
[4.529796] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.529837] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.529878] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Step 2b: compute step length */\n'}
[4.529919] (unitree_guide2) StdoutLine: {'line': b'3: -  l = 0;\n'}
[4.529961] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Compute t1: partial step length (maximum step in dual space without violating dual feasibility */\n'}
[4.530004] (unitree_guide2) StdoutLine: {'line': b'3: -  t1 = inf; /* +inf */\n'}
[4.530045] (unitree_guide2) StdoutLine: {'line': b'3: -  /* find the index l s.t. it reaches the minimum of u+[x] / r */\n'}
[4.530087] (unitree_guide2) StdoutLine: {'line': b'3: -  for (k = p; k < iq; k++)\n'}
[4.530128] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.530170] (unitree_guide2) StdoutLine: {'line': b'3: -    if (r[k] > 0.0)\n'}
[4.530211] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.530252] (unitree_guide2) StdoutLine: {'line': b'3: -      if (u[k] / r[k] < t1)\n'}
[4.530292] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.530333] (unitree_guide2) StdoutLine: {'line': b'3: -\t      t1 = u[k] / r[k];\n'}
[4.530374] (unitree_guide2) StdoutLine: {'line': b'3: -\t      l = A[k];\n'}
[4.530433] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.530487] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.530532] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.530690] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Compute t2: full step length (minimum step in primal space such that the constraint ip becomes feasible */\n'}
[4.530746] (unitree_guide2) StdoutLine: {'line': b'3: -  if (fabs(scalar_product(z, z))  > std::numeric_limits<double>::epsilon()) // i.e. z != 0\n'}
[4.530789] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.530830] (unitree_guide2) StdoutLine: {'line': b'3: -    t2 = -s[ip] / scalar_product(z, np);\n'}
[4.530871] (unitree_guide2) StdoutLine: {'line': b'3: -    if (t2 < 0) // patch suggested by Takano Akio for handling numerical inconsistencies\n'}
[4.530913] (unitree_guide2) StdoutLine: {'line': b'3: -      t2 = inf;\n'}
[4.530954] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.530995] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.531036] (unitree_guide2) StdoutLine: {'line': b'3: -    t2 = inf; /* +inf */\n'}
[4.531077] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.531118] (unitree_guide2) StdoutLine: {'line': b'3: -  /* the step is chosen as the minimum of t1 and t2 */\n'}
[4.531159] (unitree_guide2) StdoutLine: {'line': b'3: -  t = std::min(t1, t2);\n'}
[4.531201] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.531243] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << "Step sizes: " << t << " (t1 = " << t1 << ", t2 = " << t2 << ") ";\n'}
[4.531284] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.531325] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.531366] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Step 2c: determine new S-pair and take step: */\n'}
[4.531426] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.531480] (unitree_guide2) StdoutLine: {'line': b'3: -  /* case (i): no step in primal or dual space */\n'}
[4.531521] (unitree_guide2) StdoutLine: {'line': b'3: -  if (t >= inf)\n'}
[4.531561] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.531602] (unitree_guide2) StdoutLine: {'line': b'3: -    /* QPP is infeasible */\n'}
[4.531642] (unitree_guide2) StdoutLine: {'line': b'3: -    // FIXME: unbounded to raise\n'}
[4.531683] (unitree_guide2) StdoutLine: {'line': b'3: -    return inf;\n'}
[4.531805] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.531855] (unitree_guide2) StdoutLine: {'line': b'3: -  /* case (ii): step in dual space */\n'}
[4.531897] (unitree_guide2) StdoutLine: {'line': b'3: -  if (t2 >= inf)\n'}
[4.531939] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.531980] (unitree_guide2) StdoutLine: {'line': b'3: -    /* set u = u +  t * [-r 1] and drop constraint l from the active set A */\n'}
[4.532022] (unitree_guide2) StdoutLine: {'line': b'3: -    for (k = 0; k < iq; k++)\n'}
[4.532063] (unitree_guide2) StdoutLine: {'line': b'3: +    update_z(z, J, d, iq);\n'}
[4.532105] (unitree_guide2) StdoutLine: {'line': b'3: +    /* compute N* np (if q > 0): the negative of the step direction in the dual space */\n'}
[4.532147] (unitree_guide2) StdoutLine: {'line': b'3: +    update_r(R, r, d, iq);\n'}
[4.532189] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.532230] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Step direction z" << std::endl;\n'}
[4.532272] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("z", z);\n'}
[4.532313] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("r", r, iq + 1);\n'}
[4.532372] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("u", u, iq + 1);\n'}
[4.532428] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("d", d);\n'}
[4.532469] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("A", A, iq + 1);\n'}
[4.532510] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.532551] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.532592] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Step 2b: compute step length */\n'}
[4.532634] (unitree_guide2) StdoutLine: {'line': b'3: +    l = 0;\n'}
[4.532675] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Compute t1: partial step length (maximum step in dual space without violating dual feasibility */\n'}
[4.532724] (unitree_guide2) StdoutLine: {'line': b'3: +    t1 = inf; /* +inf */\n'}
[4.532766] (unitree_guide2) StdoutLine: {'line': b'3: +    /* find the index l s.t. it reaches the minimum of u+[x] / r */\n'}
[4.532808] (unitree_guide2) StdoutLine: {'line': b'3: +    for (k = p; k < iq; k++) {\n'}
[4.532850] (unitree_guide2) StdoutLine: {'line': b'3: +      if (r[k] > 0.0) {\n'}
[4.532892] (unitree_guide2) StdoutLine: {'line': b'3: +        if (u[k] / r[k] < t1) {\n'}
[4.532934] (unitree_guide2) StdoutLine: {'line': b'3: +          t1 = u[k] / r[k];\n'}
[4.532975] (unitree_guide2) StdoutLine: {'line': b'3: +          l = A[k];\n'}
[4.533016] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.533057] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.533098] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.533139] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Compute t2: full step length (minimum step in primal space such that the constraint ip becomes feasible */\n'}
[4.533181] (unitree_guide2) StdoutLine: {'line': b'3: +    if (fabs(scalar_product(z, z)) > std::numeric_limits < double > ::epsilon()) { // i.e. z != 0\n'}
[4.533227] (unitree_guide2) StdoutLine: {'line': b'3: +      t2 = -s[ip] / scalar_product(z, np);\n'}
[4.533269] (unitree_guide2) StdoutLine: {'line': b'3: +      if (t2 < 0) { // patch suggested by Takano Akio for handling numerical inconsistencies\n'}
[4.533311] (unitree_guide2) StdoutLine: {'line': b'3: +        t2 = inf;\n'}
[4.533371] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.533426] (unitree_guide2) StdoutLine: {'line': b'3: +    } else {\n'}
[4.533468] (unitree_guide2) StdoutLine: {'line': b'3: +      t2 = inf; /* +inf */\n'}
[4.533509] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.533551] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.533592] (unitree_guide2) StdoutLine: {'line': b'3: +    /* the step is chosen as the minimum of t1 and t2 */\n'}
[4.533634] (unitree_guide2) StdoutLine: {'line': b'3: +    t = std::min(t1, t2);\n'}
[4.533675] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.533716] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Step sizes: " << t << " (t1 = " << t1 << ", t2 = " << t2 << ") ";\n'}
[4.533757] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.533798] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.533838] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Step 2c: determine new S-pair and take step: */\n'}
[4.533879] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.533919] (unitree_guide2) StdoutLine: {'line': b'3: +    /* case (i): no step in primal or dual space */\n'}
[4.533960] (unitree_guide2) StdoutLine: {'line': b'3: +    if (t >= inf) {\n'}
[4.534001] (unitree_guide2) StdoutLine: {'line': b'3: +      /* QPP is infeasible */\n'}
[4.534042] (unitree_guide2) StdoutLine: {'line': b'3: +      // FIXME: unbounded to raise\n'}
[4.534082] (unitree_guide2) StdoutLine: {'line': b'3: +      return inf;\n'}
[4.534123] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.534164] (unitree_guide2) StdoutLine: {'line': b'3: +    /* case (ii): step in dual space */\n'}
[4.534205] (unitree_guide2) StdoutLine: {'line': b'3: +    if (t2 >= inf) {\n'}
[4.534246] (unitree_guide2) StdoutLine: {'line': b'3: +      /* set u = u +  t * [-r 1] and drop constraint l from the active set A */\n'}
[4.534288] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = 0; k < iq; k++) {\n'}
[4.534348] (unitree_guide2) StdoutLine: {'line': b'3: +        u[k] -= t * r[k];\n'}
[4.534403] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.534444] (unitree_guide2) StdoutLine: {'line': b'3: +      u[iq] += t;\n'}
[4.534484] (unitree_guide2) StdoutLine: {'line': b'3: +      iai[l] = l;\n'}
[4.534525] (unitree_guide2) StdoutLine: {'line': b'3: +      delete_constraint(R, J, A, u, n, p, iq, l);\n'}
[4.534566] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.534639] (unitree_guide2) StdoutLine: {'line': b'3: +      std::cout << " in dual space: "\n'}
[4.534681] (unitree_guide2) StdoutLine: {'line': b'3: +                << f_value << std::endl;\n'}
[4.534721] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("x", x);\n'}
[4.534762] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("z", z);\n'}
[4.534803] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("A", A, iq + 1);\n'}
[4.534843] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.534960] (unitree_guide2) StdoutLine: {'line': b'3: +      goto l2a;\n'}
[4.535054] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.535118] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.535179] (unitree_guide2) StdoutLine: {'line': b'3: +    /* case (iii): step in primal and dual space */\n'}
[4.535240] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.535320] (unitree_guide2) StdoutLine: {'line': b'3: +    /* set x = x + t * z */\n'}
[4.535413] (unitree_guide2) StdoutLine: {'line': b'3: +    for (k = 0; k < n; k++) {\n'}
[4.535476] (unitree_guide2) StdoutLine: {'line': b'3: +      x[k] += t * z[k];\n'}
[4.535537] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.535599] (unitree_guide2) StdoutLine: {'line': b'3: +    /* update the solution value */\n'}
[4.535662] (unitree_guide2) StdoutLine: {'line': b'3: +    f_value += t * scalar_product(z, np) * (0.5 * t + u[iq]);\n'}
[4.535724] (unitree_guide2) StdoutLine: {'line': b'3: +    /* u = u + t * [-r 1] */\n'}
[4.535785] (unitree_guide2) StdoutLine: {'line': b'3: +    for (k = 0; k < iq; k++) {\n'}
[4.535846] (unitree_guide2) StdoutLine: {'line': b'3: @@ -349,0 +384 @@\n'}
[4.535906] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.535969] (unitree_guide2) StdoutLine: {'line': b'3: @@ -350,0 +386,53 @@\n'}
[4.536037] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.536103] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << " in both spaces: "\n'}
[4.536170] (unitree_guide2) StdoutLine: {'line': b'3: +              << f_value << std::endl;\n'}
[4.536216] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("x", x);\n'}
[4.536258] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("u", u, iq + 1);\n'}
[4.536335] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("r", r, iq + 1);\n'}
[4.536376] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("A", A, iq + 1);\n'}
[4.536417] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.536458] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.536499] (unitree_guide2) StdoutLine: {'line': b'3: +    if (fabs(t - t2) < std::numeric_limits < double > ::epsilon()) {\n'}
[4.536541] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.536581] (unitree_guide2) StdoutLine: {'line': b'3: +      std::cout << "Full step has taken " << t << std::endl;\n'}
[4.536622] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("x", x);\n'}
[4.536663] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.536704] (unitree_guide2) StdoutLine: {'line': b'3: +      /* full step has taken */\n'}
[4.536745] (unitree_guide2) StdoutLine: {'line': b'3: +      /* add constraint ip to the active set*/\n'}
[4.536786] (unitree_guide2) StdoutLine: {'line': b'3: +      if (!add_constraint(R, J, d, iq, R_norm)) {\n'}
[4.536827] (unitree_guide2) StdoutLine: {'line': b'3: +        iaexcl[ip] = false;\n'}
[4.536869] (unitree_guide2) StdoutLine: {'line': b'3: +        delete_constraint(R, J, A, u, n, p, iq, ip);\n'}
[4.536912] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.536953] (unitree_guide2) StdoutLine: {'line': b'3: +        print_matrix("R", R);\n'}
[4.536994] (unitree_guide2) StdoutLine: {'line': b'3: +        print_vector("A", A, iq);\n'}
[4.537035] (unitree_guide2) StdoutLine: {'line': b'3: +        print_vector("iai", iai);\n'}
[4.537076] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.537117] (unitree_guide2) StdoutLine: {'line': b'3: +        for (i = 0; i < m; i++) {\n'}
[4.537165] (unitree_guide2) StdoutLine: {'line': b'3: +          iai[i] = i;\n'}
[4.537206] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.537266] (unitree_guide2) StdoutLine: {'line': b'3: +        for (i = p; i < iq; i++) {\n'}
[4.537322] (unitree_guide2) StdoutLine: {'line': b'3: +          A[i] = A_old[i];\n'}
[4.537363] (unitree_guide2) StdoutLine: {'line': b'3: +          u[i] = u_old[i];\n'}
[4.537403] (unitree_guide2) StdoutLine: {'line': b'3: +          iai[A[i]] = -1;\n'}
[4.537444] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.537485] (unitree_guide2) StdoutLine: {'line': b'3: +        for (i = 0; i < n; i++) {\n'}
[4.537526] (unitree_guide2) StdoutLine: {'line': b'3: +          x[i] = x_old[i];\n'}
[4.537567] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.537607] (unitree_guide2) StdoutLine: {'line': b'3: +        goto l2; /* go to step 2 */\n'}
[4.537649] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.537690] (unitree_guide2) StdoutLine: {'line': b'3: +        iai[ip] = -1;\n'}
[4.537731] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.537772] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.537814] (unitree_guide2) StdoutLine: {'line': b'3: +      print_matrix("R", R);\n'}
[4.537854] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("A", A, iq);\n'}
[4.537895] (unitree_guide2) StdoutLine: {'line': b'3: +      print_vector("iai", iai);\n'}
[4.537936] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.537977] (unitree_guide2) StdoutLine: {'line': b'3: +      goto l1;\n'}
[4.538018] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.538058] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.538099] (unitree_guide2) StdoutLine: {'line': b'3: +    /* a patial step has taken */\n'}
[4.538148] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.538189] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Partial step has taken " << t << std::endl;\n'}
[4.538355] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("x", x);\n'}
[4.538457] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.538502] (unitree_guide2) StdoutLine: {'line': b'3: +    /* drop constraint l */\n'}
[4.538547] (unitree_guide2) StdoutLine: {'line': b'3: @@ -354,61 +441,0 @@\n'}
[4.538591] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << " in dual space: " \n'}
[4.538634] (unitree_guide2) StdoutLine: {'line': b'3: -      << f_value << std::endl;\n'}
[4.538734] (unitree_guide2) StdoutLine: {'line': b'3: -    print_vector("x", x);\n'}
[4.538779] (unitree_guide2) StdoutLine: {'line': b'3: -    print_vector("z", z);\n'}
[4.538862] (unitree_guide2) StdoutLine: {'line': b'3: -    print_vector("A", A, iq + 1);\n'}
[4.538904] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.538946] (unitree_guide2) StdoutLine: {'line': b'3: -    goto l2a;\n'}
[4.538988] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.539029] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.539071] (unitree_guide2) StdoutLine: {'line': b'3: -  /* case (iii): step in primal and dual space */\n'}
[4.539112] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.539153] (unitree_guide2) StdoutLine: {'line': b'3: -  /* set x = x + t * z */\n'}
[4.539194] (unitree_guide2) StdoutLine: {'line': b'3: -  for (k = 0; k < n; k++)\n'}
[4.539236] (unitree_guide2) StdoutLine: {'line': b'3: -    x[k] += t * z[k];\n'}
[4.539278] (unitree_guide2) StdoutLine: {'line': b'3: -  /* update the solution value */\n'}
[4.539319] (unitree_guide2) StdoutLine: {'line': b'3: -  f_value += t * scalar_product(z, np) * (0.5 * t + u[iq]);\n'}
[4.539361] (unitree_guide2) StdoutLine: {'line': b'3: -  /* u = u + t * [-r 1] */\n'}
[4.539403] (unitree_guide2) StdoutLine: {'line': b'3: -  for (k = 0; k < iq; k++)\n'}
[4.539445] (unitree_guide2) StdoutLine: {'line': b'3: -    u[k] -= t * r[k];\n'}
[4.539487] (unitree_guide2) StdoutLine: {'line': b'3: -  u[iq] += t;\n'}
[4.539529] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.539582] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << " in both spaces: " \n'}
[4.539625] (unitree_guide2) StdoutLine: {'line': b'3: -    << f_value << std::endl;\n'}
[4.539684] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("x", x);\n'}
[4.539728] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("u", u, iq + 1);\n'}
[4.539783] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("r", r, iq + 1);\n'}
[4.539843] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("A", A, iq + 1);\n'}
[4.539897] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.539971] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.540044] (unitree_guide2) StdoutLine: {'line': b'3: -  if (fabs(t - t2) < std::numeric_limits<double>::epsilon())\n'}
[4.540104] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.540159] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.540232] (unitree_guide2) StdoutLine: {'line': b'3: -    std::cout << "Full step has taken " << t << std::endl;\n'}
[4.540293] (unitree_guide2) StdoutLine: {'line': b'3: -    print_vector("x", x);\n'}
[4.540365] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.540421] (unitree_guide2) StdoutLine: {'line': b'3: -    /* full step has taken */\n'}
[4.540462] (unitree_guide2) StdoutLine: {'line': b'3: -    /* add constraint ip to the active set*/\n'}
[4.540505] (unitree_guide2) StdoutLine: {'line': b'3: -    if (!add_constraint(R, J, d, iq, R_norm))\n'}
[4.540546] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.540588] (unitree_guide2) StdoutLine: {'line': b'3: -      iaexcl[ip] = false;\n'}
[4.540629] (unitree_guide2) StdoutLine: {'line': b'3: -      delete_constraint(R, J, A, u, n, p, iq, ip);\n'}
[4.540671] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.540712] (unitree_guide2) StdoutLine: {'line': b'3: -      print_matrix("R", R);\n'}
[4.540773] (unitree_guide2) StdoutLine: {'line': b'3: -      print_vector("A", A, iq);\n'}
[4.540828] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\tprint_vector("iai", iai);\n'}
[4.540869] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.540910] (unitree_guide2) StdoutLine: {'line': b'3: -      for (i = 0; i < m; i++)\n'}
[4.540951] (unitree_guide2) StdoutLine: {'line': b'3: -        iai[i] = i;\n'}
[4.540992] (unitree_guide2) StdoutLine: {'line': b'3: -      for (i = p; i < iq; i++)\n'}
[4.541034] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.541074] (unitree_guide2) StdoutLine: {'line': b'3: -\t      A[i] = A_old[i];\n'}
[4.541116] (unitree_guide2) StdoutLine: {'line': b'3: -\t      u[i] = u_old[i];\n'}
[4.541158] (unitree_guide2) StdoutLine: {'line': b'3: -\t\t\t\tiai[A[i]] = -1;\n'}
[4.541200] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.541241] (unitree_guide2) StdoutLine: {'line': b'3: -      for (i = 0; i < n; i++)\n'}
[4.541283] (unitree_guide2) StdoutLine: {'line': b'3: -        x[i] = x_old[i];\n'}
[4.541325] (unitree_guide2) StdoutLine: {'line': b'3: -      goto l2; /* go to step 2 */\n'}
[4.541366] (unitree_guide2) StdoutLine: {'line': b'3: -    }    \n'}
[4.541408] (unitree_guide2) StdoutLine: {'line': b'3: -    else\n'}
[4.541449] (unitree_guide2) StdoutLine: {'line': b'3: -      iai[ip] = -1;\n'}
[4.541490] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.541531] (unitree_guide2) StdoutLine: {'line': b'3: @@ -417,38 +444,3 @@\n'}
[4.541571] (unitree_guide2) StdoutLine: {'line': b'3: -\t\tprint_vector("iai", iai);\n'}
[4.541612] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.541766] (unitree_guide2) StdoutLine: {'line': b'3: -    goto l1;\n'}
[4.541852] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.541895] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.541937] (unitree_guide2) StdoutLine: {'line': b'3: -  /* a patial step has taken */\n'}
[4.541978] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.542020] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << "Partial step has taken " << t << std::endl;\n'}
[4.542073] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("x", x);\n'}
[4.542116] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.542157] (unitree_guide2) StdoutLine: {'line': b'3: -  /* drop constraint l */\n'}
[4.542199] (unitree_guide2) StdoutLine: {'line': b'3: -  iai[l] = l;\n'}
[4.542240] (unitree_guide2) StdoutLine: {'line': b'3: -  delete_constraint(R, J, A, u, n, p, iq, l);\n'}
[4.542291] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.542333] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("R", R);\n'}
[4.542375] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("A", A, iq);\n'}
[4.542433] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.542512] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.542556] (unitree_guide2) StdoutLine: {'line': b'3: -  /* update s[ip] = CI * x + ci0 */\n'}
[4.542598] (unitree_guide2) StdoutLine: {'line': b'3: -  sum = 0.0;\n'}
[4.542639] (unitree_guide2) StdoutLine: {'line': b'3: -  for (k = 0; k < n; k++)\n'}
[4.542679] (unitree_guide2) StdoutLine: {'line': b'3: -    sum += CI[k][ip] * x[k];\n'}
[4.542721] (unitree_guide2) StdoutLine: {'line': b'3: -  s[ip] = sum + ci0[ip];\n'}
[4.542762] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.542836] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.542877] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("s", s, m);\n'}
[4.542919] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.542961] (unitree_guide2) StdoutLine: {'line': b'3: -  goto l2a;\n'}
[4.543002] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.543043] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.543091] (unitree_guide2) StdoutLine: {'line': b'3: -inline void compute_d(Vector<double>& d, const Matrix<double>& J, const Vector<double>& np)\n'}
[4.543144] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.543188] (unitree_guide2) StdoutLine: {'line': b'3: -  register int i, j, n = d.size();\n'}
[4.543233] (unitree_guide2) StdoutLine: {'line': b'3: -  register double sum;\n'}
[4.543279] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.543322] (unitree_guide2) StdoutLine: {'line': b'3: -  /* compute d = H^T * np */\n'}
[4.543367] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.543411] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.543454] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.543499] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.543542] (unitree_guide2) StdoutLine: {'line': b'3: +    /* update s[ip] = CI * x + ci0 */\n'}
[4.543586] (unitree_guide2) StdoutLine: {'line': b'3: @@ -456,132 +448,158 @@\n'}
[4.543639] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = 0; j < n; j++)\n'}
[4.543704] (unitree_guide2) StdoutLine: {'line': b'3: -      sum += J[j][i] * np[j];\n'}
[4.543898] (unitree_guide2) StdoutLine: {'line': b'3: -    d[i] = sum;\n'}
[4.543965] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.544008] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.544050] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.544091] (unitree_guide2) StdoutLine: {'line': b'3: -inline void update_z(Vector<double>& z, const Matrix<double>& J, const Vector<double>& d, int iq)\n'}
[4.544135] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.544176] (unitree_guide2) StdoutLine: {'line': b'3: -  register int i, j, n = z.size();\n'}
[4.544218] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.544260] (unitree_guide2) StdoutLine: {'line': b'3: -  /* setting of z = H * d */\n'}
[4.544302] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.544343] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.544408] (unitree_guide2) StdoutLine: {'line': b'3: -    z[i] = 0.0;\n'}
[4.544508] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = iq; j < n; j++)\n'}
[4.544604] (unitree_guide2) StdoutLine: {'line': b'3: -      z[i] += J[i][j] * d[j];\n'}
[4.544670] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.544787] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.544854] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.544974] (unitree_guide2) StdoutLine: {'line': b'3: -inline void update_r(const Matrix<double>& R, Vector<double>& r, const Vector<double>& d, int iq)\n'}
[4.545057] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.545099] (unitree_guide2) StdoutLine: {'line': b'3: -  register int i, j;\n'}
[4.545141] (unitree_guide2) StdoutLine: {'line': b'3: -  register double sum;\n'}
[4.545182] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.545223] (unitree_guide2) StdoutLine: {'line': b'3: -  /* setting of r = R^-1 d */\n'}
[4.545265] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = iq - 1; i >= 0; i--)\n'}
[4.545306] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.545347] (unitree_guide2) StdoutLine: {'line': b'3: -    sum = 0.0;\n'}
[4.545389] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = i + 1; j < iq; j++)\n'}
[4.545431] (unitree_guide2) StdoutLine: {'line': b'3: -      sum += R[i][j] * r[j];\n'}
[4.545476] (unitree_guide2) StdoutLine: {'line': b'3: -    r[i] = (d[i] - sum) / R[i][i];\n'}
[4.545522] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.545567] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.545620] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.545688] (unitree_guide2) StdoutLine: {'line': b'3: -bool add_constraint(Matrix<double>& R, Matrix<double>& J, Vector<double>& d, unsigned int& iq, double& R_norm)\n'}
[4.545740] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.545812] (unitree_guide2) StdoutLine: {'line': b'3: -  unsigned int n = d.size();\n'}
[4.545869] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.545914] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << "Add constraint " << iq << \'/\';\n'}
[4.545959] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.546003] (unitree_guide2) StdoutLine: {'line': b'3: -  register unsigned int i, j, k;\n'}
[4.546047] (unitree_guide2) StdoutLine: {'line': b'3: -  double cc, ss, h, t1, t2, xny;\n'}
[4.546091] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.546135] (unitree_guide2) StdoutLine: {'line': b'3: -  /* we have to find the Givens rotation which will reduce the element\n'}
[4.546181] (unitree_guide2) StdoutLine: {'line': b'3: -    d[j] to zero.\n'}
[4.546225] (unitree_guide2) StdoutLine: {'line': b"3: -    if it is already zero we don't have to do anything, except of\n"}
[4.546270] (unitree_guide2) StdoutLine: {'line': b'3: -    decreasing j */  \n'}
[4.546325] (unitree_guide2) StdoutLine: {'line': b'3: -  for (j = n - 1; j >= iq + 1; j--)\n'}
[4.546367] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.546408] (unitree_guide2) StdoutLine: {'line': b'3: -    /* The Givens rotation is done with the matrix (cc cs, cs -cc).\n'}
[4.546451] (unitree_guide2) StdoutLine: {'line': b'3: -    If cc is one, then element (j) of d is zero compared with element\n'}
[4.546494] (unitree_guide2) StdoutLine: {'line': b"3: -    (j - 1). Hence we don't have to do anything. \n"}
[4.546537] (unitree_guide2) StdoutLine: {'line': b'3: -    If cc is zero, then we just have to switch column (j) and column (j - 1) \n'}
[4.546581] (unitree_guide2) StdoutLine: {'line': b'3: -    of J. Since we only switch columns in J, we have to be careful how we\n'}
[4.546643] (unitree_guide2) StdoutLine: {'line': b'3: -    update d depending on the sign of gs.\n'}
[4.546718] (unitree_guide2) StdoutLine: {'line': b'3: -    Otherwise we have to apply the Givens rotation to these columns.\n'}
[4.546774] (unitree_guide2) StdoutLine: {'line': b'3: -    The i - 1 element of d has to be updated to h. */\n'}
[4.546815] (unitree_guide2) StdoutLine: {'line': b'3: -    cc = d[j - 1];\n'}
[4.546857] (unitree_guide2) StdoutLine: {'line': b'3: -    ss = d[j];\n'}
[4.546899] (unitree_guide2) StdoutLine: {'line': b'3: -    h = distance(cc, ss);\n'}
[4.546940] (unitree_guide2) StdoutLine: {'line': b'3: -    if (fabs(h) < std::numeric_limits<double>::epsilon()) // h == 0\n'}
[4.546981] (unitree_guide2) StdoutLine: {'line': b'3: -      continue;\n'}
[4.547033] (unitree_guide2) StdoutLine: {'line': b'3: -    d[j] = 0.0;\n'}
[4.547074] (unitree_guide2) StdoutLine: {'line': b'3: -    ss = ss / h;\n'}
[4.547115] (unitree_guide2) StdoutLine: {'line': b'3: -    cc = cc / h;\n'}
[4.547156] (unitree_guide2) StdoutLine: {'line': b'3: -    if (cc < 0.0)\n'}
[4.547198] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.547239] (unitree_guide2) StdoutLine: {'line': b'3: -      cc = -cc;\n'}
[4.547281] (unitree_guide2) StdoutLine: {'line': b'3: -      ss = -ss;\n'}
[4.547322] (unitree_guide2) StdoutLine: {'line': b'3: -      d[j - 1] = -h;\n'}
[4.547364] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.547405] (unitree_guide2) StdoutLine: {'line': b'3: -    else\n'}
[4.547446] (unitree_guide2) StdoutLine: {'line': b'3: -      d[j - 1] = h;\n'}
[4.547486] (unitree_guide2) StdoutLine: {'line': b'3: -    xny = ss / (1.0 + cc);\n'}
[4.547527] (unitree_guide2) StdoutLine: {'line': b'3: -    for (k = 0; k < n; k++)\n'}
[4.547568] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.547628] (unitree_guide2) StdoutLine: {'line': b'3: -      t1 = J[k][j - 1];\n'}
[4.547682] (unitree_guide2) StdoutLine: {'line': b'3: -      t2 = J[k][j];\n'}
[4.547722] (unitree_guide2) StdoutLine: {'line': b'3: -      J[k][j - 1] = t1 * cc + t2 * ss;\n'}
[4.547763] (unitree_guide2) StdoutLine: {'line': b'3: -      J[k][j] = xny * (t1 + J[k][j - 1]) - t2;\n'}
[4.547804] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.547844] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.547885] (unitree_guide2) StdoutLine: {'line': b'3: -  /* update the number of constraints added*/\n'}
[4.547927] (unitree_guide2) StdoutLine: {'line': b'3: -  iq++;\n'}
[4.547968] (unitree_guide2) StdoutLine: {'line': b'3: -  /* To update R we have to put the iq components of the d vector\n'}
[4.548010] (unitree_guide2) StdoutLine: {'line': b'3: -    into column iq - 1 of R\n'}
[4.548052] (unitree_guide2) StdoutLine: {'line': b'3: -    */\n'}
[4.548093] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < iq; i++)\n'}
[4.548134] (unitree_guide2) StdoutLine: {'line': b'3: -    R[i][iq - 1] = d[i];\n'}
[4.548175] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.548216] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << iq << std::endl;\n'}
[4.548257] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("R", R, iq, iq);\n'}
[4.548298] (unitree_guide2) StdoutLine: {'line': b'3: -  print_matrix("J", J);\n'}
[4.548338] (unitree_guide2) StdoutLine: {'line': b'3: -  print_vector("d", d, iq);\n'}
[4.548379] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.548419] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.548460] (unitree_guide2) StdoutLine: {'line': b'3: -  if (fabs(d[iq - 1]) <= std::numeric_limits<double>::epsilon() * R_norm) \n'}
[4.548501] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.548542] (unitree_guide2) StdoutLine: {'line': b'3: -    // problem degenerate\n'}
[4.548604] (unitree_guide2) StdoutLine: {'line': b'3: -    return false;\n'}
[4.548648] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.548692] (unitree_guide2) StdoutLine: {'line': b'3: -  R_norm = std::max<double>(R_norm, fabs(d[iq - 1]));\n'}
[4.548748] (unitree_guide2) StdoutLine: {'line': b'3: -  return true;\n'}
[4.548789] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.548830] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.548871] (unitree_guide2) StdoutLine: {'line': b'3: -void delete_constraint(Matrix<double>& R, Matrix<double>& J, Vector<int>& A, Vector<double>& u, unsigned int n, int p, unsigned int& iq, int l)\n'}
[4.548918] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.548960] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.549001] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << "Delete constraint " << l << \' \' << iq;\n'}
[4.549041] (unitree_guide2) StdoutLine: {'line': b'3: -#endif\n'}
[4.549090] (unitree_guide2) StdoutLine: {'line': b'3: -  register unsigned int i, j, k, qq = 0; // just to prevent warnings from smart compilers\n'}
[4.549136] (unitree_guide2) StdoutLine: {'line': b'3: -  double cc, ss, h, xny, t1, t2;\n'}
[4.549178] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.549219] (unitree_guide2) StdoutLine: {'line': b'3: -  bool found = false;\n'}
[4.549259] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Find the index qq for active constraint l to be removed */\n'}
[4.549301] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = p; i < iq; i++)\n'}
[4.549342] (unitree_guide2) StdoutLine: {'line': b'3: -    if (A[i] == l)\n'}
[4.549384] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.549425] (unitree_guide2) StdoutLine: {'line': b'3: -      qq = i;\n'}
[4.549466] (unitree_guide2) StdoutLine: {'line': b'3: -      found = true;\n'}
[4.549508] (unitree_guide2) StdoutLine: {'line': b'3: -      break;\n'}
[4.549548] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.549589] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.549630] (unitree_guide2) StdoutLine: {'line': b'3: -  if(!found)\n'}
[4.549691] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.549764] (unitree_guide2) StdoutLine: {'line': b'3: -    std::ostringstream os;\n'}
[4.549808] (unitree_guide2) StdoutLine: {'line': b'3: -    os << "Attempt to delete non existing constraint, constraint: " << l;\n'}
[4.549852] (unitree_guide2) StdoutLine: {'line': b'3: -    throw std::invalid_argument(os.str());\n'}
[4.549895] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.549950] (unitree_guide2) StdoutLine: {'line': b'3: -  /* remove the constraint from the active set and the duals */\n'}
[4.549992] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = qq; i < iq - 1; i++)\n'}
[4.550033] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.550074] (unitree_guide2) StdoutLine: {'line': b'3: +    for (k = 0; k < n; k++) {\n'}
[4.550115] (unitree_guide2) StdoutLine: {'line': b'3: +      sum += CI[k][ip] * x[k];\n'}
[4.550157] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.550198] (unitree_guide2) StdoutLine: {'line': b'3: +    s[ip] = sum + ci0[ip];\n'}
[4.550239] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.550300] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.550354] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("s", s, m);\n'}
[4.550394] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.550435] (unitree_guide2) StdoutLine: {'line': b'3: +    goto l2a;\n'}
[4.550475] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.550516] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.550556] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void compute_d(\n'}
[4.550597] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > & d, const Matrix < double > & J,\n'}
[4.550638] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & np)\n'}
[4.550681] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.550722] (unitree_guide2) StdoutLine: {'line': b'3: +    register int i, j, n = d.size();\n'}
[4.550763] (unitree_guide2) StdoutLine: {'line': b'3: +    register double sum;\n'}
[4.550805] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.550846] (unitree_guide2) StdoutLine: {'line': b'3: +    /* compute d = H^T * np */\n'}
[4.550887] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.550929] (unitree_guide2) StdoutLine: {'line': b'3: +      sum = 0.0;\n'}
[4.550971] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < n; j++) {\n'}
[4.551012] (unitree_guide2) StdoutLine: {'line': b'3: +        sum += J[j][i] * np[j];\n'}
[4.551052] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.551093] (unitree_guide2) StdoutLine: {'line': b'3: +      d[i] = sum;\n'}
[4.551133] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.551174] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.551215] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.551273] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void update_z(\n'}
[4.551316] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > & z, const Matrix < double > & J,\n'}
[4.551383] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & d, int iq)\n'}
[4.551424] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.551466] (unitree_guide2) StdoutLine: {'line': b'3: +    register int i, j, n = z.size();\n'}
[4.551724] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.551818] (unitree_guide2) StdoutLine: {'line': b'3: +    /* setting of z = H * d */\n'}
[4.551864] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.551908] (unitree_guide2) StdoutLine: {'line': b'3: +      z[i] = 0.0;\n'}
[4.551952] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = iq; j < n; j++) {\n'}
[4.551996] (unitree_guide2) StdoutLine: {'line': b'3: +        z[i] += J[i][j] * d[j];\n'}
[4.552048] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.552092] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.552136] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.552181] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.552225] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void update_r(\n'}
[4.552270] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & R, Vector < double > & r,\n'}
[4.552314] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & d, int iq)\n'}
[4.552358] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.552401] (unitree_guide2) StdoutLine: {'line': b'3: +    register int i, j;\n'}
[4.552445] (unitree_guide2) StdoutLine: {'line': b'3: +    register double sum;\n'}
[4.552494] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.552539] (unitree_guide2) StdoutLine: {'line': b'3: +    /* setting of r = R^-1 d */\n'}
[4.552585] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = iq - 1; i >= 0; i--) {\n'}
[4.552636] (unitree_guide2) StdoutLine: {'line': b'3: +      sum = 0.0;\n'}
[4.552684] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = i + 1; j < iq; j++) {\n'}
[4.552742] (unitree_guide2) StdoutLine: {'line': b'3: +        sum += R[i][j] * r[j];\n'}
[4.552786] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.552830] (unitree_guide2) StdoutLine: {'line': b'3: +      r[i] = (d[i] - sum) / R[i][i];\n'}
[4.552876] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.552919] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.552962] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.553006] (unitree_guide2) StdoutLine: {'line': b'3: +  bool add_constraint(\n'}
[4.553051] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > & R, Matrix < double > & J, Vector < double > & d,\n'}
[4.553098] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int & iq, double & R_norm)\n'}
[4.553144] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.553187] (unitree_guide2) StdoutLine: {'line': b'3: +    unsigned int n = d.size();\n'}
[4.553258] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.553320] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Add constraint " << iq << \'/\';\n'}
[4.553367] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.553413] (unitree_guide2) StdoutLine: {'line': b'3: +    register unsigned int i, j, k;\n'}
[4.553458] (unitree_guide2) StdoutLine: {'line': b'3: +    double cc, ss, h, t1, t2, xny;\n'}
[4.553502] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.553549] (unitree_guide2) StdoutLine: {'line': b'3: +    /* we have to find the Givens rotation which will reduce the element\n'}
[4.553594] (unitree_guide2) StdoutLine: {'line': b'3: +      d[j] to zero.\n'}
[4.553638] (unitree_guide2) StdoutLine: {'line': b"3: +      if it is already zero we don't have to do anything, except of\n"}
[4.553683] (unitree_guide2) StdoutLine: {'line': b'3: +      decreasing j */\n'}
[4.553729] (unitree_guide2) StdoutLine: {'line': b'3: +    for (j = n - 1; j >= iq + 1; j--) {\n'}
[4.553775] (unitree_guide2) StdoutLine: {'line': b'3: +      /* The Givens rotation is done with the matrix (cc cs, cs -cc).\n'}
[4.553863] (unitree_guide2) StdoutLine: {'line': b'3: +      If cc is one, then element (j) of d is zero compared with element\n'}
[4.553908] (unitree_guide2) StdoutLine: {'line': b"3: +      (j - 1). Hence we don't have to do anything.\n"}
[4.553963] (unitree_guide2) StdoutLine: {'line': b'3: +      If cc is zero, then we just have to switch column (j) and column (j - 1)\n'}
[4.554011] (unitree_guide2) StdoutLine: {'line': b'3: +      of J. Since we only switch columns in J, we have to be careful how we\n'}
[4.554058] (unitree_guide2) StdoutLine: {'line': b'3: +      update d depending on the sign of gs.\n'}
[4.554100] (unitree_guide2) StdoutLine: {'line': b'3: +      Otherwise we have to apply the Givens rotation to these columns.\n'}
[4.554143] (unitree_guide2) StdoutLine: {'line': b'3: +      The i - 1 element of d has to be updated to h. */\n'}
[4.554208] (unitree_guide2) StdoutLine: {'line': b'3: +      cc = d[j - 1];\n'}
[4.554255] (unitree_guide2) StdoutLine: {'line': b'3: +      ss = d[j];\n'}
[4.554315] (unitree_guide2) StdoutLine: {'line': b'3: +      h = distance(cc, ss);\n'}
[4.554356] (unitree_guide2) StdoutLine: {'line': b'3: +      if (fabs(h) < std::numeric_limits < double > ::epsilon()) { // h == 0\n'}
[4.554421] (unitree_guide2) StdoutLine: {'line': b'3: +        continue;\n'}
[4.555344] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.555499] (unitree_guide2) StdoutLine: {'line': b'3: +      d[j] = 0.0;\n'}
[4.555554] (unitree_guide2) StdoutLine: {'line': b'3: +      ss = ss / h;\n'}
[4.555599] (unitree_guide2) StdoutLine: {'line': b'3: +      cc = cc / h;\n'}
[4.555644] (unitree_guide2) StdoutLine: {'line': b'3: +      if (cc < 0.0) {\n'}
[4.555693] (unitree_guide2) StdoutLine: {'line': b'3: +        cc = -cc;\n'}
[4.555739] (unitree_guide2) StdoutLine: {'line': b'3: +        ss = -ss;\n'}
[4.555789] (unitree_guide2) StdoutLine: {'line': b'3: +        d[j - 1] = -h;\n'}
[4.555912] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.555982] (unitree_guide2) StdoutLine: {'line': b'3: +        d[j - 1] = h;\n'}
[4.556027] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.556084] (unitree_guide2) StdoutLine: {'line': b'3: +      xny = ss / (1.0 + cc);\n'}
[4.556125] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = 0; k < n; k++) {\n'}
[4.556186] (unitree_guide2) StdoutLine: {'line': b'3: +        t1 = J[k][j - 1];\n'}
[4.558621] (unitree_guide2) StdoutLine: {'line': b'3: +        t2 = J[k][j];\n'}
[4.558681] (unitree_guide2) StdoutLine: {'line': b'3: +        J[k][j - 1] = t1 * cc + t2 * ss;\n'}
[4.558726] (unitree_guide2) StdoutLine: {'line': b'3: +        J[k][j] = xny * (t1 + J[k][j - 1]) - t2;\n'}
[4.558770] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.558813] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.558855] (unitree_guide2) StdoutLine: {'line': b'3: +    /* update the number of constraints added*/\n'}
[4.558897] (unitree_guide2) StdoutLine: {'line': b'3: +    iq++;\n'}
[4.558958] (unitree_guide2) StdoutLine: {'line': b'3: +    /* To update R we have to put the iq components of the d vector\n'}
[4.559033] (unitree_guide2) StdoutLine: {'line': b'3: +      into column iq - 1 of R\n'}
[4.559077] (unitree_guide2) StdoutLine: {'line': b'3: +      */\n'}
[4.559120] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < iq; i++) {\n'}
[4.559164] (unitree_guide2) StdoutLine: {'line': b'3: +      R[i][iq - 1] = d[i];\n'}
[4.559208] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.559250] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.559291] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << iq << std::endl;\n'}
[4.559333] (unitree_guide2) StdoutLine: {'line': b'3: +    print_matrix("R", R, iq, iq);\n'}
[4.559374] (unitree_guide2) StdoutLine: {'line': b'3: +    print_matrix("J", J);\n'}
[4.559415] (unitree_guide2) StdoutLine: {'line': b'3: +    print_vector("d", d, iq);\n'}
[4.559457] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.559498] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.559545] (unitree_guide2) StdoutLine: {'line': b'3: +    if (fabs(d[iq - 1]) <= std::numeric_limits < double > ::epsilon() * R_norm) {\n'}
[4.559588] (unitree_guide2) StdoutLine: {'line': b'3: +      // problem degenerate\n'}
[4.559630] (unitree_guide2) StdoutLine: {'line': b'3: +      return false;\n'}
[4.559883] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.559935] (unitree_guide2) StdoutLine: {'line': b'3: +    R_norm = std::max < double > (R_norm, fabs(d[iq - 1]));\n'}
[4.559999] (unitree_guide2) StdoutLine: {'line': b'3: +    return true;\n'}
[4.560073] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.560126] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.560171] (unitree_guide2) StdoutLine: {'line': b'3: +  void delete_constraint(\n'}
[4.560216] (unitree_guide2) StdoutLine: {'line': b'3: +    Matrix < double > & R, Matrix < double > & J, Vector < int > & A,\n'}
[4.560273] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > & u, unsigned int n, int p, unsigned int & iq, int l)\n'}
[4.560317] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.560359] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.560401] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << "Delete constraint " << l << \' \' << iq;\n'}
[4.560444] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.560485] (unitree_guide2) StdoutLine: {'line': b'3: +    register unsigned int i, j, k, qq = 0; // just to prevent warnings from smart compilers\n'}
[4.560529] (unitree_guide2) StdoutLine: {'line': b'3: +    double cc, ss, h, xny, t1, t2;\n'}
[4.560571] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.560612] (unitree_guide2) StdoutLine: {'line': b'3: +    bool found = false;\n'}
[4.560653] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Find the index qq for active constraint l to be removed */\n'}
[4.560695] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = p; i < iq; i++) {\n'}
[4.560736] (unitree_guide2) StdoutLine: {'line': b'3: +      if (A[i] == l) {\n'}
[4.560777] (unitree_guide2) StdoutLine: {'line': b'3: +        qq = i;\n'}
[4.560818] (unitree_guide2) StdoutLine: {'line': b'3: +        found = true;\n'}
[4.560860] (unitree_guide2) StdoutLine: {'line': b'3: +        break;\n'}
[4.560901] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.560943] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.560985] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.561137] (unitree_guide2) StdoutLine: {'line': b'3: +    if (!found) {\n'}
[4.561202] (unitree_guide2) StdoutLine: {'line': b'3: +      std::ostringstream os;\n'}
[4.561245] (unitree_guide2) StdoutLine: {'line': b'3: +      os << "Attempt to delete non existing constraint, constraint: " << l;\n'}
[4.561287] (unitree_guide2) StdoutLine: {'line': b'3: +      throw std::invalid_argument(os.str());\n'}
[4.561328] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.561369] (unitree_guide2) StdoutLine: {'line': b'3: +    /* remove the constraint from the active set and the duals */\n'}
[4.561412] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = qq; i < iq - 1; i++) {\n'}
[4.561453] (unitree_guide2) StdoutLine: {'line': b'3: @@ -590 +608 @@\n'}
[4.561494] (unitree_guide2) StdoutLine: {'line': b'3: -      for (j = 0; j < n; j++)\n'}
[4.561535] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < n; j++) {\n'}
[4.561578] (unitree_guide2) StdoutLine: {'line': b'3: @@ -592,67 +610,63 @@\n'}
[4.561618] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.561679] (unitree_guide2) StdoutLine: {'line': b'3: -      \n'}
[4.561733] (unitree_guide2) StdoutLine: {'line': b'3: -  A[iq - 1] = A[iq];\n'}
[4.561774] (unitree_guide2) StdoutLine: {'line': b'3: -  u[iq - 1] = u[iq];\n'}
[4.561815] (unitree_guide2) StdoutLine: {'line': b'3: -  A[iq] = 0; \n'}
[4.561856] (unitree_guide2) StdoutLine: {'line': b'3: -  u[iq] = 0.0;\n'}
[4.561897] (unitree_guide2) StdoutLine: {'line': b'3: -  for (j = 0; j < iq; j++)\n'}
[4.561939] (unitree_guide2) StdoutLine: {'line': b'3: -    R[j][iq - 1] = 0.0;\n'}
[4.562014] (unitree_guide2) StdoutLine: {'line': b'3: -  /* constraint has been fully removed */\n'}
[4.562123] (unitree_guide2) StdoutLine: {'line': b'3: -  iq--;\n'}
[4.562171] (unitree_guide2) StdoutLine: {'line': b'3: -#ifdef TRACE_SOLVER\n'}
[4.562213] (unitree_guide2) StdoutLine: {'line': b"3: -  std::cout << '/' << iq << std::endl;\n"}
[4.562254] (unitree_guide2) StdoutLine: {'line': b'3: -#endif \n'}
[4.562294] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.562335] (unitree_guide2) StdoutLine: {'line': b'3: -  if (iq == 0)\n'}
[4.562377] (unitree_guide2) StdoutLine: {'line': b'3: -    return;\n'}
[4.562417] (unitree_guide2) StdoutLine: {'line': b'3: -  \n'}
[4.562458] (unitree_guide2) StdoutLine: {'line': b'3: -  for (j = qq; j < iq; j++)\n'}
[4.562508] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.562551] (unitree_guide2) StdoutLine: {'line': b'3: -    cc = R[j][j];\n'}
[4.562594] (unitree_guide2) StdoutLine: {'line': b'3: -    ss = R[j + 1][j];\n'}
[4.562636] (unitree_guide2) StdoutLine: {'line': b'3: -    h = distance(cc, ss);\n'}
[4.562679] (unitree_guide2) StdoutLine: {'line': b'3: -    if (fabs(h) < std::numeric_limits<double>::epsilon()) // h == 0\n'}
[4.562721] (unitree_guide2) StdoutLine: {'line': b'3: -      continue;\n'}
[4.562763] (unitree_guide2) StdoutLine: {'line': b'3: -    cc = cc / h;\n'}
[4.562804] (unitree_guide2) StdoutLine: {'line': b'3: -    ss = ss / h;\n'}
[4.562845] (unitree_guide2) StdoutLine: {'line': b'3: -    R[j + 1][j] = 0.0;\n'}
[4.562886] (unitree_guide2) StdoutLine: {'line': b'3: -    if (cc < 0.0)\n'}
[4.562927] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.562987] (unitree_guide2) StdoutLine: {'line': b'3: -      R[j][j] = -h;\n'}
[4.563031] (unitree_guide2) StdoutLine: {'line': b'3: -      cc = -cc;\n'}
[4.563085] (unitree_guide2) StdoutLine: {'line': b'3: -      ss = -ss;\n'}
[4.563125] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.563166] (unitree_guide2) StdoutLine: {'line': b'3: -    else\n'}
[4.563208] (unitree_guide2) StdoutLine: {'line': b'3: -      R[j][j] = h;\n'}
[4.563248] (unitree_guide2) StdoutLine: {'line': b'3: -    \n'}
[4.563290] (unitree_guide2) StdoutLine: {'line': b'3: -    xny = ss / (1.0 + cc);\n'}
[4.563331] (unitree_guide2) StdoutLine: {'line': b'3: -    for (k = j + 1; k < iq; k++)\n'}
[4.563373] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.563414] (unitree_guide2) StdoutLine: {'line': b'3: -      t1 = R[j][k];\n'}
[4.563456] (unitree_guide2) StdoutLine: {'line': b'3: -      t2 = R[j + 1][k];\n'}
[4.563498] (unitree_guide2) StdoutLine: {'line': b'3: -      R[j][k] = t1 * cc + t2 * ss;\n'}
[4.563539] (unitree_guide2) StdoutLine: {'line': b'3: -      R[j + 1][k] = xny * (t1 + R[j][k]) - t2;\n'}
[4.563581] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.563623] (unitree_guide2) StdoutLine: {'line': b'3: -    for (k = 0; k < n; k++)\n'}
[4.563664] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.563705] (unitree_guide2) StdoutLine: {'line': b'3: -      t1 = J[k][j];\n'}
[4.563747] (unitree_guide2) StdoutLine: {'line': b'3: -      t2 = J[k][j + 1];\n'}
[4.563788] (unitree_guide2) StdoutLine: {'line': b'3: -      J[k][j] = t1 * cc + t2 * ss;\n'}
[4.563829] (unitree_guide2) StdoutLine: {'line': b'3: -      J[k][j + 1] = xny * (J[k][j] + t1) - t2;\n'}
[4.563871] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.563912] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.563986] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.564046] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.564102] (unitree_guide2) StdoutLine: {'line': b'3: -inline double distance(double a, double b)\n'}
[4.564145] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.564187] (unitree_guide2) StdoutLine: {'line': b'3: -  register double a1, b1, t;\n'}
[4.564228] (unitree_guide2) StdoutLine: {'line': b'3: -  a1 = fabs(a);\n'}
[4.564271] (unitree_guide2) StdoutLine: {'line': b'3: -  b1 = fabs(b);\n'}
[4.564312] (unitree_guide2) StdoutLine: {'line': b'3: -  if (a1 > b1) \n'}
[4.564354] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.564403] (unitree_guide2) StdoutLine: {'line': b'3: -    t = (b1 / a1);\n'}
[4.564444] (unitree_guide2) StdoutLine: {'line': b'3: -    return a1 * sqrt(1.0 + t * t);\n'}
[4.564487] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.564528] (unitree_guide2) StdoutLine: {'line': b'3: -  else\n'}
[4.564569] (unitree_guide2) StdoutLine: {'line': b'3: -    if (b1 > a1)\n'}
[4.564611] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.564652] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.564693] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.564734] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.564776] (unitree_guide2) StdoutLine: {'line': b'3: +    A[iq - 1] = A[iq];\n'}
[4.564817] (unitree_guide2) StdoutLine: {'line': b'3: +    u[iq - 1] = u[iq];\n'}
[4.564859] (unitree_guide2) StdoutLine: {'line': b'3: +    A[iq] = 0;\n'}
[4.564919] (unitree_guide2) StdoutLine: {'line': b'3: +    u[iq] = 0.0;\n'}
[4.564963] (unitree_guide2) StdoutLine: {'line': b'3: +    for (j = 0; j < iq; j++) {\n'}
[4.565019] (unitree_guide2) StdoutLine: {'line': b'3: +      R[j][iq - 1] = 0.0;\n'}
[4.565060] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.565101] (unitree_guide2) StdoutLine: {'line': b'3: +    /* constraint has been fully removed */\n'}
[4.565142] (unitree_guide2) StdoutLine: {'line': b'3: +    iq--;\n'}
[4.565183] (unitree_guide2) StdoutLine: {'line': b'3: +#ifdef TRACE_SOLVER\n'}
[4.565224] (unitree_guide2) StdoutLine: {'line': b"3: +    std::cout << '/' << iq << std::endl;\n"}
[4.565265] (unitree_guide2) StdoutLine: {'line': b'3: +#endif\n'}
[4.565330] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.565425] (unitree_guide2) StdoutLine: {'line': b'3: +    if (iq == 0) {\n'}
[4.565512] (unitree_guide2) StdoutLine: {'line': b'3: +      return;\n'}
[4.565563] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.565645] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.565735] (unitree_guide2) StdoutLine: {'line': b'3: +    for (j = qq; j < iq; j++) {\n'}
[4.565830] (unitree_guide2) StdoutLine: {'line': b'3: +      cc = R[j][j];\n'}
[4.565876] (unitree_guide2) StdoutLine: {'line': b'3: +      ss = R[j + 1][j];\n'}
[4.565921] (unitree_guide2) StdoutLine: {'line': b'3: +      h = distance(cc, ss);\n'}
[4.565965] (unitree_guide2) StdoutLine: {'line': b'3: +      if (fabs(h) < std::numeric_limits < double > ::epsilon()) { // h == 0\n'}
[4.566023] (unitree_guide2) StdoutLine: {'line': b'3: +        continue;\n'}
[4.566064] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.566106] (unitree_guide2) StdoutLine: {'line': b'3: +      cc = cc / h;\n'}
[4.566147] (unitree_guide2) StdoutLine: {'line': b'3: +      ss = ss / h;\n'}
[4.566189] (unitree_guide2) StdoutLine: {'line': b'3: +      R[j + 1][j] = 0.0;\n'}
[4.566231] (unitree_guide2) StdoutLine: {'line': b'3: +      if (cc < 0.0) {\n'}
[4.566273] (unitree_guide2) StdoutLine: {'line': b'3: +        R[j][j] = -h;\n'}
[4.566314] (unitree_guide2) StdoutLine: {'line': b'3: +        cc = -cc;\n'}
[4.566356] (unitree_guide2) StdoutLine: {'line': b'3: +        ss = -ss;\n'}
[4.566397] (unitree_guide2) StdoutLine: {'line': b'3: +      } else {\n'}
[4.566438] (unitree_guide2) StdoutLine: {'line': b'3: +        R[j][j] = h;\n'}
[4.566479] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.566520] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.566561] (unitree_guide2) StdoutLine: {'line': b'3: +      xny = ss / (1.0 + cc);\n'}
[4.566603] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = j + 1; k < iq; k++) {\n'}
[4.566661] (unitree_guide2) StdoutLine: {'line': b'3: +        t1 = R[j][k];\n'}
[4.566702] (unitree_guide2) StdoutLine: {'line': b'3: +        t2 = R[j + 1][k];\n'}
[4.566744] (unitree_guide2) StdoutLine: {'line': b'3: +        R[j][k] = t1 * cc + t2 * ss;\n'}
[4.566785] (unitree_guide2) StdoutLine: {'line': b'3: +        R[j + 1][k] = xny * (t1 + R[j][k]) - t2;\n'}
[4.566827] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.566888] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = 0; k < n; k++) {\n'}
[4.566947] (unitree_guide2) StdoutLine: {'line': b'3: +        t1 = J[k][j];\n'}
[4.566988] (unitree_guide2) StdoutLine: {'line': b'3: +        t2 = J[k][j + 1];\n'}
[4.567030] (unitree_guide2) StdoutLine: {'line': b'3: +        J[k][j] = t1 * cc + t2 * ss;\n'}
[4.567072] (unitree_guide2) StdoutLine: {'line': b'3: +        J[k][j + 1] = xny * (J[k][j] + t1) - t2;\n'}
[4.567114] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.567154] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.567195] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.567236] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.567277] (unitree_guide2) StdoutLine: {'line': b'3: +  inline double distance(double a, double b)\n'}
[4.567317] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.567358] (unitree_guide2) StdoutLine: {'line': b'3: +    register double a1, b1, t;\n'}
[4.567398] (unitree_guide2) StdoutLine: {'line': b'3: +    a1 = fabs(a);\n'}
[4.567439] (unitree_guide2) StdoutLine: {'line': b'3: +    b1 = fabs(b);\n'}
[4.567480] (unitree_guide2) StdoutLine: {'line': b'3: +    if (a1 > b1) {\n'}
[4.567522] (unitree_guide2) StdoutLine: {'line': b'3: +      t = (b1 / a1);\n'}
[4.567563] (unitree_guide2) StdoutLine: {'line': b'3: +      return a1 * sqrt(1.0 + t * t);\n'}
[4.567619] (unitree_guide2) StdoutLine: {'line': b'3: +    } else if (b1 > a1) {\n'}
[4.567661] (unitree_guide2) StdoutLine: {'line': b'3: @@ -662,37 +676,26 @@\n'}
[4.567703] (unitree_guide2) StdoutLine: {'line': b'3: -  return a1 * sqrt(2.0);\n'}
[4.567746] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.567789] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.567830] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.567890] (unitree_guide2) StdoutLine: {'line': b'3: -inline double scalar_product(const Vector<double>& x, const Vector<double>& y)\n'}
[4.567945] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.567987] (unitree_guide2) StdoutLine: {'line': b'3: -  register int i, n = x.size();\n'}
[4.568029] (unitree_guide2) StdoutLine: {'line': b'3: -  register double sum;\n'}
[4.568070] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.568112] (unitree_guide2) StdoutLine: {'line': b'3: -  sum = 0.0;\n'}
[4.568173] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.568216] (unitree_guide2) StdoutLine: {'line': b'3: -    sum += x[i] * y[i];\n'}
[4.568277] (unitree_guide2) StdoutLine: {'line': b'3: -  return sum;\t\t\t\n'}
[4.568335] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.568377] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.568419] (unitree_guide2) StdoutLine: {'line': b'3: -void cholesky_decomposition(Matrix<double>& A) \n'}
[4.568462] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.568503] (unitree_guide2) StdoutLine: {'line': b'3: -  register int i, j, k, n = A.nrows();\n'}
[4.568546] (unitree_guide2) StdoutLine: {'line': b'3: -  register double sum;\n'}
[4.568587] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.568650] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 0; i < n; i++)\n'}
[4.568691] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.568732] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = i; j < n; j++)\n'}
[4.568773] (unitree_guide2) StdoutLine: {'line': b'3: -    {\n'}
[4.568834] (unitree_guide2) StdoutLine: {'line': b'3: -      sum = A[i][j];\n'}
[4.568893] (unitree_guide2) StdoutLine: {'line': b'3: -      for (k = i - 1; k >= 0; k--)\n'}
[4.568955] (unitree_guide2) StdoutLine: {'line': b'3: -        sum -= A[i][k]*A[j][k];\n'}
[4.569014] (unitree_guide2) StdoutLine: {'line': b'3: -      if (i == j) \n'}
[4.569056] (unitree_guide2) StdoutLine: {'line': b'3: -\t    {\n'}
[4.569099] (unitree_guide2) StdoutLine: {'line': b'3: -\t      if (sum <= 0.0)\n'}
[4.569141] (unitree_guide2) StdoutLine: {'line': b'3: -        {\n'}
[4.569186] (unitree_guide2) StdoutLine: {'line': b'3: -          std::ostringstream os;\n'}
[4.569230] (unitree_guide2) StdoutLine: {'line': b'3: -          // raise error\n'}
[4.569286] (unitree_guide2) StdoutLine: {'line': b'3: -          print_matrix("A", A);\n'}
[4.569331] (unitree_guide2) StdoutLine: {'line': b'3: -          os << "Error in cholesky decomposition, sum: " << sum;\n'}
[4.569376] (unitree_guide2) StdoutLine: {'line': b'3: -          throw std::logic_error(os.str());\n'}
[4.569422] (unitree_guide2) StdoutLine: {'line': b'3: -          exit(-1);\n'}
[4.569466] (unitree_guide2) StdoutLine: {'line': b'3: +    return a1 * sqrt(2.0);\n'}
[4.569511] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.569555] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.569600] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.569662] (unitree_guide2) StdoutLine: {'line': b'3: +  inline double scalar_product(const Vector < double > & x, const Vector < double > & y)\n'}
[4.569709] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.569755] (unitree_guide2) StdoutLine: {'line': b'3: +    register int i, n = x.size();\n'}
[4.569823] (unitree_guide2) StdoutLine: {'line': b'3: +    register double sum;\n'}
[4.569886] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.569934] (unitree_guide2) StdoutLine: {'line': b'3: +    sum = 0.0;\n'}
[4.569981] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.570028] (unitree_guide2) StdoutLine: {'line': b'3: +      sum += x[i] * y[i];\n'}
[4.570074] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.570123] (unitree_guide2) StdoutLine: {'line': b'3: +    return sum;\n'}
[4.570170] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.570216] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.570263] (unitree_guide2) StdoutLine: {'line': b'3: +  void cholesky_decomposition(Matrix < double > & A)\n'}
[4.570308] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.570351] (unitree_guide2) StdoutLine: {'line': b'3: +    register int i, j, k, n = A.nrows();\n'}
[4.570400] (unitree_guide2) StdoutLine: {'line': b'3: +    register double sum;\n'}
[4.570447] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.570495] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 0; i < n; i++) {\n'}
[4.570543] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = i; j < n; j++) {\n'}
[4.570593] (unitree_guide2) StdoutLine: {'line': b'3: +        sum = A[i][j];\n'}
[4.570642] (unitree_guide2) StdoutLine: {'line': b'3: +        for (k = i - 1; k >= 0; k--) {\n'}
[4.570691] (unitree_guide2) StdoutLine: {'line': b'3: +          sum -= A[i][k] * A[j][k];\n'}
[4.570738] (unitree_guide2) StdoutLine: {'line': b'3: @@ -700,90 +703,108 @@\n'}
[4.570809] (unitree_guide2) StdoutLine: {'line': b'3: -\t      A[i][i] = sqrt(sum);\n'}
[4.570873] (unitree_guide2) StdoutLine: {'line': b'3: -\t    }\n'}
[4.570918] (unitree_guide2) StdoutLine: {'line': b'3: -      else\n'}
[4.570961] (unitree_guide2) StdoutLine: {'line': b'3: -        A[j][i] = sum / A[i][i];\n'}
[4.571025] (unitree_guide2) StdoutLine: {'line': b'3: -    }\n'}
[4.571083] (unitree_guide2) StdoutLine: {'line': b'3: -    for (k = i + 1; k < n; k++)\n'}
[4.571125] (unitree_guide2) StdoutLine: {'line': b'3: -      A[i][k] = A[k][i];\n'}
[4.571167] (unitree_guide2) StdoutLine: {'line': b'3: -  } \n'}
[4.571209] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.571252] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.571294] (unitree_guide2) StdoutLine: {'line': b'3: -void cholesky_solve(const Matrix<double>& L, Vector<double>& x, const Vector<double>& b)\n'}
[4.571357] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.571401] (unitree_guide2) StdoutLine: {'line': b'3: -  int n = L.nrows();\n'}
[4.571457] (unitree_guide2) StdoutLine: {'line': b'3: -  Vector<double> y(n);\n'}
[4.571500] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.571542] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Solve L * y = b */\n'}
[4.571585] (unitree_guide2) StdoutLine: {'line': b'3: -  forward_elimination(L, y, b);\n'}
[4.571651] (unitree_guide2) StdoutLine: {'line': b'3: -  /* Solve L^T * x = y */\n'}
[4.571713] (unitree_guide2) StdoutLine: {'line': b'3: -  backward_elimination(L, x, y);\n'}
[4.571825] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.571904] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.571967] (unitree_guide2) StdoutLine: {'line': b'3: -inline void forward_elimination(const Matrix<double>& L, Vector<double>& y, const Vector<double>& b)\n'}
[4.572034] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.572098] (unitree_guide2) StdoutLine: {'line': b'3: -  register int i, j, n = L.nrows();\n'}
[4.572162] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.572219] (unitree_guide2) StdoutLine: {'line': b'3: -  y[0] = b[0] / L[0][0];\n'}
[4.572286] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = 1; i < n; i++)\n'}
[4.572349] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.572414] (unitree_guide2) StdoutLine: {'line': b'3: -    y[i] = b[i];\n'}
[4.572484] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = 0; j < i; j++)\n'}
[4.572554] (unitree_guide2) StdoutLine: {'line': b'3: -      y[i] -= L[i][j] * y[j];\n'}
[4.572631] (unitree_guide2) StdoutLine: {'line': b'3: -    y[i] = y[i] / L[i][i];\n'}
[4.572702] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.572767] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.572829] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.572893] (unitree_guide2) StdoutLine: {'line': b'3: -inline void backward_elimination(const Matrix<double>& U, Vector<double>& x, const Vector<double>& y)\n'}
[4.572961] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.573014] (unitree_guide2) StdoutLine: {'line': b'3: -  register int i, j, n = U.nrows();\n'}
[4.573059] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.573104] (unitree_guide2) StdoutLine: {'line': b'3: -  x[n - 1] = y[n - 1] / U[n - 1][n - 1];\n'}
[4.573149] (unitree_guide2) StdoutLine: {'line': b'3: -  for (i = n - 2; i >= 0; i--)\n'}
[4.573194] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.573238] (unitree_guide2) StdoutLine: {'line': b'3: -    x[i] = y[i];\n'}
[4.573282] (unitree_guide2) StdoutLine: {'line': b'3: -    for (j = i + 1; j < n; j++)\n'}
[4.573326] (unitree_guide2) StdoutLine: {'line': b'3: -      x[i] -= U[i][j] * x[j];\n'}
[4.573370] (unitree_guide2) StdoutLine: {'line': b'3: -    x[i] = x[i] / U[i][i];\n'}
[4.573414] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.573459] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.573504] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.573548] (unitree_guide2) StdoutLine: {'line': b'3: -void print_matrix(const char* name, const Matrix<double>& A, int n, int m)\n'}
[4.573607] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.573654] (unitree_guide2) StdoutLine: {'line': b'3: -  std::ostringstream s;\n'}
[4.573700] (unitree_guide2) StdoutLine: {'line': b'3: -  std::string t;\n'}
[4.573746] (unitree_guide2) StdoutLine: {'line': b'3: -  if (n == -1)\n'}
[4.573792] (unitree_guide2) StdoutLine: {'line': b'3: -    n = A.nrows();\n'}
[4.573837] (unitree_guide2) StdoutLine: {'line': b'3: -  if (m == -1)\n'}
[4.573883] (unitree_guide2) StdoutLine: {'line': b'3: -    m = A.ncols();\n'}
[4.573928] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.573974] (unitree_guide2) StdoutLine: {'line': b'3: -  s << name << ": " << std::endl;\n'}
[4.574019] (unitree_guide2) StdoutLine: {'line': b'3: -  for (int i = 0; i < n; i++)\n'}
[4.574065] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.574111] (unitree_guide2) StdoutLine: {'line': b'3: -    s << " ";\n'}
[4.574157] (unitree_guide2) StdoutLine: {'line': b'3: -    for (int j = 0; j < m; j++)\n'}
[4.574202] (unitree_guide2) StdoutLine: {'line': b'3: -      s << A[i][j] << ", ";\n'}
[4.574248] (unitree_guide2) StdoutLine: {'line': b'3: -    s << std::endl;\n'}
[4.574293] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.574349] (unitree_guide2) StdoutLine: {'line': b'3: -  t = s.str();\n'}
[4.574397] (unitree_guide2) StdoutLine: {'line': b'3: -  t = t.substr(0, t.size() - 3); // To remove the trailing space, comma and newline\n'}
[4.574543] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.574647] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << t << std::endl;\n'}
[4.574713] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.574762] (unitree_guide2) StdoutLine: {'line': b'3: -\n'}
[4.574809] (unitree_guide2) StdoutLine: {'line': b'3: -template<typename T>\n'}
[4.574857] (unitree_guide2) StdoutLine: {'line': b'3: -void print_vector(const char* name, const Vector<T>& v, int n)\n'}
[4.574905] (unitree_guide2) StdoutLine: {'line': b'3: -{\n'}
[4.574952] (unitree_guide2) StdoutLine: {'line': b'3: -  std::ostringstream s;\n'}
[4.574999] (unitree_guide2) StdoutLine: {'line': b'3: -  std::string t;\n'}
[4.575046] (unitree_guide2) StdoutLine: {'line': b'3: -  if (n == -1)\n'}
[4.575093] (unitree_guide2) StdoutLine: {'line': b'3: -    n = v.size();\n'}
[4.575140] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.575186] (unitree_guide2) StdoutLine: {'line': b'3: -  s << name << ": " << std::endl << " ";\n'}
[4.575233] (unitree_guide2) StdoutLine: {'line': b'3: -  for (int i = 0; i < n; i++)\n'}
[4.575279] (unitree_guide2) StdoutLine: {'line': b'3: -  {\n'}
[4.575325] (unitree_guide2) StdoutLine: {'line': b'3: -    s << v[i] << ", ";\n'}
[4.575372] (unitree_guide2) StdoutLine: {'line': b'3: -  }\n'}
[4.575419] (unitree_guide2) StdoutLine: {'line': b'3: -  t = s.str();\n'}
[4.575466] (unitree_guide2) StdoutLine: {'line': b'3: -  t = t.substr(0, t.size() - 2); // To remove the trailing space and comma\n'}
[4.575515] (unitree_guide2) StdoutLine: {'line': b'3: -\t\n'}
[4.575562] (unitree_guide2) StdoutLine: {'line': b'3: -  std::cout << t << std::endl;\n'}
[4.575624] (unitree_guide2) StdoutLine: {'line': b'3: -}\n'}
[4.575673] (unitree_guide2) StdoutLine: {'line': b'3: +        if (i == j) {\n'}
[4.575721] (unitree_guide2) StdoutLine: {'line': b'3: +          if (sum <= 0.0) {\n'}
[4.575818] (unitree_guide2) StdoutLine: {'line': b'3: +            std::ostringstream os;\n'}
[4.575868] (unitree_guide2) StdoutLine: {'line': b'3: +            // raise error\n'}
[4.575916] (unitree_guide2) StdoutLine: {'line': b'3: +            print_matrix("A", A);\n'}
[4.575965] (unitree_guide2) StdoutLine: {'line': b'3: +            os << "Error in cholesky decomposition, sum: " << sum;\n'}
[4.576014] (unitree_guide2) StdoutLine: {'line': b'3: +            throw std::logic_error(os.str());\n'}
[4.576062] (unitree_guide2) StdoutLine: {'line': b'3: +            exit(-1);\n'}
[4.576110] (unitree_guide2) StdoutLine: {'line': b'3: +          }\n'}
[4.576158] (unitree_guide2) StdoutLine: {'line': b'3: +          A[i][i] = sqrt(sum);\n'}
[4.576206] (unitree_guide2) StdoutLine: {'line': b'3: +        } else {\n'}
[4.576254] (unitree_guide2) StdoutLine: {'line': b'3: +          A[j][i] = sum / A[i][i];\n'}
[4.576302] (unitree_guide2) StdoutLine: {'line': b'3: +        }\n'}
[4.576351] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.576399] (unitree_guide2) StdoutLine: {'line': b'3: +      for (k = i + 1; k < n; k++) {\n'}
[4.576448] (unitree_guide2) StdoutLine: {'line': b'3: +        A[i][k] = A[k][i];\n'}
[4.576496] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.576544] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.576606] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.576653] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.576699] (unitree_guide2) StdoutLine: {'line': b'3: +  void cholesky_solve(\n'}
[4.576746] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & L, Vector < double > & x,\n'}
[4.576793] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & b)\n'}
[4.576839] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.576886] (unitree_guide2) StdoutLine: {'line': b'3: +    int n = L.nrows();\n'}
[4.576933] (unitree_guide2) StdoutLine: {'line': b'3: +    Vector < double > y(n);\n'}
[4.576979] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.577025] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Solve L * y = b */\n'}
[4.577072] (unitree_guide2) StdoutLine: {'line': b'3: +    forward_elimination(L, y, b);\n'}
[4.577118] (unitree_guide2) StdoutLine: {'line': b'3: +    /* Solve L^T * x = y */\n'}
[4.577172] (unitree_guide2) StdoutLine: {'line': b'3: +    backward_elimination(L, x, y);\n'}
[4.577219] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.577267] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.577314] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void forward_elimination(\n'}
[4.577362] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & L, Vector < double > & y,\n'}
[4.577409] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & b)\n'}
[4.577457] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.577503] (unitree_guide2) StdoutLine: {'line': b'3: +    register int i, j, n = L.nrows();\n'}
[4.577550] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.577596] (unitree_guide2) StdoutLine: {'line': b'3: +    y[0] = b[0] / L[0][0];\n'}
[4.577664] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = 1; i < n; i++) {\n'}
[4.577712] (unitree_guide2) StdoutLine: {'line': b'3: +      y[i] = b[i];\n'}
[4.577760] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = 0; j < i; j++) {\n'}
[4.577807] (unitree_guide2) StdoutLine: {'line': b'3: +        y[i] -= L[i][j] * y[j];\n'}
[4.577855] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.577903] (unitree_guide2) StdoutLine: {'line': b'3: +      y[i] = y[i] / L[i][i];\n'}
[4.577951] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.577999] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.578048] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.578097] (unitree_guide2) StdoutLine: {'line': b'3: +  inline void backward_elimination(\n'}
[4.578145] (unitree_guide2) StdoutLine: {'line': b'3: +    const Matrix < double > & U, Vector < double > & x,\n'}
[4.578193] (unitree_guide2) StdoutLine: {'line': b'3: +    const Vector < double > & y)\n'}
[4.578242] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.578289] (unitree_guide2) StdoutLine: {'line': b'3: +    register int i, j, n = U.nrows();\n'}
[4.578337] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.578385] (unitree_guide2) StdoutLine: {'line': b'3: +    x[n - 1] = y[n - 1] / U[n - 1][n - 1];\n'}
[4.578433] (unitree_guide2) StdoutLine: {'line': b'3: +    for (i = n - 2; i >= 0; i--) {\n'}
[4.578480] (unitree_guide2) StdoutLine: {'line': b'3: +      x[i] = y[i];\n'}
[4.578528] (unitree_guide2) StdoutLine: {'line': b'3: +      for (j = i + 1; j < n; j++) {\n'}
[4.578575] (unitree_guide2) StdoutLine: {'line': b'3: +        x[i] -= U[i][j] * x[j];\n'}
[4.578636] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.578683] (unitree_guide2) StdoutLine: {'line': b'3: +      x[i] = x[i] / U[i][i];\n'}
[4.578730] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.578777] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.578824] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.578871] (unitree_guide2) StdoutLine: {'line': b'3: +  void print_matrix(const char * name, const Matrix < double > & A, int n, int m)\n'}
[4.578918] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.578965] (unitree_guide2) StdoutLine: {'line': b'3: +    std::ostringstream s;\n'}
[4.579012] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string t;\n'}
[4.579058] (unitree_guide2) StdoutLine: {'line': b'3: +    if (n == -1) {\n'}
[4.579104] (unitree_guide2) StdoutLine: {'line': b'3: +      n = A.nrows();\n'}
[4.579150] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.579196] (unitree_guide2) StdoutLine: {'line': b'3: +    if (m == -1) {\n'}
[4.579242] (unitree_guide2) StdoutLine: {'line': b'3: +      m = A.ncols();\n'}
[4.579288] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.579334] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.579380] (unitree_guide2) StdoutLine: {'line': b'3: +    s << name << ": " << std::endl;\n'}
[4.579427] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i = 0; i < n; i++) {\n'}
[4.579475] (unitree_guide2) StdoutLine: {'line': b'3: +      s << " ";\n'}
[4.579523] (unitree_guide2) StdoutLine: {'line': b'3: +      for (int j = 0; j < m; j++) {\n'}
[4.579575] (unitree_guide2) StdoutLine: {'line': b'3: +        s << A[i][j] << ", ";\n'}
[4.579623] (unitree_guide2) StdoutLine: {'line': b'3: +      }\n'}
[4.579686] (unitree_guide2) StdoutLine: {'line': b'3: +      s << std::endl;\n'}
[4.579734] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.579783] (unitree_guide2) StdoutLine: {'line': b'3: +    t = s.str();\n'}
[4.579831] (unitree_guide2) StdoutLine: {'line': b'3: +    t = t.substr(0, t.size() - 3); // To remove the trailing space, comma and newline\n'}
[4.579880] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.579928] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << t << std::endl;\n'}
[4.579976] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.580024] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.580071] (unitree_guide2) StdoutLine: {'line': b'3: +  template < typename T >\n'}
[4.580123] (unitree_guide2) StdoutLine: {'line': b'3: +  void print_vector(const char * name, const Vector < T > & v, int n)\n'}
[4.580173] (unitree_guide2) StdoutLine: {'line': b'3: +  {\n'}
[4.580219] (-) TimerEvent: {}
[4.580497] (unitree_guide2) StdoutLine: {'line': b'3: +    std::ostringstream s;\n'}
[4.580579] (unitree_guide2) StdoutLine: {'line': b'3: +    std::string t;\n'}
[4.580644] (unitree_guide2) StdoutLine: {'line': b'3: +    if (n == -1) {\n'}
[4.580723] (unitree_guide2) StdoutLine: {'line': b'3: +      n = v.size();\n'}
[4.580775] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.580824] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.580872] (unitree_guide2) StdoutLine: {'line': b'3: +    s << name << ": " << std::endl << " ";\n'}
[4.580919] (unitree_guide2) StdoutLine: {'line': b'3: +    for (int i = 0; i < n; i++) {\n'}
[4.580969] (unitree_guide2) StdoutLine: {'line': b'3: +      s << v[i] << ", ";\n'}
[4.581047] (unitree_guide2) StdoutLine: {'line': b'3: +    }\n'}
[4.581103] (unitree_guide2) StdoutLine: {'line': b'3: +    t = s.str();\n'}
[4.581154] (unitree_guide2) StdoutLine: {'line': b'3: +    t = t.substr(0, t.size() - 2); // To remove the trailing space and comma\n'}
[4.581203] (unitree_guide2) StdoutLine: {'line': b'3: +\n'}
[4.581249] (unitree_guide2) StdoutLine: {'line': b'3: +    std::cout << t << std::endl;\n'}
[4.581296] (unitree_guide2) StdoutLine: {'line': b'3: +  }\n'}
[4.581342] (unitree_guide2) StdoutLine: {'line': b'3: \n'}
[4.581390] (unitree_guide2) StdoutLine: {'line': b'3: 63 files with code style divergence\n'}
[4.581437] (unitree_guide2) StdoutLine: {'line': b'3: -- run_test.py: return code 1\n'}
[4.581486] (unitree_guide2) StdoutLine: {'line': b"3: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml'\n"}
[4.581536] (unitree_guide2) StdoutLine: {'line': b'3/4 Test #3: uncrustify .......................***Failed    3.03 sec\n'}
[4.581586] (unitree_guide2) StdoutLine: {'line': b'test 4\n'}
[4.581646] (unitree_guide2) StdoutLine: {'line': b'    Start 4: xmllint\n'}
[4.581693] (unitree_guide2) StdoutLine: {'line': b'\n'}
[4.581740] (unitree_guide2) StdoutLine: {'line': b'4: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml"\n'}
[4.581824] (unitree_guide2) StdoutLine: {'line': b'4: Test timeout computed to be: 60\n'}
[4.581906] (unitree_guide2) StdoutLine: {'line': b"4: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':\n"}
[4.581985] (unitree_guide2) StdoutLine: {'line': b'4:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml\n'}
[4.685122] (-) TimerEvent: {}
[4.795115] (-) TimerEvent: {}
[4.913527] (-) TimerEvent: {}
[5.034694] (-) TimerEvent: {}
[5.144180] (-) TimerEvent: {}
[5.245767] (-) TimerEvent: {}
[5.347147] (-) TimerEvent: {}
[5.490830] (-) TimerEvent: {}
[5.666056] (-) TimerEvent: {}
[5.767010] (-) TimerEvent: {}
[5.868309] (-) TimerEvent: {}
[5.973365] (-) TimerEvent: {}
[6.033357] (unitree_guide2) StdoutLine: {'line': b"4: File 'package.xml' is valid\n"}
[6.033533] (unitree_guide2) StdoutLine: {'line': b'4: \n'}
[6.033615] (unitree_guide2) StdoutLine: {'line': b"4: File 'config/plotjuggler_layout.xml' is valid\n"}
[6.033693] (unitree_guide2) StdoutLine: {'line': b'4: \n'}
[6.033756] (unitree_guide2) StdoutLine: {'line': b'4: No problems found\n'}
[6.047014] (unitree_guide2) StdoutLine: {'line': b'4: -- run_test.py: return code 0\n'}
[6.047370] (unitree_guide2) StdoutLine: {'line': b"4: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml'\n"}
[6.059701] (unitree_guide2) StdoutLine: {'line': b'4/4 Test #4: xmllint ..........................   Passed    2.45 sec\n'}
[6.060026] (unitree_guide2) StdoutLine: {'line': b'\n'}
[6.060123] (unitree_guide2) StdoutLine: {'line': b'75% tests passed\x1b[0;0m, \x1b[0;31m1 tests failed\x1b[0;0m out of 4\n'}
[6.060183] (unitree_guide2) StdoutLine: {'line': b'\n'}
[6.060238] (unitree_guide2) StdoutLine: {'line': b'Label Time Summary:\n'}
[6.060293] (unitree_guide2) StdoutLine: {'line': b'cppcheck      =   0.25 sec*proc (1 test)\n'}
[6.060348] (unitree_guide2) StdoutLine: {'line': b'lint_cmake    =   0.17 sec*proc (1 test)\n'}
[6.060434] (unitree_guide2) StdoutLine: {'line': b'linter        =   5.91 sec*proc (4 tests)\n'}
[6.060491] (unitree_guide2) StdoutLine: {'line': b'uncrustify    =   3.03 sec*proc (1 test)\n'}
[6.060544] (unitree_guide2) StdoutLine: {'line': b'xmllint       =   2.45 sec*proc (1 test)\n'}
[6.060597] (unitree_guide2) StdoutLine: {'line': b'\n'}
[6.060649] (unitree_guide2) StdoutLine: {'line': b'Total Test time (real) =   5.92 sec\n'}
[6.060702] (unitree_guide2) StdoutLine: {'line': b'\n'}
[6.060754] (unitree_guide2) StdoutLine: {'line': b'The following tests FAILED:\n'}
[6.060806] (unitree_guide2) StdoutLine: {'line': b'\t\x1b[0;31m  3 - uncrustify (Failed)\x1b[0;0m\n'}
[6.074866] (unitree_guide2) StderrLine: {'line': b'Errors while running CTest\n'}
[6.075063] (-) TimerEvent: {}
[6.075173] (unitree_guide2) StderrLine: {'line': b'Output from these tests are in: /home/yk/rosros/build/unitree_guide2/Testing/Temporary/LastTest.log\n'}
[6.075409] (unitree_guide2) StderrLine: {'line': b'Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.\n'}
[6.076514] (unitree_guide2) CommandEnded: {'returncode': 8}
[6.076963] (unitree_guide2) TestFailure: {'identifier': 'unitree_guide2'}
[6.077001] (unitree_guide2) JobEnded: {'identifier': 'unitree_guide2', 'rc': 0}
[6.077491] (-) EventReactorShutdown: {}
