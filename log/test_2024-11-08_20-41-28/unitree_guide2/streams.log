[0.091s] Invoking command in '/home/yk/rosros/build/unitree_guide2': AMENT_PREFIX_PATH=/home/yk/rosros/install/unitree_guide2:/home/yk/rosros/install/ros2_unitree_legged_msgs:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/yk/rosros/install/unitree_guide2:/home/yk/rosros/install/ros2_unitree_legged_msgs LD_LIBRARY_PATH=/home/yk/rosros/install/ros2_unitree_legged_msgs/lib:${LD_LIBRARY_PATH} PYTHONPATH=/home/yk/rosros/install/ros2_unitree_legged_msgs/local/lib/python3.10/dist-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
[0.106s] UpdateCTestConfiguration  from :/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini
[0.106s] Parse Config file:/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini
[0.106s]    Site: yk-VirtualBox
[0.106s]    Build name: (empty)
[0.107s]  Add coverage exclude regular expressions.
[0.107s] Create new tag: 20241108-1141 - Experimental
[0.107s] UpdateCTestConfiguration  from :/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini
[0.107s] Parse Config file:/home/yk/rosros/build/unitree_guide2/CTestConfiguration.ini
[0.107s] Test project /home/yk/rosros/build/unitree_guide2
[0.107s] Constructing a list of tests
[0.107s] Done constructing a list of tests
[0.108s] Updating test list for fixtures
[0.108s] Added 0 tests to meet fixture requirements
[0.108s] Checking test dependency graph...
[0.108s] Checking test dependency graph end
[0.109s] test 1
[0.109s]     Start 1: cppcheck
[0.111s] 
[0.111s] 1: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_cppcheck/cppcheck.txt" "--command" "/opt/ros/humble/bin/ament_cppcheck" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml" "--include_dirs" "/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2/include"
[0.111s] 1: Test timeout computed to be: 300
[0.212s] 1: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':
[0.212s] 1:  - /opt/ros/humble/bin/ament_cppcheck --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml --include_dirs /home/yk/rosros/src/unitree_ros2_sim/unitree_guide2/include
[0.333s] 1: cppcheck 2.7 has known performance issues and therefore will not be used, set the AMENT_CPPCHECK_ALLOW_SLOW_VERSIONS environment variable to override this.
[0.348s] 1: -- run_test.py: return code 0
[0.348s] 1: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/cppcheck.xunit.xml'
[0.359s] 1/4 Test #1: cppcheck .........................   Passed    0.25 sec
[0.360s] test 2
[0.360s]     Start 2: lint_cmake
[0.360s] 
[0.360s] 2: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_lint_cmake/lint_cmake.txt" "--command" "/opt/ros/humble/bin/ament_lint_cmake" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml"
[0.360s] 2: Test timeout computed to be: 60
[0.431s] 2: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':
[0.431s] 2:  - /opt/ros/humble/bin/ament_lint_cmake --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml
[0.515s] 2: 
[0.515s] 2: No problems found
[0.524s] 2: -- run_test.py: return code 0
[0.524s] 2: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/lint_cmake.xunit.xml'
[0.534s] 2/4 Test #2: lint_cmake .......................   Passed    0.17 sec
[0.535s] test 3
[0.535s]     Start 3: uncrustify
[0.535s] 
[0.535s] 3: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_uncrustify/uncrustify.txt" "--command" "/opt/ros/humble/bin/ament_uncrustify" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml"
[0.535s] 3: Test timeout computed to be: 60
[0.598s] 3: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':
[0.598s] 3:  - /opt/ros/humble/bin/ament_uncrustify --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml
[3.354s] 3: Code style divergence in file 'include/FSM/FSM.h':
[3.354s] 3: 
[3.355s] 3: --- include/FSM/FSM.h
[3.355s] 3: +++ include/FSM/FSM.h.uncrustify
[3.355s] 3: @@ -26,9 +26,10 @@
[3.355s] 3: -struct FSMStateList{
[3.355s] 3: -    FSMState *invalid;
[3.355s] 3: -    State_Passive *passive;
[3.355s] 3: -    State_FixedStand *fixedStand;
[3.355s] 3: -    State_FreeStand *freeStand;
[3.355s] 3: -    State_Trotting *trotting;
[3.355s] 3: -    State_BalanceTest *balanceTest;
[3.355s] 3: -    State_SwingTest *swingTest;
[3.355s] 3: -    State_StepTest *stepTest;
[3.355s] 3: +struct FSMStateList
[3.355s] 3: +{
[3.355s] 3: +  FSMState * invalid;
[3.355s] 3: +  State_Passive * passive;
[3.355s] 3: +  State_FixedStand * fixedStand;
[3.356s] 3: +  State_FreeStand * freeStand;
[3.356s] 3: +  State_Trotting * trotting;
[3.356s] 3: +  State_BalanceTest * balanceTest;
[3.356s] 3: +  State_SwingTest * swingTest;
[3.356s] 3: +  State_StepTest * stepTest;
[3.356s] 3: @@ -36 +37 @@
[3.365s] 3: -    State_move_base *moveBase;
[3.365s] 3: +  State_move_base * moveBase;
[3.365s] 3: @@ -40 +41 @@
[3.365s] 3: -    State_move_base *moveBase;
[3.365s] 3: +  State_move_base * moveBase;
[3.365s] 3: @@ -43,9 +44,10 @@
[3.365s] 3: -    void deletePtr(){
[3.365s] 3: -        delete invalid;
[3.365s] 3: -        delete passive;
[3.365s] 3: -        delete fixedStand;
[3.365s] 3: -        delete freeStand;
[3.365s] 3: -        delete trotting;
[3.366s] 3: -        delete balanceTest;
[3.366s] 3: -        delete swingTest;
[3.366s] 3: -        delete stepTest;
[3.366s] 3: +  void deletePtr()
[3.366s] 3: +  {
[3.366s] 3: +    delete invalid;
[3.366s] 3: +    delete passive;
[3.366s] 3: +    delete fixedStand;
[3.366s] 3: +    delete freeStand;
[3.366s] 3: +    delete trotting;
[3.366s] 3: +    delete balanceTest;
[3.366s] 3: +    delete swingTest;
[3.366s] 3: +    delete stepTest;
[3.366s] 3: @@ -53 +55 @@
[3.366s] 3: -        delete moveBase;
[3.366s] 3: +    delete moveBase;
[3.366s] 3: @@ -56 +58 @@
[3.366s] 3: -        delete moveBase;
[3.366s] 3: +    delete moveBase;
[3.367s] 3: @@ -58 +60 @@
[3.367s] 3: -    }
[3.367s] 3: +  }
[3.367s] 3: @@ -61 +63 @@
[3.367s] 3: -class FSM{
[3.367s] 3: +class FSM {
[3.367s] 3: @@ -63,4 +65,5 @@
[3.367s] 3: -    FSM(CtrlComponents *ctrlComp);
[3.367s] 3: -    ~FSM();
[3.367s] 3: -    void initialize();
[3.367s] 3: -    void run();
[3.367s] 3: +  FSM(CtrlComponents * ctrlComp);
[3.367s] 3: +  ~FSM();
[3.367s] 3: +  void initialize();
[3.367s] 3: +  void run();
[3.367s] 3: +
[3.367s] 3: @@ -68,10 +71,10 @@
[3.367s] 3: -    FSMState* getNextState(FSMStateName stateName);
[3.367s] 3: -    bool checkSafty();
[3.367s] 3: -    CtrlComponents *_ctrlComp;
[3.368s] 3: -    FSMState *_currentState;
[3.368s] 3: -    FSMState *_nextState;
[3.368s] 3: -    FSMStateName _nextStateName;
[3.368s] 3: -    FSMStateList _stateList;
[3.368s] 3: -    FSMMode _mode;
[3.368s] 3: -    long long _startTime;
[3.368s] 3: -    int count;
[3.368s] 3: +  FSMState * getNextState(FSMStateName stateName);
[3.368s] 3: +  bool checkSafty();
[3.368s] 3: +  CtrlComponents * _ctrlComp;
[3.368s] 3: +  FSMState * _currentState;
[3.368s] 3: +  FSMState * _nextState;
[3.368s] 3: +  FSMStateName _nextStateName;
[3.368s] 3: +  FSMStateList _stateList;
[3.368s] 3: +  FSMMode _mode;
[3.368s] 3: +  long long _startTime;
[3.368s] 3: +  int count;
[3.368s] 3: @@ -81 +84 @@
[3.368s] 3: -#endif  // FSM_H
[3.368s] 3: +#endif  // FSM_H
[3.369s] 3: 
[3.369s] 3: Code style divergence in file 'include/FSM/FSMState.h':
[3.369s] 3: 
[3.369s] 3: --- include/FSM/FSMState.h
[3.369s] 3: +++ include/FSM/FSMState.h.uncrustify
[3.369s] 3: @@ -19 +19 @@
[3.369s] 3: -class FSMState{
[3.369s] 3: +class FSMState {
[3.369s] 3: @@ -21 +21 @@
[3.369s] 3: -    FSMState(CtrlComponents *ctrlComp, FSMStateName stateName, std::string stateNameString);
[3.369s] 3: +  FSMState(CtrlComponents * ctrlComp, FSMStateName stateName, std::string stateNameString);
[3.369s] 3: @@ -23,4 +23,4 @@
[3.369s] 3: -    virtual void enter() = 0;
[3.369s] 3: -    virtual void run() = 0;
[3.369s] 3: -    virtual void exit() = 0;
[3.369s] 3: -    virtual FSMStateName checkChange() {return FSMStateName::INVALID;}
[3.369s] 3: +  virtual void enter() = 0;
[3.369s] 3: +  virtual void run() = 0;
[3.369s] 3: +  virtual void exit() = 0;
[3.369s] 3: +  virtual FSMStateName checkChange() {return FSMStateName::INVALID;}
[3.370s] 3: @@ -28,2 +28,3 @@
[3.370s] 3: -    FSMStateName _stateName;
[3.370s] 3: -    std::string _stateNameString;
[3.370s] 3: +  FSMStateName _stateName;
[3.370s] 3: +  std::string _stateNameString;
[3.370s] 3: +
[3.370s] 3: @@ -31,2 +32,2 @@
[3.370s] 3: -    CtrlComponents *_ctrlComp;
[3.370s] 3: -    FSMStateName _nextStateName;
[3.370s] 3: +  CtrlComponents * _ctrlComp;
[3.370s] 3: +  FSMStateName _nextStateName;
[3.370s] 3: @@ -34,3 +35,3 @@
[3.370s] 3: -    LowlevelCmd *_lowCmd;
[3.370s] 3: -    LowlevelState *_lowState;
[3.382s] 3: -    UserValue _userValue;
[3.383s] 3: +  LowlevelCmd * _lowCmd;
[3.383s] 3: +  LowlevelState * _lowState;
[3.383s] 3: +  UserValue _userValue;
[3.383s] 3: @@ -39 +40 @@
[3.383s] 3: -#endif  // FSMSTATE_H
[3.383s] 3: +#endif  // FSMSTATE_H
[3.383s] 3: 
[3.383s] 3: Code style divergence in file 'include/FSM/State_BalanceTest.h':
[3.383s] 3: 
[3.383s] 3: --- include/FSM/State_BalanceTest.h
[3.383s] 3: +++ include/FSM/State_BalanceTest.h.uncrustify
[3.384s] 3: @@ -9 +9 @@
[3.384s] 3: -class State_BalanceTest : public FSMState{
[3.384s] 3: +class State_BalanceTest: public FSMState {
[3.384s] 3: @@ -11,6 +11,8 @@
[3.384s] 3: -    State_BalanceTest(CtrlComponents *ctrlComp);
[3.384s] 3: -    ~State_BalanceTest(){}
[3.384s] 3: -    void enter();
[3.384s] 3: -    void run();
[3.384s] 3: -    void exit();
[3.384s] 3: -    FSMStateName checkChange();
[3.384s] 3: +  State_BalanceTest(CtrlComponents * ctrlComp);
[3.384s] 3: +  ~State_BalanceTest() {
[3.384s] 3: +  }
[3.384s] 3: +  void enter();
[3.384s] 3: +  void run();
[3.384s] 3: +  void exit();
[3.384s] 3: +  FSMStateName checkChange();
[3.384s] 3: +
[3.384s] 3: @@ -18 +20 @@
[3.384s] 3: -    void calcTau();
[3.384s] 3: +  void calcTau();
[3.385s] 3: @@ -20,3 +22,3 @@
[3.385s] 3: -    Estimator *_est;
[3.385s] 3: -    QuadrupedRobot *_robModel;
[3.385s] 3: -    BalanceCtrl *_balCtrl;
[3.385s] 3: +  Estimator * _est;
[3.385s] 3: +  QuadrupedRobot * _robModel;
[3.385s] 3: +  BalanceCtrl * _balCtrl;
[3.385s] 3: @@ -24 +26 @@
[3.385s] 3: -    VecInt4 *_contact;
[3.385s] 3: +  VecInt4 * _contact;
[3.385s] 3: @@ -26,5 +28,5 @@
[3.385s] 3: -    RotMat _Rd, _RdInit;
[3.385s] 3: -    Vec3 _pcd, _pcdInit;
[3.385s] 3: -    double _kpw;
[3.385s] 3: -    Mat3 _Kpp, _Kdp, _Kdw;
[3.385s] 3: -    Vec3 _ddPcd, _dWbd;
[3.385s] 3: +  RotMat _Rd, _RdInit;
[3.385s] 3: +  Vec3 _pcd, _pcdInit;
[3.385s] 3: +  double _kpw;
[3.385s] 3: +  Mat3 _Kpp, _Kdp, _Kdw;
[3.385s] 3: +  Vec3 _ddPcd, _dWbd;
[3.386s] 3: @@ -32,5 +34,5 @@
[3.386s] 3: -    Vec12 _q, _tau;
[3.386s] 3: -    Vec3 _posBody, _velBody;
[3.386s] 3: -    RotMat _B2G_RotMat, _G2B_RotMat;
[3.386s] 3: -    Vec34 _posFeet2BGlobal;
[3.386s] 3: -    Vec34 _forceFeetGlobal, _forceFeetBody;
[3.386s] 3: +  Vec12 _q, _tau;
[3.386s] 3: +  Vec3 _posBody, _velBody;
[3.386s] 3: +  RotMat _B2G_RotMat, _G2B_RotMat;
[3.386s] 3: +  Vec34 _posFeet2BGlobal;
[3.386s] 3: +  Vec34 _forceFeetGlobal, _forceFeetBody;
[3.386s] 3: @@ -38,4 +40,4 @@
[3.386s] 3: -    float _xMax, _xMin;
[3.386s] 3: -    float _yMax, _yMin;
[3.386s] 3: -    float _zMax, _zMin;
[3.386s] 3: -    float _yawMax, _yawMin;
[3.386s] 3: +  float _xMax, _xMin;
[3.386s] 3: +  float _yMax, _yMin;
[3.386s] 3: +  float _zMax, _zMin;
[3.386s] 3: +  float _yawMax, _yawMin;
[3.386s] 3: @@ -44 +46 @@
[3.387s] 3: -#endif  // BALANCETEST_H
[3.387s] 3: +#endif  // BALANCETEST_H
[3.387s] 3: 
[3.387s] 3: Code style divergence in file 'include/FSM/State_FixedStand.h':
[3.387s] 3: 
[3.387s] 3: --- include/FSM/State_FixedStand.h
[3.388s] 3: +++ include/FSM/State_FixedStand.h.uncrustify
[3.388s] 3: @@ -9 +9 @@
[3.388s] 3: -class State_FixedStand : public FSMState{
[3.388s] 3: +class State_FixedStand: public FSMState {
[3.388s] 3: @@ -11,6 +11,7 @@
[3.388s] 3: -    State_FixedStand(CtrlComponents *ctrlComp);
[3.388s] 3: -    ~State_FixedStand(){}
[3.388s] 3: -    void enter();
[3.388s] 3: -    void run();
[3.388s] 3: -    void exit();
[3.389s] 3: -    FSMStateName checkChange();
[3.389s] 3: +  State_FixedStand(CtrlComponents * ctrlComp);
[3.389s] 3: +  ~State_FixedStand() {
[3.389s] 3: +  }
[3.389s] 3: +  void enter();
[3.389s] 3: +  void run();
[3.389s] 3: +  void exit();
[3.389s] 3: +  FSMStateName checkChange();
[3.390s] 3: @@ -19,5 +20,5 @@
[3.390s] 3: -    float _targetPos[12] = {0.0, 0.67, -1.3, 0.0, 0.67, -1.3, 
[3.390s] 3: -                            0.0, 0.67, -1.3, 0.0, 0.67, -1.3};
[3.390s] 3: -    float _startPos[12];
[3.390s] 3: -    float _duration = 1000;   //steps
[3.390s] 3: -    float _percent = 0;       //%
[3.390s] 3: +  float _targetPos[12] = {0.0, 0.67, -1.3, 0.0, 0.67, -1.3,
[3.391s] 3: +    0.0, 0.67, -1.3, 0.0, 0.67, -1.3};
[3.391s] 3: +  float _startPos[12];
[3.391s] 3: +  float _duration = 1000;     //steps
[3.391s] 3: +  float _percent = 0;         //%
[3.391s] 3: @@ -26 +27 @@
[3.391s] 3: -#endif  // FIXEDSTAND_H
[3.391s] 3: +#endif  // FIXEDSTAND_H
[3.391s] 3: 
[3.391s] 3: Code style divergence in file 'include/FSM/State_FreeStand.h':
[3.391s] 3: 
[3.392s] 3: --- include/FSM/State_FreeStand.h
[3.392s] 3: +++ include/FSM/State_FreeStand.h.uncrustify
[3.392s] 3: @@ -9 +9 @@
[3.392s] 3: -class State_FreeStand : public FSMState{
[3.392s] 3: +class State_FreeStand: public FSMState {
[3.392s] 3: @@ -11,6 +11,8 @@
[3.392s] 3: -    State_FreeStand(CtrlComponents *ctrlComp);
[3.392s] 3: -    ~State_FreeStand(){}
[3.392s] 3: -    void enter();
[3.392s] 3: -    void run();
[3.392s] 3: -    void exit();
[3.392s] 3: -    FSMStateName checkChange();
[3.392s] 3: +  State_FreeStand(CtrlComponents * ctrlComp);
[3.392s] 3: +  ~State_FreeStand() {
[3.392s] 3: +  }
[3.392s] 3: +  void enter();
[3.392s] 3: +  void run();
[3.392s] 3: +  void exit();
[3.392s] 3: +  FSMStateName checkChange();
[3.392s] 3: +
[3.393s] 3: @@ -18,6 +20,6 @@
[3.393s] 3: -    Vec3 _initVecOX;
[3.393s] 3: -    Vec34 _initVecXP;
[3.393s] 3: -    float _rowMax, _rowMin;
[3.393s] 3: -    float _pitchMax, _pitchMin;
[3.393s] 3: -    float _yawMax, _yawMin;
[3.393s] 3: -    float _heightMax, _heightMin;
[3.393s] 3: +  Vec3 _initVecOX;
[3.393s] 3: +  Vec34 _initVecXP;
[3.394s] 3: +  float _rowMax, _rowMin;
[3.394s] 3: +  float _pitchMax, _pitchMin;
[3.394s] 3: +  float _yawMax, _yawMin;
[3.394s] 3: +  float _heightMax, _heightMin;
[3.394s] 3: @@ -25,2 +27,2 @@
[3.394s] 3: -    Vec34 _calcOP(float row, float pitch, float yaw, float height);
[3.394s] 3: -    void _calcCmd(Vec34 vecOP);
[3.394s] 3: +  Vec34 _calcOP(float row, float pitch, float yaw, float height);
[3.394s] 3: +  void _calcCmd(Vec34 vecOP);
[3.394s] 3: @@ -29 +31 @@
[3.394s] 3: -#endif  // FREESTAND_H
[3.394s] 3: +#endif  // FREESTAND_H
[3.394s] 3: 
[3.395s] 3: Code style divergence in file 'include/FSM/State_Passive.h':
[3.395s] 3: 
[3.395s] 3: --- include/FSM/State_Passive.h
[3.395s] 3: +++ include/FSM/State_Passive.h.uncrustify
[3.395s] 3: @@ -9 +9 @@
[3.395s] 3: -class State_Passive : public FSMState{
[3.395s] 3: +class State_Passive: public FSMState {
[3.395s] 3: @@ -11,5 +11,5 @@
[3.395s] 3: -    State_Passive(CtrlComponents *ctrlComp);
[3.395s] 3: -    void enter();
[3.395s] 3: -    void run();
[3.395s] 3: -    void exit();
[3.397s] 3: -    FSMStateName checkChange();
[3.397s] 3: +  State_Passive(CtrlComponents * ctrlComp);
[3.397s] 3: +  void enter();
[3.398s] 3: +  void run();
[3.398s] 3: +  void exit();
[3.398s] 3: +  FSMStateName checkChange();
[3.398s] 3: @@ -18 +18 @@
[3.398s] 3: -#endif  // PASSIVE_H
[3.398s] 3: +#endif  // PASSIVE_H
[3.398s] 3: 
[3.398s] 3: Code style divergence in file 'include/FSM/State_StepTest.h':
[3.398s] 3: 
[3.398s] 3: --- include/FSM/State_StepTest.h
[3.398s] 3: +++ include/FSM/State_StepTest.h.uncrustify
[3.398s] 3: @@ -9 +9 @@
[3.398s] 3: -class State_StepTest : public FSMState{
[3.398s] 3: +class State_StepTest: public FSMState {
[3.398s] 3: @@ -11,6 +11,8 @@
[3.398s] 3: -    State_StepTest(CtrlComponents *ctrlComp);
[3.398s] 3: -    ~State_StepTest(){}
[3.398s] 3: -    void enter();
[3.398s] 3: -    void run();
[3.398s] 3: -    void exit();
[3.399s] 3: -    FSMStateName checkChange();
[3.399s] 3: +  State_StepTest(CtrlComponents * ctrlComp);
[3.399s] 3: +  ~State_StepTest() {
[3.399s] 3: +  }
[3.399s] 3: +  void enter();
[3.399s] 3: +  void run();
[3.399s] 3: +  void exit();
[3.399s] 3: +  FSMStateName checkChange();
[3.399s] 3: +
[3.399s] 3: @@ -18 +20 @@
[3.399s] 3: -    void calcTau();
[3.399s] 3: +  void calcTau();
[3.399s] 3: @@ -20 +22 @@
[3.399s] 3: -    float _gaitHeight;
[3.399s] 3: +  float _gaitHeight;
[3.399s] 3: @@ -22,3 +24,3 @@
[3.399s] 3: -    Estimator *_est;
[3.399s] 3: -    QuadrupedRobot *_robModel;
[3.399s] 3: -    BalanceCtrl *_balCtrl;
[3.399s] 3: +  Estimator * _est;
[3.399s] 3: +  QuadrupedRobot * _robModel;
[3.400s] 3: +  BalanceCtrl * _balCtrl;
[3.400s] 3: @@ -26,2 +28,2 @@
[3.400s] 3: -    VecInt4 *_contact;
[3.400s] 3: -    Vec4 *_phase;
[3.400s] 3: +  VecInt4 * _contact;
[3.400s] 3: +  Vec4 * _phase;
[3.400s] 3: @@ -29,5 +31,5 @@
[3.400s] 3: -    RotMat _Rd;
[3.400s] 3: -    Vec3 _pcd;
[3.400s] 3: -    Mat3 _Kpp, _Kpw, _Kdp, _Kdw;
[3.400s] 3: -    Mat3 _KpSwing, _KdSwing;
[3.400s] 3: -    Vec3 _ddPcd, _dWbd;
[3.400s] 3: +  RotMat _Rd;
[3.400s] 3: +  Vec3 _pcd;
[3.400s] 3: +  Mat3 _Kpp, _Kpw, _Kdp, _Kdw;
[3.400s] 3: +  Mat3 _KpSwing, _KdSwing;
[3.400s] 3: +  Vec3 _ddPcd, _dWbd;
[3.400s] 3: @@ -35,7 +37,7 @@
[3.400s] 3: -    Vec12 _q, _tau;
[3.400s] 3: -    Vec3 _posBody, _velBody;
[3.401s] 3: -    RotMat _B2G_RotMat, _G2B_RotMat;
[3.401s] 3: -    Vec34 _posFeet2BGlobal;
[3.401s] 3: -    Vec34 _posFeetGlobalInit, _posFeetGlobalGoal, _velFeetGlobalGoal;
[3.401s] 3: -    Vec34 _posFeetGlobal, _velFeetGlobal;
[3.401s] 3: -    Vec34 _forceFeetGlobal, _forceFeetBody;
[3.401s] 3: +  Vec12 _q, _tau;
[3.401s] 3: +  Vec3 _posBody, _velBody;
[3.401s] 3: +  RotMat _B2G_RotMat, _G2B_RotMat;
[3.401s] 3: +  Vec34 _posFeet2BGlobal;
[3.401s] 3: +  Vec34 _posFeetGlobalInit, _posFeetGlobalGoal, _velFeetGlobalGoal;
[3.401s] 3: +  Vec34 _posFeetGlobal, _velFeetGlobal;
[3.401s] 3: +  Vec34 _forceFeetGlobal, _forceFeetBody;
[3.401s] 3: @@ -44 +46 @@
[3.401s] 3: -#endif  // STEPTEST_H
[3.401s] 3: +#endif  // STEPTEST_H
[3.401s] 3: 
[3.401s] 3: Code style divergence in file 'include/FSM/State_SwingTest.h':
[3.401s] 3: 
[3.401s] 3: --- include/FSM/State_SwingTest.h
[3.402s] 3: +++ include/FSM/State_SwingTest.h.uncrustify
[3.402s] 3: @@ -10 +10 @@
[3.402s] 3: -class State_SwingTest : public FSMState{
[3.402s] 3: +class State_SwingTest: public FSMState {
[3.402s] 3: @@ -12,6 +12,8 @@
[3.402s] 3: -    State_SwingTest(CtrlComponents *ctrlComp);
[3.402s] 3: -    ~State_SwingTest(){};
[3.402s] 3: -    void enter();
[3.402s] 3: -    void run();
[3.402s] 3: -    void exit();
[3.404s] 3: -    FSMStateName checkChange();
[3.405s] 3: +  State_SwingTest(CtrlComponents * ctrlComp);
[3.405s] 3: +  ~State_SwingTest() {
[3.405s] 3: +  };
[3.405s] 3: +  void enter();
[3.405s] 3: +  void run();
[3.405s] 3: +  void exit();
[3.405s] 3: +  FSMStateName checkChange();
[3.405s] 3: +
[3.405s] 3: @@ -19,2 +21,2 @@
[3.405s] 3: -    void _positionCtrl();
[3.407s] 3: -    void _torqueCtrl();
[3.407s] 3: +  void _positionCtrl();
[3.408s] 3: +  void _torqueCtrl();
[3.408s] 3: @@ -22,7 +24,7 @@
[3.408s] 3: -    Vec34 _initFeetPos, _feetPos;
[3.408s] 3: -    Vec3  _initPos, _posGoal;
[3.408s] 3: -    Vec12 _targetPos;
[3.408s] 3: -    float _xMin, _xMax;
[3.408s] 3: -    float _yMin, _yMax;
[3.408s] 3: -    float _zMin, _zMax;
[3.408s] 3: -    Mat3 _Kp, _Kd;
[3.408s] 3: +  Vec34 _initFeetPos, _feetPos;
[3.408s] 3: +  Vec3 _initPos, _posGoal;
[3.410s] 3: +  Vec12 _targetPos;
[3.410s] 3: +  float _xMin, _xMax;
[3.410s] 3: +  float _yMin, _yMax;
[3.410s] 3: +  float _zMin, _zMax;
[3.411s] 3: +  Mat3 _Kp, _Kd;
[3.411s] 3: @@ -31 +33 @@
[3.411s] 3: -#endif  // STATE_SWINGTEST_H
[3.411s] 3: +#endif  // STATE_SWINGTEST_H
[3.411s] 3: 
[3.411s] 3: Code style divergence in file 'include/FSM/State_Trotting.h':
[3.411s] 3: 
[3.411s] 3: --- include/FSM/State_Trotting.h
[3.411s] 3: +++ include/FSM/State_Trotting.h.uncrustify
[3.411s] 3: @@ -11 +11 @@
[3.411s] 3: -class State_Trotting : public FSMState{
[3.412s] 3: +class State_Trotting: public FSMState {
[3.412s] 3: @@ -13,7 +13,8 @@
[3.412s] 3: -    State_Trotting(CtrlComponents *ctrlComp);
[3.412s] 3: -    ~State_Trotting();
[3.412s] 3: -    void enter();
[3.412s] 3: -    void run();
[3.412s] 3: -    void exit();
[3.412s] 3: -    virtual FSMStateName checkChange();
[3.412s] 3: -    void setHighCmd(double vx, double vy, double wz);
[3.412s] 3: +  State_Trotting(CtrlComponents * ctrlComp);
[3.412s] 3: +  ~State_Trotting();
[3.412s] 3: +  void enter();
[3.412s] 3: +  void run();
[3.412s] 3: +  void exit();
[3.412s] 3: +  virtual FSMStateName checkChange();
[3.412s] 3: +  void setHighCmd(double vx, double vy, double wz);
[3.412s] 3: +
[3.412s] 3: @@ -21,6 +22,6 @@
[3.412s] 3: -    void calcTau();
[3.412s] 3: -    void calcQQd();
[3.412s] 3: -    void calcCmd();
[3.413s] 3: -    virtual void getUserCmd();
[3.413s] 3: -    void calcBalanceKp();
[3.413s] 3: -    bool checkStepOrNot();
[3.413s] 3: +  void calcTau();
[3.413s] 3: +  void calcQQd();
[3.413s] 3: +  void calcCmd();
[3.413s] 3: +  virtual void getUserCmd();
[3.413s] 3: +  void calcBalanceKp();
[3.413s] 3: +  bool checkStepOrNot();
[3.413s] 3: @@ -28,4 +29,4 @@
[3.413s] 3: -    GaitGenerator *_gait;
[3.413s] 3: -    Estimator *_est;
[3.413s] 3: -    QuadrupedRobot *_robModel;
[3.413s] 3: -    BalanceCtrl *_balCtrl;
[3.413s] 3: +  GaitGenerator * _gait;
[3.413s] 3: +  Estimator * _est;
[3.413s] 3: +  QuadrupedRobot * _robModel;
[3.413s] 3: +  BalanceCtrl * _balCtrl;
[3.413s] 3: @@ -33,7 +34,7 @@
[3.414s] 3: -    // Rob State
[3.414s] 3: -    Vec3  _posBody, _velBody;
[3.414s] 3: -    double _yaw, _dYaw;
[3.414s] 3: -    Vec34 _posFeetGlobal, _velFeetGlobal;
[3.414s] 3: -    Vec34 _posFeet2BGlobal;
[3.414s] 3: -    RotMat _B2G_RotMat, _G2B_RotMat;
[3.414s] 3: -    Vec12 _q;
[3.414s] 3: +  // Rob State
[3.414s] 3: +  Vec3 _posBody, _velBody;
[3.414s] 3: +  double _yaw, _dYaw;
[3.414s] 3: +  Vec34 _posFeetGlobal, _velFeetGlobal;
[3.414s] 3: +  Vec34 _posFeet2BGlobal;
[3.414s] 3: +  RotMat _B2G_RotMat, _G2B_RotMat;
[3.414s] 3: +  Vec12 _q;
[3.414s] 3: @@ -41,13 +42,13 @@
[3.414s] 3: -    // Robot command
[3.414s] 3: -    Vec3 _pcd;
[3.414s] 3: -    Vec3 _vCmdGlobal, _vCmdBody;
[3.414s] 3: -    double _yawCmd, _dYawCmd;
[3.414s] 3: -    double _dYawCmdPast;
[3.415s] 3: -    Vec3 _wCmdGlobal;
[3.415s] 3: -    Vec34 _posFeetGlobalGoal, _velFeetGlobalGoal;
[3.415s] 3: -    Vec34 _posFeet2BGoal, _velFeet2BGoal;
[3.415s] 3: -    RotMat _Rd;
[3.415s] 3: -    Vec3 _ddPcd, _dWbd;
[3.415s] 3: -    Vec34 _forceFeetGlobal, _forceFeetBody;
[3.415s] 3: -    Vec34 _qGoal, _qdGoal;
[3.415s] 3: -    Vec12 _tau;
[3.415s] 3: +  // Robot command
[3.415s] 3: +  Vec3 _pcd;
[3.415s] 3: +  Vec3 _vCmdGlobal, _vCmdBody;
[3.415s] 3: +  double _yawCmd, _dYawCmd;
[3.415s] 3: +  double _dYawCmdPast;
[3.415s] 3: +  Vec3 _wCmdGlobal;
[3.415s] 3: +  Vec34 _posFeetGlobalGoal, _velFeetGlobalGoal;
[3.415s] 3: +  Vec34 _posFeet2BGoal, _velFeet2BGoal;
[3.415s] 3: +  RotMat _Rd;
[3.415s] 3: +  Vec3 _ddPcd, _dWbd;
[3.415s] 3: +  Vec34 _forceFeetGlobal, _forceFeetBody;
[3.415s] 3: +  Vec34 _qGoal, _qdGoal;
[3.416s] 3: +  Vec12 _tau;
[3.416s] 3: @@ -55,9 +56,9 @@
[3.416s] 3: -    // Control Parameters
[3.416s] 3: -    double _gaitHeight;
[3.416s] 3: -    Vec3 _posError, _velError;
[3.416s] 3: -    Mat3 _Kpp, _Kdp, _Kdw;
[3.416s] 3: -    double _kpw;
[3.416s] 3: -    Mat3 _KpSwing, _KdSwing;
[3.416s] 3: -    Vec2 _vxLim, _vyLim, _wyawLim;
[3.416s] 3: -    Vec4 *_phase;
[3.416s] 3: -    VecInt4 *_contact;
[3.416s] 3: +  // Control Parameters
[3.416s] 3: +  double _gaitHeight;
[3.419s] 3: +  Vec3 _posError, _velError;
[3.419s] 3: +  Mat3 _Kpp, _Kdp, _Kdw;
[3.419s] 3: +  double _kpw;
[3.423s] 3: +  Mat3 _KpSwing, _KdSwing;
[3.423s] 3: +  Vec2 _vxLim, _vyLim, _wyawLim;
[3.423s] 3: +  Vec4 * _phase;
[3.423s] 3: +  VecInt4 * _contact;
[3.423s] 3: @@ -65,3 +66,3 @@
[3.423s] 3: -    // Calculate average value
[3.423s] 3: -    AvgCov *_avg_posError = new AvgCov(3, "_posError", true, 1000, 1000, 1);
[3.423s] 3: -    AvgCov *_avg_angError = new AvgCov(3, "_angError", true, 1000, 1000, 1000);
[3.423s] 3: +  // Calculate average value
[3.423s] 3: +  AvgCov * _avg_posError = new AvgCov(3, "_posError", true, 1000, 1000, 1);
[3.423s] 3: +  AvgCov * _avg_angError = new AvgCov(3, "_angError", true, 1000, 1000, 1000);
[3.423s] 3: @@ -70 +71 @@
[3.423s] 3: -#endif  // TROTTING_H
[3.423s] 3: +#endif  // TROTTING_H
[3.423s] 3: 
[3.424s] 3: Code style divergence in file 'include/FSM/State_move_base.h':
[3.424s] 3: 
[3.424s] 3: --- include/FSM/State_move_base.h
[3.424s] 3: +++ include/FSM/State_move_base.h.uncrustify
[3.424s] 3: @@ -13 +13 @@
[3.424s] 3: -class State_move_base : public State_Trotting{
[3.424s] 3: +class State_move_base: public State_Trotting {
[3.424s] 3: @@ -15,3 +15,5 @@
[3.424s] 3: -    State_move_base(CtrlComponents *ctrlComp);
[3.424s] 3: -    ~State_move_base(){}
[3.424s] 3: -    FSMStateName checkChange();
[3.425s] 3: +  State_move_base(CtrlComponents * ctrlComp);
[3.425s] 3: +  ~State_move_base() {
[3.425s] 3: +  }
[3.425s] 3: +  FSMStateName checkChange();
[3.425s] 3: +
[3.425s] 3: @@ -19,7 +21,7 @@
[3.425s] 3: -    void getUserCmd();
[3.425s] 3: -    void initRecv();
[3.425s] 3: -    void twistCallback(const geometry_msgs::Twist::msg::SharedPtr msg);
[3.425s] 3: -    ros::NodeHandle _nm;
[3.425s] 3: -    ros::Subscriber _cmdSub;
[3.425s] 3: -    double _vx, _vy;
[3.425s] 3: -    double _wz;
[3.425s] 3: +  void getUserCmd();
[3.425s] 3: +  void initRecv();
[3.425s] 3: +  void twistCallback(const geometry_msgs::Twist::msg::SharedPtr msg);
[3.425s] 3: +  ros::NodeHandle _nm;
[3.426s] 3: +  ros::Subscriber _cmdSub;
[3.426s] 3: +  double _vx, _vy;
[3.426s] 3: +  double _wz;
[3.427s] 3: @@ -41 +43 @@
[3.427s] 3: -class State_move_base : public State_Trotting{
[3.427s] 3: +class State_move_base: public State_Trotting {
[3.427s] 3: @@ -43,3 +45,5 @@
[3.427s] 3: -    State_move_base(CtrlComponents *ctrlComp);
[3.427s] 3: -    ~State_move_base(){}
[3.427s] 3: -    FSMStateName checkChange();
[3.427s] 3: +  State_move_base(CtrlComponents * ctrlComp);
[3.427s] 3: +  ~State_move_base() {
[3.428s] 3: +  }
[3.428s] 3: +  FSMStateName checkChange();
[3.428s] 3: +
[3.428s] 3: @@ -47,9 +51,9 @@
[3.428s] 3: -    void getUserCmd();
[3.428s] 3: -    void initRecv();
[3.428s] 3: -    void twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg);
[3.428s] 3: -    rclcpp::Node::SharedPtr _nm;
[3.429s] 3: -    rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr _cmdSub;
[3.429s] 3: -    double _vx, _vy;
[3.429s] 3: -    double _wz;
[3.429s] 3: -    rclcpp::executors::MultiThreadedExecutor::SharedPtr executor;
[3.429s] 3: -    std::thread executor_thread;
[3.429s] 3: +  void getUserCmd();
[3.430s] 3: +  void initRecv();
[3.430s] 3: +  void twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg);
[3.430s] 3: +  rclcpp::Node::SharedPtr _nm;
[3.430s] 3: +  rclcpp::Subscription < geometry_msgs::msg::Twist > ::SharedPtr _cmdSub;
[3.430s] 3: +  double _vx, _vy;
[3.430s] 3: +  double _wz;
[3.431s] 3: +  rclcpp::executors::MultiThreadedExecutor::SharedPtr executor;
[3.431s] 3: +  std::thread executor_thread;
[3.431s] 3: @@ -60 +64 @@
[3.431s] 3: -#endif  // COMPILE_WITH_ROS2_MB
[3.431s] 3: +#endif  // COMPILE_WITH_ROS2_MB
[3.431s] 3: 
[3.431s] 3: Code style divergence in file 'include/Gait/FeetEndCal.h':
[3.432s] 3: 
[3.432s] 3: --- include/Gait/FeetEndCal.h
[3.436s] 3: +++ include/Gait/FeetEndCal.h.uncrustify
[3.436s] 3: @@ -10 +10 @@
[3.436s] 3: -class FeetEndCal{
[3.436s] 3: +class FeetEndCal {
[3.436s] 3: @@ -12,3 +12,4 @@
[3.436s] 3: -    FeetEndCal(CtrlComponents *ctrlComp);
[3.436s] 3: -    ~FeetEndCal();
[3.436s] 3: -    Vec3 calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase);
[3.437s] 3: +  FeetEndCal(CtrlComponents * ctrlComp);
[3.437s] 3: +  ~FeetEndCal();
[3.437s] 3: +  Vec3 calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase);
[3.437s] 3: +
[3.437s] 3: @@ -16,3 +17,3 @@
[3.437s] 3: -    LowlevelState *_lowState;
[3.437s] 3: -    Estimator *_est;
[3.437s] 3: -    QuadrupedRobot *_robModel;
[3.437s] 3: +  LowlevelState * _lowState;
[3.437s] 3: +  Estimator * _est;
[3.437s] 3: +  QuadrupedRobot * _robModel;
[3.437s] 3: @@ -20,4 +21,4 @@
[3.437s] 3: -    Vec3 _nextStep, _footPos;
[3.437s] 3: -    Vec3 _bodyVelGlobal;        // linear velocity
[3.437s] 3: -    Vec3 _bodyAccGlobal;        // linear accelerator
[3.437s] 3: -    Vec3 _bodyWGlobal;          // angular velocity
[3.437s] 3: +  Vec3 _nextStep, _footPos;
[3.438s] 3: +  Vec3 _bodyVelGlobal;          // linear velocity
[3.438s] 3: +  Vec3 _bodyAccGlobal;          // linear accelerator
[3.438s] 3: +  Vec3 _bodyWGlobal;            // angular velocity
[3.443s] 3: @@ -25,2 +26,2 @@
[3.443s] 3: -    Vec4 _feetRadius, _feetInitAngle;
[3.443s] 3: -    float _yaw, _dYaw, _nextYaw;
[3.444s] 3: +  Vec4 _feetRadius, _feetInitAngle;
[3.444s] 3: +  float _yaw, _dYaw, _nextYaw;
[3.444s] 3: @@ -28,2 +29,2 @@
[3.444s] 3: -    float _Tstance, _Tswing;
[3.444s] 3: -    float _kx, _ky, _kyaw;
[3.444s] 3: +  float _Tstance, _Tswing;
[3.444s] 3: +  float _kx, _ky, _kyaw;
[3.444s] 3: @@ -32 +33 @@
[3.444s] 3: -#endif  // FEETENDCAL_H
[3.444s] 3: +#endif  // FEETENDCAL_H
[3.444s] 3: 
[3.444s] 3: Code style divergence in file 'include/Gait/GaitGenerator.h':
[3.444s] 3: 
[3.444s] 3: --- include/Gait/GaitGenerator.h
[3.445s] 3: +++ include/Gait/GaitGenerator.h.uncrustify
[3.445s] 3: @@ -15 +15 @@
[3.445s] 3: -class GaitGenerator{
[3.445s] 3: +class GaitGenerator {
[3.445s] 3: @@ -17,7 +17,8 @@
[3.445s] 3: -    GaitGenerator(CtrlComponents *ctrlComp);
[3.445s] 3: -    ~GaitGenerator();
[3.445s] 3: -    void setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight);
[3.445s] 3: -    void run(Vec34 &feetPos, Vec34 &feetVel);
[3.445s] 3: -    Vec3 getFootPos(int i);
[3.445s] 3: -    Vec3 getFootVel(int i);
[3.446s] 3: -    void restart();
[3.446s] 3: +  GaitGenerator(CtrlComponents * ctrlComp);
[3.446s] 3: +  ~GaitGenerator();
[3.446s] 3: +  void setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight);
[3.446s] 3: +  void run(Vec34 & feetPos, Vec34 & feetVel);
[3.446s] 3: +  Vec3 getFootPos(int i);
[3.446s] 3: +  Vec3 getFootVel(int i);
[3.446s] 3: +  void restart();
[3.446s] 3: +
[3.447s] 3: @@ -25,4 +26,4 @@
[3.447s] 3: -    float cycloidXYPosition(float startXY, float endXY, float phase);
[3.447s] 3: -    float cycloidXYVelocity(float startXY, float endXY, float phase);
[3.447s] 3: -    float cycloidZPosition(float startZ, float height, float phase);
[3.447s] 3: -    float cycloidZVelocity(float height, float phase);
[3.447s] 3: +  float cycloidXYPosition(float startXY, float endXY, float phase);
[3.447s] 3: +  float cycloidXYVelocity(float startXY, float endXY, float phase);
[3.447s] 3: +  float cycloidZPosition(float startZ, float height, float phase);
[3.447s] 3: +  float cycloidZVelocity(float height, float phase);
[3.447s] 3: @@ -30,12 +31,12 @@
[3.447s] 3: -    WaveGenerator *_waveG;
[3.447s] 3: -    Estimator *_est;
[3.448s] 3: -    FeetEndCal *_feetCal;
[3.448s] 3: -    QuadrupedRobot *_robModel;
[3.448s] 3: -    LowlevelState *_state;
[3.448s] 3: -    float _gaitHeight;
[3.454s] 3: -    Vec2 _vxyGoal;
[3.454s] 3: -    float _dYawGoal;
[3.454s] 3: -    Vec4 *_phase, _phasePast;
[3.454s] 3: -    VecInt4 *_contact;
[3.454s] 3: -    Vec34 _startP, _endP, _idealP, _pastP;
[3.454s] 3: -    bool _firstRun;
[3.454s] 3: +  WaveGenerator * _waveG;
[3.455s] 3: +  Estimator * _est;
[3.455s] 3: +  FeetEndCal * _feetCal;
[3.455s] 3: +  QuadrupedRobot * _robModel;
[3.455s] 3: +  LowlevelState * _state;
[3.455s] 3: +  float _gaitHeight;
[3.455s] 3: +  Vec2 _vxyGoal;
[3.455s] 3: +  float _dYawGoal;
[3.455s] 3: +  Vec4 * _phase, _phasePast;
[3.455s] 3: +  VecInt4 * _contact;
[3.455s] 3: +  Vec34 _startP, _endP, _idealP, _pastP;
[3.455s] 3: +  bool _firstRun;
[3.455s] 3: @@ -44 +45 @@
[3.455s] 3: -    PyPlot _testGaitPlot;
[3.455s] 3: +  PyPlot _testGaitPlot;
[3.455s] 3: @@ -49 +50 @@
[3.455s] 3: -#endif  // GAITGENERATOR_H
[3.455s] 3: +#endif  // GAITGENERATOR_H
[3.455s] 3: 
[3.455s] 3: Code style divergence in file 'include/Gait/WaveGenerator.h':
[3.455s] 3: 
[3.456s] 3: --- include/Gait/WaveGenerator.h
[3.456s] 3: +++ include/Gait/WaveGenerator.h.uncrustify
[3.456s] 3: @@ -17 +17 @@
[3.456s] 3: -class WaveGenerator{
[3.456s] 3: +class WaveGenerator {
[3.456s] 3: @@ -19,6 +19,7 @@
[3.456s] 3: -    WaveGenerator(double period, double stancePhaseRatio, Vec4 bias);
[3.456s] 3: -    ~WaveGenerator();
[3.456s] 3: -    void calcContactPhase(Vec4 &phaseResult, VecInt4 &contactResult, WaveStatus status);
[3.456s] 3: -    float getTstance();
[3.456s] 3: -    float getTswing();
[3.456s] 3: -    float getT();
[3.456s] 3: +  WaveGenerator(double period, double stancePhaseRatio, Vec4 bias);
[3.456s] 3: +  ~WaveGenerator();
[3.456s] 3: +  void calcContactPhase(Vec4 & phaseResult, VecInt4 & contactResult, WaveStatus status);
[3.456s] 3: +  float getTstance();
[3.456s] 3: +  float getTswing();
[3.456s] 3: +  float getT();
[3.456s] 3: +
[3.456s] 3: @@ -26 +27 @@
[3.456s] 3: -    void calcWave(Vec4 &phase, VecInt4 &contact, WaveStatus status);
[3.456s] 3: +  void calcWave(Vec4 & phase, VecInt4 & contact, WaveStatus status);
[3.457s] 3: @@ -28,3 +29,3 @@
[3.457s] 3: -    double _period;
[3.457s] 3: -    double _stRatio;
[3.457s] 3: -    Vec4 _bias;
[3.457s] 3: +  double _period;
[3.457s] 3: +  double _stRatio;
[3.457s] 3: +  Vec4 _bias;
[3.457s] 3: @@ -32,5 +33,5 @@
[3.457s] 3: -    Vec4 _normalT;                   // [0, 1)
[3.457s] 3: -    Vec4 _phase, _phasePast;
[3.457s] 3: -    VecInt4 _contact, _contactPast;
[3.457s] 3: -    VecInt4 _switchStatus;          // 1: switching, 0: do not switch
[3.457s] 3: -    WaveStatus _statusPast;
[3.461s] 3: +  Vec4 _normalT;                     // [0, 1)
[3.462s] 3: +  Vec4 _phase, _phasePast;
[3.462s] 3: +  VecInt4 _contact, _contactPast;
[3.462s] 3: +  VecInt4 _switchStatus;            // 1: switching, 0: do not switch
[3.462s] 3: +  WaveStatus _statusPast;
[3.462s] 3: @@ -38,2 +39,2 @@
[3.462s] 3: -    double _passT;                   // unit: second
[3.463s] 3: -    long long _startT;    // unit: us
[3.463s] 3: +  double _passT;                     // unit: second
[3.463s] 3: +  long long _startT;      // unit: us
[3.463s] 3: @@ -41 +42 @@
[3.463s] 3: -    PyPlot _testPlot;
[3.463s] 3: +  PyPlot _testPlot;
[3.463s] 3: @@ -46 +47 @@
[3.463s] 3: -#endif  // WAVEGENERATOR_H
[3.463s] 3: +#endif  // WAVEGENERATOR_H
[3.463s] 3: 
[3.463s] 3: Code style divergence in file 'include/common/LowPassFilter.h':
[3.463s] 3: 
[3.464s] 3: --- include/common/LowPassFilter.h
[3.464s] 3: +++ include/common/LowPassFilter.h.uncrustify
[3.464s] 3: @@ -7 +7 @@
[3.464s] 3: -class LPFilter{
[3.464s] 3: +class LPFilter {
[3.464s] 3: @@ -9,5 +9,6 @@
[3.464s] 3: -    LPFilter(double samplePeriod, double cutFrequency);
[3.464s] 3: -    ~LPFilter();
[3.464s] 3: -    void addValue(double newValue);
[3.464s] 3: -    double getValue();
[3.464s] 3: -    void clear();
[3.465s] 3: +  LPFilter(double samplePeriod, double cutFrequency);
[3.465s] 3: +  ~LPFilter();
[3.465s] 3: +  void addValue(double newValue);
[3.465s] 3: +  double getValue();
[3.465s] 3: +  void clear();
[3.466s] 3: +
[3.466s] 3: @@ -15,3 +16,3 @@
[3.466s] 3: -    double _weight;
[3.466s] 3: -    double _pastValue;
[3.466s] 3: -    bool _start;
[3.466s] 3: +  double _weight;
[3.466s] 3: +  double _pastValue;
[3.466s] 3: +  bool _start;
[3.467s] 3: @@ -20 +21 @@
[3.467s] 3: -#endif  // LOWPASSFILTER
[3.467s] 3: +#endif  // LOWPASSFILTER
[3.467s] 3: 
[3.467s] 3: Code style divergence in file 'include/common/PyPlot.h':
[3.467s] 3: 
[3.467s] 3: --- include/common/PyPlot.h
[3.467s] 3: +++ include/common/PyPlot.h.uncrustify
[3.467s] 3: @@ -18,12 +18,11 @@
[3.467s] 3: -struct Curve{
[3.467s] 3: -    std::vector<double> x;
[3.467s] 3: -    std::vector<double> y;
[3.468s] 3: -
[3.468s] 3: -    void printXY(double xRough, int pointNum){
[3.468s] 3: -        for(int i(0); i<x.size(); ++i){
[3.468s] 3: -            if(xRough < x[i]){
[3.468s] 3: -                for(int j(0); j < pointNum; ++j){
[3.468s] 3: -                    std::cout << "  X: " << x[i+j] << ", Y: " << y[i+j] << std::endl;
[3.468s] 3: -                }
[3.468s] 3: -                break;
[3.468s] 3: -            }
[3.468s] 3: +struct Curve
[3.468s] 3: +{
[3.468s] 3: +  std::vector < double > x;
[3.468s] 3: +  std::vector < double > y;
[3.468s] 3: +
[3.468s] 3: +  void printXY(double xRough, int pointNum)
[3.468s] 3: +  {
[3.469s] 3: +    for (int i(0); i < x.size(); ++i) {
[3.469s] 3: +      if (xRough < x[i]) {
[3.471s] 3: +        for (int j(0); j < pointNum; ++j) {
[3.471s] 3: +          std::cout << "  X: " << x[i + j] << ", Y: " << y[i + j] << std::endl;
[3.471s] 3: @@ -31 +30,4 @@
[3.471s] 3: -    }
[3.471s] 3: +        break;
[3.471s] 3: +      }
[3.471s] 3: +    }
[3.471s] 3: +  }
[3.471s] 3: @@ -34,30 +36,33 @@
[3.471s] 3: -struct Plot{
[3.472s] 3: -    std::vector<Curve*> curves;
[3.472s] 3: -    std::vector<std::string> labels;
[3.472s] 3: -    std::string plotName;
[3.472s] 3: -    int curveCount;
[3.472s] 3: -
[3.472s] 3: -    std::map<std::string, int> curveName2ID;
[3.472s] 3: -
[3.472s] 3: -    Plot(std::string name, int count, std::vector<std::string> labelVec)
[3.472s] 3: -        :plotName(name), curveCount(count), labels(labelVec){
[3.472s] 3: -        for(int i(0); i < count; ++i){
[3.472s] 3: -            curveName2ID.insert(std::pair<std::string, int>(labels[i], i));
[3.472s] 3: -            curves.push_back(new Curve());
[3.472s] 3: -        }
[3.472s] 3: -    }
[3.472s] 3: -
[3.472s] 3: -    ~Plot(){
[3.473s] 3: -        for(int i(0); i < curveCount; ++i){
[3.473s] 3: -            delete curves[i];
[3.473s] 3: -        }
[3.473s] 3: -    }
[3.473s] 3: -
[3.473s] 3: -    double getX(long long startT){
[3.473s] 3: -        return (double)(getSystemTime() - startT) * 1e-6;
[3.473s] 3: -    }
[3.473s] 3: -
[3.473s] 3: -    void printXY(std::string curveName, double xRough, int pointNum){
[3.473s] 3: -        std::cout << "[DEBUG] Plot: " << plotName << ", Curve: " << curveName << std::endl;
[3.473s] 3: -        curves[curveName2ID[curveName]]->printXY(xRough, pointNum);
[3.473s] 3: -    }
[3.473s] 3: +struct Plot
[3.473s] 3: +{
[3.474s] 3: +  std::vector < Curve * > curves;
[3.474s] 3: +  std::vector < std::string > labels;
[3.474s] 3: +  std::string plotName;
[3.474s] 3: +  int curveCount;
[3.474s] 3: +
[3.485s] 3: +  std::map < std::string, int > curveName2ID;
[3.485s] 3: +
[3.485s] 3: +  Plot(std::string name, int count, std::vector < std::string > labelVec)
[3.485s] 3: +    : plotName(name), curveCount(count), labels(labelVec) {
[3.486s] 3: +    for (int i(0); i < count; ++i) {
[3.486s] 3: +      curveName2ID.insert(std::pair < std::string, int > (labels[i], i));
[3.486s] 3: +      curves.push_back(new Curve());
[3.486s] 3: +    }
[3.486s] 3: +  }
[3.486s] 3: +
[3.495s] 3: +  ~Plot() {
[3.495s] 3: +    for (int i(0); i < curveCount; ++i) {
[3.495s] 3: +      delete curves[i];
[3.495s] 3: +    }
[3.495s] 3: +  }
[3.495s] 3: +
[3.496s] 3: +  double getX(long long startT)
[3.496s] 3: +  {
[3.496s] 3: +    return (double)(getSystemTime() - startT) * 1e-6;
[3.496s] 3: +  }
[3.498s] 3: +
[3.498s] 3: +  void printXY(std::string curveName, double xRough, int pointNum)
[3.498s] 3: +  {
[3.498s] 3: +    std::cout << "[DEBUG] Plot: " << plotName << ", Curve: " << curveName << std::endl;
[3.498s] 3: +    curves[curveName2ID[curveName]]->printXY(xRough, pointNum);
[3.498s] 3: +  }
[3.498s] 3: @@ -66 +71 @@
[3.498s] 3: -class PyPlot{
[3.498s] 3: +class PyPlot {
[3.498s] 3: @@ -68,27 +73,27 @@
[3.498s] 3: -    PyPlot();
[3.498s] 3: -    ~PyPlot();
[3.498s] 3: -    void addPlot(std::string plotName, int curveCount, std::vector<std::string> labelVec);
[3.499s] 3: -    void addPlot(std::string plotName, int curveCount);
[3.499s] 3: -    void showPlot(std::string plotName);
[3.499s] 3: -    void showPlot(std::vector<std::string> plotNameVec);
[3.499s] 3: -    void showPlotAll();
[3.499s] 3: -
[3.499s] 3: -    void printXY(std::string plotName, std::string curveName, double xRough, int pointNum = 1);
[3.499s] 3: -
[3.499s] 3: -    void addFrame(std::string plotName, double value);
[3.499s] 3: -    void addFrame(std::string plotName, double x, double value);
[3.499s] 3: -
[3.499s] 3: -    template <typename T>
[3.499s] 3: -    void addFrame(std::string plotName, T* valueArray);
[3.499s] 3: -    template <typename T>
[3.499s] 3: -    void addFrame(std::string plotName, double x, T* valueArray);
[3.499s] 3: -
[3.499s] 3: -    template <typename T>
[3.499s] 3: -    void addFrame(std::string plotName, const Eigen::MatrixBase<T> &vec);
[3.499s] 3: -    template <typename T>
[3.499s] 3: -    void addFrame(std::string plotName, double x, const Eigen::MatrixBase<T> &vec);
[3.499s] 3: -
[3.499s] 3: -    template <typename T>
[3.499s] 3: -    void addFrame(std::string plotName, const std::vector<T> &vec);
[3.500s] 3: -    template <typename T>
[3.500s] 3: -    void addFrame(std::string plotName, double x, const std::vector<T> &vec);
[3.500s] 3: +  PyPlot();
[3.500s] 3: +  ~PyPlot();
[3.500s] 3: +  void addPlot(std::string plotName, int curveCount, std::vector < std::string > labelVec);
[3.500s] 3: +  void addPlot(std::string plotName, int curveCount);
[3.500s] 3: +  void showPlot(std::string plotName);
[3.500s] 3: +  void showPlot(std::vector < std::string > plotNameVec);
[3.500s] 3: +  void showPlotAll();
[3.500s] 3: +
[3.503s] 3: +  void printXY(std::string plotName, std::string curveName, double xRough, int pointNum = 1);
[3.503s] 3: +
[3.503s] 3: +  void addFrame(std::string plotName, double value);
[3.503s] 3: +  void addFrame(std::string plotName, double x, double value);
[3.504s] 3: +
[3.504s] 3: +  template < typename T >
[3.504s] 3: +  void addFrame(std::string plotName, T * valueArray);
[3.504s] 3: +  template < typename T >
[3.504s] 3: +  void addFrame(std::string plotName, double x, T * valueArray);
[3.504s] 3: +
[3.504s] 3: +  template < typename T >
[3.504s] 3: +  void addFrame(std::string plotName, const Eigen::MatrixBase < T > & vec);
[3.504s] 3: +  template < typename T >
[3.505s] 3: +  void addFrame(std::string plotName, double x, const Eigen::MatrixBase < T > & vec);
[3.505s] 3: +
[3.505s] 3: +  template < typename T >
[3.505s] 3: +  void addFrame(std::string plotName, const std::vector < T > & vec);
[3.505s] 3: +  template < typename T >
[3.505s] 3: +  void addFrame(std::string plotName, double x, const std::vector < T > & vec);
[3.505s] 3: @@ -97,8 +102,8 @@
[3.505s] 3: -    void _checkStart();
[3.505s] 3: -    int _plotCount = 0;
[3.505s] 3: -    std::map<std::string, int> _plotName2ID;
[3.505s] 3: -    std::vector< Plot* > _plots;
[3.505s] 3: -    long long _pointNum;
[3.505s] 3: -    Plot* _getPlotPtr(std::string plotName);
[3.506s] 3: -    bool start;
[3.506s] 3: -    long long startT;
[3.506s] 3: +  void _checkStart();
[3.506s] 3: +  int _plotCount = 0;
[3.506s] 3: +  std::map < std::string, int > _plotName2ID;
[3.506s] 3: +  std::vector < Plot * > _plots;
[3.506s] 3: +  long long _pointNum;
[3.506s] 3: +  Plot * _getPlotPtr(std::string plotName);
[3.506s] 3: +  bool start;
[3.506s] 3: +  long long startT;
[3.506s] 3: @@ -107,43 +112,68 @@
[3.506s] 3: -inline PyPlot::PyPlot(){
[3.506s] 3: -    start = false;
[3.506s] 3: -}
[3.506s] 3: -
[3.506s] 3: -inline PyPlot::~PyPlot(){
[3.507s] 3: -    for(int i(0); i < _plotCount; ++i){
[3.507s] 3: -        delete _plots[i];
[3.507s] 3: -    }
[3.507s] 3: -}
[3.507s] 3: -
[3.507s] 3: -inline void PyPlot::_checkStart(){
[3.508s] 3: -    if(!start){
[3.508s] 3: -        start = true;
[3.508s] 3: -        startT = getSystemTime();
[3.508s] 3: -    }
[3.508s] 3: -}
[3.508s] 3: -
[3.508s] 3: -inline void PyPlot::printXY(std::string plotName, std::string curveName, double xRough, int pointNum){
[3.508s] 3: -    _plots[_plotName2ID[plotName]]->printXY(curveName, xRough, pointNum);
[3.508s] 3: -}
[3.508s] 3: -
[3.508s] 3: -inline void PyPlot::addPlot(std::string plotName, int curveCount, std::vector<std::string> labelVec){
[3.508s] 3: -    if(_plotName2ID.count(plotName) == 0){
[3.508s] 3: -        _plotName2ID.insert(std::pair<std::string, int>(plotName, _plotCount));
[3.509s] 3: -        ++_plotCount;
[3.509s] 3: -
[3.509s] 3: -        _plots.push_back( new Plot(plotName, curveCount, labelVec) );
[3.509s] 3: -    }else{
[3.509s] 3: -        std::cout << "[ERROR] Already has same Plot: " << plotName << std::endl;
[3.509s] 3: -        exit(-1);
[3.509s] 3: -    }
[3.509s] 3: -}
[3.509s] 3: -
[3.510s] 3: -inline void PyPlot::addPlot(std::string plotName, int curveCount){
[3.510s] 3: -    std::vector<std::string> label;
[3.510s] 3: -    for(int i(0); i < curveCount; ++i){
[3.515s] 3: -        label.push_back(std::to_string(i+1));
[3.515s] 3: -    }
[3.515s] 3: -    addPlot(plotName, curveCount, label);
[3.515s] 3: -}
[3.515s] 3: -
[3.515s] 3: -inline void PyPlot::showPlot(std::string plotName){
[3.515s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.515s] 3: +inline PyPlot::PyPlot()
[3.515s] 3: +{
[3.515s] 3: +  start = false;
[3.515s] 3: +}
[3.516s] 3: +
[3.516s] 3: +inline PyPlot::~PyPlot()
[3.516s] 3: +{
[3.516s] 3: +  for (int i(0); i < _plotCount; ++i) {
[3.516s] 3: +    delete _plots[i];
[3.516s] 3: +  }
[3.516s] 3: +}
[3.516s] 3: +
[3.517s] 3: +inline void PyPlot::_checkStart()
[3.517s] 3: +{
[3.517s] 3: +  if (!start) {
[3.517s] 3: +    start = true;
[3.517s] 3: +    startT = getSystemTime();
[3.517s] 3: +  }
[3.518s] 3: +}
[3.518s] 3: +
[3.518s] 3: +inline void PyPlot::printXY(
[3.518s] 3: +  std::string plotName, std::string curveName, double xRough,
[3.518s] 3: +  int pointNum)
[3.518s] 3: +{
[3.518s] 3: +  _plots[_plotName2ID[plotName]]->printXY(curveName, xRough, pointNum);
[3.518s] 3: +}
[3.518s] 3: +
[3.518s] 3: +inline void PyPlot::addPlot(
[3.519s] 3: +  std::string plotName, int curveCount,
[3.519s] 3: +  std::vector < std::string > labelVec)
[3.519s] 3: +{
[3.519s] 3: +  if (_plotName2ID.count(plotName) == 0) {
[3.519s] 3: +    _plotName2ID.insert(std::pair < std::string, int > (plotName, _plotCount));
[3.519s] 3: +    ++_plotCount;
[3.519s] 3: +
[3.519s] 3: +    _plots.push_back(new Plot(plotName, curveCount, labelVec) );
[3.519s] 3: +  } else {
[3.519s] 3: +    std::cout << "[ERROR] Already has same Plot: " << plotName << std::endl;
[3.519s] 3: +    exit(-1);
[3.520s] 3: +  }
[3.520s] 3: +}
[3.520s] 3: +
[3.520s] 3: +inline void PyPlot::addPlot(std::string plotName, int curveCount)
[3.520s] 3: +{
[3.520s] 3: +  std::vector < std::string > label;
[3.520s] 3: +  for (int i(0); i < curveCount; ++i) {
[3.520s] 3: +    label.push_back(std::to_string(i + 1));
[3.520s] 3: +  }
[3.521s] 3: +  addPlot(plotName, curveCount, label);
[3.521s] 3: +}
[3.521s] 3: +
[3.521s] 3: +inline void PyPlot::showPlot(std::string plotName)
[3.521s] 3: +{
[3.521s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.521s] 3: +  plt::figure();
[3.521s] 3: +  plt::title(plot->plotName);
[3.521s] 3: +  for (int i(0); i < plot->curveCount; ++i) {
[3.521s] 3: +    plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);
[3.521s] 3: +  }
[3.521s] 3: +  plt::legend();
[3.521s] 3: +  plt::show();
[3.521s] 3: +}
[3.522s] 3: +
[3.522s] 3: +inline void PyPlot::showPlot(std::vector < std::string > plotNameVec)
[3.522s] 3: +{
[3.522s] 3: +  for (std::vector < std::string > ::iterator itName = plotNameVec.begin();
[3.522s] 3: +    itName != plotNameVec.end(); ++itName)
[3.522s] 3: +  {
[3.522s] 3: @@ -150,0 +181 @@
[3.522s] 3: +    Plot * plot = _plots[_plotName2ID[*itName]];
[3.522s] 3: @@ -152,2 +183,2 @@
[3.522s] 3: -    for(int i(0); i < plot->curveCount; ++i){
[3.522s] 3: -        plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);
[3.522s] 3: +    for (int i(0); i < plot->curveCount; ++i) {
[3.522s] 3: +      plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);
[3.522s] 3: @@ -156,103 +187,101 @@
[3.523s] 3: -    plt::show();
[3.523s] 3: -}
[3.523s] 3: -
[3.523s] 3: -inline void PyPlot::showPlot(std::vector<std::string> plotNameVec){
[3.523s] 3: -    for(std::vector<std::string>::iterator itName = plotNameVec.begin(); itName != plotNameVec.end(); ++itName){
[3.523s] 3: -        plt::figure();
[3.523s] 3: -        Plot* plot = _plots[_plotName2ID[*itName]];
[3.523s] 3: -        plt::title(plot->plotName);
[3.523s] 3: -        for(int i(0); i < plot->curveCount; ++i){
[3.523s] 3: -            plt::named_plot(plot->labels[i], plot->curves[i]->x, plot->curves[i]->y);
[3.523s] 3: -        }
[3.523s] 3: -        plt::legend();
[3.523s] 3: -    }
[3.523s] 3: -    plt::show();
[3.523s] 3: -}
[3.523s] 3: -
[3.523s] 3: -inline void PyPlot::showPlotAll(){
[3.523s] 3: -    for(int i(0); i < _plotCount; ++i){
[3.523s] 3: -        plt::figure();
[3.523s] 3: -        Plot* plot = _plots[i];
[3.523s] 3: -        plt::title(plot->plotName);
[3.523s] 3: -        for(int j(0); j < plot->curveCount; ++j){
[3.524s] 3: -            plt::named_plot(plot->labels[j], plot->curves[j]->x, plot->curves[j]->y);
[3.524s] 3: -        }
[3.524s] 3: -        plt::legend();
[3.524s] 3: -    }
[3.524s] 3: -    plt::show();
[3.524s] 3: -    exit(0);
[3.524s] 3: -}
[3.524s] 3: -
[3.524s] 3: -inline Plot* PyPlot::_getPlotPtr(std::string plotName){
[3.524s] 3: -    if(_plotName2ID.count(plotName) == 0){
[3.524s] 3: -        std::cout << "[ERROR] Plot " << plotName << " does not exist" << std::endl;
[3.524s] 3: -        exit(-1);
[3.524s] 3: -    }else{
[3.524s] 3: -        return _plots[_plotName2ID[plotName]];
[3.524s] 3: -    }
[3.524s] 3: -}
[3.524s] 3: -
[3.524s] 3: -inline void PyPlot::addFrame(std::string plotName, double value){
[3.524s] 3: -    _checkStart();
[3.524s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.524s] 3: -    addFrame(plotName, plot->getX(startT), value);
[3.524s] 3: -}
[3.525s] 3: -
[3.525s] 3: -inline void PyPlot::addFrame(std::string plotName, double x, double value){
[3.525s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.525s] 3: -    
[3.525s] 3: -    plot->curves[0]->x.push_back(x);
[3.525s] 3: -    plot->curves[0]->y.push_back(value);
[3.525s] 3: -}
[3.525s] 3: -
[3.525s] 3: -template <typename T>
[3.525s] 3: -inline void PyPlot::addFrame(std::string plotName, T* valueArray){
[3.525s] 3: -    _checkStart();
[3.525s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.525s] 3: -    addFrame(plotName, plot->getX(startT), valueArray);
[3.525s] 3: -}
[3.525s] 3: -
[3.525s] 3: -template <typename T>
[3.525s] 3: -inline void PyPlot::addFrame(std::string plotName, double x, T* valueArray){
[3.525s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.525s] 3: -
[3.525s] 3: -    for(int i(0); i < plot->curveCount; ++i){
[3.525s] 3: -        plot->curves[i]->x.push_back(x);
[3.525s] 3: -        plot->curves[i]->y.push_back(valueArray[i]);
[3.525s] 3: -    }
[3.526s] 3: -}
[3.526s] 3: -
[3.526s] 3: -template <typename T>
[3.526s] 3: -inline void PyPlot::addFrame(std::string plotName, const Eigen::MatrixBase<T> &vec){
[3.526s] 3: -    _checkStart();
[3.526s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.526s] 3: -    addFrame(plotName, plot->getX(startT), vec);
[3.526s] 3: -}
[3.526s] 3: -
[3.526s] 3: -template <typename T>
[3.526s] 3: -inline void PyPlot::addFrame(std::string plotName, double x, const Eigen::MatrixBase<T> &vec){
[3.526s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.526s] 3: -
[3.526s] 3: -    for(int i(0); i < plot->curveCount; ++i){
[3.526s] 3: -        plot->curves[i]->x.push_back(x);
[3.526s] 3: -        plot->curves[i]->y.push_back(vec(i));
[3.526s] 3: -    }
[3.526s] 3: -}
[3.526s] 3: -
[3.526s] 3: -template <typename T>
[3.526s] 3: -inline void PyPlot::addFrame(std::string plotName, const std::vector<T> &vec){
[3.526s] 3: -    _checkStart();
[3.527s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.527s] 3: -    addFrame(plotName, plot->getX(startT), vec);
[3.527s] 3: -}
[3.527s] 3: -
[3.527s] 3: -template <typename T>
[3.527s] 3: -inline void PyPlot::addFrame(std::string plotName, double x, const std::vector<T> &vec){
[3.527s] 3: -    Plot* plot = _getPlotPtr(plotName);
[3.527s] 3: -
[3.527s] 3: -    for(int i(0); i < plot->curveCount; ++i){
[3.527s] 3: -        plot->curves[i]->x.push_back(x);
[3.527s] 3: -        plot->curves[i]->y.push_back(vec[i]);
[3.527s] 3: -    }
[3.527s] 3: -}
[3.527s] 3: -#endif // PYPLOT_H
[3.527s] 3: +  }
[3.527s] 3: +  plt::show();
[3.527s] 3: +}
[3.527s] 3: +
[3.527s] 3: +inline void PyPlot::showPlotAll()
[3.527s] 3: +{
[3.527s] 3: +  for (int i(0); i < _plotCount; ++i) {
[3.527s] 3: +    plt::figure();
[3.527s] 3: +    Plot * plot = _plots[i];
[3.527s] 3: +    plt::title(plot->plotName);
[3.528s] 3: +    for (int j(0); j < plot->curveCount; ++j) {
[3.528s] 3: +      plt::named_plot(plot->labels[j], plot->curves[j]->x, plot->curves[j]->y);
[3.528s] 3: +    }
[3.528s] 3: +    plt::legend();
[3.528s] 3: +  }
[3.528s] 3: +  plt::show();
[3.528s] 3: +  exit(0);
[3.528s] 3: +}
[3.528s] 3: +
[3.528s] 3: +inline Plot * PyPlot::_getPlotPtr(std::string plotName)
[3.528s] 3: +{
[3.528s] 3: +  if (_plotName2ID.count(plotName) == 0) {
[3.528s] 3: +    std::cout << "[ERROR] Plot " << plotName << " does not exist" << std::endl;
[3.528s] 3: +    exit(-1);
[3.528s] 3: +  } else {
[3.528s] 3: +    return _plots[_plotName2ID[plotName]];
[3.528s] 3: +  }
[3.528s] 3: +}
[3.528s] 3: +
[3.528s] 3: +inline void PyPlot::addFrame(std::string plotName, double value)
[3.528s] 3: +{
[3.528s] 3: +  _checkStart();
[3.528s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.529s] 3: +  addFrame(plotName, plot->getX(startT), value);
[3.529s] 3: +}
[3.529s] 3: +
[3.529s] 3: +inline void PyPlot::addFrame(std::string plotName, double x, double value)
[3.529s] 3: +{
[3.529s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.529s] 3: +
[3.529s] 3: +  plot->curves[0]->x.push_back(x);
[3.529s] 3: +  plot->curves[0]->y.push_back(value);
[3.529s] 3: +}
[3.529s] 3: +
[3.529s] 3: +template < typename T >
[3.529s] 3: +inline void PyPlot::addFrame(std::string plotName, T * valueArray)
[3.529s] 3: +{
[3.529s] 3: +  _checkStart();
[3.529s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.529s] 3: +  addFrame(plotName, plot->getX(startT), valueArray);
[3.529s] 3: +}
[3.529s] 3: +
[3.529s] 3: +template < typename T >
[3.529s] 3: +inline void PyPlot::addFrame(std::string plotName, double x, T * valueArray)
[3.529s] 3: +{
[3.529s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.530s] 3: +
[3.530s] 3: +  for (int i(0); i < plot->curveCount; ++i) {
[3.530s] 3: +    plot->curves[i]->x.push_back(x);
[3.530s] 3: +    plot->curves[i]->y.push_back(valueArray[i]);
[3.530s] 3: +  }
[3.530s] 3: +}
[3.530s] 3: +
[3.530s] 3: +template < typename T >
[3.530s] 3: +inline void PyPlot::addFrame(std::string plotName, const Eigen::MatrixBase < T > & vec)
[3.530s] 3: +{
[3.530s] 3: +  _checkStart();
[3.530s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.530s] 3: +  addFrame(plotName, plot->getX(startT), vec);
[3.530s] 3: +}
[3.530s] 3: +
[3.530s] 3: +template < typename T >
[3.530s] 3: +inline void PyPlot::addFrame(std::string plotName, double x, const Eigen::MatrixBase < T > & vec)
[3.530s] 3: +{
[3.530s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.530s] 3: +
[3.530s] 3: +  for (int i(0); i < plot->curveCount; ++i) {
[3.530s] 3: +    plot->curves[i]->x.push_back(x);
[3.530s] 3: +    plot->curves[i]->y.push_back(vec(i));
[3.531s] 3: +  }
[3.531s] 3: +}
[3.531s] 3: +
[3.531s] 3: +template < typename T >
[3.531s] 3: +inline void PyPlot::addFrame(std::string plotName, const std::vector < T > & vec)
[3.531s] 3: +{
[3.531s] 3: +  _checkStart();
[3.531s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.531s] 3: +  addFrame(plotName, plot->getX(startT), vec);
[3.531s] 3: +}
[3.531s] 3: +
[3.531s] 3: +template < typename T >
[3.531s] 3: +inline void PyPlot::addFrame(std::string plotName, double x, const std::vector < T > & vec)
[3.531s] 3: +{
[3.531s] 3: +  Plot * plot = _getPlotPtr(plotName);
[3.531s] 3: +
[3.531s] 3: +  for (int i(0); i < plot->curveCount; ++i) {
[3.532s] 3: +    plot->curves[i]->x.push_back(x);
[3.532s] 3: +    plot->curves[i]->y.push_back(vec[i]);
[3.532s] 3: +  }
[3.532s] 3: +}
[3.532s] 3: +#endif // PYPLOT_H
[3.532s] 3: 
[3.532s] 3: Code style divergence in file 'include/common/enumClass.h':
[3.532s] 3: 
[3.532s] 3: --- include/common/enumClass.h
[3.532s] 3: +++ include/common/enumClass.h.uncrustify
[3.532s] 3: @@ -10,3 +10,4 @@
[3.532s] 3: -enum class CtrlPlatform{
[3.533s] 3: -    GAZEBO,
[3.533s] 3: -    REALROBOT,
[3.533s] 3: +enum class CtrlPlatform
[3.533s] 3: +{
[3.533s] 3: +  GAZEBO,
[3.533s] 3: +  REALROBOT,
[3.533s] 3: @@ -15,3 +16,4 @@
[3.533s] 3: -enum class RobotType{
[3.533s] 3: -    A1,
[3.533s] 3: -    Go1
[3.533s] 3: +enum class RobotType
[3.533s] 3: +{
[3.533s] 3: +  A1,
[3.534s] 3: +  Go1
[3.534s] 3: @@ -20,7 +22,8 @@
[3.534s] 3: -enum class UserCommand{
[3.534s] 3: -    // EXIT,
[3.534s] 3: -    NONE,
[3.534s] 3: -    START,      // trotting
[3.534s] 3: -    L2_A,       // fixedStand
[3.534s] 3: -    L2_B,       // passive
[3.534s] 3: -    L2_X,       // freeStand
[3.534s] 3: +enum class UserCommand
[3.534s] 3: +{
[3.534s] 3: +  // EXIT,
[3.534s] 3: +  NONE,
[3.534s] 3: +  START,        // trotting
[3.535s] 3: +  L2_A,         // fixedStand
[3.535s] 3: +  L2_B,         // passive
[3.535s] 3: +  L2_X,         // freeStand
[3.535s] 3: @@ -28 +31 @@
[3.535s] 3: -    L2_Y,       // move_base
[3.535s] 3: +  L2_Y,         // move_base
[3.535s] 3: @@ -31 +34 @@
[3.535s] 3: -    L2_Y,       // move_base
[3.535s] 3: +  L2_Y,         // move_base
[3.535s] 3: @@ -33,3 +36,3 @@
[3.535s] 3: -    L1_X,       // balanceTest
[3.535s] 3: -    L1_A,       // swingTest
[3.535s] 3: -    L1_Y        // stepTest
[3.535s] 3: +  L1_X,         // balanceTest
[3.535s] 3: +  L1_A,         // swingTest
[3.535s] 3: +  L1_Y          // stepTest
[3.536s] 3: @@ -38,4 +41,5 @@
[3.536s] 3: -enum class FrameType{
[3.536s] 3: -    BODY,
[3.536s] 3: -    HIP,
[3.536s] 3: -    GLOBAL
[3.536s] 3: +enum class FrameType
[3.536s] 3: +{
[3.536s] 3: +  BODY,
[3.536s] 3: +  HIP,
[3.536s] 3: +  GLOBAL
[3.536s] 3: @@ -44,4 +48,5 @@
[3.536s] 3: -enum class WaveStatus{
[3.537s] 3: -    STANCE_ALL,
[3.537s] 3: -    SWING_ALL,
[3.537s] 3: -    WAVE_ALL
[3.537s] 3: +enum class WaveStatus
[3.537s] 3: +{
[3.537s] 3: +  STANCE_ALL,
[3.537s] 3: +  SWING_ALL,
[3.538s] 3: +  WAVE_ALL
[3.538s] 3: @@ -50,3 +55,4 @@
[3.538s] 3: -enum class FSMMode{
[3.538s] 3: -    NORMAL,
[3.538s] 3: -    CHANGE
[3.538s] 3: +enum class FSMMode
[3.538s] 3: +{
[3.539s] 3: +  NORMAL,
[3.539s] 3: +  CHANGE
[3.539s] 3: @@ -55,7 +61,8 @@
[3.539s] 3: -enum class FSMStateName{
[3.539s] 3: -    // EXIT,
[3.539s] 3: -    INVALID,
[3.539s] 3: -    PASSIVE,
[3.539s] 3: -    FIXEDSTAND,
[3.539s] 3: -    FREESTAND,
[3.539s] 3: -    TROTTING,
[3.539s] 3: +enum class FSMStateName
[3.539s] 3: +{
[3.540s] 3: +  // EXIT,
[3.540s] 3: +  INVALID,
[3.540s] 3: +  PASSIVE,
[3.542s] 3: +  FIXEDSTAND,
[3.542s] 3: +  FREESTAND,
[3.542s] 3: +  TROTTING,
[3.542s] 3: @@ -63 +70 @@
[3.542s] 3: -    MOVE_BASE,       // move_base
[3.542s] 3: +  MOVE_BASE,         // move_base
[3.542s] 3: @@ -66 +73 @@
[3.542s] 3: -    MOVE_BASE,       // move_base
[3.542s] 3: +  MOVE_BASE,         // move_base
[3.542s] 3: @@ -68,3 +75,3 @@
[3.542s] 3: -    BALANCETEST,
[3.542s] 3: -    SWINGTEST,
[3.542s] 3: -    STEPTEST
[3.542s] 3: +  BALANCETEST,
[3.542s] 3: +  SWINGTEST,
[3.542s] 3: +  STEPTEST
[3.542s] 3: @@ -73 +80 @@
[3.542s] 3: -#endif  // ENUMCLASS_H
[3.542s] 3: +#endif  // ENUMCLASS_H
[3.542s] 3: 
[3.543s] 3: Code style divergence in file 'include/common/mathTools.h':
[3.543s] 3: 
[3.543s] 3: --- include/common/mathTools.h
[3.543s] 3: +++ include/common/mathTools.h.uncrustify
[3.543s] 3: @@ -11,19 +11,290 @@
[3.543s] 3: -template<typename T1, typename T2>
[3.543s] 3: -inline T1 max(const T1 a, const T2 b){
[3.543s] 3: -	return (a > b ? a : b);
[3.543s] 3: -}
[3.543s] 3: -
[3.543s] 3: -template<typename T1, typename T2>
[3.543s] 3: -inline T1 min(const T1 a, const T2 b){
[3.543s] 3: -	return (a < b ? a : b);
[3.543s] 3: -}
[3.543s] 3: -
[3.543s] 3: -template<typename T>
[3.543s] 3: -inline T saturation(const T a, Vec2 limits){
[3.543s] 3: -    T lowLim, highLim;
[3.543s] 3: -    if(limits(0) > limits(1)){
[3.543s] 3: -        lowLim = limits(1);
[3.543s] 3: -        highLim= limits(0);
[3.544s] 3: -    }else{
[3.544s] 3: -        lowLim = limits(0);
[3.544s] 3: -        highLim= limits(1);
[3.544s] 3: +template < typename T1, typename T2 >
[3.544s] 3: +inline T1 max(const T1 a, const T2 b)
[3.544s] 3: +{
[3.544s] 3: +  return a > b ? a : b;
[3.544s] 3: +}
[3.544s] 3: +
[3.544s] 3: +template < typename T1, typename T2 >
[3.544s] 3: +inline T1 min(const T1 a, const T2 b)
[3.544s] 3: +{
[3.544s] 3: +  return a < b ? a : b;
[3.544s] 3: +}
[3.544s] 3: +
[3.544s] 3: +template < typename T >
[3.544s] 3: +inline T saturation(const T a, Vec2 limits)
[3.544s] 3: +{
[3.544s] 3: +  T lowLim, highLim;
[3.544s] 3: +  if (limits(0) > limits(1)) {
[3.544s] 3: +    lowLim = limits(1);
[3.545s] 3: +    highLim = limits(0);
[3.545s] 3: +  } else {
[3.545s] 3: +    lowLim = limits(0);
[3.545s] 3: +    highLim = limits(1);
[3.545s] 3: +  }
[3.545s] 3: +
[3.545s] 3: +  if (a < lowLim) {
[3.545s] 3: +    return lowLim;
[3.545s] 3: +  } else if (a > highLim) {
[3.545s] 3: +    return highLim;
[3.545s] 3: +  } else {
[3.545s] 3: +    return a;
[3.545s] 3: +  }
[3.545s] 3: +}
[3.545s] 3: +
[3.545s] 3: +template < typename T0, typename T1 >
[3.545s] 3: +inline T0 killZeroOffset(T0 a, const T1 limit)
[3.545s] 3: +{
[3.545s] 3: +  if ((a > -limit) && (a < limit)) {
[3.545s] 3: +    a = 0;
[3.545s] 3: +  }
[3.546s] 3: +  return a;
[3.546s] 3: +}
[3.546s] 3: +
[3.546s] 3: +template < typename T0, typename T1, typename T2 >
[3.546s] 3: +inline T1 invNormalize(
[3.546s] 3: +  const T0 value, const T1 min, const T2 max, const double minLim = -1,
[3.546s] 3: +  const double maxLim = 1)
[3.546s] 3: +{
[3.546s] 3: +  return (value - minLim) * (max - min) / (maxLim - minLim) + min;
[3.546s] 3: +}
[3.546s] 3: +
[3.546s] 3: +template < typename T >
[3.546s] 3: +inline T windowFunc(const T x, const T windowRatio, const T xRange = 1.0, const T yRange = 1.0)
[3.546s] 3: +{
[3.546s] 3: +  if ((x < 0) || (x > xRange)) {
[3.546s] 3: +    std::cout << "[ERROR][windowFunc] The x=" << x << ", which should between [0, xRange]" <<
[3.547s] 3: +      std::endl;
[3.547s] 3: +  }
[3.547s] 3: +  if ((windowRatio <= 0) || (windowRatio >= 0.5)) {
[3.547s] 3: +    std::cout << "[ERROR][windowFunc] The windowRatio=" << windowRatio <<
[3.547s] 3: +      ", which should between [0, 0.5]" << std::endl;
[3.547s] 3: +  }
[3.547s] 3: +
[3.547s] 3: +  if (x / xRange < windowRatio) {
[3.547s] 3: +    return x * yRange / (xRange * windowRatio);
[3.547s] 3: +  } else if (x / xRange > 1 - windowRatio) {
[3.547s] 3: +    return yRange * (xRange - x) / (xRange * windowRatio);
[3.547s] 3: +  } else {
[3.547s] 3: +    return yRange;
[3.547s] 3: +  }
[3.547s] 3: +}
[3.547s] 3: +
[3.547s] 3: +template < typename T1, typename T2 >
[3.547s] 3: +inline void updateAverage(T1 & exp, T2 newValue, double n)
[3.547s] 3: +{
[3.547s] 3: +  if (exp.rows() != newValue.rows()) {
[3.547s] 3: +    std::cout << "The size of updateAverage is error" << std::endl;
[3.548s] 3: +    exit(-1);
[3.548s] 3: +  }
[3.548s] 3: +  if (fabs(n - 1) < 0.001) {
[3.548s] 3: +    exp = newValue;
[3.548s] 3: +  } else {
[3.548s] 3: +    exp = exp + (newValue - exp) / n;
[3.548s] 3: +  }
[3.548s] 3: +}
[3.548s] 3: +
[3.548s] 3: +template < typename T1, typename T2, typename T3 >
[3.548s] 3: +inline void updateCovariance(T1 & cov, T2 expPast, T3 newValue, double n)
[3.548s] 3: +{
[3.548s] 3: +  if ( (cov.rows() != cov.cols()) || (cov.rows() != expPast.rows()) ||
[3.548s] 3: +    (expPast.rows() != newValue.rows()))
[3.548s] 3: +  {
[3.548s] 3: +    std::cout << "The size of updateCovariance is error" << std::endl;
[3.548s] 3: +    exit(-1);
[3.548s] 3: +  }
[3.548s] 3: +  if (fabs(n - 1) < 0.1) {
[3.549s] 3: +    cov.setZero();
[3.549s] 3: +  } else {
[3.549s] 3: +    cov = cov * (n - 1) / n + (newValue - expPast) * (newValue - expPast).transpose() * (n - 1) /
[3.549s] 3: +      (n * n);
[3.549s] 3: +  }
[3.549s] 3: +}
[3.549s] 3: +
[3.549s] 3: +template < typename T1, typename T2, typename T3 >
[3.549s] 3: +inline void updateAvgCov(T1 & cov, T2 & exp, T3 newValue, double n)
[3.549s] 3: +{
[3.549s] 3: +  // The order matters!!! covariance first!!!
[3.549s] 3: +  updateCovariance(cov, exp, newValue, n);
[3.549s] 3: +  updateAverage(exp, newValue, n);
[3.549s] 3: +}
[3.549s] 3: +
[3.549s] 3: +inline RotMat rotx(const double & theta)
[3.549s] 3: +{
[3.549s] 3: +  double s = std::sin(theta);
[3.549s] 3: +  double c = std::cos(theta);
[3.549s] 3: +
[3.549s] 3: +  RotMat R;
[3.550s] 3: +  R << 1, 0, 0, 0, c, -s, 0, s, c;
[3.550s] 3: +  return R;
[3.550s] 3: +}
[3.550s] 3: +
[3.550s] 3: +inline RotMat roty(const double & theta)
[3.550s] 3: +{
[3.550s] 3: +  double s = std::sin(theta);
[3.550s] 3: +  double c = std::cos(theta);
[3.550s] 3: +
[3.550s] 3: +  RotMat R;
[3.550s] 3: +  R << c, 0, s, 0, 1, 0, -s, 0, c;
[3.550s] 3: +  return R;
[3.550s] 3: +}
[3.550s] 3: +
[3.550s] 3: +inline RotMat rotz(const double & theta)
[3.550s] 3: +{
[3.550s] 3: +  double s = std::sin(theta);
[3.550s] 3: +  double c = std::cos(theta);
[3.550s] 3: +
[3.550s] 3: +  RotMat R;
[3.551s] 3: +  R << c, -s, 0, s, c, 0, 0, 0, 1;
[3.551s] 3: +  return R;
[3.551s] 3: +}
[3.551s] 3: +
[3.551s] 3: +inline Mat2 skew(const double & w)
[3.551s] 3: +{
[3.551s] 3: +  Mat2 mat; mat.setZero();
[3.551s] 3: +  mat(0, 1) = -w;
[3.551s] 3: +  mat(1, 0) = w;
[3.551s] 3: +  return mat;
[3.551s] 3: +}
[3.551s] 3: +
[3.551s] 3: +inline Mat3 skew(const Vec3 & v)
[3.553s] 3: +{
[3.553s] 3: +  Mat3 m;
[3.555s] 3: +  m << 0, -v(2), v(1),
[3.557s] 3: +    v(2), 0, -v(0),
[3.557s] 3: +    -v(1), v(0), 0;
[3.557s] 3: +  return m;
[3.557s] 3: +}
[3.558s] 3: +
[3.558s] 3: +inline RotMat rpyToRotMat(const double & row, const double & pitch, const double & yaw)
[3.558s] 3: +{
[3.558s] 3: +  RotMat m = rotz(yaw) * roty(pitch) * rotx(row);
[3.559s] 3: +  return m;
[3.560s] 3: +}
[3.560s] 3: +
[3.560s] 3: +inline Vec3 rotMatToRPY(const Mat3 & R)
[3.560s] 3: +{
[3.560s] 3: +  Vec3 rpy;
[3.560s] 3: +  rpy(0) = atan2(R(2, 1), R(2, 2));
[3.560s] 3: +  rpy(1) = asin(-R(2, 0));
[3.560s] 3: +  rpy(2) = atan2(R(1, 0), R(0, 0));
[3.560s] 3: +  return rpy;
[3.560s] 3: +}
[3.560s] 3: +
[3.560s] 3: +inline RotMat quatToRotMat(const Quat & q)
[3.560s] 3: +{
[3.560s] 3: +  double e0 = q(0);
[3.560s] 3: +  double e1 = q(1);
[3.561s] 3: +  double e2 = q(2);
[3.561s] 3: +  double e3 = q(3);
[3.561s] 3: +
[3.561s] 3: +  RotMat R;
[3.561s] 3: +  R << 1 - 2 * (e2 * e2 + e3 * e3), 2 * (e1 * e2 - e0 * e3),
[3.561s] 3: +    2 * (e1 * e3 + e0 * e2), 2 * (e1 * e2 + e0 * e3),
[3.561s] 3: +    1 - 2 * (e1 * e1 + e3 * e3), 2 * (e2 * e3 - e0 * e1),
[3.561s] 3: +    2 * (e1 * e3 - e0 * e2), 2 * (e2 * e3 + e0 * e1),
[3.561s] 3: +    1 - 2 * (e1 * e1 + e2 * e2);
[3.564s] 3: +  return R;
[3.564s] 3: +}
[3.564s] 3: +
[3.564s] 3: +inline Vec3 rotMatToExp(const RotMat & rm)
[3.564s] 3: +{
[3.564s] 3: +  double cosValue = rm.trace() / 2.0 - 1 / 2.0;
[3.564s] 3: +  if (cosValue > 1.0f) {
[3.564s] 3: +    cosValue = 1.0f;
[3.564s] 3: +  } else if (cosValue < -1.0f) {
[3.564s] 3: +    cosValue = -1.0f;
[3.565s] 3: +  }
[3.565s] 3: +
[3.565s] 3: +  double angle = acos(cosValue);
[3.565s] 3: +  Vec3 exp;
[3.565s] 3: +  if (fabs(angle) < 1e-5) {
[3.565s] 3: +    exp = Vec3(0, 0, 0);
[3.565s] 3: +  } else if (fabs(angle - M_PI) < 1e-5) {
[3.565s] 3: +    exp = angle * Vec3(rm(0, 0) + 1, rm(0, 1), rm(0, 2)) / sqrt(2 * (1 + rm(0, 0)));
[3.565s] 3: +  } else {
[3.565s] 3: +    exp = angle / (2.0f * sin(angle)) * Vec3(
[3.565s] 3: +      rm(2, 1) - rm(1, 2), rm(0, 2) - rm(2, 0), rm(1, 0) - rm(
[3.565s] 3: +        0, 1));
[3.565s] 3: +  }
[3.565s] 3: +  return exp;
[3.565s] 3: +}
[3.565s] 3: +
[3.565s] 3: +inline HomoMat homoMatrix(Vec3 p, RotMat m)
[3.565s] 3: +{
[3.565s] 3: +  HomoMat homoM;
[3.565s] 3: +  homoM.setZero();
[3.565s] 3: +  homoM.topLeftCorner(3, 3) = m;
[3.565s] 3: +  homoM.topRightCorner(3, 1) = p;
[3.566s] 3: +  homoM(3, 3) = 1;
[3.566s] 3: +  return homoM;
[3.566s] 3: +}
[3.566s] 3: +
[3.566s] 3: +inline HomoMat homoMatrix(Vec3 p, Quat q)
[3.566s] 3: +{
[3.566s] 3: +  HomoMat homoM;
[3.566s] 3: +  homoM.setZero();
[3.566s] 3: +  homoM.topLeftCorner(3, 3) = quatToRotMat(q);
[3.566s] 3: +  homoM.topRightCorner(3, 1) = p;
[3.566s] 3: +  homoM(3, 3) = 1;
[3.566s] 3: +  return homoM;
[3.566s] 3: +}
[3.566s] 3: +
[3.566s] 3: +inline HomoMat homoMatrixInverse(HomoMat homoM)
[3.566s] 3: +{
[3.566s] 3: +  HomoMat homoInv;
[3.566s] 3: +  homoInv.setZero();
[3.566s] 3: +  homoInv.topLeftCorner(3, 3) = homoM.topLeftCorner(3, 3).transpose();
[3.566s] 3: +  homoInv.topRightCorner(
[3.566s] 3: +    3,
[3.566s] 3: +    1) = -homoM.topLeftCorner(3, 3).transpose() * homoM.topRightCorner(3, 1);
[3.566s] 3: +  homoInv(3, 3) = 1;
[3.566s] 3: +  return homoInv;
[3.567s] 3: +}
[3.567s] 3: +
[3.567s] 3: +//  add 1 at the end of Vec3
[3.567s] 3: +inline Vec4 homoVec(Vec3 v3)
[3.567s] 3: +{
[3.567s] 3: +  Vec4 v4;
[3.567s] 3: +  v4.block(0, 0, 3, 1) = v3;
[3.567s] 3: +  v4(3) = 1;
[3.567s] 3: +  return v4;
[3.567s] 3: +}
[3.567s] 3: +
[3.567s] 3: +//  remove 1 at the end of Vec4
[3.567s] 3: +inline Vec3 noHomoVec(Vec4 v4)
[3.567s] 3: +{
[3.567s] 3: +  Vec3 v3;
[3.567s] 3: +  v3 = v4.block(0, 0, 3, 1);
[3.567s] 3: +  return v3;
[3.567s] 3: +}
[3.567s] 3: +
[3.567s] 3: +// Calculate average value and covariance
[3.567s] 3: +class AvgCov {
[3.567s] 3: +public:
[3.567s] 3: +  AvgCov(
[3.568s] 3: +    unsigned int size, std::string name, bool avgOnly = false, unsigned int showPeriod = 1000,
[3.568s] 3: +    unsigned int waitCount = 5000, double zoomFactor = 10000)
[3.568s] 3: +    : _size(size), _showPeriod(showPeriod), _waitCount(waitCount), _zoomFactor(zoomFactor),
[3.568s] 3: +    _valueName(name), _avgOnly(avgOnly) {
[3.568s] 3: +    _exp.resize(size);
[3.568s] 3: +    _cov.resize(size, size);
[3.568s] 3: +    _defaultWeight.resize(size, size);
[3.568s] 3: +    _defaultWeight.setIdentity();
[3.568s] 3: +    _measureCount = 0;
[3.568s] 3: +  }
[3.568s] 3: +  void measure(VecX newValue)
[3.568s] 3: +  {
[3.568s] 3: +    ++_measureCount;
[3.568s] 3: +
[3.568s] 3: +    if (_measureCount > _waitCount) {
[3.568s] 3: +      updateAvgCov(_cov, _exp, newValue, _measureCount - _waitCount);
[3.569s] 3: +      if (_measureCount % _showPeriod == 0) {
[3.569s] 3: +        std::cout << "******" << _valueName << " measured count: " << _measureCount - _waitCount <<
[3.569s] 3: +          "******" << std::endl;
[3.569s] 3: +        std::cout << _zoomFactor << " Times Average of " << _valueName << std::endl <<
[3.569s] 3: +          (_zoomFactor * _exp).transpose() << std::endl;
[3.569s] 3: +        if (!_avgOnly) {
[3.569s] 3: +          std::cout << _zoomFactor << " Times Covariance of " << _valueName << std::endl <<
[3.569s] 3: +            _zoomFactor * _cov << std::endl;
[3.569s] 3: +        }
[3.569s] 3: +      }
[3.569s] 3: @@ -31,237 +302,2 @@
[3.569s] 3: -
[3.569s] 3: -    if(a < lowLim){
[3.569s] 3: -        return lowLim;
[3.569s] 3: -    }
[3.569s] 3: -    else if(a > highLim){
[3.569s] 3: -        return highLim;
[3.569s] 3: -    }
[3.569s] 3: -    else{
[3.570s] 3: -        return a;
[3.570s] 3: -    }
[3.570s] 3: -}
[3.570s] 3: -
[3.570s] 3: -template<typename T0, typename T1>
[3.570s] 3: -inline T0 killZeroOffset(T0 a, const T1 limit){
[3.570s] 3: -    if((a > -limit) && (a < limit)){
[3.570s] 3: -        a = 0;
[3.570s] 3: -    }
[3.570s] 3: -    return a;
[3.570s] 3: -}
[3.570s] 3: -
[3.570s] 3: -template<typename T0, typename T1, typename T2>
[3.570s] 3: -inline T1 invNormalize(const T0 value, const T1 min, const T2 max, const double minLim = -1, const double maxLim = 1){
[3.570s] 3: -	return (value-minLim)*(max-min)/(maxLim-minLim) + min;
[3.570s] 3: -}
[3.570s] 3: -
[3.571s] 3: -template<typename T>
[3.571s] 3: -inline T windowFunc(const T x, const T windowRatio, const T xRange=1.0, const T yRange=1.0){
[3.571s] 3: -    if((x < 0)||(x > xRange)){
[3.571s] 3: -        std::cout << "[ERROR][windowFunc] The x=" << x << ", which should between [0, xRange]" << std::endl;
[3.571s] 3: -    }
[3.571s] 3: -    if((windowRatio <= 0)||(windowRatio >= 0.5)){
[3.571s] 3: -        std::cout << "[ERROR][windowFunc] The windowRatio=" << windowRatio << ", which should between [0, 0.5]" << std::endl;
[3.571s] 3: -    }
[3.571s] 3: -
[3.571s] 3: -    if(x/xRange < windowRatio){
[3.571s] 3: -        return x * yRange / (xRange * windowRatio);
[3.571s] 3: -    }
[3.571s] 3: -    else if(x/xRange > 1 - windowRatio){
[3.571s] 3: -        return yRange * (xRange - x)/(xRange * windowRatio);
[3.571s] 3: -    }
[3.571s] 3: -    else{
[3.571s] 3: -        return yRange;
[3.571s] 3: -    }
[3.571s] 3: -}
[3.571s] 3: -
[3.571s] 3: -template<typename T1, typename T2>
[3.572s] 3: -inline void updateAverage(T1 &exp, T2 newValue, double n){
[3.572s] 3: -    if(exp.rows()!=newValue.rows()){
[3.572s] 3: -        std::cout << "The size of updateAverage is error" << std::endl;
[3.572s] 3: -        exit(-1);
[3.572s] 3: -    }
[3.572s] 3: -    if(fabs(n - 1) < 0.001){
[3.572s] 3: -        exp = newValue;
[3.572s] 3: -    }else{
[3.572s] 3: -        exp = exp + (newValue - exp)/n;
[3.572s] 3: -    }
[3.572s] 3: -}
[3.572s] 3: -
[3.572s] 3: -template<typename T1, typename T2, typename T3>
[3.572s] 3: -inline void updateCovariance(T1 &cov, T2 expPast, T3 newValue, double n){
[3.572s] 3: -    if( (cov.rows()!=cov.cols()) || (cov.rows() != expPast.rows()) || (expPast.rows()!=newValue.rows())){
[3.572s] 3: -        std::cout << "The size of updateCovariance is error" << std::endl;
[3.572s] 3: -        exit(-1);
[3.572s] 3: -    }
[3.572s] 3: -    if(fabs(n - 1) < 0.1){
[3.572s] 3: -        cov.setZero();
[3.572s] 3: -    }else{
[3.572s] 3: -        cov = cov*(n-1)/n + (newValue-expPast)*(newValue-expPast).transpose()*(n-1)/(n*n);
[3.572s] 3: -    }
[3.573s] 3: -}
[3.573s] 3: -
[3.573s] 3: -template<typename T1, typename T2, typename T3>
[3.573s] 3: -inline void updateAvgCov(T1 &cov, T2 &exp, T3 newValue, double n){
[3.573s] 3: -    // The order matters!!! covariance first!!!
[3.573s] 3: -    updateCovariance(cov, exp, newValue, n);
[3.573s] 3: -    updateAverage(exp, newValue, n);
[3.573s] 3: -}
[3.573s] 3: -
[3.573s] 3: -inline RotMat rotx(const double &theta) {
[3.573s] 3: -    double s = std::sin(theta);
[3.573s] 3: -    double c = std::cos(theta);
[3.573s] 3: -
[3.573s] 3: -    RotMat R;
[3.573s] 3: -    R << 1, 0, 0, 0, c, -s, 0, s, c;
[3.573s] 3: -    return R;
[3.573s] 3: -}
[3.573s] 3: -
[3.573s] 3: -inline RotMat roty(const double &theta) {
[3.573s] 3: -    double s = std::sin(theta);
[3.573s] 3: -    double c = std::cos(theta);
[3.573s] 3: -
[3.573s] 3: -    RotMat R;
[3.574s] 3: -    R << c, 0, s, 0, 1, 0, -s, 0, c;
[3.574s] 3: -    return R;
[3.574s] 3: -}
[3.574s] 3: -
[3.574s] 3: -inline RotMat rotz(const double &theta) {
[3.574s] 3: -    double s = std::sin(theta);
[3.574s] 3: -    double c = std::cos(theta);
[3.574s] 3: -
[3.574s] 3: -    RotMat R;
[3.574s] 3: -    R << c, -s, 0, s, c, 0, 0, 0, 1;
[3.574s] 3: -    return R;
[3.574s] 3: -}
[3.574s] 3: -
[3.574s] 3: -inline Mat2 skew(const double& w){
[3.574s] 3: -    Mat2 mat; mat.setZero();
[3.574s] 3: -    mat(0, 1) = -w;
[3.574s] 3: -    mat(1, 0) =  w;
[3.574s] 3: -    return mat;
[3.574s] 3: -}
[3.574s] 3: -
[3.574s] 3: -inline Mat3 skew(const Vec3& v) {
[3.574s] 3: -    Mat3 m;
[3.575s] 3: -    m << 0, -v(2), v(1),
[3.575s] 3: -            v(2), 0, -v(0),
[3.575s] 3: -            -v(1), v(0), 0;
[3.575s] 3: -    return m;
[3.575s] 3: -}
[3.575s] 3: -
[3.575s] 3: -inline RotMat rpyToRotMat(const double& row, const double& pitch, const double& yaw) {
[3.575s] 3: -    RotMat m = rotz(yaw) * roty(pitch) * rotx(row);
[3.575s] 3: -    return m;
[3.575s] 3: -}
[3.575s] 3: -
[3.575s] 3: -inline Vec3 rotMatToRPY(const Mat3& R) {
[3.575s] 3: -    Vec3 rpy;
[3.575s] 3: -    rpy(0) = atan2(R(2,1),R(2,2));
[3.575s] 3: -    rpy(1) = asin(-R(2,0));
[3.575s] 3: -    rpy(2) = atan2(R(1,0),R(0,0));
[3.575s] 3: -    return rpy;
[3.575s] 3: -}
[3.575s] 3: -
[3.575s] 3: -inline RotMat quatToRotMat(const Quat& q) {
[3.575s] 3: -    double e0 = q(0);
[3.575s] 3: -    double e1 = q(1);
[3.575s] 3: -    double e2 = q(2);
[3.576s] 3: -    double e3 = q(3);
[3.576s] 3: -
[3.576s] 3: -    RotMat R;
[3.576s] 3: -    R << 1 - 2 * (e2 * e2 + e3 * e3), 2 * (e1 * e2 - e0 * e3),
[3.576s] 3: -            2 * (e1 * e3 + e0 * e2), 2 * (e1 * e2 + e0 * e3),
[3.576s] 3: -            1 - 2 * (e1 * e1 + e3 * e3), 2 * (e2 * e3 - e0 * e1),
[3.576s] 3: -            2 * (e1 * e3 - e0 * e2), 2 * (e2 * e3 + e0 * e1),
[3.576s] 3: -            1 - 2 * (e1 * e1 + e2 * e2);
[3.576s] 3: -    return R;
[3.576s] 3: -}
[3.576s] 3: -
[3.576s] 3: -inline Vec3 rotMatToExp(const RotMat& rm){
[3.576s] 3: -    double cosValue = rm.trace()/2.0-1/2.0;
[3.576s] 3: -    if(cosValue > 1.0f){
[3.576s] 3: -        cosValue = 1.0f;
[3.576s] 3: -    }else if(cosValue < -1.0f){
[3.576s] 3: -        cosValue = -1.0f;
[3.576s] 3: -    }
[3.576s] 3: -
[3.576s] 3: -    double angle = acos(cosValue);
[3.576s] 3: -    Vec3 exp;
[3.576s] 3: -    if (fabs(angle) < 1e-5){
[3.576s] 3: -        exp=Vec3(0,0,0);
[3.577s] 3: -    }
[3.577s] 3: -    else if (fabs(angle - M_PI) < 1e-5){
[3.577s] 3: -        exp = angle * Vec3(rm(0,0)+1, rm(0,1), rm(0,2)) / sqrt(2*(1+rm(0, 0)));
[3.577s] 3: -    }
[3.577s] 3: -    else{
[3.577s] 3: -        exp=angle/(2.0f*sin(angle))*Vec3(rm(2,1)-rm(1,2),rm(0,2)-rm(2,0),rm(1,0)-rm(0,1));
[3.577s] 3: -    }
[3.577s] 3: -    return exp;
[3.577s] 3: -}
[3.577s] 3: -
[3.577s] 3: -inline HomoMat homoMatrix(Vec3 p, RotMat m){
[3.577s] 3: -    HomoMat homoM;
[3.577s] 3: -    homoM.setZero();
[3.577s] 3: -    homoM.topLeftCorner(3, 3) = m;
[3.577s] 3: -    homoM.topRightCorner(3, 1) = p;
[3.577s] 3: -    homoM(3, 3) = 1;
[3.577s] 3: -    return homoM;
[3.577s] 3: -}
[3.577s] 3: -
[3.577s] 3: -inline HomoMat homoMatrix(Vec3 p, Quat q){
[3.577s] 3: -    HomoMat homoM;
[3.577s] 3: -    homoM.setZero();
[3.577s] 3: -    homoM.topLeftCorner(3, 3) = quatToRotMat(q);
[3.577s] 3: -    homoM.topRightCorner(3, 1) = p;
[3.578s] 3: -    homoM(3, 3) = 1;
[3.578s] 3: -    return homoM;
[3.578s] 3: -}
[3.578s] 3: -
[3.578s] 3: -inline HomoMat homoMatrixInverse(HomoMat homoM){
[3.578s] 3: -    HomoMat homoInv;
[3.578s] 3: -    homoInv.setZero();
[3.578s] 3: -    homoInv.topLeftCorner(3, 3) = homoM.topLeftCorner(3, 3).transpose();
[3.578s] 3: -    homoInv.topRightCorner(3, 1) = -homoM.topLeftCorner(3, 3).transpose() * homoM.topRightCorner(3, 1);
[3.578s] 3: -    homoInv(3, 3) = 1;
[3.578s] 3: -    return homoInv;
[3.578s] 3: -}
[3.578s] 3: -
[3.578s] 3: -//  add 1 at the end of Vec3
[3.578s] 3: -inline Vec4 homoVec(Vec3 v3){
[3.578s] 3: -    Vec4 v4;
[3.578s] 3: -    v4.block(0, 0, 3, 1) = v3;
[3.578s] 3: -    v4(3) = 1;
[3.578s] 3: -    return v4;
[3.578s] 3: -}
[3.578s] 3: -
[3.578s] 3: -//  remove 1 at the end of Vec4
[3.578s] 3: -inline Vec3 noHomoVec(Vec4 v4){
[3.578s] 3: -    Vec3 v3;
[3.579s] 3: -    v3 = v4.block(0, 0, 3, 1);
[3.579s] 3: -    return v3;
[3.579s] 3: -}
[3.579s] 3: -
[3.579s] 3: -// Calculate average value and covariance
[3.579s] 3: -class AvgCov{
[3.579s] 3: -public:
[3.579s] 3: -    AvgCov(unsigned int size, std::string name, bool avgOnly=false, unsigned int showPeriod=1000, unsigned int waitCount=5000, double zoomFactor=10000)
[3.579s] 3: -            :_size(size), _showPeriod(showPeriod), _waitCount(waitCount), _zoomFactor(zoomFactor), _valueName(name), _avgOnly(avgOnly) {
[3.579s] 3: -        _exp.resize(size);
[3.579s] 3: -        _cov.resize(size, size);
[3.579s] 3: -        _defaultWeight.resize(size, size);
[3.579s] 3: -        _defaultWeight.setIdentity();
[3.579s] 3: -        _measureCount = 0;
[3.579s] 3: -    }
[3.579s] 3: -    void measure(VecX newValue){
[3.579s] 3: -        ++_measureCount;
[3.579s] 3: -
[3.579s] 3: -        if(_measureCount > _waitCount){
[3.579s] 3: -            updateAvgCov(_cov, _exp, newValue, _measureCount-_waitCount);
[3.579s] 3: -            if(_measureCount % _showPeriod == 0){
[3.579s] 3: -                std::cout << "******" << _valueName << " measured count: " << _measureCount-_waitCount << "******" << std::endl;
[3.579s] 3: -                std::cout << _zoomFactor << " Times Average of " << _valueName << std::endl << (_zoomFactor*_exp).transpose() << std::endl;
[3.579s] 3: -                if(!_avgOnly){
[3.580s] 3: -                    std::cout << _zoomFactor << " Times Covariance of " << _valueName << std::endl << _zoomFactor*_cov << std::endl;
[3.580s] 3: -                }
[3.580s] 3: -            }
[3.580s] 3: -        }
[3.580s] 3: -    }
[3.580s] 3: +  }
[3.580s] 3: +
[3.580s] 3: @@ -269,10 +305,10 @@
[3.580s] 3: -    VecX _exp;
[3.580s] 3: -    MatX _cov;
[3.580s] 3: -    MatX _defaultWeight;
[3.580s] 3: -    bool _avgOnly;
[3.580s] 3: -    unsigned int _size;
[3.580s] 3: -    unsigned int _measureCount;
[3.580s] 3: -    unsigned int _showPeriod;
[3.580s] 3: -    unsigned int _waitCount;
[3.580s] 3: -    double _zoomFactor;
[3.580s] 3: -    std::string _valueName;
[3.580s] 3: +  VecX _exp;
[3.580s] 3: +  MatX _cov;
[3.580s] 3: +  MatX _defaultWeight;
[3.580s] 3: +  bool _avgOnly;
[3.580s] 3: +  unsigned int _size;
[3.580s] 3: +  unsigned int _measureCount;
[3.581s] 3: +  unsigned int _showPeriod;
[3.581s] 3: +  unsigned int _waitCount;
[3.581s] 3: +  double _zoomFactor;
[3.581s] 3: +  std::string _valueName;
[3.581s] 3: @@ -281 +317 @@
[3.581s] 3: -#endif  // MATHTOOLS_H
[3.581s] 3: +#endif  // MATHTOOLS_H
[3.581s] 3: 
[3.581s] 3: Code style divergence in file 'include/common/mathTypes.h':
[3.581s] 3: 
[3.581s] 3: --- include/common/mathTypes.h
[3.581s] 3: +++ include/common/mathTypes.h.uncrustify
[3.581s] 3: @@ -13 +13 @@
[3.581s] 3: -using Vec2 = typename Eigen::Matrix<double, 2, 1>;
[3.581s] 3: +using Vec2 = typename Eigen::Matrix < double, 2, 1 >;
[3.581s] 3: @@ -16 +16 @@
[3.581s] 3: -using Vec3 = typename Eigen::Matrix<double, 3, 1>;
[3.581s] 3: +using Vec3 = typename Eigen::Matrix < double, 3, 1 >;
[3.581s] 3: @@ -19 +19 @@
[3.582s] 3: -using Vec4 = typename Eigen::Matrix<double, 4, 1>;
[3.582s] 3: +using Vec4 = typename Eigen::Matrix < double, 4, 1 >;
[3.582s] 3: @@ -22 +22 @@
[3.582s] 3: -using Vec6 = typename Eigen::Matrix<double, 6, 1>;
[3.582s] 3: +using Vec6 = typename Eigen::Matrix < double, 6, 1 >;
[3.582s] 3: @@ -25 +25 @@
[3.582s] 3: -using Quat = typename Eigen::Matrix<double, 4, 1>;
[3.582s] 3: +using Quat = typename Eigen::Matrix < double, 4, 1 >;
[3.582s] 3: @@ -28 +28 @@
[3.582s] 3: -using VecInt4 = typename Eigen::Matrix<int, 4, 1>;
[3.582s] 3: +using VecInt4 = typename Eigen::Matrix < int, 4, 1 >;
[3.582s] 3: @@ -31 +31 @@
[3.582s] 3: -using Vec12 = typename Eigen::Matrix<double, 12, 1>;
[3.582s] 3: +using Vec12 = typename Eigen::Matrix < double, 12, 1 >;
[3.582s] 3: @@ -34 +34 @@
[3.582s] 3: -using Vec18 = typename Eigen::Matrix<double, 18, 1>;
[3.582s] 3: +using Vec18 = typename Eigen::Matrix < double, 18, 1 >;
[3.582s] 3: @@ -37 +37 @@
[3.582s] 3: -using VecX = typename Eigen::Matrix<double, Eigen::Dynamic, 1>;
[3.582s] 3: +using VecX = typename Eigen::Matrix < double, Eigen::Dynamic, 1 >;
[3.582s] 3: @@ -43 +43 @@
[3.582s] 3: -using RotMat = typename Eigen::Matrix<double, 3, 3>;
[3.583s] 3: +using RotMat = typename Eigen::Matrix < double, 3, 3 >;
[3.583s] 3: @@ -46 +46 @@
[3.583s] 3: -using HomoMat = typename Eigen::Matrix<double, 4, 4>;
[3.583s] 3: +using HomoMat = typename Eigen::Matrix < double, 4, 4 >;
[3.583s] 3: @@ -49 +49 @@
[3.583s] 3: -using Mat2 = typename Eigen::Matrix<double, 2, 2>;
[3.583s] 3: +using Mat2 = typename Eigen::Matrix < double, 2, 2 >;
[3.583s] 3: @@ -52 +52 @@
[3.583s] 3: -using Mat3 = typename Eigen::Matrix<double, 3, 3>;
[3.583s] 3: +using Mat3 = typename Eigen::Matrix < double, 3, 3 >;
[3.583s] 3: @@ -58 +58 @@
[3.583s] 3: -using Vec34 = typename Eigen::Matrix<double, 3, 4>;
[3.583s] 3: +using Vec34 = typename Eigen::Matrix < double, 3, 4 >;
[3.583s] 3: @@ -61 +61 @@
[3.583s] 3: -using Mat6 = typename Eigen::Matrix<double, 6, 6>;
[3.583s] 3: +using Mat6 = typename Eigen::Matrix < double, 6, 6 >;
[3.583s] 3: @@ -64 +64 @@
[3.583s] 3: -using Mat12 = typename Eigen::Matrix<double, 12, 12>;
[3.583s] 3: +using Mat12 = typename Eigen::Matrix < double, 12, 12 >;
[3.583s] 3: @@ -73 +73 @@
[3.583s] 3: -using MatX = typename Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>;
[3.583s] 3: +using MatX = typename Eigen::Matrix < double, Eigen::Dynamic, Eigen::Dynamic >;
[3.583s] 3: @@ -78,6 +78,7 @@
[3.583s] 3: -inline Vec34 vec12ToVec34(Vec12 vec12){
[3.584s] 3: -    Vec34 vec34;
[3.584s] 3: -    for(int i(0); i < 4; ++i){
[3.584s] 3: -        vec34.col(i) = vec12.segment(3*i, 3);
[3.584s] 3: -    }
[3.584s] 3: -    return vec34;
[3.584s] 3: +inline Vec34 vec12ToVec34(Vec12 vec12)
[3.584s] 3: +{
[3.584s] 3: +  Vec34 vec34;
[3.584s] 3: +  for (int i(0); i < 4; ++i) {
[3.584s] 3: +    vec34.col(i) = vec12.segment(3 * i, 3);
[3.584s] 3: +  }
[3.584s] 3: +  return vec34;
[3.584s] 3: @@ -86,6 +87,7 @@
[3.584s] 3: -inline Vec12 vec34ToVec12(Vec34 vec34){
[3.584s] 3: -    Vec12 vec12;
[3.584s] 3: -    for(int i(0); i < 4; ++i){
[3.584s] 3: -        vec12.segment(3*i, 3) = vec34.col(i);
[3.584s] 3: -    }
[3.584s] 3: -    return vec12;
[3.584s] 3: +inline Vec12 vec34ToVec12(Vec34 vec34)
[3.584s] 3: +{
[3.584s] 3: +  Vec12 vec12;
[3.584s] 3: +  for (int i(0); i < 4; ++i) {
[3.584s] 3: +    vec12.segment(3 * i, 3) = vec34.col(i);
[3.585s] 3: +  }
[3.585s] 3: +  return vec12;
[3.585s] 3: @@ -94 +96 @@
[3.585s] 3: -#endif  // MATHTYPES_H
[3.585s] 3: +#endif  // MATHTYPES_H
[3.585s] 3: 
[3.585s] 3: Code style divergence in file 'include/common/timeMarker.h':
[3.585s] 3: 
[3.585s] 3: --- include/common/timeMarker.h
[3.585s] 3: +++ include/common/timeMarker.h.uncrustify
[3.585s] 3: @@ -11,5 +11,6 @@
[3.585s] 3: -//时间戳  微秒级， 需要#include <sys/time.h> 
[3.585s] 3: -inline long long getSystemTime(){
[3.585s] 3: -    struct timeval t;  
[3.585s] 3: -    gettimeofday(&t, NULL);
[3.585s] 3: -    return 1000000 * t.tv_sec + t.tv_usec;  
[3.585s] 3: +//时间戳  微秒级， 需要#include <sys/time.h>
[3.585s] 3: +inline long long getSystemTime()
[3.585s] 3: +{
[3.585s] 3: +  struct timeval t;
[3.585s] 3: +  gettimeofday(&t, NULL);
[3.585s] 3: +  return 1000000 * t.tv_sec + t.tv_usec;
[3.586s] 3: @@ -18,3 +19,4 @@
[3.586s] 3: -inline double getTimeSecond(){
[3.586s] 3: -    double time = getSystemTime() * 0.000001;
[3.586s] 3: -    return time;
[3.586s] 3: +inline double getTimeSecond()
[3.586s] 3: +{
[3.586s] 3: +  double time = getSystemTime() * 0.000001;
[3.586s] 3: +  return time;
[3.586s] 3: @@ -23,8 +25,11 @@
[3.586s] 3: -inline void absoluteWait(long long startTime, long long waitTime){
[3.586s] 3: -    if(getSystemTime() - startTime > waitTime){
[3.586s] 3: -        std::cout << "[WARNING] The waitTime=" << waitTime << " of function absoluteWait is not enough!" << std::endl
[3.586s] 3: -        << "The program has already cost " << getSystemTime() - startTime << "us." << std::endl;
[3.586s] 3: -    }
[3.586s] 3: -    while(getSystemTime() - startTime < waitTime){
[3.586s] 3: -        usleep(50);
[3.586s] 3: -    }
[3.586s] 3: +inline void absoluteWait(long long startTime, long long waitTime)
[3.586s] 3: +{
[3.586s] 3: +  if (getSystemTime() - startTime > waitTime) {
[3.586s] 3: +    std::cout << "[WARNING] The waitTime=" << waitTime <<
[3.586s] 3: +      " of function absoluteWait is not enough!" << std::endl
[3.586s] 3: +              << "The program has already cost " << getSystemTime() - startTime << "us." <<
[3.586s] 3: +      std::endl;
[3.587s] 3: +  }
[3.587s] 3: +  while (getSystemTime() - startTime < waitTime) {
[3.587s] 3: +    usleep(50);
[3.587s] 3: +  }
[3.587s] 3: @@ -33 +38 @@
[3.587s] 3: -#endif //TIMEMARKER_H
[3.587s] 3: +#endif //TIMEMARKER_H
[3.587s] 3: 
[3.587s] 3: Code style divergence in file 'include/common/unitreeLeg.h':
[3.587s] 3: 
[3.587s] 3: --- include/common/unitreeLeg.h
[3.587s] 3: +++ include/common/unitreeLeg.h.uncrustify
[3.587s] 3: @@ -10 +10 @@
[3.587s] 3: -class QuadrupedLeg{
[3.587s] 3: +class QuadrupedLeg {
[3.587s] 3: @@ -12,12 +12,15 @@
[3.587s] 3: -    QuadrupedLeg(int legID, float abadLinkLength, float hipLinkLength, 
[3.587s] 3: -                 float kneeLinkLength, Vec3 pHip2B);
[3.587s] 3: -    ~QuadrupedLeg(){}
[3.587s] 3: -    Vec3 calcPEe2H(Vec3 q);
[3.587s] 3: -    Vec3 calcPEe2B(Vec3 q);
[3.587s] 3: -    Vec3 calcVEe(Vec3 q, Vec3 qd);
[3.587s] 3: -    Vec3 calcQ(Vec3 pEe, FrameType frame);
[3.587s] 3: -    Vec3 calcQd(Vec3 q, Vec3 vEe);
[3.588s] 3: -    Vec3 calcQd(Vec3 pEe, Vec3 vEe, FrameType frame);
[3.588s] 3: -    Vec3 calcTau(Vec3 q, Vec3 force);
[3.588s] 3: -    Mat3 calcJaco(Vec3 q);
[3.588s] 3: -    Vec3 getHip2B(){return _pHip2B;}
[3.588s] 3: +  QuadrupedLeg(
[3.588s] 3: +    int legID, float abadLinkLength, float hipLinkLength,
[3.588s] 3: +    float kneeLinkLength, Vec3 pHip2B);
[3.588s] 3: +  ~QuadrupedLeg() {
[3.588s] 3: +  }
[3.588s] 3: +  Vec3 calcPEe2H(Vec3 q);
[3.588s] 3: +  Vec3 calcPEe2B(Vec3 q);
[3.588s] 3: +  Vec3 calcVEe(Vec3 q, Vec3 qd);
[3.588s] 3: +  Vec3 calcQ(Vec3 pEe, FrameType frame);
[3.588s] 3: +  Vec3 calcQd(Vec3 q, Vec3 vEe);
[3.588s] 3: +  Vec3 calcQd(Vec3 pEe, Vec3 vEe, FrameType frame);
[3.588s] 3: +  Vec3 calcTau(Vec3 q, Vec3 force);
[3.588s] 3: +  Mat3 calcJaco(Vec3 q);
[3.588s] 3: +  Vec3 getHip2B() {return _pHip2B;}
[3.588s] 3: +
[3.588s] 3: @@ -25,7 +28,8 @@
[3.588s] 3: -    float q1_ik(float py, float pz, float b2y);
[3.588s] 3: -    float q3_ik(float b3z, float b4z, float b);
[3.589s] 3: -    float q2_ik(float q1, float q3, float px, 
[3.589s] 3: -                float py, float pz, float b3z, float b4z);
[3.589s] 3: -    float _sideSign;
[3.589s] 3: -    const float _abadLinkLength, _hipLinkLength, _kneeLinkLength;
[3.589s] 3: -    const Vec3 _pHip2B;
[3.589s] 3: +  float q1_ik(float py, float pz, float b2y);
[3.589s] 3: +  float q3_ik(float b3z, float b4z, float b);
[3.589s] 3: +  float q2_ik(
[3.589s] 3: +    float q1, float q3, float px,
[3.589s] 3: +    float py, float pz, float b3z, float b4z);
[3.589s] 3: +  float _sideSign;
[3.589s] 3: +  const float _abadLinkLength, _hipLinkLength, _kneeLinkLength;
[3.589s] 3: +  const Vec3 _pHip2B;
[3.589s] 3: @@ -34 +38 @@
[3.589s] 3: -class A1Leg : public QuadrupedLeg{
[3.589s] 3: +class A1Leg: public QuadrupedLeg {
[3.589s] 3: @@ -36,3 +40,5 @@
[3.589s] 3: -    A1Leg(const int legID, const Vec3 pHip2B):
[3.589s] 3: -        QuadrupedLeg(legID, 0.0838, 0.2, 0.2, pHip2B){}
[3.589s] 3: -    ~A1Leg(){}
[3.589s] 3: +  A1Leg(const int legID, const Vec3 pHip2B)
[3.589s] 3: +    : QuadrupedLeg(legID, 0.0838, 0.2, 0.2, pHip2B) {
[3.589s] 3: +  }
[3.589s] 3: +  ~A1Leg() {
[3.590s] 3: +  }
[3.590s] 3: @@ -41 +47 @@
[3.590s] 3: -class Go1Leg : public QuadrupedLeg{
[3.590s] 3: +class Go1Leg: public QuadrupedLeg {
[3.590s] 3: @@ -43,3 +49,5 @@
[3.590s] 3: -    Go1Leg(const int legID, const Vec3 pHip2B):
[3.590s] 3: -        QuadrupedLeg(legID, 0.08, 0.213, 0.213, pHip2B){}
[3.590s] 3: -    ~Go1Leg(){}
[3.590s] 3: +  Go1Leg(const int legID, const Vec3 pHip2B)
[3.590s] 3: +    : QuadrupedLeg(legID, 0.08, 0.213, 0.213, pHip2B) {
[3.590s] 3: +  }
[3.590s] 3: +  ~Go1Leg() {
[3.590s] 3: +  }
[3.590s] 3: @@ -48 +56 @@
[3.590s] 3: -#endif  // UNITREELEG_H
[3.590s] 3: +#endif  // UNITREELEG_H
[3.590s] 3: 
[3.590s] 3: Code style divergence in file 'include/common/unitreeRobot.h':
[3.590s] 3: 
[3.590s] 3: --- include/common/unitreeRobot.h
[3.590s] 3: +++ include/common/unitreeRobot.h.uncrustify
[3.590s] 3: @@ -10 +10 @@
[3.590s] 3: -class QuadrupedRobot{
[3.590s] 3: +class QuadrupedRobot {
[3.591s] 3: @@ -12,2 +12,4 @@
[3.591s] 3: -    QuadrupedRobot(){};
[3.591s] 3: -    ~QuadrupedRobot(){}
[3.591s] 3: +  QuadrupedRobot() {
[3.591s] 3: +  };
[3.591s] 3: +  ~QuadrupedRobot() {
[3.591s] 3: +  }
[3.591s] 3: @@ -15,2 +17,2 @@
[3.591s] 3: -    Vec3 getX(LowlevelState &state);
[3.591s] 3: -    Vec34 getVecXP(LowlevelState &state);
[3.591s] 3: +  Vec3 getX(LowlevelState & state);
[3.591s] 3: +  Vec34 getVecXP(LowlevelState & state);
[3.591s] 3: @@ -18,4 +20,4 @@
[3.591s] 3: -    // Inverse Kinematics(Body/Hip Frame)
[3.591s] 3: -    Vec12 getQ(const Vec34 &feetPosition, FrameType frame);
[3.591s] 3: -    Vec12 getQd(const Vec34 &feetPosition, const Vec34 &feetVelocity, FrameType frame);
[3.591s] 3: -    Vec12 getTau(const Vec12 &q, const Vec34 feetForce);
[3.591s] 3: +  // Inverse Kinematics(Body/Hip Frame)
[3.591s] 3: +  Vec12 getQ(const Vec34 & feetPosition, FrameType frame);
[3.591s] 3: +  Vec12 getQd(const Vec34 & feetPosition, const Vec34 & feetVelocity, FrameType frame);
[3.591s] 3: +  Vec12 getTau(const Vec12 & q, const Vec34 feetForce);
[3.591s] 3: @@ -23,5 +25,5 @@
[3.591s] 3: -    // Forward Kinematics
[3.606s] 3: -    Vec3 getFootPosition(LowlevelState &state, int id, FrameType frame);
[3.606s] 3: -    Vec3 getFootVelocity(LowlevelState &state, int id);
[3.606s] 3: -    Vec34 getFeet2BPositions(LowlevelState &state, FrameType frame);
[3.606s] 3: -    Vec34 getFeet2BVelocities(LowlevelState &state, FrameType frame);
[3.606s] 3: +  // Forward Kinematics
[3.606s] 3: +  Vec3 getFootPosition(LowlevelState & state, int id, FrameType frame);
[3.606s] 3: +  Vec3 getFootVelocity(LowlevelState & state, int id);
[3.606s] 3: +  Vec34 getFeet2BPositions(LowlevelState & state, FrameType frame);
[3.606s] 3: +  Vec34 getFeet2BVelocities(LowlevelState & state, FrameType frame);
[3.606s] 3: @@ -29,8 +31,8 @@
[3.606s] 3: -    Mat3 getJaco(LowlevelState &state, int legID);
[3.607s] 3: -    Vec2 getRobVelLimitX(){return _robVelLimitX;}
[3.607s] 3: -    Vec2 getRobVelLimitY(){return _robVelLimitY;}
[3.607s] 3: -    Vec2 getRobVelLimitYaw(){return _robVelLimitYaw;}
[3.607s] 3: -    Vec34 getFeetPosIdeal(){return _feetPosNormalStand;}
[3.607s] 3: -    double getRobMass(){return _mass;}
[3.607s] 3: -    Vec3 getPcb(){return _pcb;}
[3.607s] 3: -    Mat3 getRobInertial(){return _Ib;}
[3.607s] 3: +  Mat3 getJaco(LowlevelState & state, int legID);
[3.607s] 3: +  Vec2 getRobVelLimitX() {return _robVelLimitX;}
[3.607s] 3: +  Vec2 getRobVelLimitY() {return _robVelLimitY;}
[3.607s] 3: +  Vec2 getRobVelLimitYaw() {return _robVelLimitYaw;}
[3.607s] 3: +  Vec34 getFeetPosIdeal() {return _feetPosNormalStand;}
[3.607s] 3: +  double getRobMass() {return _mass;}
[3.607s] 3: +  Vec3 getPcb() {return _pcb;}
[3.607s] 3: +  Mat3 getRobInertial() {return _Ib;}
[3.607s] 3: @@ -39,8 +41,8 @@
[3.607s] 3: -    QuadrupedLeg* _Legs[4];
[3.607s] 3: -    Vec2 _robVelLimitX;
[3.607s] 3: -    Vec2 _robVelLimitY;
[3.607s] 3: -    Vec2 _robVelLimitYaw;
[3.607s] 3: -    Vec34 _feetPosNormalStand;
[3.607s] 3: -    double _mass;
[3.608s] 3: -    Vec3 _pcb;
[3.608s] 3: -    Mat3 _Ib;
[3.608s] 3: +  QuadrupedLeg * _Legs[4];
[3.608s] 3: +  Vec2 _robVelLimitX;
[3.608s] 3: +  Vec2 _robVelLimitY;
[3.608s] 3: +  Vec2 _robVelLimitYaw;
[3.608s] 3: +  Vec34 _feetPosNormalStand;
[3.608s] 3: +  double _mass;
[3.608s] 3: +  Vec3 _pcb;
[3.608s] 3: +  Mat3 _Ib;
[3.608s] 3: @@ -49 +51 @@
[3.608s] 3: -class A1Robot : public QuadrupedRobot{
[3.608s] 3: +class A1Robot: public QuadrupedRobot {
[3.608s] 3: @@ -51,2 +53,3 @@
[3.608s] 3: -    A1Robot();
[3.608s] 3: -    ~A1Robot(){}
[3.608s] 3: +  A1Robot();
[3.608s] 3: +  ~A1Robot() {
[3.608s] 3: +  }
[3.608s] 3: @@ -55 +58 @@
[3.609s] 3: -class Go1Robot : public QuadrupedRobot{
[3.609s] 3: +class Go1Robot: public QuadrupedRobot {
[3.609s] 3: @@ -57,2 +60,3 @@
[3.609s] 3: -    Go1Robot();
[3.609s] 3: -    ~Go1Robot(){};
[3.609s] 3: +  Go1Robot();
[3.609s] 3: +  ~Go1Robot() {
[3.609s] 3: +  };
[3.609s] 3: @@ -61 +65 @@
[3.609s] 3: -#endif  // UNITREEROBOT_H
[3.609s] 3: +#endif  // UNITREEROBOT_H
[3.609s] 3: 
[3.609s] 3: Code style divergence in file 'include/control/BalanceCtrl.h':
[3.609s] 3: 
[3.609s] 3: --- include/control/BalanceCtrl.h
[3.609s] 3: +++ include/control/BalanceCtrl.h.uncrustify
[3.609s] 3: @@ -15 +15 @@
[3.609s] 3: -class BalanceCtrl{
[3.609s] 3: +class BalanceCtrl {
[3.609s] 3: @@ -17,3 +17,3 @@
[3.609s] 3: -    BalanceCtrl(double mass, Mat3 Ib, Mat6 S, double alpha, double beta);
[3.609s] 3: -    BalanceCtrl(QuadrupedRobot *robModel);
[3.609s] 3: -    Vec34 calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact);
[3.610s] 3: +  BalanceCtrl(double mass, Mat3 Ib, Mat6 S, double alpha, double beta);
[3.610s] 3: +  BalanceCtrl(QuadrupedRobot * robModel);
[3.610s] 3: +  Vec34 calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact);
[3.610s] 3: @@ -21 +21 @@
[3.610s] 3: -    void setPyPlot(PyPlot *plot){_testPlot = plot;}
[3.610s] 3: +  void setPyPlot(PyPlot * plot) {_testPlot = plot;}
[3.610s] 3: @@ -22,0 +23 @@
[3.610s] 3: +
[3.610s] 3: @@ -24,4 +25,4 @@
[3.610s] 3: -    void calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact);
[3.610s] 3: -    void calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM);
[3.610s] 3: -    void calConstraints(VecInt4 contact);
[3.610s] 3: -    void solveQP();
[3.610s] 3: +  void calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact);
[3.610s] 3: +  void calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM);
[3.610s] 3: +  void calConstraints(VecInt4 contact);
[3.610s] 3: +  void solveQP();
[3.610s] 3: @@ -29,12 +30,12 @@
[3.610s] 3: -    Mat12 _G, _W, _U;
[3.610s] 3: -    Mat6 _S;
[3.610s] 3: -    Mat3 _Ib;
[3.610s] 3: -    Vec6 _bd;
[3.611s] 3: -    Vec3 _g;
[3.611s] 3: -    Vec3 _pcb;
[3.611s] 3: -    Vec12 _F, _Fprev, _g0T;
[3.611s] 3: -    double _mass, _alpha, _beta, _fricRatio;
[3.611s] 3: -    Eigen::MatrixXd _CE, _CI;
[3.611s] 3: -    Eigen::VectorXd _ce0, _ci0;
[3.611s] 3: -    Eigen::Matrix<double, 6 , 12> _A;
[3.611s] 3: -    Eigen::Matrix<double, 5 , 3 > _fricMat;
[3.611s] 3: +  Mat12 _G, _W, _U;
[3.611s] 3: +  Mat6 _S;
[3.611s] 3: +  Mat3 _Ib;
[3.611s] 3: +  Vec6 _bd;
[3.611s] 3: +  Vec3 _g;
[3.611s] 3: +  Vec3 _pcb;
[3.611s] 3: +  Vec12 _F, _Fprev, _g0T;
[3.611s] 3: +  double _mass, _alpha, _beta, _fricRatio;
[3.611s] 3: +  Eigen::MatrixXd _CE, _CI;
[3.611s] 3: +  Eigen::VectorXd _ce0, _ci0;
[3.611s] 3: +  Eigen::Matrix < double, 6, 12 > _A;
[3.611s] 3: +  Eigen::Matrix < double, 5, 3 > _fricMat;
[3.611s] 3: @@ -42,2 +43,2 @@
[3.611s] 3: -    quadprogpp::Matrix<double> G, CE, CI;
[3.611s] 3: -    quadprogpp::Vector<double> g0, ce0, ci0, x;
[3.612s] 3: +  quadprogpp::Matrix < double > G, CE, CI;
[3.612s] 3: +  quadprogpp::Vector < double > g0, ce0, ci0, x;
[3.612s] 3: @@ -46 +47 @@
[3.612s] 3: -    PyPlot *_testPlot;
[3.612s] 3: +  PyPlot * _testPlot;
[3.612s] 3: @@ -50 +51 @@
[3.612s] 3: -#endif  // BALANCECTRL_H
[3.612s] 3: +#endif  // BALANCECTRL_H
[3.612s] 3: 
[3.612s] 3: Code style divergence in file 'include/control/ControlFrame.h':
[3.612s] 3: 
[3.612s] 3: --- include/control/ControlFrame.h
[3.612s] 3: +++ include/control/ControlFrame.h.uncrustify
[3.612s] 3: @@ -10 +10 @@
[3.612s] 3: -class ControlFrame{
[3.612s] 3: +class ControlFrame {
[3.612s] 3: @@ -12,5 +12,6 @@
[3.613s] 3: -	ControlFrame(CtrlComponents *ctrlComp);
[3.613s] 3: -	~ControlFrame(){
[3.613s] 3: -		delete _FSMController;
[3.613s] 3: -	}
[3.613s] 3: -	void run();
[3.613s] 3: +  ControlFrame(CtrlComponents * ctrlComp);
[3.613s] 3: +  ~ControlFrame() {
[3.613s] 3: +    delete _FSMController;
[3.613s] 3: +  }
[3.613s] 3: +  void run();
[3.613s] 3: +
[3.613s] 3: @@ -18,2 +19,2 @@
[3.613s] 3: -	FSM* _FSMController;
[3.613s] 3: -	CtrlComponents *_ctrlComp;
[3.613s] 3: +  FSM * _FSMController;
[3.613s] 3: +  CtrlComponents * _ctrlComp;
[3.613s] 3: @@ -22 +23 @@
[3.614s] 3: -#endif  //CONTROLFRAME_H
[3.614s] 3: +#endif  //CONTROLFRAME_H
[3.614s] 3: 
[3.614s] 3: Code style divergence in file 'include/control/CtrlComponents.h':
[3.614s] 3: 
[3.614s] 3: --- include/control/CtrlComponents.h
[3.614s] 3: +++ include/control/CtrlComponents.h.uncrustify
[3.614s] 3: @@ -22 +22,2 @@
[3.614s] 3: -struct CtrlComponents{
[3.614s] 3: +struct CtrlComponents
[3.614s] 3: +{
[3.614s] 3: @@ -24,16 +25,16 @@
[3.614s] 3: -    CtrlComponents(IOInterface *ioInter):ioInter(ioInter){
[3.614s] 3: -        lowCmd = new LowlevelCmd();
[3.614s] 3: -        lowState = new LowlevelState();
[3.614s] 3: -        contact = new VecInt4;
[3.614s] 3: -        phase = new Vec4;
[3.614s] 3: -        *contact = VecInt4(0, 0, 0, 0);
[3.614s] 3: -        *phase = Vec4(0.5, 0.5, 0.5, 0.5);
[3.614s] 3: -    }
[3.614s] 3: -    ~CtrlComponents(){
[3.614s] 3: -        delete lowCmd;
[3.614s] 3: -        delete lowState;
[3.615s] 3: -        delete ioInter;
[3.615s] 3: -        delete robotModel;
[3.615s] 3: -        delete waveGen;
[3.615s] 3: -        delete estimator;
[3.615s] 3: -        delete balCtrl;
[3.615s] 3: +  CtrlComponents(IOInterface * ioInter) : ioInter(ioInter) {
[3.615s] 3: +    lowCmd = new LowlevelCmd();
[3.615s] 3: +    lowState = new LowlevelState();
[3.615s] 3: +    contact = new VecInt4;
[3.615s] 3: +    phase = new Vec4;
[3.615s] 3: +    *contact = VecInt4(0, 0, 0, 0);
[3.615s] 3: +    *phase = Vec4(0.5, 0.5, 0.5, 0.5);
[3.615s] 3: +  }
[3.615s] 3: +  ~CtrlComponents() {
[3.615s] 3: +    delete lowCmd;
[3.615s] 3: +    delete lowState;
[3.615s] 3: +    delete ioInter;
[3.615s] 3: +    delete robotModel;
[3.615s] 3: +    delete waveGen;
[3.615s] 3: +    delete estimator;
[3.615s] 3: +    delete balCtrl;
[3.615s] 3: @@ -41 +42 @@
[3.615s] 3: -        delete plot;
[3.615s] 3: +    delete plot;
[3.616s] 3: @@ -43,8 +44,8 @@
[3.616s] 3: -    }
[3.616s] 3: -    LowlevelCmd *lowCmd;
[3.616s] 3: -    LowlevelState *lowState;
[3.616s] 3: -    IOInterface *ioInter;
[3.616s] 3: -    QuadrupedRobot *robotModel;
[3.616s] 3: -    WaveGenerator *waveGen;
[3.616s] 3: -    Estimator *estimator;
[3.616s] 3: -    BalanceCtrl *balCtrl;
[3.616s] 3: +  }
[3.616s] 3: +  LowlevelCmd * lowCmd;
[3.616s] 3: +  LowlevelState * lowState;
[3.616s] 3: +  IOInterface * ioInter;
[3.616s] 3: +  QuadrupedRobot * robotModel;
[3.616s] 3: +  WaveGenerator * waveGen;
[3.616s] 3: +  Estimator * estimator;
[3.616s] 3: +  BalanceCtrl * balCtrl;
[3.616s] 3: @@ -53 +54 @@
[3.616s] 3: -    PyPlot *plot;
[3.616s] 3: +  PyPlot * plot;
[3.616s] 3: @@ -56,2 +57,2 @@
[3.616s] 3: -    VecInt4 *contact;
[3.616s] 3: -    Vec4 *phase;
[3.616s] 3: +  VecInt4 * contact;
[3.617s] 3: +  Vec4 * phase;
[3.617s] 3: @@ -59,3 +60,3 @@
[3.617s] 3: -    double dt;
[3.617s] 3: -    bool *running;
[3.617s] 3: -    CtrlPlatform ctrlPlatform;
[3.617s] 3: +  double dt;
[3.617s] 3: +  bool * running;
[3.617s] 3: +  CtrlPlatform ctrlPlatform;
[3.617s] 3: @@ -63,3 +64,4 @@
[3.617s] 3: -    void sendRecv(){
[3.617s] 3: -        ioInter->sendRecv(lowCmd, lowState);
[3.617s] 3: -    }
[3.617s] 3: +  void sendRecv()
[3.617s] 3: +  {
[3.617s] 3: +    ioInter->sendRecv(lowCmd, lowState);
[3.617s] 3: +  }
[3.617s] 3: @@ -67,3 +69,4 @@
[3.617s] 3: -    void runWaveGen(){
[3.617s] 3: -        waveGen->calcContactPhase(*phase, *contact, _waveStatus);
[3.617s] 3: -    }
[3.617s] 3: +  void runWaveGen()
[3.617s] 3: +  {
[3.617s] 3: +    waveGen->calcContactPhase(*phase, *contact, _waveStatus);
[3.617s] 3: +  }
[3.618s] 3: @@ -71,3 +74,4 @@
[3.618s] 3: -    void setAllStance(){
[3.618s] 3: -        _waveStatus = WaveStatus::STANCE_ALL;
[3.618s] 3: -    }
[3.618s] 3: +  void setAllStance()
[3.618s] 3: +  {
[3.618s] 3: +    _waveStatus = WaveStatus::STANCE_ALL;
[3.618s] 3: +  }
[3.618s] 3: @@ -75,3 +79,4 @@
[3.618s] 3: -    void setAllSwing(){
[3.618s] 3: -        _waveStatus = WaveStatus::SWING_ALL;
[3.618s] 3: -    }
[3.618s] 3: +  void setAllSwing()
[3.618s] 3: +  {
[3.618s] 3: +    _waveStatus = WaveStatus::SWING_ALL;
[3.618s] 3: +  }
[3.618s] 3: @@ -79,3 +84,4 @@
[3.618s] 3: -    void setStartWave(){
[3.618s] 3: -        _waveStatus = WaveStatus::WAVE_ALL;
[3.618s] 3: -    }
[3.618s] 3: +  void setStartWave()
[3.619s] 3: +  {
[3.619s] 3: +    _waveStatus = WaveStatus::WAVE_ALL;
[3.619s] 3: +  }
[3.619s] 3: @@ -83,3 +89,4 @@
[3.619s] 3: -    void geneObj(){
[3.619s] 3: -        estimator = new Estimator(robotModel, lowState, contact, phase, dt);
[3.619s] 3: -        balCtrl = new BalanceCtrl(robotModel);
[3.619s] 3: +  void geneObj()
[3.619s] 3: +  {
[3.619s] 3: +    estimator = new Estimator(robotModel, lowState, contact, phase, dt);
[3.619s] 3: +    balCtrl = new BalanceCtrl(robotModel);
[3.619s] 3: @@ -88,3 +95,3 @@
[3.619s] 3: -        plot = new PyPlot();
[3.619s] 3: -        balCtrl->setPyPlot(plot);
[3.619s] 3: -        estimator->setPyPlot(plot);
[3.619s] 3: +    plot = new PyPlot();
[3.619s] 3: +    balCtrl->setPyPlot(plot);
[3.619s] 3: +    estimator->setPyPlot(plot);
[3.619s] 3: @@ -92 +99 @@
[3.619s] 3: -    }
[3.620s] 3: +  }
[3.620s] 3: @@ -95 +102 @@
[3.620s] 3: -    WaveStatus _waveStatus = WaveStatus::SWING_ALL;
[3.620s] 3: +  WaveStatus _waveStatus = WaveStatus::SWING_ALL;
[3.620s] 3: @@ -99 +106 @@
[3.620s] 3: -#endif  // CTRLCOMPONENTS_H
[3.620s] 3: +#endif  // CTRLCOMPONENTS_H
[3.620s] 3: 
[3.620s] 3: Code style divergence in file 'include/control/Estimator.h':
[3.620s] 3: 
[3.620s] 3: --- include/control/Estimator.h
[3.620s] 3: +++ include/control/Estimator.h.uncrustify
[3.620s] 3: @@ -37 +37 @@
[3.620s] 3: -class Estimator{
[3.620s] 3: +class Estimator {
[3.620s] 3: @@ -39,10 +39,14 @@
[3.620s] 3: -    Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, VecInt4 *contact, Vec4 *phase, double dt);
[3.620s] 3: -    Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, VecInt4 *contact, Vec4 *phase, double dt, Vec18 Qdig, std::string testName);
[3.620s] 3: -    ~Estimator();
[3.621s] 3: -    Vec3  getPosition();
[3.621s] 3: -    Vec3  getVelocity();
[3.621s] 3: -    Vec3  getFootPos(int i);
[3.621s] 3: -    Vec34 getFeetPos();
[3.621s] 3: -    Vec34 getFeetVel();
[3.621s] 3: -    Vec34 getPosFeet2BGlobal();
[3.621s] 3: -    void run();
[3.621s] 3: +  Estimator(
[3.621s] 3: +    QuadrupedRobot * robotModel, LowlevelState * lowState, VecInt4 * contact, Vec4 * phase,
[3.621s] 3: +    double dt);
[3.621s] 3: +  Estimator(
[3.621s] 3: +    QuadrupedRobot * robotModel, LowlevelState * lowState, VecInt4 * contact, Vec4 * phase,
[3.621s] 3: +    double dt, Vec18 Qdig, std::string testName);
[3.621s] 3: +  ~Estimator();
[3.621s] 3: +  Vec3  getPosition();
[3.621s] 3: +  Vec3  getVelocity();
[3.621s] 3: +  Vec3  getFootPos(int i);
[3.621s] 3: +  Vec34 getFeetPos();
[3.622s] 3: +  Vec34 getFeetVel();
[3.622s] 3: +  Vec34 getPosFeet2BGlobal();
[3.622s] 3: +  void run();
[3.622s] 3: @@ -51 +55 @@
[3.622s] 3: -    void setPyPlot(PyPlot *plot){_testPlot = plot;}
[3.622s] 3: +  void setPyPlot(PyPlot * plot) {_testPlot = plot;}
[3.622s] 3: @@ -55,29 +59,29 @@
[3.622s] 3: -    void _initSystem();
[3.622s] 3: -    // Linear System
[3.622s] 3: -    Eigen::Matrix<double, 18, 1>  _xhat;            // The state of estimator, position(3)+velocity(3)+feet position(3x4)
[3.622s] 3: -    Vec3 _u;                                        // The input of estimator
[3.622s] 3: -    Eigen::Matrix<double, 28,  1> _y;               // The measurement value of output y
[3.622s] 3: -    Eigen::Matrix<double, 28,  1> _yhat;            // The prediction of output y
[3.622s] 3: -    Eigen::Matrix<double, 18, 18> _A;               // The transtion matrix of estimator
[3.623s] 3: -    Eigen::Matrix<double, 18, 3>  _B;               // The input matrix
[3.623s] 3: -    Eigen::Matrix<double, 28, 18> _C;               // The output matrix
[3.623s] 3: -    // Covariance Matrix
[3.623s] 3: -    Eigen::Matrix<double, 18, 18> _P;               // Prediction covariance
[3.623s] 3: -    Eigen::Matrix<double, 18, 18> _Ppriori;         // Priori prediction covariance
[3.623s] 3: -    Eigen::Matrix<double, 18, 18> _Q;               // Dynamic simulation covariance
[3.623s] 3: -    Eigen::Matrix<double, 28, 28> _R;               // Measurement covariance
[3.623s] 3: -    Eigen::Matrix<double, 18, 18> _QInit;           // Initial value of Dynamic simulation covariance
[3.623s] 3: -    Eigen::Matrix<double, 28, 28> _RInit;           // Initial value of Measurement covariance
[3.623s] 3: -    Vec18 _Qdig;                                    // adjustable process noise covariance
[3.623s] 3: -    Mat3 _Cu;                                       // The covariance of system input u
[3.623s] 3: -    // Output Measurement
[3.623s] 3: -    Eigen::Matrix<double, 12, 1>  _feetPos2Body;    // The feet positions to body, in the global coordinate
[3.623s] 3: -    Eigen::Matrix<double, 12, 1>  _feetVel2Body;    // The feet velocity to body, in the global coordinate
[3.623s] 3: -    Eigen::Matrix<double,  4, 1>  _feetH;           // The Height of each foot, in the global coordinate
[3.623s] 3: -    Eigen::Matrix<double, 28, 28> _S;               // _S = C*P*C.T + R
[3.623s] 3: -    Eigen::PartialPivLU<Eigen::Matrix<double, 28, 28>> _Slu;    // _S.lu()
[3.623s] 3: -    Eigen::Matrix<double, 28,  1> _Sy;              // _Sy = _S.inv() * (y - yhat)
[3.623s] 3: -    Eigen::Matrix<double, 28, 18> _Sc;              // _Sc = _S.inv() * C
[3.623s] 3: -    Eigen::Matrix<double, 28, 28> _SR;              // _SR = _S.inv() * R
[3.624s] 3: -    Eigen::Matrix<double, 28, 18> _STC;             // _STC = (_S.transpose()).inv() * C
[3.624s] 3: -    Eigen::Matrix<double, 18, 18> _IKC;             // _IKC = I - KC
[3.624s] 3: +  void _initSystem();
[3.624s] 3: +  // Linear System
[3.624s] 3: +  Eigen::Matrix < double, 18, 1 > _xhat;            // The state of estimator, position(3)+velocity(3)+feet position(3x4)
[3.624s] 3: +  Vec3 _u;                                          // The input of estimator
[3.624s] 3: +  Eigen::Matrix < double, 28, 1 > _y;               // The measurement value of output y
[3.624s] 3: +  Eigen::Matrix < double, 28, 1 > _yhat;            // The prediction of output y
[3.624s] 3: +  Eigen::Matrix < double, 18, 18 > _A;              // The transtion matrix of estimator
[3.624s] 3: +  Eigen::Matrix < double, 18, 3 > _B;               // The input matrix
[3.624s] 3: +  Eigen::Matrix < double, 28, 18 > _C;              // The output matrix
[3.624s] 3: +  // Covariance Matrix
[3.624s] 3: +  Eigen::Matrix < double, 18, 18 > _P;              // Prediction covariance
[3.624s] 3: +  Eigen::Matrix < double, 18, 18 > _Ppriori;        // Priori prediction covariance
[3.624s] 3: +  Eigen::Matrix < double, 18, 18 > _Q;              // Dynamic simulation covariance
[3.624s] 3: +  Eigen::Matrix < double, 28, 28 > _R;              // Measurement covariance
[3.624s] 3: +  Eigen::Matrix < double, 18, 18 > _QInit;          // Initial value of Dynamic simulation covariance
[3.625s] 3: +  Eigen::Matrix < double, 28, 28 > _RInit;          // Initial value of Measurement covariance
[3.625s] 3: +  Vec18 _Qdig;                                      // adjustable process noise covariance
[3.625s] 3: +  Mat3 _Cu;                                         // The covariance of system input u
[3.625s] 3: +  // Output Measurement
[3.625s] 3: +  Eigen::Matrix < double, 12, 1 > _feetPos2Body;    // The feet positions to body, in the global coordinate
[3.625s] 3: +  Eigen::Matrix < double, 12, 1 > _feetVel2Body;    // The feet velocity to body, in the global coordinate
[3.625s] 3: +  Eigen::Matrix < double, 4, 1 > _feetH;            // The Height of each foot, in the global coordinate
[3.625s] 3: +  Eigen::Matrix < double, 28, 28 > _S;              // _S = C*P*C.T + R
[3.625s] 3: +  Eigen::PartialPivLU < Eigen::Matrix < double, 28, 28 >> _Slu; // _S.lu()
[3.625s] 3: +  Eigen::Matrix < double, 28, 1 > _Sy;              // _Sy = _S.inv() * (y - yhat)
[3.625s] 3: +  Eigen::Matrix < double, 28, 18 > _Sc;             // _Sc = _S.inv() * C
[3.625s] 3: +  Eigen::Matrix < double, 28, 28 > _SR;             // _SR = _S.inv() * R
[3.625s] 3: +  Eigen::Matrix < double, 28, 18 > _STC;            // _STC = (_S.transpose()).inv() * C
[3.625s] 3: +  Eigen::Matrix < double, 18, 18 > _IKC;            // _IKC = I - KC
[3.625s] 3: @@ -85,3 +89,3 @@
[3.625s] 3: -    RotMat _rotMatB2G;                              // Rotate Matrix: from body to global
[3.625s] 3: -    Vec3 _g;
[3.625s] 3: -    Vec34 _feetPosGlobalKine, _feetVelGlobalKine;
[3.625s] 3: +  RotMat _rotMatB2G;                                // Rotate Matrix: from body to global
[3.625s] 3: +  Vec3 _g;
[3.625s] 3: +  Vec34 _feetPosGlobalKine, _feetVelGlobalKine;
[3.625s] 3: @@ -89,7 +93,7 @@
[3.625s] 3: -    LowlevelState* _lowState;
[3.626s] 3: -    QuadrupedRobot *_robModel;
[3.626s] 3: -    Vec4 *_phase;
[3.626s] 3: -    VecInt4 *_contact;
[3.626s] 3: -    double _dt;
[3.626s] 3: -    double _trust;
[3.626s] 3: -    double _largeVariance;
[3.626s] 3: +  LowlevelState * _lowState;
[3.626s] 3: +  QuadrupedRobot * _robModel;
[3.626s] 3: +  Vec4 * _phase;
[3.626s] 3: +  VecInt4 * _contact;
[3.626s] 3: +  double _dt;
[3.626s] 3: +  double _trust;
[3.626s] 3: +  double _largeVariance;
[3.626s] 3: @@ -97,2 +101,2 @@
[3.626s] 3: -    // Low pass filters
[3.626s] 3: -    LPFilter *_vxFilter, *_vyFilter, *_vzFilter;
[3.626s] 3: +  // Low pass filters
[3.626s] 3: +  LPFilter * _vxFilter, * _vyFilter, * _vzFilter;
[3.626s] 3: @@ -100,4 +104,4 @@
[3.626s] 3: -    // Tuning
[3.626s] 3: -    AvgCov *_RCheck;
[3.626s] 3: -    AvgCov *_uCheck;
[3.626s] 3: -    std::string _estName;
[3.626s] 3: +  // Tuning
[3.627s] 3: +  AvgCov * _RCheck;
[3.627s] 3: +  AvgCov * _uCheck;
[3.627s] 3: +  std::string _estName;
[3.627s] 3: @@ -106 +110 @@
[3.627s] 3: -    PyPlot *_testPlot;
[3.627s] 3: +  PyPlot * _testPlot;
[3.627s] 3: @@ -109,8 +113,8 @@
[3.627s] 3: -    ros::NodeHandle _nh;
[3.627s] 3: -    ros::Publisher _pub;
[3.627s] 3: -    tf::TransformBroadcaster _odomBroadcaster;
[3.627s] 3: -    ros::Time _currentTime;
[3.627s] 3: -    geometry_msgs::TransformStamped _odomTF;
[3.627s] 3: -    nav_msgs::Odometry _odomMsg;
[3.627s] 3: -    int _count = 0;
[3.627s] 3: -    double _pubFreq = 10;
[3.627s] 3: +  ros::NodeHandle _nh;
[3.627s] 3: +  ros::Publisher _pub;
[3.627s] 3: +  tf::TransformBroadcaster _odomBroadcaster;
[3.627s] 3: +  ros::Time _currentTime;
[3.627s] 3: +  geometry_msgs::TransformStamped _odomTF;
[3.627s] 3: +  nav_msgs::Odometry _odomMsg;
[3.627s] 3: +  int _count = 0;
[3.627s] 3: +  double _pubFreq = 10;
[3.628s] 3: @@ -118,13 +122,13 @@
[3.628s] 3: -    Vec3 _velBody, _wBody;
[3.628s] 3: -    boost::array<double, 36> _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0, 
[3.628s] 3: -                                        0, 1e-3, 1e-9, 0, 0, 0, 
[3.628s] 3: -                                        0, 0, 1e6, 0, 0, 0,
[3.628s] 3: -                                        0, 0, 0, 1e6, 0, 0, 
[3.628s] 3: -                                        0, 0, 0, 0, 1e6, 0, 
[3.628s] 3: -                                        0, 0, 0, 0, 0, 1e-9};
[3.628s] 3: -    boost::array<double, 36> _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0, 
[3.628s] 3: -                                        0, 1e-3, 1e-9, 0, 0, 0, 
[3.628s] 3: -                                        0, 0, 1e6, 0, 0, 0, 
[3.628s] 3: -                                        0, 0, 0, 1e6, 0, 0, 
[3.628s] 3: -                                        0, 0, 0, 0, 1e6, 0, 
[3.628s] 3: -                                        0, 0, 0, 0, 0, 1e-9};
[3.628s] 3: +  Vec3 _velBody, _wBody;
[3.628s] 3: +  boost::array < double, 36 > _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0,
[3.628s] 3: +    0, 1e-3, 1e-9, 0, 0, 0,
[3.628s] 3: +    0, 0, 1e6, 0, 0, 0,
[3.628s] 3: +    0, 0, 0, 1e6, 0, 0,
[3.628s] 3: +    0, 0, 0, 0, 1e6, 0,
[3.628s] 3: +    0, 0, 0, 0, 0, 1e-9};
[3.628s] 3: +  boost::array < double, 36 > _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0,
[3.628s] 3: +    0, 1e-3, 1e-9, 0, 0, 0,
[3.629s] 3: +    0, 0, 1e6, 0, 0, 0,
[3.629s] 3: +    0, 0, 0, 1e6, 0, 0,
[3.629s] 3: +    0, 0, 0, 0, 1e6, 0,
[3.629s] 3: +    0, 0, 0, 0, 0, 1e-9};
[3.629s] 3: @@ -134,6 +138,6 @@
[3.629s] 3: -    rclcpp::Node::SharedPtr _nh;
[3.629s] 3: -    rclcpp::Publisher<nav_msgs::msg::Odometry>::SharedPtr _pub;
[3.629s] 3: -    std::shared_ptr<tf2_ros::TransformBroadcaster> _odomBroadcaster;
[3.629s] 3: -    rclcpp::Time _currentTime;
[3.629s] 3: -    geometry_msgs::msg::TransformStamped _odomTF;
[3.629s] 3: -    nav_msgs::msg::Odometry _odomMsg;
[3.629s] 3: +  rclcpp::Node::SharedPtr _nh;
[3.629s] 3: +  rclcpp::Publisher < nav_msgs::msg::Odometry > ::SharedPtr _pub;
[3.629s] 3: +  std::shared_ptr < tf2_ros::TransformBroadcaster > _odomBroadcaster;
[3.629s] 3: +  rclcpp::Time _currentTime;
[3.629s] 3: +  geometry_msgs::msg::TransformStamped _odomTF;
[3.629s] 3: +  nav_msgs::msg::Odometry _odomMsg;
[3.629s] 3: @@ -141,2 +145,2 @@
[3.629s] 3: -    int _count = 0;
[3.629s] 3: -    double _pubFreq = 10;
[3.630s] 3: +  int _count = 0;
[3.630s] 3: +  double _pubFreq = 10;
[3.630s] 3: @@ -144,13 +148,13 @@
[3.630s] 3: -    Vec3 _velBody, _wBody;
[3.630s] 3: -    std::array<double, 36> _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0, 
[3.630s] 3: -                                        0, 1e-3, 1e-9, 0, 0, 0, 
[3.630s] 3: -                                        0, 0, 1e6, 0, 0, 0,
[3.630s] 3: -                                        0, 0, 0, 1e6, 0, 0, 
[3.630s] 3: -                                        0, 0, 0, 0, 1e6, 0, 
[3.630s] 3: -                                        0, 0, 0, 0, 0, 1e-9};
[3.630s] 3: -    std::array<double, 36> _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0, 
[3.630s] 3: -                                        0, 1e-3, 1e-9, 0, 0, 0, 
[3.630s] 3: -                                        0, 0, 1e6, 0, 0, 0, 
[3.630s] 3: -                                        0, 0, 0, 1e6, 0, 0, 
[3.630s] 3: -                                        0, 0, 0, 0, 1e6, 0, 
[3.630s] 3: -                                        0, 0, 0, 0, 0, 1e-9};
[3.630s] 3: +  Vec3 _velBody, _wBody;
[3.630s] 3: +  std::array < double, 36 > _odom_pose_covariance = {1e-9, 0, 0, 0, 0, 0,
[3.630s] 3: +    0, 1e-3, 1e-9, 0, 0, 0,
[3.630s] 3: +    0, 0, 1e6, 0, 0, 0,
[3.630s] 3: +    0, 0, 0, 1e6, 0, 0,
[3.630s] 3: +    0, 0, 0, 0, 1e6, 0,
[3.630s] 3: +    0, 0, 0, 0, 0, 1e-9};
[3.631s] 3: +  std::array < double, 36 > _odom_twist_covariance = {1e-9, 0, 0, 0, 0, 0,
[3.631s] 3: +    0, 1e-3, 1e-9, 0, 0, 0,
[3.631s] 3: +    0, 0, 1e6, 0, 0, 0,
[3.631s] 3: +    0, 0, 0, 1e6, 0, 0,
[3.631s] 3: +    0, 0, 0, 0, 1e6, 0,
[3.631s] 3: +    0, 0, 0, 0, 0, 1e-9};
[3.631s] 3: @@ -161 +165 @@
[3.631s] 3: -#endif  // ESTIMATOR_H
[3.631s] 3: +#endif  // ESTIMATOR_H
[3.631s] 3: 
[3.631s] 3: Code style divergence in file 'include/interface/CmdPanel.h':
[3.631s] 3: 
[3.631s] 3: --- include/interface/CmdPanel.h
[3.631s] 3: +++ include/interface/CmdPanel.h.uncrustify
[3.631s] 3: @@ -20,16 +20,18 @@
[3.631s] 3: -struct UserValue{
[3.631s] 3: -    float lx;
[3.631s] 3: -    float ly;
[3.631s] 3: -    float rx;
[3.631s] 3: -    float ry;
[3.631s] 3: -    float L2;
[3.631s] 3: -    UserValue(){
[3.631s] 3: -        setZero();
[3.631s] 3: -    }
[3.632s] 3: -    void setZero(){
[3.632s] 3: -        lx = 0;
[3.632s] 3: -        ly = 0;
[3.632s] 3: -        rx = 0;
[3.632s] 3: -        ry = 0;
[3.632s] 3: -        L2 = 0;
[3.632s] 3: -    }
[3.632s] 3: +struct UserValue
[3.632s] 3: +{
[3.632s] 3: +  float lx;
[3.632s] 3: +  float ly;
[3.632s] 3: +  float rx;
[3.632s] 3: +  float ry;
[3.632s] 3: +  float L2;
[3.632s] 3: +  UserValue() {
[3.632s] 3: +    setZero();
[3.632s] 3: +  }
[3.632s] 3: +  void setZero()
[3.632s] 3: +  {
[3.632s] 3: +    lx = 0;
[3.632s] 3: +    ly = 0;
[3.632s] 3: +    rx = 0;
[3.632s] 3: +    ry = 0;
[3.633s] 3: +    L2 = 0;
[3.633s] 3: +  }
[3.633s] 3: @@ -38 +40 @@
[3.633s] 3: -class CmdPanel{
[3.633s] 3: +class CmdPanel {
[3.633s] 3: @@ -40,6 +42,8 @@
[3.633s] 3: -    CmdPanel(){}
[3.633s] 3: -    virtual ~CmdPanel(){}
[3.633s] 3: -    UserCommand getUserCmd(){return userCmd;}
[3.633s] 3: -    UserValue getUserValue(){return userValue;}
[3.633s] 3: -    void setPassive(){userCmd = UserCommand::L2_B;}
[3.633s] 3: -    void setZero(){userValue.setZero();}
[3.633s] 3: +  CmdPanel() {
[3.633s] 3: +  }
[3.633s] 3: +  virtual ~CmdPanel() {
[3.633s] 3: +  }
[3.634s] 3: +  UserCommand getUserCmd() {return userCmd;}
[3.634s] 3: +  UserValue getUserValue() {return userValue;}
[3.634s] 3: +  void setPassive() {userCmd = UserCommand::L2_B;}
[3.634s] 3: +  void setZero() {userValue.setZero();}
[3.634s] 3: @@ -47 +51 @@
[3.634s] 3: -    virtual void receiveHandle(UNITREE_LEGGED_SDK::LowState *lowState){};
[3.634s] 3: +  virtual void receiveHandle(UNITREE_LEGGED_SDK::LowState * lowState) {}
[3.634s] 3: @@ -48,0 +53 @@
[3.634s] 3: +
[3.634s] 3: @@ -50,3 +55,3 @@
[3.634s] 3: -    virtual void* run(void *arg){return NULL;}
[3.634s] 3: -    UserCommand userCmd;
[3.634s] 3: -    UserValue userValue;
[3.634s] 3: +  virtual void * run(void * arg) {return NULL;}
[3.634s] 3: +  UserCommand userCmd;
[3.634s] 3: +  UserValue userValue;
[3.634s] 3: @@ -55 +60 @@
[3.634s] 3: -#endif  // CMDPANEL_H
[3.634s] 3: +#endif  // CMDPANEL_H
[3.634s] 3: 
[3.634s] 3: Code style divergence in file 'include/interface/IOInterface.h':
[3.635s] 3: 
[3.635s] 3: --- include/interface/IOInterface.h
[3.635s] 3: +++ include/interface/IOInterface.h.uncrustify
[3.635s] 3: @@ -12 +12 @@
[3.635s] 3: -class IOInterface{
[3.635s] 3: +class IOInterface {
[3.635s] 3: @@ -14,5 +14,8 @@
[3.635s] 3: -IOInterface(){}
[3.635s] 3: -~IOInterface(){delete cmdPanel;}
[3.635s] 3: -virtual void sendRecv(const LowlevelCmd *cmd, LowlevelState *state) = 0;
[3.635s] 3: -void zeroCmdPanel(){cmdPanel->setZero();}
[3.635s] 3: -void setPassive(){cmdPanel->setPassive();}
[3.635s] 3: +  IOInterface() {
[3.635s] 3: +  }
[3.635s] 3: +  ~IOInterface() {
[3.635s] 3: +    delete cmdPanel;
[3.636s] 3: +  }
[3.636s] 3: +  virtual void sendRecv(const LowlevelCmd * cmd, LowlevelState * state) = 0;
[3.636s] 3: +  void zeroCmdPanel() {cmdPanel->setZero();}
[3.636s] 3: +  void setPassive() {cmdPanel->setPassive();}
[3.636s] 3: @@ -21 +24 @@
[3.636s] 3: -CmdPanel *cmdPanel;
[3.636s] 3: +  CmdPanel * cmdPanel;
[3.636s] 3: @@ -24 +27 @@
[3.636s] 3: -#endif  //IOINTERFACE_H
[3.636s] 3: +#endif  //IOINTERFACE_H
[3.636s] 3: 
[3.636s] 3: Code style divergence in file 'include/interface/IOROS.h':
[3.636s] 3: 
[3.636s] 3: --- include/interface/IOROS.h
[3.636s] 3: +++ include/interface/IOROS.h.uncrustify
[3.636s] 3: @@ -18 +18 @@
[3.636s] 3: -class IOROS : public IOInterface{
[3.636s] 3: +class IOROS: public IOInterface {
[3.636s] 3: @@ -20,3 +20,3 @@
[3.636s] 3: -IOROS();
[3.637s] 3: -~IOROS();
[3.637s] 3: -void sendRecv(const LowlevelCmd *cmd, LowlevelState *state);
[3.637s] 3: +  IOROS();
[3.637s] 3: +  ~IOROS();
[3.637s] 3: +  void sendRecv(const LowlevelCmd * cmd, LowlevelState * state);
[3.637s] 3: @@ -25,8 +25,8 @@
[3.637s] 3: -void sendCmd(const LowlevelCmd *cmd);
[3.637s] 3: -void recvState(LowlevelState *state);
[3.637s] 3: -ros::NodeHandle _nm;
[3.637s] 3: -ros::Subscriber _servo_sub[12], _imu_sub;
[3.637s] 3: -ros::Publisher _servo_pub[12];
[3.637s] 3: -unitree_legged_msgs::LowCmd _lowCmd;
[3.637s] 3: -unitree_legged_msgs::LowState _lowState;
[3.637s] 3: -std::string _robot_name;
[3.637s] 3: +  void sendCmd(const LowlevelCmd * cmd);
[3.637s] 3: +  void recvState(LowlevelState * state);
[3.637s] 3: +  ros::NodeHandle _nm;
[3.637s] 3: +  ros::Subscriber _servo_sub[12], _imu_sub;
[3.637s] 3: +  ros::Publisher _servo_pub[12];
[3.637s] 3: +  unitree_legged_msgs::LowCmd _lowCmd;
[3.637s] 3: +  unitree_legged_msgs::LowState _lowState;
[3.637s] 3: +  std::string _robot_name;
[3.638s] 3: @@ -35,2 +35,2 @@
[3.638s] 3: -void initRecv();
[3.638s] 3: -void initSend();
[3.638s] 3: +  void initRecv();
[3.638s] 3: +  void initSend();
[3.638s] 3: @@ -39 +39 @@
[3.638s] 3: -void imuCallback(const sensor_msgs::Imu & msg);
[3.638s] 3: +  void imuCallback(const sensor_msgs::Imu & msg);
[3.638s] 3: @@ -41,3 +41,3 @@
[3.638s] 3: -void FRhipCallback(const unitree_legged_msgs::MotorState& msg);
[3.638s] 3: -void FRthighCallback(const unitree_legged_msgs::MotorState& msg);
[3.638s] 3: -void FRcalfCallback(const unitree_legged_msgs::MotorState& msg);
[3.638s] 3: +  void FRhipCallback(const unitree_legged_msgs::MotorState & msg);
[3.638s] 3: +  void FRthighCallback(const unitree_legged_msgs::MotorState & msg);
[3.638s] 3: +  void FRcalfCallback(const unitree_legged_msgs::MotorState & msg);
[3.639s] 3: @@ -45,3 +45,3 @@
[3.639s] 3: -void FLhipCallback(const unitree_legged_msgs::MotorState& msg);
[3.639s] 3: -void FLthighCallback(const unitree_legged_msgs::MotorState& msg);
[3.639s] 3: -void FLcalfCallback(const unitree_legged_msgs::MotorState& msg);
[3.639s] 3: +  void FLhipCallback(const unitree_legged_msgs::MotorState & msg);
[3.639s] 3: +  void FLthighCallback(const unitree_legged_msgs::MotorState & msg);
[3.639s] 3: +  void FLcalfCallback(const unitree_legged_msgs::MotorState & msg);
[3.639s] 3: @@ -49,3 +49,3 @@
[3.639s] 3: -void RRhipCallback(const unitree_legged_msgs::MotorState& msg);
[3.639s] 3: -void RRthighCallback(const unitree_legged_msgs::MotorState& msg);
[3.639s] 3: -void RRcalfCallback(const unitree_legged_msgs::MotorState& msg);
[3.639s] 3: +  void RRhipCallback(const unitree_legged_msgs::MotorState & msg);
[3.639s] 3: +  void RRthighCallback(const unitree_legged_msgs::MotorState & msg);
[3.639s] 3: +  void RRcalfCallback(const unitree_legged_msgs::MotorState & msg);
[3.639s] 3: @@ -53,3 +53,3 @@
[3.640s] 3: -void RLhipCallback(const unitree_legged_msgs::MotorState& msg);
[3.640s] 3: -void RLthighCallback(const unitree_legged_msgs::MotorState& msg);
[3.640s] 3: -void RLcalfCallback(const unitree_legged_msgs::MotorState& msg);
[3.640s] 3: +  void RLhipCallback(const unitree_legged_msgs::MotorState & msg);
[3.640s] 3: +  void RLthighCallback(const unitree_legged_msgs::MotorState & msg);
[3.640s] 3: +  void RLcalfCallback(const unitree_legged_msgs::MotorState & msg);
[3.640s] 3: @@ -79 +79 @@
[3.640s] 3: -class IOROS : public IOInterface{
[3.640s] 3: +class IOROS: public IOInterface {
[3.640s] 3: @@ -81,3 +81,3 @@
[3.640s] 3: -IOROS(rclcpp::Node::SharedPtr node_ptr);
[3.640s] 3: -~IOROS();
[3.640s] 3: -void sendRecv(const LowlevelCmd *cmd, LowlevelState *state);
[3.640s] 3: +  IOROS(rclcpp::Node::SharedPtr node_ptr);
[3.640s] 3: +  ~IOROS();
[3.640s] 3: +  void sendRecv(const LowlevelCmd * cmd, LowlevelState * state);
[3.640s] 3: @@ -86,14 +86,16 @@
[3.640s] 3: -static void RosShutDown(int sig);
[3.640s] 3: -void sendCmd(const LowlevelCmd *cmd);
[3.640s] 3: -void recvState(LowlevelState *state);
[3.640s] 3: -rclcpp::Node::SharedPtr _nm;
[3.640s] 3: -rclcpp::Subscription<sensor_msgs::msg::Imu>::SharedPtr _imu_sub;
[3.641s] 3: -rclcpp::Subscription<sensor_msgs::msg::JointState>::SharedPtr _joint_state_sub;
[3.641s] 3: -std::vector<rclcpp::Subscription<ros2_unitree_legged_msgs::msg::MotorState>::SharedPtr> _servo_sub;
[3.641s] 3: -std::vector<rclcpp::Publisher<ros2_unitree_legged_msgs::msg::MotorCmd>::SharedPtr> _servo_pub;
[3.641s] 3: -rclcpp::Publisher<std_msgs::msg::Float64MultiArray>::SharedPtr _joint_cmd_pub;
[3.641s] 3: -ros2_unitree_legged_msgs::msg::LowCmd _lowCmd;
[3.641s] 3: -ros2_unitree_legged_msgs::msg::LowState _lowState;
[3.641s] 3: -std::string _robot_name;
[3.641s] 3: -std::unordered_map<std::string, int> joint_index_map;
[3.641s] 3: -std::thread executor_thread;
[3.641s] 3: +  static void RosShutDown(int sig);
[3.641s] 3: +  void sendCmd(const LowlevelCmd * cmd);
[3.641s] 3: +  void recvState(LowlevelState * state);
[3.641s] 3: +  rclcpp::Node::SharedPtr _nm;
[3.641s] 3: +  rclcpp::Subscription < sensor_msgs::msg::Imu > ::SharedPtr _imu_sub;
[3.641s] 3: +  rclcpp::Subscription < sensor_msgs::msg::JointState > ::SharedPtr _joint_state_sub;
[3.641s] 3: +  std::vector < rclcpp::Subscription < ros2_unitree_legged_msgs::msg::MotorState > ::SharedPtr >
[3.641s] 3: +  _servo_sub;
[3.641s] 3: +  std::vector < rclcpp::Publisher < ros2_unitree_legged_msgs::msg::MotorCmd > ::SharedPtr >
[3.641s] 3: +  _servo_pub;
[3.641s] 3: +  rclcpp::Publisher < std_msgs::msg::Float64MultiArray > ::SharedPtr _joint_cmd_pub;
[3.641s] 3: +  ros2_unitree_legged_msgs::msg::LowCmd _lowCmd;
[3.641s] 3: +  ros2_unitree_legged_msgs::msg::LowState _lowState;
[3.641s] 3: +  std::string _robot_name;
[3.642s] 3: +  std::unordered_map < std::string, int > joint_index_map;
[3.642s] 3: +  std::thread executor_thread;
[3.642s] 3: @@ -101,2 +103,2 @@
[3.642s] 3: -sensor_msgs::msg::JointState _joint_state;
[3.642s] 3: -std_msgs::msg::Float64MultiArray _joint_cmd;
[3.642s] 3: +  sensor_msgs::msg::JointState _joint_state;
[3.642s] 3: +  std_msgs::msg::Float64MultiArray _joint_cmd;
[3.642s] 3: @@ -105,2 +107,2 @@
[3.642s] 3: -void initRecv();
[3.642s] 3: -void initSend();
[3.642s] 3: +  void initRecv();
[3.642s] 3: +  void initSend();
[3.642s] 3: @@ -109 +111 @@
[3.642s] 3: -void imuCallback(const sensor_msgs::msg::Imu::SharedPtr msg);
[3.642s] 3: +  void imuCallback(const sensor_msgs::msg::Imu::SharedPtr msg);
[3.642s] 3: @@ -112,3 +114,3 @@
[3.642s] 3: -void FRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.642s] 3: -void FRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.642s] 3: -void FRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.642s] 3: +  void FRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.642s] 3: +  void FRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.642s] 3: +  void FRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.642s] 3: @@ -116,3 +118,3 @@
[3.643s] 3: -void FLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: -void FLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: -void FLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void FLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void FLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void FLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: @@ -120,3 +122,3 @@
[3.643s] 3: -void RRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: -void RRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: -void RRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void RRhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void RRthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void RRcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: @@ -124,3 +126,3 @@
[3.643s] 3: -void RLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: -void RLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: -void RLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void RLhipCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void RLthighCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: +  void RLcalfCallback(const ros2_unitree_legged_msgs::msg::MotorState::SharedPtr msg);
[3.643s] 3: @@ -129,2 +131,2 @@
[3.643s] 3: -void initializeJointIndexMap();
[3.643s] 3: -void jointStateCallback(const sensor_msgs::msg::JointState::SharedPtr msg);
[3.644s] 3: +  void initializeJointIndexMap();
[3.644s] 3: +  void jointStateCallback(const sensor_msgs::msg::JointState::SharedPtr msg);
[3.644s] 3: @@ -136 +138 @@
[3.644s] 3: -#endif  // COMPILE_WITH_ROS2_MB
[3.644s] 3: +#endif  // COMPILE_WITH_ROS2_MB
[3.644s] 3: 
[3.644s] 3: Code style divergence in file 'include/interface/IOSDK.h':
[3.644s] 3: 
[3.644s] 3: --- include/interface/IOSDK.h
[3.644s] 3: +++ include/interface/IOSDK.h.uncrustify
[3.644s] 3: @@ -22 +22 @@
[3.644s] 3: -class IOSDK : public IOInterface{
[3.644s] 3: +class IOSDK: public IOInterface {
[3.644s] 3: @@ -24,3 +24,4 @@
[3.644s] 3: -IOSDK();
[3.644s] 3: -~IOSDK(){}
[3.644s] 3: -void sendRecv(const LowlevelCmd *cmd, LowlevelState *state);
[3.644s] 3: +  IOSDK();
[3.644s] 3: +  ~IOSDK() {
[3.644s] 3: +  }
[3.644s] 3: +  void sendRecv(const LowlevelCmd * cmd, LowlevelState * state);
[3.644s] 3: @@ -29,4 +30,4 @@
[3.644s] 3: -UNITREE_LEGGED_SDK::UDP _udp;
[3.645s] 3: -UNITREE_LEGGED_SDK::Safety _safe;
[3.645s] 3: -UNITREE_LEGGED_SDK::LowCmd _lowCmd;
[3.645s] 3: -UNITREE_LEGGED_SDK::LowState _lowState;
[3.645s] 3: +  UNITREE_LEGGED_SDK::UDP _udp;
[3.645s] 3: +  UNITREE_LEGGED_SDK::Safety _safe;
[3.645s] 3: +  UNITREE_LEGGED_SDK::LowCmd _lowCmd;
[3.645s] 3: +  UNITREE_LEGGED_SDK::LowState _lowState;
[3.645s] 3: @@ -35,3 +36,3 @@
[3.645s] 3: -    ros::NodeHandle _nh;
[3.645s] 3: -    ros::Publisher _pub;
[3.645s] 3: -    sensor_msgs::JointState _joint_state;
[3.645s] 3: +  ros::NodeHandle _nh;
[3.645s] 3: +  ros::Publisher _pub;
[3.645s] 3: +  sensor_msgs::JointState _joint_state;
[3.645s] 3: @@ -41,3 +42,3 @@
[3.645s] 3: -    rclcpp::Node::SharedPtr _nh;
[3.645s] 3: -    rclcpp::Publisher<sensor_msgs::msg::JointState>::SharedPtr _pub;
[3.645s] 3: -    sensor_msgs::msg::JointState _joint_state;
[3.645s] 3: +  rclcpp::Node::SharedPtr _nh;
[3.646s] 3: +  rclcpp::Publisher < sensor_msgs::msg::JointState > ::SharedPtr _pub;
[3.646s] 3: +  sensor_msgs::msg::JointState _joint_state;
[3.646s] 3: @@ -48 +49 @@
[3.646s] 3: -#endif  // IOSDK_H
[3.646s] 3: +#endif  // IOSDK_H
[3.646s] 3: 
[3.646s] 3: Code style divergence in file 'include/interface/KeyBoard.h':
[3.646s] 3: 
[3.646s] 3: --- include/interface/KeyBoard.h
[3.646s] 3: +++ include/interface/KeyBoard.h.uncrustify
[3.646s] 3: @@ -17 +17 @@
[3.646s] 3: -class KeyBoard : public CmdPanel{
[3.646s] 3: +class KeyBoard: public CmdPanel {
[3.646s] 3: @@ -19,2 +19,3 @@
[3.646s] 3: -    KeyBoard();
[3.646s] 3: -    ~KeyBoard();
[3.646s] 3: +  KeyBoard();
[3.646s] 3: +  ~KeyBoard();
[3.646s] 3: +
[3.647s] 3: @@ -22,4 +23,4 @@
[3.647s] 3: -    static void* runKeyBoard(void *arg);
[3.647s] 3: -    void* run(void *arg);
[3.647s] 3: -    UserCommand checkCmd();
[3.647s] 3: -    void changeValue();
[3.647s] 3: +  static void * runKeyBoard(void * arg);
[3.647s] 3: +  void * run(void * arg);
[3.647s] 3: +  UserCommand checkCmd();
[3.647s] 3: +  void changeValue();
[3.647s] 3: @@ -27,8 +28,8 @@
[3.647s] 3: -    pthread_t _tid;
[3.647s] 3: -    float sensitivityLeft = 0.05;
[3.647s] 3: -    float sensitivityRight = 0.05;
[3.647s] 3: -    struct termios _oldSettings, _newSettings;
[3.647s] 3: -    fd_set set;
[3.647s] 3: -    int res;
[3.647s] 3: -    int ret;
[3.647s] 3: -    char _c;
[3.647s] 3: +  pthread_t _tid;
[3.647s] 3: +  float sensitivityLeft = 0.05;
[3.647s] 3: +  float sensitivityRight = 0.05;
[3.647s] 3: +  struct termios _oldSettings, _newSettings;
[3.647s] 3: +  fd_set set;
[3.648s] 3: +  int res;
[3.648s] 3: +  int ret;
[3.648s] 3: +  char _c;
[3.648s] 3: @@ -37 +38 @@
[3.648s] 3: -#endif  // KEYBOARD_H
[3.648s] 3: +#endif  // KEYBOARD_H
[3.648s] 3: 
[3.648s] 3: Code style divergence in file 'include/interface/WirelessHandle.h':
[3.648s] 3: 
[3.648s] 3: --- include/interface/WirelessHandle.h
[3.648s] 3: +++ include/interface/WirelessHandle.h.uncrustify
[3.648s] 3: @@ -11 +11 @@
[3.648s] 3: -class WirelessHandle : public CmdPanel{
[3.648s] 3: +class WirelessHandle: public CmdPanel {
[3.648s] 3: @@ -13,3 +13,5 @@
[3.648s] 3: -    WirelessHandle();
[3.648s] 3: -    ~WirelessHandle(){}
[3.648s] 3: -    void receiveHandle(UNITREE_LEGGED_SDK::LowState *lowState);
[3.648s] 3: +  WirelessHandle();
[3.648s] 3: +  ~WirelessHandle() {
[3.648s] 3: +  }
[3.648s] 3: +  void receiveHandle(UNITREE_LEGGED_SDK::LowState * lowState);
[3.648s] 3: +
[3.649s] 3: @@ -17 +19 @@
[3.649s] 3: -    xRockerBtnDataStruct _keyData;
[3.649s] 3: +  xRockerBtnDataStruct _keyData;
[3.649s] 3: @@ -20 +22 @@
[3.649s] 3: -#endif  // WIRELESSHANDLE_H
[3.649s] 3: +#endif  // WIRELESSHANDLE_H
[3.649s] 3: 
[3.649s] 3: Code style divergence in file 'include/message/LowlevelCmd.h':
[3.649s] 3: 
[3.649s] 3: --- include/message/LowlevelCmd.h
[3.649s] 3: +++ include/message/LowlevelCmd.h.uncrustify
[3.649s] 3: @@ -10,7 +10,8 @@
[3.649s] 3: -struct MotorCmd{
[3.649s] 3: -    unsigned int mode;
[3.649s] 3: -    float q;
[3.649s] 3: -    float dq;
[3.649s] 3: -    float tau;
[3.649s] 3: -    float Kp;
[3.649s] 3: -    float Kd;
[3.649s] 3: +struct MotorCmd
[3.649s] 3: +{
[3.649s] 3: +  unsigned int mode;
[3.650s] 3: +  float q;
[3.650s] 3: +  float dq;
[3.650s] 3: +  float tau;
[3.650s] 3: +  float Kp;
[3.650s] 3: +  float Kd;
[3.650s] 3: @@ -18,8 +19,8 @@
[3.650s] 3: -    MotorCmd(){
[3.650s] 3: -        mode = 0;
[3.650s] 3: -        q = 0;
[3.650s] 3: -        dq = 0;
[3.650s] 3: -        tau = 0;
[3.650s] 3: -        Kp = 0;
[3.650s] 3: -        Kd = 0;
[3.650s] 3: -    }
[3.650s] 3: +  MotorCmd() {
[3.650s] 3: +    mode = 0;
[3.650s] 3: +    q = 0;
[3.650s] 3: +    dq = 0;
[3.650s] 3: +    tau = 0;
[3.650s] 3: +    Kp = 0;
[3.650s] 3: +    Kd = 0;
[3.650s] 3: +  }
[3.650s] 3: @@ -28,2 +29,3 @@
[3.651s] 3: -struct LowlevelCmd{
[3.651s] 3: -    MotorCmd motorCmd[12];
[3.651s] 3: +struct LowlevelCmd
[3.651s] 3: +{
[3.651s] 3: +  MotorCmd motorCmd[12];
[3.651s] 3: @@ -31,4 +33,4 @@
[3.651s] 3: -    void setQ(Vec12 q){
[3.651s] 3: -        for(int i(0); i<12; ++i){
[3.651s] 3: -            motorCmd[i].q = q(i);
[3.651s] 3: -        }
[3.651s] 3: +  void setQ(Vec12 q)
[3.651s] 3: +  {
[3.651s] 3: +    for (int i(0); i < 12; ++i) {
[3.651s] 3: +      motorCmd[i].q = q(i);
[3.651s] 3: @@ -36,4 +38,11 @@
[3.651s] 3: -    void setQ(int legID, Vec3 qi){
[3.651s] 3: -        motorCmd[legID*3+0].q = qi(0);
[3.652s] 3: -        motorCmd[legID*3+1].q = qi(1);
[3.652s] 3: -        motorCmd[legID*3+2].q = qi(2);
[3.652s] 3: +  }
[3.652s] 3: +  void setQ(int legID, Vec3 qi)
[3.652s] 3: +  {
[3.652s] 3: +    motorCmd[legID * 3 + 0].q = qi(0);
[3.652s] 3: +    motorCmd[legID * 3 + 1].q = qi(1);
[3.652s] 3: +    motorCmd[legID * 3 + 2].q = qi(2);
[3.652s] 3: +  }
[3.652s] 3: +  void setQd(Vec12 qd)
[3.652s] 3: +  {
[3.652s] 3: +    for (int i(0); i < 12; ++i) {
[3.652s] 3: +      motorCmd[i].dq = qd(i);
[3.652s] 3: @@ -41,4 +50,14 @@
[3.652s] 3: -    void setQd(Vec12 qd){
[3.652s] 3: -        for(int i(0); i<12; ++i){
[3.652s] 3: -            motorCmd[i].dq = qd(i);
[3.652s] 3: -        }
[3.652s] 3: +  }
[3.653s] 3: +  void setQd(int legID, Vec3 qdi)
[3.653s] 3: +  {
[3.653s] 3: +    motorCmd[legID * 3 + 0].dq = qdi(0);
[3.653s] 3: +    motorCmd[legID * 3 + 1].dq = qdi(1);
[3.653s] 3: +    motorCmd[legID * 3 + 2].dq = qdi(2);
[3.653s] 3: +  }
[3.653s] 3: +  void setTau(Vec12 tau, Vec2 torqueLimit = Vec2(-50, 50))
[3.653s] 3: +  {
[3.653s] 3: +    for (int i(0); i < 12; ++i) {
[3.653s] 3: +      if (std::isnan(tau(i))) {
[3.653s] 3: +        printf("[ERROR] The setTau function meets Nan\n");
[3.653s] 3: +      }
[3.653s] 3: +      motorCmd[i].tau = saturation(tau(i), torqueLimit);
[3.653s] 3: @@ -46,4 +65,11 @@
[3.653s] 3: -    void setQd(int legID, Vec3 qdi){
[3.653s] 3: -        motorCmd[legID*3+0].dq = qdi(0);
[3.653s] 3: -        motorCmd[legID*3+1].dq = qdi(1);
[3.653s] 3: -        motorCmd[legID*3+2].dq = qdi(2);
[3.653s] 3: +  }
[3.653s] 3: +  void setZeroDq(int legID)
[3.653s] 3: +  {
[3.653s] 3: +    motorCmd[legID * 3 + 0].dq = 0;
[3.653s] 3: +    motorCmd[legID * 3 + 1].dq = 0;
[3.654s] 3: +    motorCmd[legID * 3 + 2].dq = 0;
[3.654s] 3: +  }
[3.654s] 3: +  void setZeroDq()
[3.654s] 3: +  {
[3.654s] 3: +    for (int i(0); i < 4; ++i) {
[3.654s] 3: +      setZeroDq(i);
[3.654s] 3: @@ -51,7 +77,47 @@
[3.654s] 3: -    void setTau(Vec12 tau, Vec2 torqueLimit = Vec2(-50, 50)){
[3.654s] 3: -        for(int i(0); i<12; ++i){
[3.654s] 3: -            if(std::isnan(tau(i))){
[3.654s] 3: -                printf("[ERROR] The setTau function meets Nan\n");
[3.654s] 3: -            }
[3.654s] 3: -            motorCmd[i].tau = saturation(tau(i), torqueLimit);
[3.654s] 3: -        }
[3.654s] 3: +  }
[3.654s] 3: +  void setZeroTau(int legID)
[3.654s] 3: +  {
[3.654s] 3: +    motorCmd[legID * 3 + 0].tau = 0;
[3.654s] 3: +    motorCmd[legID * 3 + 1].tau = 0;
[3.654s] 3: +    motorCmd[legID * 3 + 2].tau = 0;
[3.654s] 3: +  }
[3.654s] 3: +  void setSimStanceGain(int legID)
[3.655s] 3: +  {
[3.655s] 3: +    motorCmd[legID * 3 + 0].mode = 10;
[3.655s] 3: +    motorCmd[legID * 3 + 0].Kp = 180;
[3.655s] 3: +    motorCmd[legID * 3 + 0].Kd = 8;
[3.655s] 3: +    motorCmd[legID * 3 + 1].mode = 10;
[3.655s] 3: +    motorCmd[legID * 3 + 1].Kp = 180;
[3.655s] 3: +    motorCmd[legID * 3 + 1].Kd = 8;
[3.655s] 3: +    motorCmd[legID * 3 + 2].mode = 10;
[3.655s] 3: +    motorCmd[legID * 3 + 2].Kp = 300;
[3.655s] 3: +    motorCmd[legID * 3 + 2].Kd = 15;
[3.655s] 3: +  }
[3.655s] 3: +  void setRealStanceGain(int legID)
[3.655s] 3: +  {
[3.655s] 3: +    motorCmd[legID * 3 + 0].mode = 10;
[3.655s] 3: +    motorCmd[legID * 3 + 0].Kp = 60;
[3.655s] 3: +    motorCmd[legID * 3 + 0].Kd = 5;
[3.655s] 3: +    motorCmd[legID * 3 + 1].mode = 10;
[3.655s] 3: +    motorCmd[legID * 3 + 1].Kp = 40;
[3.655s] 3: +    motorCmd[legID * 3 + 1].Kd = 4;
[3.655s] 3: +    motorCmd[legID * 3 + 2].mode = 10;
[3.655s] 3: +    motorCmd[legID * 3 + 2].Kp = 80;
[3.655s] 3: +    motorCmd[legID * 3 + 2].Kd = 7;
[3.655s] 3: +  }
[3.656s] 3: +  void setZeroGain(int legID)
[3.656s] 3: +  {
[3.656s] 3: +    motorCmd[legID * 3 + 0].mode = 10;
[3.656s] 3: +    motorCmd[legID * 3 + 0].Kp = 0;
[3.656s] 3: +    motorCmd[legID * 3 + 0].Kd = 0;
[3.656s] 3: +    motorCmd[legID * 3 + 1].mode = 10;
[3.656s] 3: +    motorCmd[legID * 3 + 1].Kp = 0;
[3.656s] 3: +    motorCmd[legID * 3 + 1].Kd = 0;
[3.656s] 3: +    motorCmd[legID * 3 + 2].mode = 10;
[3.656s] 3: +    motorCmd[legID * 3 + 2].Kp = 0;
[3.656s] 3: +    motorCmd[legID * 3 + 2].Kd = 0;
[3.656s] 3: +  }
[3.656s] 3: +  void setZeroGain()
[3.656s] 3: +  {
[3.656s] 3: +    for (int i(0); i < 4; ++i) {
[3.656s] 3: +      setZeroGain(i);
[3.656s] 3: @@ -59,4 +125,17 @@
[3.656s] 3: -    void setZeroDq(int legID){
[3.656s] 3: -        motorCmd[legID*3+0].dq = 0;
[3.656s] 3: -        motorCmd[legID*3+1].dq = 0;
[3.656s] 3: -        motorCmd[legID*3+2].dq = 0;
[3.656s] 3: +  }
[3.656s] 3: +  void setStableGain(int legID)
[3.657s] 3: +  {
[3.657s] 3: +    motorCmd[legID * 3 + 0].mode = 10;
[3.657s] 3: +    motorCmd[legID * 3 + 0].Kp = 0.8;
[3.657s] 3: +    motorCmd[legID * 3 + 0].Kd = 0.8;
[3.657s] 3: +    motorCmd[legID * 3 + 1].mode = 10;
[3.657s] 3: +    motorCmd[legID * 3 + 1].Kp = 0.8;
[3.657s] 3: +    motorCmd[legID * 3 + 1].Kd = 0.8;
[3.657s] 3: +    motorCmd[legID * 3 + 2].mode = 10;
[3.657s] 3: +    motorCmd[legID * 3 + 2].Kp = 0.8;
[3.657s] 3: +    motorCmd[legID * 3 + 2].Kd = 0.8;
[3.657s] 3: +  }
[3.657s] 3: +  void setStableGain()
[3.657s] 3: +  {
[3.657s] 3: +    for (int i(0); i < 4; ++i) {
[3.657s] 3: +      setStableGain(i);
[3.657s] 3: @@ -64,75 +143,13 @@
[3.657s] 3: -    void setZeroDq(){
[3.657s] 3: -        for(int i(0); i<4; ++i){
[3.657s] 3: -            setZeroDq(i);
[3.657s] 3: -        }
[3.657s] 3: -    }
[3.657s] 3: -    void setZeroTau(int legID){
[3.657s] 3: -        motorCmd[legID*3+0].tau = 0;
[3.658s] 3: -        motorCmd[legID*3+1].tau = 0;
[3.658s] 3: -        motorCmd[legID*3+2].tau = 0;
[3.658s] 3: -    }
[3.658s] 3: -    void setSimStanceGain(int legID){
[3.658s] 3: -        motorCmd[legID*3+0].mode = 10;
[3.658s] 3: -        motorCmd[legID*3+0].Kp = 180;
[3.658s] 3: -        motorCmd[legID*3+0].Kd = 8;
[3.658s] 3: -        motorCmd[legID*3+1].mode = 10;
[3.658s] 3: -        motorCmd[legID*3+1].Kp = 180;
[3.658s] 3: -        motorCmd[legID*3+1].Kd = 8;
[3.658s] 3: -        motorCmd[legID*3+2].mode = 10;
[3.658s] 3: -        motorCmd[legID*3+2].Kp = 300;
[3.658s] 3: -        motorCmd[legID*3+2].Kd = 15;
[3.658s] 3: -    }
[3.658s] 3: -    void setRealStanceGain(int legID){
[3.658s] 3: -        motorCmd[legID*3+0].mode = 10;
[3.658s] 3: -        motorCmd[legID*3+0].Kp = 60;
[3.658s] 3: -        motorCmd[legID*3+0].Kd = 5;
[3.658s] 3: -        motorCmd[legID*3+1].mode = 10;
[3.658s] 3: -        motorCmd[legID*3+1].Kp = 40;
[3.658s] 3: -        motorCmd[legID*3+1].Kd = 4;
[3.658s] 3: -        motorCmd[legID*3+2].mode = 10;
[3.658s] 3: -        motorCmd[legID*3+2].Kp = 80;
[3.659s] 3: -        motorCmd[legID*3+2].Kd = 7;
[3.659s] 3: -    }
[3.659s] 3: -    void setZeroGain(int legID){
[3.659s] 3: -        motorCmd[legID*3+0].mode = 10;
[3.659s] 3: -        motorCmd[legID*3+0].Kp = 0;
[3.659s] 3: -        motorCmd[legID*3+0].Kd = 0;
[3.659s] 3: -        motorCmd[legID*3+1].mode = 10;
[3.659s] 3: -        motorCmd[legID*3+1].Kp = 0;
[3.659s] 3: -        motorCmd[legID*3+1].Kd = 0;
[3.659s] 3: -        motorCmd[legID*3+2].mode = 10;
[3.659s] 3: -        motorCmd[legID*3+2].Kp = 0;
[3.659s] 3: -        motorCmd[legID*3+2].Kd = 0;
[3.659s] 3: -    }
[3.659s] 3: -    void setZeroGain(){
[3.659s] 3: -        for(int i(0); i<4; ++i){
[3.659s] 3: -            setZeroGain(i);
[3.659s] 3: -        }
[3.659s] 3: -    }
[3.659s] 3: -    void setStableGain(int legID){
[3.659s] 3: -        motorCmd[legID*3+0].mode = 10;
[3.659s] 3: -        motorCmd[legID*3+0].Kp = 0.8;
[3.659s] 3: -        motorCmd[legID*3+0].Kd = 0.8;
[3.659s] 3: -        motorCmd[legID*3+1].mode = 10;
[3.660s] 3: -        motorCmd[legID*3+1].Kp = 0.8;
[3.660s] 3: -        motorCmd[legID*3+1].Kd = 0.8;
[3.660s] 3: -        motorCmd[legID*3+2].mode = 10;
[3.660s] 3: -        motorCmd[legID*3+2].Kp = 0.8;
[3.660s] 3: -        motorCmd[legID*3+2].Kd = 0.8;
[3.660s] 3: -    }
[3.660s] 3: -    void setStableGain(){
[3.660s] 3: -        for(int i(0); i<4; ++i){
[3.660s] 3: -            setStableGain(i);
[3.660s] 3: -        }
[3.660s] 3: -    }
[3.660s] 3: -    void setSwingGain(int legID){
[3.660s] 3: -        motorCmd[legID*3+0].mode = 10;
[3.660s] 3: -        motorCmd[legID*3+0].Kp = 3;
[3.660s] 3: -        motorCmd[legID*3+0].Kd = 2;
[3.660s] 3: -        motorCmd[legID*3+1].mode = 10;
[3.660s] 3: -        motorCmd[legID*3+1].Kp = 3;
[3.660s] 3: -        motorCmd[legID*3+1].Kd = 2;
[3.660s] 3: -        motorCmd[legID*3+2].mode = 10;
[3.660s] 3: -        motorCmd[legID*3+2].Kp = 3;
[3.660s] 3: -        motorCmd[legID*3+2].Kd = 2;
[3.660s] 3: -    }
[3.660s] 3: +  }
[3.661s] 3: +  void setSwingGain(int legID)
[3.661s] 3: +  {
[3.661s] 3: +    motorCmd[legID * 3 + 0].mode = 10;
[3.661s] 3: +    motorCmd[legID * 3 + 0].Kp = 3;
[3.661s] 3: +    motorCmd[legID * 3 + 0].Kd = 2;
[3.661s] 3: +    motorCmd[legID * 3 + 1].mode = 10;
[3.661s] 3: +    motorCmd[legID * 3 + 1].Kp = 3;
[3.661s] 3: +    motorCmd[legID * 3 + 1].Kd = 2;
[3.661s] 3: +    motorCmd[legID * 3 + 2].mode = 10;
[3.661s] 3: +    motorCmd[legID * 3 + 2].Kp = 3;
[3.661s] 3: +    motorCmd[legID * 3 + 2].Kd = 2;
[3.662s] 3: +  }
[3.662s] 3: @@ -141 +158 @@
[3.662s] 3: -#endif  //LOWLEVELCMD_H
[3.662s] 3: +#endif  //LOWLEVELCMD_H
[3.662s] 3: 
[3.662s] 3: Code style divergence in file 'include/message/LowlevelState.h':
[3.662s] 3: 
[3.662s] 3: --- include/message/LowlevelState.h
[3.662s] 3: +++ include/message/LowlevelState.h.uncrustify
[3.662s] 3: @@ -15,5 +15,5 @@
[3.663s] 3: -	unsigned int mode;
[3.663s] 3: -    float q;
[3.663s] 3: -    float dq;
[3.663s] 3: -    float ddq;
[3.663s] 3: -    float tauEst;
[3.663s] 3: +  unsigned int mode;
[3.663s] 3: +  float q;
[3.663s] 3: +  float dq;
[3.663s] 3: +  float ddq;
[3.663s] 3: +  float tauEst;
[3.663s] 3: @@ -21,6 +21,6 @@
[3.663s] 3: -    MotorState(){
[3.663s] 3: -        q = 0;
[3.663s] 3: -        dq = 0;
[3.663s] 3: -        ddq = 0;
[3.663s] 3: -        tauEst = 0;
[3.663s] 3: -    }
[3.663s] 3: +  MotorState() {
[3.663s] 3: +    q = 0;
[3.663s] 3: +    dq = 0;
[3.663s] 3: +    ddq = 0;
[3.663s] 3: +    tauEst = 0;
[3.663s] 3: +  }
[3.664s] 3: @@ -31,3 +31,3 @@
[3.664s] 3: -    float quaternion[4];    // w, x, y, z
[3.664s] 3: -    float gyroscope[3];
[3.664s] 3: -    float accelerometer[3];
[3.664s] 3: +  float quaternion[4];      // w, x, y, z
[3.664s] 3: +  float gyroscope[3];
[3.664s] 3: +  float accelerometer[3];
[3.664s] 3: @@ -35,7 +35,5 @@
[3.664s] 3: -    IMU(){
[3.664s] 3: -        for(int i = 0; i < 3; i++){
[3.664s] 3: -            quaternion[i] = 0;
[3.664s] 3: -            gyroscope[i] = 0;
[3.664s] 3: -            accelerometer[i] = 0;
[3.664s] 3: -        }
[3.664s] 3: -        quaternion[3] = 0;
[3.664s] 3: +  IMU() {
[3.664s] 3: +    for (int i = 0; i < 3; i++) {
[3.664s] 3: +      quaternion[i] = 0;
[3.664s] 3: +      gyroscope[i] = 0;
[3.664s] 3: +      accelerometer[i] = 0;
[3.664s] 3: @@ -42,0 +41,2 @@
[3.664s] 3: +    quaternion[3] = 0;
[3.664s] 3: +  }
[3.665s] 3: @@ -44,5 +44,6 @@
[3.665s] 3: -    RotMat getRotMat(){
[3.665s] 3: -        Quat quat;
[3.665s] 3: -        quat << quaternion[0], quaternion[1], quaternion[2], quaternion[3];
[3.665s] 3: -        return quatToRotMat(quat);
[3.665s] 3: -    }
[3.665s] 3: +  RotMat getRotMat()
[3.665s] 3: +  {
[3.665s] 3: +    Quat quat;
[3.665s] 3: +    quat << quaternion[0], quaternion[1], quaternion[2], quaternion[3];
[3.665s] 3: +    return quatToRotMat(quat);
[3.665s] 3: +  }
[3.665s] 3: @@ -50,5 +51,6 @@
[3.665s] 3: -    Vec3 getAcc(){
[3.665s] 3: -        Vec3 acc;
[3.665s] 3: -        acc << accelerometer[0], accelerometer[1], accelerometer[2];
[3.665s] 3: -        return acc;
[3.665s] 3: -    }
[3.665s] 3: +  Vec3 getAcc()
[3.665s] 3: +  {
[3.665s] 3: +    Vec3 acc;
[3.665s] 3: +    acc << accelerometer[0], accelerometer[1], accelerometer[2];
[3.665s] 3: +    return acc;
[3.666s] 3: +  }
[3.666s] 3: @@ -56,5 +58,6 @@
[3.666s] 3: -    Vec3 getGyro(){
[3.666s] 3: -        Vec3 gyro;
[3.666s] 3: -        gyro << gyroscope[0], gyroscope[1], gyroscope[2];
[3.666s] 3: -        return gyro;
[3.666s] 3: -    }
[3.666s] 3: +  Vec3 getGyro()
[3.666s] 3: +  {
[3.666s] 3: +    Vec3 gyro;
[3.666s] 3: +    gyro << gyroscope[0], gyroscope[1], gyroscope[2];
[3.666s] 3: +    return gyro;
[3.666s] 3: +  }
[3.666s] 3: @@ -62,5 +65,6 @@
[3.666s] 3: -    Quat getQuat(){
[3.666s] 3: -        Quat q;
[3.666s] 3: -        q << quaternion[0], quaternion[1], quaternion[2], quaternion[3];
[3.666s] 3: -        return q;
[3.666s] 3: -    }
[3.666s] 3: +  Quat getQuat()
[3.666s] 3: +  {
[3.666s] 3: +    Quat q;
[3.667s] 3: +    q << quaternion[0], quaternion[1], quaternion[2], quaternion[3];
[3.667s] 3: +    return q;
[3.667s] 3: +  }
[3.667s] 3: @@ -71,4 +75,4 @@
[3.667s] 3: -    IMU imu;
[3.667s] 3: -    MotorState motorState[12];
[3.667s] 3: -    UserCommand userCmd;
[3.667s] 3: -    UserValue userValue;
[3.667s] 3: +  IMU imu;
[3.667s] 3: +  MotorState motorState[12];
[3.667s] 3: +  UserCommand userCmd;
[3.667s] 3: +  UserValue userValue;
[3.667s] 3: @@ -76,8 +80,7 @@
[3.667s] 3: -    Vec34 getQ(){
[3.667s] 3: -        Vec34 qLegs;
[3.667s] 3: -        for(int i(0); i < 4; ++i){
[3.667s] 3: -            qLegs.col(i)(0) = motorState[3*i    ].q;
[3.667s] 3: -            qLegs.col(i)(1) = motorState[3*i + 1].q;
[3.667s] 3: -            qLegs.col(i)(2) = motorState[3*i + 2].q;
[3.667s] 3: -        }
[3.667s] 3: -        return qLegs;
[3.667s] 3: +  Vec34 getQ()
[3.667s] 3: +  {
[3.668s] 3: +    Vec34 qLegs;
[3.668s] 3: +    for (int i(0); i < 4; ++i) {
[3.668s] 3: +      qLegs.col(i)(0) = motorState[3 * i].q;
[3.668s] 3: +      qLegs.col(i)(1) = motorState[3 * i + 1].q;
[3.668s] 3: +      qLegs.col(i)(2) = motorState[3 * i + 2].q;
[3.668s] 3: @@ -84,0 +88,2 @@
[3.668s] 3: +    return qLegs;
[3.668s] 3: +  }
[3.668s] 3: @@ -86,8 +91,7 @@
[3.668s] 3: -    Vec34 getQd(){
[3.668s] 3: -        Vec34 qdLegs;
[3.668s] 3: -        for(int i(0); i < 4; ++i){
[3.668s] 3: -            qdLegs.col(i)(0) = motorState[3*i    ].dq;
[3.668s] 3: -            qdLegs.col(i)(1) = motorState[3*i + 1].dq;
[3.668s] 3: -            qdLegs.col(i)(2) = motorState[3*i + 2].dq;
[3.668s] 3: -        }
[3.668s] 3: -        return qdLegs;
[3.668s] 3: +  Vec34 getQd()
[3.669s] 3: +  {
[3.669s] 3: +    Vec34 qdLegs;
[3.669s] 3: +    for (int i(0); i < 4; ++i) {
[3.669s] 3: +      qdLegs.col(i)(0) = motorState[3 * i].dq;
[3.669s] 3: +      qdLegs.col(i)(1) = motorState[3 * i + 1].dq;
[3.669s] 3: +      qdLegs.col(i)(2) = motorState[3 * i + 2].dq;
[3.669s] 3: @@ -94,0 +99,2 @@
[3.669s] 3: +    return qdLegs;
[3.669s] 3: +  }
[3.669s] 3: @@ -96,2 +102,39 @@
[3.669s] 3: -    RotMat getRotMat(){
[3.669s] 3: -        return imu.getRotMat();
[3.669s] 3: +  RotMat getRotMat()
[3.669s] 3: +  {
[3.669s] 3: +    return imu.getRotMat();
[3.669s] 3: +  }
[3.669s] 3: +
[3.669s] 3: +  Vec3 getAcc()
[3.669s] 3: +  {
[3.669s] 3: +    return imu.getAcc();
[3.669s] 3: +  }
[3.669s] 3: +
[3.669s] 3: +  Vec3 getGyro()
[3.670s] 3: +  {
[3.670s] 3: +    return imu.getGyro();
[3.670s] 3: +  }
[3.670s] 3: +
[3.670s] 3: +  Vec3 getAccGlobal()
[3.670s] 3: +  {
[3.670s] 3: +    return getRotMat() * getAcc();
[3.670s] 3: +  }
[3.670s] 3: +
[3.670s] 3: +  Vec3 getGyroGlobal()
[3.670s] 3: +  {
[3.670s] 3: +    return getRotMat() * getGyro();
[3.670s] 3: +  }
[3.670s] 3: +
[3.670s] 3: +  double getYaw()
[3.670s] 3: +  {
[3.670s] 3: +    return rotMatToRPY(getRotMat())(2);
[3.670s] 3: +  }
[3.670s] 3: +
[3.670s] 3: +  double getDYaw()
[3.670s] 3: +  {
[3.670s] 3: +    return getGyroGlobal()(2);
[3.670s] 3: +  }
[3.671s] 3: +
[3.671s] 3: +  void setQ(Vec12 q)
[3.671s] 3: +  {
[3.671s] 3: +    for (int i(0); i < 12; ++i) {
[3.671s] 3: +      motorState[i].q = q(i);
[3.671s] 3: @@ -99,30 +142 @@
[3.671s] 3: -
[3.671s] 3: -    Vec3 getAcc(){
[3.671s] 3: -        return imu.getAcc();
[3.671s] 3: -    }
[3.671s] 3: -
[3.671s] 3: -    Vec3 getGyro(){
[3.671s] 3: -        return imu.getGyro();
[3.671s] 3: -    }
[3.671s] 3: -
[3.671s] 3: -    Vec3 getAccGlobal(){
[3.671s] 3: -        return getRotMat() * getAcc();
[3.671s] 3: -    }
[3.671s] 3: -
[3.671s] 3: -    Vec3 getGyroGlobal(){
[3.671s] 3: -        return getRotMat() * getGyro();
[3.671s] 3: -    }
[3.671s] 3: -
[3.672s] 3: -    double getYaw(){
[3.672s] 3: -        return rotMatToRPY(getRotMat())(2);
[3.672s] 3: -    }
[3.672s] 3: -
[3.672s] 3: -    double getDYaw(){
[3.672s] 3: -        return getGyroGlobal()(2);
[3.672s] 3: -    }
[3.672s] 3: -
[3.672s] 3: -    void setQ(Vec12 q){
[3.672s] 3: -        for(int i(0); i<12; ++i){
[3.672s] 3: -            motorState[i].q = q(i);
[3.672s] 3: -        }
[3.672s] 3: -    }
[3.672s] 3: +  }
[3.672s] 3: @@ -131 +145 @@
[3.672s] 3: -#endif  //LOWLEVELSTATE_HPP
[3.672s] 3: +#endif  //LOWLEVELSTATE_HPP
[3.672s] 3: 
[3.672s] 3: Code style divergence in file 'include/message/unitree_joystick.h':
[3.672s] 3: 
[3.672s] 3: --- include/message/unitree_joystick.h
[3.672s] 3: +++ include/message/unitree_joystick.h.uncrustify
[3.672s] 3: @@ -10,19 +10,20 @@
[3.673s] 3: -    struct {
[3.673s] 3: -        uint8_t R1          :1;
[3.673s] 3: -        uint8_t L1          :1;
[3.673s] 3: -        uint8_t start       :1;
[3.673s] 3: -        uint8_t select      :1;
[3.673s] 3: -        uint8_t R2          :1;
[3.673s] 3: -        uint8_t L2          :1;
[3.673s] 3: -        uint8_t F1          :1;
[3.673s] 3: -        uint8_t F2          :1;
[3.673s] 3: -        uint8_t A           :1;
[3.673s] 3: -        uint8_t B           :1;
[3.673s] 3: -        uint8_t X           :1;
[3.673s] 3: -        uint8_t Y           :1;
[3.673s] 3: -        uint8_t up          :1;
[3.673s] 3: -        uint8_t right       :1;
[3.673s] 3: -        uint8_t down        :1;
[3.673s] 3: -        uint8_t left        :1;
[3.673s] 3: -    } components;
[3.673s] 3: -    uint16_t value;
[3.673s] 3: +  struct
[3.673s] 3: +  {
[3.673s] 3: +    uint8_t R1          : 1;
[3.673s] 3: +    uint8_t L1          : 1;
[3.674s] 3: +    uint8_t start       : 1;
[3.674s] 3: +    uint8_t select      : 1;
[3.674s] 3: +    uint8_t R2          : 1;
[3.674s] 3: +    uint8_t L2          : 1;
[3.674s] 3: +    uint8_t F1          : 1;
[3.674s] 3: +    uint8_t F2          : 1;
[3.674s] 3: +    uint8_t A           : 1;
[3.674s] 3: +    uint8_t B           : 1;
[3.674s] 3: +    uint8_t X           : 1;
[3.674s] 3: +    uint8_t Y           : 1;
[3.674s] 3: +    uint8_t up          : 1;
[3.674s] 3: +    uint8_t right       : 1;
[3.674s] 3: +    uint8_t down        : 1;
[3.674s] 3: +    uint8_t left        : 1;
[3.674s] 3: +  } components;
[3.674s] 3: +  uint16_t value;
[3.674s] 3: @@ -32,8 +33,9 @@
[3.674s] 3: -typedef struct {
[3.674s] 3: -    uint8_t head[2];
[3.674s] 3: -    xKeySwitchUnion btn;
[3.674s] 3: -    float lx;
[3.674s] 3: -    float rx;
[3.674s] 3: -    float ry;
[3.675s] 3: -    float L2;
[3.675s] 3: -    float ly;
[3.675s] 3: +typedef struct
[3.675s] 3: +{
[3.675s] 3: +  uint8_t head[2];
[3.675s] 3: +  xKeySwitchUnion btn;
[3.675s] 3: +  float lx;
[3.675s] 3: +  float rx;
[3.675s] 3: +  float ry;
[3.675s] 3: +  float L2;
[3.675s] 3: +  float ly;
[3.675s] 3: @@ -41 +43 @@
[3.675s] 3: -    uint8_t idle[16];
[3.675s] 3: +  uint8_t idle[16];
[3.675s] 3: @@ -44 +46 @@
[3.675s] 3: -#endif  // UNITREE_JOYSTICK_H
[3.675s] 3: +#endif  // UNITREE_JOYSTICK_H
[3.675s] 3: 
[3.675s] 3: Code style divergence in file 'include/thirdParty/matplotlibcpp.h':
[3.675s] 3: 
[3.675s] 3: --- include/thirdParty/matplotlibcpp.h
[3.675s] 3: +++ include/thirdParty/matplotlibcpp.h.uncrustify
[3.675s] 3: @@ -43,74 +43,76 @@
[3.676s] 3: -namespace detail {
[3.676s] 3: -
[3.676s] 3: -static std::string s_backend;
[3.676s] 3: -
[3.676s] 3: -struct _interpreter {
[3.676s] 3: -    PyObject* s_python_function_arrow;
[3.676s] 3: -    PyObject *s_python_function_show;
[3.676s] 3: -    PyObject *s_python_function_close;
[3.676s] 3: -    PyObject *s_python_function_draw;
[3.676s] 3: -    PyObject *s_python_function_pause;
[3.676s] 3: -    PyObject *s_python_function_save;
[3.676s] 3: -    PyObject *s_python_function_figure;
[3.676s] 3: -    PyObject *s_python_function_fignum_exists;
[3.676s] 3: -    PyObject *s_python_function_plot;
[3.676s] 3: -    PyObject *s_python_function_quiver;
[3.676s] 3: -    PyObject* s_python_function_contour;
[3.676s] 3: -    PyObject *s_python_function_semilogx;
[3.676s] 3: -    PyObject *s_python_function_semilogy;
[3.676s] 3: -    PyObject *s_python_function_loglog;
[3.676s] 3: -    PyObject *s_python_function_fill;
[3.676s] 3: -    PyObject *s_python_function_fill_between;
[3.676s] 3: -    PyObject *s_python_function_hist;
[3.676s] 3: -    PyObject *s_python_function_imshow;
[3.677s] 3: -    PyObject *s_python_function_scatter;
[3.677s] 3: -    PyObject *s_python_function_boxplot;
[3.677s] 3: -    PyObject *s_python_function_subplot;
[3.677s] 3: -    PyObject *s_python_function_subplot2grid;
[3.677s] 3: -    PyObject *s_python_function_legend;
[3.677s] 3: -    PyObject *s_python_function_xlim;
[3.677s] 3: -    PyObject *s_python_function_ion;
[3.677s] 3: -    PyObject *s_python_function_ginput;
[3.687s] 3: -    PyObject *s_python_function_ylim;
[3.687s] 3: -    PyObject *s_python_function_title;
[3.687s] 3: -    PyObject *s_python_function_axis;
[3.687s] 3: -    PyObject *s_python_function_axvline;
[3.687s] 3: -    PyObject *s_python_function_axvspan;
[3.687s] 3: -    PyObject *s_python_function_xlabel;
[3.687s] 3: -    PyObject *s_python_function_ylabel;
[3.687s] 3: -    PyObject *s_python_function_gca;
[3.687s] 3: -    PyObject *s_python_function_xticks;
[3.687s] 3: -    PyObject *s_python_function_yticks;
[3.687s] 3: -    PyObject* s_python_function_margins;
[3.687s] 3: -    PyObject *s_python_function_tick_params;
[3.687s] 3: -    PyObject *s_python_function_grid;
[3.687s] 3: -    PyObject* s_python_function_cla;
[3.687s] 3: -    PyObject *s_python_function_clf;
[3.687s] 3: -    PyObject *s_python_function_errorbar;
[3.688s] 3: -    PyObject *s_python_function_annotate;
[3.688s] 3: -    PyObject *s_python_function_tight_layout;
[3.688s] 3: -    PyObject *s_python_colormap;
[3.688s] 3: -    PyObject *s_python_empty_tuple;
[3.688s] 3: -    PyObject *s_python_function_stem;
[3.688s] 3: -    PyObject *s_python_function_xkcd;
[3.688s] 3: -    PyObject *s_python_function_text;
[3.688s] 3: -    PyObject *s_python_function_suptitle;
[3.688s] 3: -    PyObject *s_python_function_bar;
[3.688s] 3: -    PyObject *s_python_function_barh;
[3.688s] 3: -    PyObject *s_python_function_colorbar;
[3.688s] 3: -    PyObject *s_python_function_subplots_adjust;
[3.688s] 3: -
[3.688s] 3: -
[3.688s] 3: -    /* For now, _interpreter is implemented as a singleton since its currently not possible to have
[3.688s] 3: -       multiple independent embedded python interpreters without patching the python source code
[3.688s] 3: -       or starting a separate process for each. [1]
[3.688s] 3: -       Furthermore, many python objects expect that they are destructed in the same thread as they
[3.688s] 3: -       were constructed. [2] So for advanced usage, a `kill()` function is provided so that library
[3.688s] 3: -       users can manually ensure that the interpreter is constructed and destroyed within the
[3.688s] 3: -       same thread.
[3.688s] 3: -
[3.688s] 3: -         1: http://bytes.com/topic/python/answers/793370-multiple-independent-python-interpreters-c-c-program
[3.689s] 3: -         2: https://github.com/lava/matplotlib-cpp/pull/202#issue-436220256
[3.689s] 3: -       */
[3.689s] 3: -
[3.689s] 3: -    static _interpreter& get() {
[3.689s] 3: +  namespace detail {
[3.689s] 3: +
[3.689s] 3: +    static std::string s_backend;
[3.689s] 3: +
[3.689s] 3: +    struct _interpreter
[3.689s] 3: +    {
[3.689s] 3: +      PyObject * s_python_function_arrow;
[3.689s] 3: +      PyObject * s_python_function_show;
[3.689s] 3: +      PyObject * s_python_function_close;
[3.689s] 3: +      PyObject * s_python_function_draw;
[3.689s] 3: +      PyObject * s_python_function_pause;
[3.689s] 3: +      PyObject * s_python_function_save;
[3.689s] 3: +      PyObject * s_python_function_figure;
[3.689s] 3: +      PyObject * s_python_function_fignum_exists;
[3.689s] 3: +      PyObject * s_python_function_plot;
[3.689s] 3: +      PyObject * s_python_function_quiver;
[3.689s] 3: +      PyObject * s_python_function_contour;
[3.689s] 3: +      PyObject * s_python_function_semilogx;
[3.689s] 3: +      PyObject * s_python_function_semilogy;
[3.689s] 3: +      PyObject * s_python_function_loglog;
[3.690s] 3: +      PyObject * s_python_function_fill;
[3.690s] 3: +      PyObject * s_python_function_fill_between;
[3.690s] 3: +      PyObject * s_python_function_hist;
[3.690s] 3: +      PyObject * s_python_function_imshow;
[3.690s] 3: +      PyObject * s_python_function_scatter;
[3.690s] 3: +      PyObject * s_python_function_boxplot;
[3.690s] 3: +      PyObject * s_python_function_subplot;
[3.690s] 3: +      PyObject * s_python_function_subplot2grid;
[3.690s] 3: +      PyObject * s_python_function_legend;
[3.690s] 3: +      PyObject * s_python_function_xlim;
[3.690s] 3: +      PyObject * s_python_function_ion;
[3.690s] 3: +      PyObject * s_python_function_ginput;
[3.690s] 3: +      PyObject * s_python_function_ylim;
[3.690s] 3: +      PyObject * s_python_function_title;
[3.690s] 3: +      PyObject * s_python_function_axis;
[3.690s] 3: +      PyObject * s_python_function_axvline;
[3.690s] 3: +      PyObject * s_python_function_axvspan;
[3.690s] 3: +      PyObject * s_python_function_xlabel;
[3.690s] 3: +      PyObject * s_python_function_ylabel;
[3.690s] 3: +      PyObject * s_python_function_gca;
[3.690s] 3: +      PyObject * s_python_function_xticks;
[3.690s] 3: +      PyObject * s_python_function_yticks;
[3.691s] 3: +      PyObject * s_python_function_margins;
[3.691s] 3: +      PyObject * s_python_function_tick_params;
[3.691s] 3: +      PyObject * s_python_function_grid;
[3.691s] 3: +      PyObject * s_python_function_cla;
[3.691s] 3: +      PyObject * s_python_function_clf;
[3.691s] 3: +      PyObject * s_python_function_errorbar;
[3.691s] 3: +      PyObject * s_python_function_annotate;
[3.691s] 3: +      PyObject * s_python_function_tight_layout;
[3.691s] 3: +      PyObject * s_python_colormap;
[3.691s] 3: +      PyObject * s_python_empty_tuple;
[3.691s] 3: +      PyObject * s_python_function_stem;
[3.691s] 3: +      PyObject * s_python_function_xkcd;
[3.691s] 3: +      PyObject * s_python_function_text;
[3.691s] 3: +      PyObject * s_python_function_suptitle;
[3.691s] 3: +      PyObject * s_python_function_bar;
[3.691s] 3: +      PyObject * s_python_function_barh;
[3.691s] 3: +      PyObject * s_python_function_colorbar;
[3.691s] 3: +      PyObject * s_python_function_subplots_adjust;
[3.691s] 3: +
[3.691s] 3: +
[3.691s] 3: +      /* For now, _interpreter is implemented as a singleton since its currently not possible to have
[3.691s] 3: +         multiple independent embedded python interpreters without patching the python source code
[3.691s] 3: +         or starting a separate process for each. [1]
[3.691s] 3: +         Furthermore, many python objects expect that they are destructed in the same thread as they
[3.692s] 3: +         were constructed. [2] So for advanced usage, a `kill()` function is provided so that library
[3.692s] 3: +         users can manually ensure that the interpreter is constructed and destroyed within the
[3.692s] 3: +         same thread.
[3.692s] 3: +
[3.692s] 3: +           1: http://bytes.com/topic/python/answers/793370-multiple-independent-python-interpreters-c-c-program
[3.692s] 3: +           2: https://github.com/lava/matplotlib-cpp/pull/202#issue-436220256
[3.692s] 3: +         */
[3.692s] 3: +
[3.692s] 3: +      static _interpreter & get()
[3.692s] 3: +      {
[3.692s] 3: @@ -118,3 +120,4 @@
[3.692s] 3: -    }
[3.692s] 3: -
[3.692s] 3: -    static _interpreter& kill() {
[3.692s] 3: +      }
[3.692s] 3: +
[3.692s] 3: +      static _interpreter & kill()
[3.692s] 3: +      {
[3.692s] 3: @@ -122,4 +125,5 @@
[3.692s] 3: -    }
[3.692s] 3: -
[3.692s] 3: -    // Stores the actual singleton object referenced by `get()` and `kill()`.
[3.692s] 3: -    static _interpreter& interkeeper(bool should_kill) {
[3.693s] 3: +      }
[3.693s] 3: +
[3.693s] 3: +      // Stores the actual singleton object referenced by `get()` and `kill()`.
[3.693s] 3: +      static _interpreter & interkeeper(bool should_kill)
[3.693s] 3: +      {
[3.693s] 3: @@ -127,2 +131,3 @@
[3.693s] 3: -        if (should_kill)
[3.693s] 3: -            ctx.~_interpreter();
[3.693s] 3: +        if (should_kill) {
[3.693s] 3: +          ctx.~_interpreter();
[3.693s] 3: +        }
[3.693s] 3: @@ -130,10 +135,13 @@
[3.700s] 3: -    }
[3.700s] 3: -
[3.700s] 3: -    PyObject* safe_import(PyObject* module, std::string fname) {
[3.700s] 3: -        PyObject* fn = PyObject_GetAttrString(module, fname.c_str());
[3.700s] 3: -
[3.700s] 3: -        if (!fn)
[3.700s] 3: -            throw std::runtime_error(std::string("Couldn't find required function: ") + fname);
[3.700s] 3: -
[3.700s] 3: -        if (!PyFunction_Check(fn))
[3.700s] 3: -            throw std::runtime_error(fname + std::string(" is unexpectedly not a PyFunction."));
[3.700s] 3: +      }
[3.700s] 3: +
[3.700s] 3: +      PyObject * safe_import(PyObject * module, std::string fname)
[3.700s] 3: +      {
[3.700s] 3: +        PyObject * fn = PyObject_GetAttrString(module, fname.c_str());
[3.700s] 3: +
[3.700s] 3: +        if (!fn) {
[3.700s] 3: +          throw std::runtime_error(std::string("Couldn't find required function: ") + fname);
[3.700s] 3: +        }
[3.701s] 3: +
[3.701s] 3: +        if (!PyFunction_Check(fn)) {
[3.701s] 3: +          throw std::runtime_error(fname + std::string(" is unexpectedly not a PyFunction."));
[3.701s] 3: +        }
[3.701s] 3: @@ -142 +150 @@
[3.701s] 3: -    }
[3.701s] 3: +      }
[3.701s] 3: @@ -145 +152,0 @@
[3.701s] 3: -
[3.701s] 3: @@ -149 +156,2 @@
[3.701s] 3: -    void *import_numpy() {
[3.701s] 3: +      void * import_numpy()
[3.701s] 3: +      {
[3.701s] 3: @@ -152 +160 @@
[3.701s] 3: -    }
[3.701s] 3: +      }
[3.701s] 3: @@ -156 +164,2 @@
[3.701s] 3: -    void import_numpy() {
[3.701s] 3: +      void import_numpy()
[3.701s] 3: +      {
[3.702s] 3: @@ -158 +167 @@
[3.702s] 3: -    }
[3.702s] 3: +      }
[3.702s] 3: @@ -163 +172 @@
[3.702s] 3: -    _interpreter() {
[3.702s] 3: +      _interpreter() {
[3.702s] 3: @@ -174,3 +183,3 @@
[3.702s] 3: -        wchar_t const *dummy_args[] = {L"Python", NULL};  // const is needed because literals must not be modified
[3.702s] 3: -        wchar_t const **argv = dummy_args;
[3.702s] 3: -        int             argc = sizeof(dummy_args)/sizeof(dummy_args[0])-1;
[3.702s] 3: +        wchar_t const * dummy_args[] = {L"Python", NULL};  // const is needed because literals must not be modified
[3.702s] 3: +        wchar_t const ** argv = dummy_args;
[3.702s] 3: +        int argc = sizeof(dummy_args) / sizeof(dummy_args[0]) - 1;
[3.702s] 3: @@ -180 +189 @@
[3.702s] 3: -        char** argm = (char **)(argv); PySys_SetArgv(argc, argm);
[3.702s] 3: +        char ** argm = (char **)(argv); PySys_SetArgv(argc, argm);
[3.702s] 3: @@ -186,4 +195,4 @@
[3.702s] 3: -        PyObject* matplotlibname = PyString_FromString("matplotlib");
[3.702s] 3: -        PyObject* pyplotname = PyString_FromString("matplotlib.pyplot");
[3.702s] 3: -        PyObject* cmname  = PyString_FromString("matplotlib.cm");
[3.703s] 3: -        PyObject* pylabname  = PyString_FromString("pylab");
[3.703s] 3: +        PyObject * matplotlibname = PyString_FromString("matplotlib");
[3.703s] 3: +        PyObject * pyplotname = PyString_FromString("matplotlib.pyplot");
[3.703s] 3: +        PyObject * cmname = PyString_FromString("matplotlib.cm");
[3.703s] 3: +        PyObject * pylabname = PyString_FromString("pylab");
[3.703s] 3: @@ -191 +200 @@
[3.703s] 3: -            throw std::runtime_error("couldnt create string");
[3.703s] 3: +          throw std::runtime_error("couldnt create string");
[3.703s] 3: @@ -194 +203 @@
[3.703s] 3: -        PyObject* matplotlib = PyImport_Import(matplotlibname);
[3.704s] 3: +        PyObject * matplotlib = PyImport_Import(matplotlibname);
[3.704s] 3: @@ -197,2 +206,2 @@
[3.704s] 3: -            PyErr_Print();
[3.704s] 3: -            throw std::runtime_error("Error loading module matplotlib!");
[3.704s] 3: +          PyErr_Print();
[3.704s] 3: +          throw std::runtime_error("Error loading module matplotlib!");
[3.704s] 3: @@ -204 +213,3 @@
[3.704s] 3: -            PyObject_CallMethod(matplotlib, const_cast<char*>("use"), const_cast<char*>("s"), s_backend.c_str());
[3.704s] 3: +          PyObject_CallMethod(
[3.704s] 3: +            matplotlib, const_cast < char * > ("use"),
[3.704s] 3: +            const_cast < char * > ("s"), s_backend.c_str());
[3.704s] 3: @@ -207 +218 @@
[3.704s] 3: -        PyObject* pymod = PyImport_Import(pyplotname);
[3.704s] 3: +        PyObject * pymod = PyImport_Import(pyplotname);
[3.704s] 3: @@ -209 +220 @@
[3.704s] 3: -        if (!pymod) { throw std::runtime_error("Error loading module matplotlib.pyplot!"); }
[3.704s] 3: +        if (!pymod) {throw std::runtime_error("Error loading module matplotlib.pyplot!");}
[3.704s] 3: @@ -213,3 +224,3 @@
[3.704s] 3: -        if (!s_python_colormap) { throw std::runtime_error("Error loading module matplotlib.cm!"); }
[3.705s] 3: -
[3.705s] 3: -        PyObject* pylabmod = PyImport_Import(pylabname);
[3.705s] 3: +        if (!s_python_colormap) {throw std::runtime_error("Error loading module matplotlib.cm!");}
[3.705s] 3: +
[3.705s] 3: +        PyObject * pylabmod = PyImport_Import(pylabname);
[3.705s] 3: @@ -217 +228 @@
[3.705s] 3: -        if (!pylabmod) { throw std::runtime_error("Error loading module pylab!"); }
[3.705s] 3: +        if (!pylabmod) {throw std::runtime_error("Error loading module pylab!");}
[3.705s] 3: @@ -234,3 +245,3 @@
[3.705s] 3: -        s_python_function_hist = safe_import(pymod,"hist");
[3.705s] 3: -        s_python_function_scatter = safe_import(pymod,"scatter");
[3.705s] 3: -        s_python_function_boxplot = safe_import(pymod,"boxplot");
[3.705s] 3: +        s_python_function_hist = safe_import(pymod, "hist");
[3.705s] 3: +        s_python_function_scatter = safe_import(pymod, "scatter");
[3.705s] 3: +        s_python_function_boxplot = safe_import(pymod, "boxplot");
[3.705s] 3: @@ -257 +268 @@
[3.706s] 3: -        s_python_function_annotate = safe_import(pymod,"annotate");
[3.706s] 3: +        s_python_function_annotate = safe_import(pymod, "annotate");
[3.706s] 3: @@ -266 +277 @@
[3.706s] 3: -        s_python_function_bar = safe_import(pymod,"bar");
[3.706s] 3: +        s_python_function_bar = safe_import(pymod, "bar");
[3.706s] 3: @@ -269 +280 @@
[3.706s] 3: -        s_python_function_subplots_adjust = safe_import(pymod,"subplots_adjust");
[3.706s] 3: +        s_python_function_subplots_adjust = safe_import(pymod, "subplots_adjust");
[3.706s] 3: @@ -274,3 +285,3 @@
[3.706s] 3: -    }
[3.706s] 3: -
[3.706s] 3: -    ~_interpreter() {
[3.706s] 3: +      }
[3.706s] 3: +
[3.706s] 3: +      ~_interpreter() {
[3.706s] 3: @@ -278,4 +289,4 @@
[3.706s] 3: -    }
[3.706s] 3: -};
[3.706s] 3: -
[3.706s] 3: -} // end namespace detail
[3.706s] 3: +      }
[3.706s] 3: +    };
[3.706s] 3: +
[3.707s] 3: +  } // end namespace detail
[3.707s] 3: @@ -292,2 +303,2 @@
[3.707s] 3: -inline void backend(const std::string& name)
[3.707s] 3: -{
[3.707s] 3: +  inline void backend(const std::string & name)
[3.707s] 3: +  {
[3.707s] 3: @@ -295,4 +306,4 @@
[3.707s] 3: -}
[3.707s] 3: -
[3.707s] 3: -inline bool annotate(std::string annotation, double x, double y)
[3.707s] 3: -{
[3.707s] 3: +  }
[3.707s] 3: +
[3.707s] 3: +  inline bool annotate(std::string annotation, double x, double y)
[3.707s] 3: +  {
[3.707s] 3: @@ -304,4 +315,4 @@
[3.707s] 3: -    PyTuple_SetItem(xy,0,PyFloat_FromDouble(x));
[3.707s] 3: -    PyTuple_SetItem(xy,1,PyFloat_FromDouble(y));
[3.707s] 3: -
[3.707s] 3: -    PyObject* kwargs = PyDict_New();
[3.707s] 3: +    PyTuple_SetItem(xy, 0, PyFloat_FromDouble(x));
[3.707s] 3: +    PyTuple_SetItem(xy, 1, PyFloat_FromDouble(y));
[3.707s] 3: +
[3.708s] 3: +    PyObject * kwargs = PyDict_New();
[3.708s] 3: @@ -310 +321 @@
[3.708s] 3: -    PyObject* args = PyTuple_New(1);
[3.708s] 3: +    PyObject * args = PyTuple_New(1);
[3.708s] 3: @@ -313,6 +324,7 @@
[3.708s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_annotate, args, kwargs);
[3.708s] 3: -
[3.708s] 3: -    Py_DECREF(args);
[3.708s] 3: -    Py_DECREF(kwargs);
[3.708s] 3: -
[3.708s] 3: -    if(res) Py_DECREF(res);
[3.708s] 3: +    PyObject * res = PyObject_Call(
[3.708s] 3: +      detail::_interpreter::get().s_python_function_annotate, args, kwargs);
[3.708s] 3: +
[3.708s] 3: +    Py_DECREF(args);
[3.708s] 3: +    Py_DECREF(kwargs);
[3.708s] 3: +
[3.708s] 3: +    if (res) {Py_DECREF(res);}
[3.708s] 3: @@ -321,3 +333,3 @@
[3.708s] 3: -}
[3.708s] 3: -
[3.708s] 3: -namespace detail {
[3.709s] 3: +  }
[3.709s] 3: +
[3.709s] 3: +  namespace detail {
[3.709s] 3: @@ -327,12 +339,12 @@
[3.709s] 3: -template <typename T> struct select_npy_type { const static NPY_TYPES type = NPY_NOTYPE; }; //Default
[3.709s] 3: -template <> struct select_npy_type<double> { const static NPY_TYPES type = NPY_DOUBLE; };
[3.709s] 3: -template <> struct select_npy_type<float> { const static NPY_TYPES type = NPY_FLOAT; };
[3.709s] 3: -template <> struct select_npy_type<bool> { const static NPY_TYPES type = NPY_BOOL; };
[3.709s] 3: -template <> struct select_npy_type<int8_t> { const static NPY_TYPES type = NPY_INT8; };
[3.710s] 3: -template <> struct select_npy_type<int16_t> { const static NPY_TYPES type = NPY_SHORT; };
[3.710s] 3: -template <> struct select_npy_type<int32_t> { const static NPY_TYPES type = NPY_INT; };
[3.710s] 3: -template <> struct select_npy_type<int64_t> { const static NPY_TYPES type = NPY_INT64; };
[3.710s] 3: -template <> struct select_npy_type<uint8_t> { const static NPY_TYPES type = NPY_UINT8; };
[3.710s] 3: -template <> struct select_npy_type<uint16_t> { const static NPY_TYPES type = NPY_USHORT; };
[3.711s] 3: -template <> struct select_npy_type<uint32_t> { const static NPY_TYPES type = NPY_ULONG; };
[3.711s] 3: -template <> struct select_npy_type<uint64_t> { const static NPY_TYPES type = NPY_UINT64; };
[3.711s] 3: +    template < typename T > struct select_npy_type { const static NPY_TYPES type = NPY_NOTYPE; }; //Default
[3.711s] 3: +    template < > struct select_npy_type < double > {const static NPY_TYPES type = NPY_DOUBLE;}
[3.711s] 3: +    template < > struct select_npy_type < float > {const static NPY_TYPES type = NPY_FLOAT;}
[3.711s] 3: +    template < > struct select_npy_type < bool > {const static NPY_TYPES type = NPY_BOOL;}
[3.711s] 3: +    template < > struct select_npy_type < int8_t > {const static NPY_TYPES type = NPY_INT8;}
[3.711s] 3: +    template < > struct select_npy_type < int16_t > {const static NPY_TYPES type = NPY_SHORT;}
[3.711s] 3: +    template < > struct select_npy_type < int32_t > {const static NPY_TYPES type = NPY_INT;}
[3.711s] 3: +    template < > struct select_npy_type < int64_t > {const static NPY_TYPES type = NPY_INT64;}
[3.711s] 3: +    template < > struct select_npy_type < uint8_t > {const static NPY_TYPES type = NPY_UINT8;}
[3.711s] 3: +    template < > struct select_npy_type < uint16_t > {const static NPY_TYPES type = NPY_USHORT;}
[3.711s] 3: +    template < > struct select_npy_type < uint32_t > {const static NPY_TYPES type = NPY_ULONG;}
[3.711s] 3: +    template < > struct select_npy_type < uint64_t > {const static NPY_TYPES type = NPY_UINT64;}
[3.711s] 3: @@ -342,4 +354,5 @@
[3.711s] 3: -static_assert(sizeof(long long) == 8);
[3.712s] 3: -template <> struct select_npy_type<long long> { const static NPY_TYPES type = NPY_INT64; };
[3.712s] 3: -static_assert(sizeof(unsigned long long) == 8);
[3.712s] 3: -template <> struct select_npy_type<unsigned long long> { const static NPY_TYPES type = NPY_UINT64; };
[3.712s] 3: +    static_assert(sizeof(long long) == 8);
[3.712s] 3: +    template < > struct select_npy_type < long long > {const static NPY_TYPES type = NPY_INT64;}
[3.712s] 3: +    static_assert(sizeof(unsigned long long) == 8);
[3.712s] 3: +    template < > struct select_npy_type < unsigned long long >
[3.712s] 3: +    {const static NPY_TYPES type = NPY_UINT64;}
[3.712s] 3: @@ -348,12 +361,13 @@
[3.712s] 3: -template<typename Numeric>
[3.712s] 3: -PyObject* get_array(const std::vector<Numeric>& v)
[3.712s] 3: -{
[3.712s] 3: -    npy_intp vsize = v.size();
[3.712s] 3: -    NPY_TYPES type = select_npy_type<Numeric>::type;
[3.712s] 3: -    if (type == NPY_NOTYPE) {
[3.712s] 3: -        size_t memsize = v.size()*sizeof(double);
[3.712s] 3: -        double* dp = static_cast<double*>(::malloc(memsize));
[3.712s] 3: -        for (size_t i=0; i<v.size(); ++i)
[3.712s] 3: -            dp[i] = v[i];
[3.713s] 3: -        PyObject* varray = PyArray_SimpleNewFromData(1, &vsize, NPY_DOUBLE, dp);
[3.713s] 3: -        PyArray_UpdateFlags(reinterpret_cast<PyArrayObject*>(varray), NPY_ARRAY_OWNDATA);
[3.713s] 3: +    template < typename Numeric >
[3.713s] 3: +    PyObject * get_array(const std::vector < Numeric > & v)
[3.713s] 3: +    {
[3.713s] 3: +      npy_intp vsize = v.size();
[3.713s] 3: +      NPY_TYPES type = select_npy_type < Numeric > ::type;
[3.713s] 3: +      if (type == NPY_NOTYPE) {
[3.713s] 3: +        size_t memsize = v.size() * sizeof(double);
[3.713s] 3: +        double * dp = static_cast < double * > (::malloc(memsize));
[3.713s] 3: +        for (size_t i = 0; i < v.size(); ++i) {
[3.713s] 3: +          dp[i] = v[i];
[3.713s] 3: +        }
[3.713s] 3: +        PyObject * varray = PyArray_SimpleNewFromData(1, &vsize, NPY_DOUBLE, dp);
[3.713s] 3: +        PyArray_UpdateFlags(reinterpret_cast < PyArrayObject * > (varray), NPY_ARRAY_OWNDATA);
[3.713s] 3: @@ -361,16 +375,16 @@
[3.714s] 3: -    }
[3.714s] 3: -    
[3.714s] 3: -    PyObject* varray = PyArray_SimpleNewFromData(1, &vsize, type, (void*)(v.data()));
[3.714s] 3: -    return varray;
[3.714s] 3: -}
[3.714s] 3: -
[3.714s] 3: -
[3.714s] 3: -template<typename Numeric>
[3.714s] 3: -PyObject* get_2darray(const std::vector<::std::vector<Numeric>>& v)
[3.714s] 3: -{
[3.714s] 3: -    if (v.size() < 1) throw std::runtime_error("get_2d_array v too small");
[3.714s] 3: -
[3.714s] 3: -    npy_intp vsize[2] = {static_cast<npy_intp>(v.size()),
[3.714s] 3: -                         static_cast<npy_intp>(v[0].size())};
[3.714s] 3: -
[3.714s] 3: -    PyArrayObject *varray =
[3.714s] 3: +      }
[3.714s] 3: +
[3.715s] 3: +      PyObject * varray = PyArray_SimpleNewFromData(1, &vsize, type, (void *)(v.data()));
[3.715s] 3: +      return varray;
[3.715s] 3: +    }
[3.715s] 3: +
[3.715s] 3: +
[3.715s] 3: +    template < typename Numeric >
[3.715s] 3: +    PyObject * get_2darray(const std::vector < ::std::vector < Numeric >> & v)
[3.715s] 3: +    {
[3.715s] 3: +      if (v.size() < 1) {throw std::runtime_error("get_2d_array v too small");}
[3.715s] 3: +
[3.715s] 3: +      npy_intp vsize[2] = {static_cast < npy_intp > (v.size()),
[3.715s] 3: +        static_cast < npy_intp > (v[0].size())};
[3.715s] 3: +
[3.715s] 3: +      PyArrayObject * varray =
[3.715s] 3: @@ -379,11 +393,12 @@
[3.715s] 3: -    double *vd_begin = static_cast<double *>(PyArray_DATA(varray));
[3.715s] 3: -
[3.715s] 3: -    for (const ::std::vector<Numeric> &v_row : v) {
[3.715s] 3: -      if (v_row.size() != static_cast<size_t>(vsize[1]))
[3.715s] 3: -        throw std::runtime_error("Missmatched array size");
[3.715s] 3: -      std::copy(v_row.begin(), v_row.end(), vd_begin);
[3.715s] 3: -      vd_begin += vsize[1];
[3.716s] 3: -    }
[3.716s] 3: -
[3.716s] 3: -    return reinterpret_cast<PyObject *>(varray);
[3.716s] 3: -}
[3.716s] 3: +      double * vd_begin = static_cast < double * > (PyArray_DATA(varray));
[3.716s] 3: +
[3.716s] 3: +      for (const ::std::vector < Numeric > & v_row : v) {
[3.716s] 3: +        if (v_row.size() != static_cast < size_t > (vsize[1])) {
[3.716s] 3: +          throw std::runtime_error("Missmatched array size");
[3.716s] 3: +        }
[3.716s] 3: +        std::copy(v_row.begin(), v_row.end(), vd_begin);
[3.716s] 3: +        vd_begin += vsize[1];
[3.716s] 3: +      }
[3.716s] 3: +
[3.716s] 3: +      return reinterpret_cast < PyObject * > (varray);
[3.716s] 3: +    }
[3.716s] 3: @@ -393,5 +408,5 @@
[3.716s] 3: -template<typename Numeric>
[3.716s] 3: -PyObject* get_array(const std::vector<Numeric>& v)
[3.716s] 3: -{
[3.717s] 3: -    PyObject* list = PyList_New(v.size());
[3.717s] 3: -    for(size_t i = 0; i < v.size(); ++i) {
[3.717s] 3: +    template < typename Numeric >
[3.717s] 3: +    PyObject * get_array(const std::vector < Numeric > & v)
[3.717s] 3: +    {
[3.717s] 3: +      PyObject * list = PyList_New(v.size());
[3.717s] 3: +      for (size_t i = 0; i < v.size(); ++i) {
[3.717s] 3: @@ -399,3 +414,3 @@
[3.717s] 3: -    }
[3.717s] 3: -    return list;
[3.717s] 3: -}
[3.717s] 3: +      }
[3.718s] 3: +      return list;
[3.718s] 3: +    }
[3.718s] 3: @@ -406,8 +421,8 @@
[3.718s] 3: -inline PyObject * get_array(const std::vector<std::string>& strings)
[3.718s] 3: -{
[3.718s] 3: -  PyObject* list = PyList_New(strings.size());
[3.718s] 3: -  for (std::size_t i = 0; i < strings.size(); ++i) {
[3.718s] 3: -    PyList_SetItem(list, i, PyString_FromString(strings[i].c_str()));
[3.718s] 3: -  }
[3.718s] 3: -  return list;
[3.718s] 3: -}
[3.718s] 3: +    inline PyObject * get_array(const std::vector < std::string > & strings)
[3.719s] 3: +    {
[3.719s] 3: +      PyObject * list = PyList_New(strings.size());
[3.719s] 3: +      for (std::size_t i = 0; i < strings.size(); ++i) {
[3.719s] 3: +        PyList_SetItem(list, i, PyString_FromString(strings[i].c_str()));
[3.719s] 3: +      }
[3.719s] 3: +      return list;
[3.719s] 3: +    }
[3.719s] 3: @@ -416,11 +431,11 @@
[3.719s] 3: -template<typename Numeric>
[3.719s] 3: -PyObject* get_listlist(const std::vector<std::vector<Numeric>>& ll)
[3.719s] 3: -{
[3.719s] 3: -  PyObject* listlist = PyList_New(ll.size());
[3.719s] 3: -  for (std::size_t i = 0; i < ll.size(); ++i) {
[3.719s] 3: -    PyList_SetItem(listlist, i, get_array(ll[i]));
[3.719s] 3: -  }
[3.719s] 3: -  return listlist;
[3.719s] 3: -}
[3.720s] 3: -
[3.720s] 3: -} // namespace detail
[3.720s] 3: +    template < typename Numeric >
[3.720s] 3: +    PyObject * get_listlist(const std::vector < std::vector < Numeric >> & ll)
[3.720s] 3: +    {
[3.720s] 3: +      PyObject * listlist = PyList_New(ll.size());
[3.720s] 3: +      for (std::size_t i = 0; i < ll.size(); ++i) {
[3.720s] 3: +        PyList_SetItem(listlist, i, get_array(ll[i]));
[3.720s] 3: +      }
[3.720s] 3: +      return listlist;
[3.720s] 3: +    }
[3.720s] 3: +
[3.721s] 3: +  } // namespace detail
[3.721s] 3: @@ -429 +444 @@
[3.721s] 3: -/// 
[3.721s] 3: +///
[3.721s] 3: @@ -431,3 +446,5 @@
[3.721s] 3: -template<typename Numeric>
[3.721s] 3: -bool plot(const std::vector<Numeric> &x, const std::vector<Numeric> &y, const std::map<std::string, std::string>& keywords)
[3.721s] 3: -{
[3.722s] 3: +  template < typename Numeric >
[3.722s] 3: +  bool plot(
[3.722s] 3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,
[3.722s] 3: +    const std::map < std::string, std::string > & keywords)
[3.722s] 3: +  {
[3.722s] 3: @@ -439,2 +456,2 @@
[3.722s] 3: -    PyObject* xarray = detail::get_array(x);
[3.722s] 3: -    PyObject* yarray = detail::get_array(y);
[3.722s] 3: +    PyObject * xarray = detail::get_array(x);
[3.722s] 3: +    PyObject * yarray = detail::get_array(y);
[3.722s] 3: @@ -443 +460 @@
[3.723s] 3: -    PyObject* args = PyTuple_New(2);
[3.723s] 3: +    PyObject * args = PyTuple_New(2);
[3.723s] 3: @@ -448,11 +465,13 @@
[3.723s] 3: -    PyObject* kwargs = PyDict_New();
[3.723s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.723s] 3: -    {
[3.723s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.723s] 3: -    }
[3.723s] 3: -
[3.723s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, args, kwargs);
[3.723s] 3: -
[3.723s] 3: -    Py_DECREF(args);
[3.723s] 3: -    Py_DECREF(kwargs);
[3.723s] 3: -    if(res) Py_DECREF(res);
[3.723s] 3: +    PyObject * kwargs = PyDict_New();
[3.723s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.723s] 3: +      it != keywords.end(); ++it)
[3.723s] 3: +    {
[3.723s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.723s] 3: +    }
[3.723s] 3: +
[3.724s] 3: +    PyObject * res =
[3.724s] 3: +      PyObject_Call(detail::_interpreter::get().s_python_function_plot, args, kwargs);
[3.724s] 3: +
[3.724s] 3: +    Py_DECREF(args);
[3.724s] 3: +    Py_DECREF(kwargs);
[3.724s] 3: +    if (res) {Py_DECREF(res);}
[3.724s] 3: @@ -461 +480 @@
[3.724s] 3: -}
[3.724s] 3: +  }
[3.724s] 3: @@ -466,183 +485,31 @@
[3.724s] 3: -template <typename Numeric>
[3.724s] 3: -void plot_surface(const std::vector<::std::vector<Numeric>> &x,
[3.724s] 3: -                  const std::vector<::std::vector<Numeric>> &y,
[3.724s] 3: -                  const std::vector<::std::vector<Numeric>> &z,
[3.724s] 3: -                  const std::map<std::string, std::string> &keywords =
[3.724s] 3: -                      std::map<std::string, std::string>())
[3.724s] 3: -{
[3.724s] 3: -  detail::_interpreter::get();
[3.724s] 3: -
[3.724s] 3: -  // We lazily load the modules here the first time this function is called
[3.724s] 3: -  // because I'm not sure that we can assume "matplotlib installed" implies
[3.725s] 3: -  // "mpl_toolkits installed" on all platforms, and we don't want to require
[3.725s] 3: -  // it for people who don't need 3d plots.
[3.725s] 3: -  static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;
[3.725s] 3: -  if (!mpl_toolkitsmod) {
[3.725s] 3: -    detail::_interpreter::get();
[3.725s] 3: -
[3.725s] 3: -    PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");
[3.725s] 3: -    PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");
[3.725s] 3: -    if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }
[3.725s] 3: -
[3.725s] 3: -    mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
[3.725s] 3: -    Py_DECREF(mpl_toolkits);
[3.725s] 3: -    if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }
[3.725s] 3: -
[3.725s] 3: -    axis3dmod = PyImport_Import(axis3d);
[3.725s] 3: -    Py_DECREF(axis3d);
[3.725s] 3: -    if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }
[3.726s] 3: -  }
[3.726s] 3: -
[3.726s] 3: -  assert(x.size() == y.size());
[3.726s] 3: -  assert(y.size() == z.size());
[3.726s] 3: -
[3.726s] 3: -  // using numpy arrays
[3.726s] 3: -  PyObject *xarray = detail::get_2darray(x);
[3.726s] 3: -  PyObject *yarray = detail::get_2darray(y);
[3.726s] 3: -  PyObject *zarray = detail::get_2darray(z);
[3.726s] 3: -
[3.726s] 3: -  // construct positional args
[3.726s] 3: -  PyObject *args = PyTuple_New(3);
[3.726s] 3: -  PyTuple_SetItem(args, 0, xarray);
[3.726s] 3: -  PyTuple_SetItem(args, 1, yarray);
[3.726s] 3: -  PyTuple_SetItem(args, 2, zarray);
[3.726s] 3: -
[3.726s] 3: -  // Build up the kw args.
[3.726s] 3: -  PyObject *kwargs = PyDict_New();
[3.726s] 3: -  PyDict_SetItemString(kwargs, "rstride", PyInt_FromLong(1));
[3.726s] 3: -  PyDict_SetItemString(kwargs, "cstride", PyInt_FromLong(1));
[3.727s] 3: -
[3.727s] 3: -  PyObject *python_colormap_coolwarm = PyObject_GetAttrString(
[3.727s] 3: -      detail::_interpreter::get().s_python_colormap, "coolwarm");
[3.727s] 3: -
[3.727s] 3: -  PyDict_SetItemString(kwargs, "cmap", python_colormap_coolwarm);
[3.727s] 3: -
[3.727s] 3: -  for (std::map<std::string, std::string>::const_iterator it = keywords.begin();
[3.727s] 3: -       it != keywords.end(); ++it) {
[3.727s] 3: -    PyDict_SetItemString(kwargs, it->first.c_str(),
[3.727s] 3: -                         PyString_FromString(it->second.c_str()));
[3.727s] 3: -  }
[3.727s] 3: -
[3.727s] 3: -
[3.727s] 3: -  PyObject *fig =
[3.727s] 3: -      PyObject_CallObject(detail::_interpreter::get().s_python_function_figure,
[3.727s] 3: -                          detail::_interpreter::get().s_python_empty_tuple);
[3.727s] 3: -  if (!fig) throw std::runtime_error("Call to figure() failed.");
[3.727s] 3: -
[3.727s] 3: -  PyObject *gca_kwargs = PyDict_New();
[3.727s] 3: -  PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));
[3.727s] 3: -
[3.728s] 3: -  PyObject *gca = PyObject_GetAttrString(fig, "gca");
[3.728s] 3: -  if (!gca) throw std::runtime_error("No gca");
[3.728s] 3: -  Py_INCREF(gca);
[3.728s] 3: -  PyObject *axis = PyObject_Call(
[3.728s] 3: -      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);
[3.728s] 3: -
[3.728s] 3: -  if (!axis) throw std::runtime_error("No axis");
[3.728s] 3: -  Py_INCREF(axis);
[3.728s] 3: -
[3.728s] 3: -  Py_DECREF(gca);
[3.728s] 3: -  Py_DECREF(gca_kwargs);
[3.728s] 3: -
[3.728s] 3: -  PyObject *plot_surface = PyObject_GetAttrString(axis, "plot_surface");
[3.728s] 3: -  if (!plot_surface) throw std::runtime_error("No surface");
[3.728s] 3: -  Py_INCREF(plot_surface);
[3.728s] 3: -  PyObject *res = PyObject_Call(plot_surface, args, kwargs);
[3.728s] 3: -  if (!res) throw std::runtime_error("failed surface");
[3.728s] 3: -  Py_DECREF(plot_surface);
[3.728s] 3: -
[3.728s] 3: -  Py_DECREF(axis);
[3.729s] 3: -  Py_DECREF(args);
[3.729s] 3: -  Py_DECREF(kwargs);
[3.729s] 3: -  if (res) Py_DECREF(res);
[3.729s] 3: -}
[3.729s] 3: -#endif // WITHOUT_NUMPY
[3.729s] 3: -
[3.729s] 3: -template <typename Numeric>
[3.729s] 3: -void plot3(const std::vector<Numeric> &x,
[3.729s] 3: -                  const std::vector<Numeric> &y,
[3.729s] 3: -                  const std::vector<Numeric> &z,
[3.729s] 3: -                  const std::map<std::string, std::string> &keywords =
[3.729s] 3: -                      std::map<std::string, std::string>())
[3.729s] 3: -{
[3.729s] 3: -  detail::_interpreter::get();
[3.729s] 3: -
[3.729s] 3: -  // Same as with plot_surface: We lazily load the modules here the first time 
[3.729s] 3: -  // this function is called because I'm not sure that we can assume "matplotlib 
[3.729s] 3: -  // installed" implies "mpl_toolkits installed" on all platforms, and we don't 
[3.729s] 3: -  // want to require it for people who don't need 3d plots.
[3.729s] 3: -  static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;
[3.730s] 3: -  if (!mpl_toolkitsmod) {
[3.730s] 3: -    detail::_interpreter::get();
[3.730s] 3: -
[3.730s] 3: -    PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");
[3.730s] 3: -    PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");
[3.730s] 3: -    if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }
[3.730s] 3: -
[3.730s] 3: -    mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
[3.730s] 3: -    Py_DECREF(mpl_toolkits);
[3.730s] 3: -    if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }
[3.730s] 3: -
[3.730s] 3: -    axis3dmod = PyImport_Import(axis3d);
[3.730s] 3: -    Py_DECREF(axis3d);
[3.730s] 3: -    if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }
[3.730s] 3: -  }
[3.730s] 3: -
[3.730s] 3: -  assert(x.size() == y.size());
[3.730s] 3: -  assert(y.size() == z.size());
[3.730s] 3: -
[3.730s] 3: -  PyObject *xarray = detail::get_array(x);
[3.730s] 3: -  PyObject *yarray = detail::get_array(y);
[3.730s] 3: -  PyObject *zarray = detail::get_array(z);
[3.731s] 3: -
[3.731s] 3: -  // construct positional args
[3.731s] 3: -  PyObject *args = PyTuple_New(3);
[3.731s] 3: -  PyTuple_SetItem(args, 0, xarray);
[3.731s] 3: -  PyTuple_SetItem(args, 1, yarray);
[3.731s] 3: -  PyTuple_SetItem(args, 2, zarray);
[3.731s] 3: -
[3.731s] 3: -  // Build up the kw args.
[3.731s] 3: -  PyObject *kwargs = PyDict_New();
[3.731s] 3: -
[3.731s] 3: -  for (std::map<std::string, std::string>::const_iterator it = keywords.begin();
[3.731s] 3: -       it != keywords.end(); ++it) {
[3.731s] 3: -    PyDict_SetItemString(kwargs, it->first.c_str(),
[3.731s] 3: -                         PyString_FromString(it->second.c_str()));
[3.731s] 3: -  }
[3.731s] 3: -
[3.731s] 3: -  PyObject *fig =
[3.731s] 3: -      PyObject_CallObject(detail::_interpreter::get().s_python_function_figure,
[3.731s] 3: -                          detail::_interpreter::get().s_python_empty_tuple);
[3.731s] 3: -  if (!fig) throw std::runtime_error("Call to figure() failed.");
[3.731s] 3: -
[3.732s] 3: -  PyObject *gca_kwargs = PyDict_New();
[3.732s] 3: -  PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));
[3.732s] 3: -
[3.732s] 3: -  PyObject *gca = PyObject_GetAttrString(fig, "gca");
[3.732s] 3: -  if (!gca) throw std::runtime_error("No gca");
[3.732s] 3: -  Py_INCREF(gca);
[3.732s] 3: -  PyObject *axis = PyObject_Call(
[3.732s] 3: -      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);
[3.732s] 3: -
[3.732s] 3: -  if (!axis) throw std::runtime_error("No axis");
[3.732s] 3: -  Py_INCREF(axis);
[3.732s] 3: -
[3.732s] 3: -  Py_DECREF(gca);
[3.732s] 3: -  Py_DECREF(gca_kwargs);
[3.732s] 3: -
[3.732s] 3: -  PyObject *plot3 = PyObject_GetAttrString(axis, "plot");
[3.732s] 3: -  if (!plot3) throw std::runtime_error("No 3D line plot");
[3.732s] 3: -  Py_INCREF(plot3);
[3.732s] 3: -  PyObject *res = PyObject_Call(plot3, args, kwargs);
[3.732s] 3: -  if (!res) throw std::runtime_error("Failed 3D line plot");
[3.732s] 3: -  Py_DECREF(plot3);
[3.732s] 3: -
[3.733s] 3: -  Py_DECREF(axis);
[3.733s] 3: -  Py_DECREF(args);
[3.733s] 3: -  Py_DECREF(kwargs);
[3.733s] 3: -  if (res) Py_DECREF(res);
[3.733s] 3: -}
[3.733s] 3: -
[3.733s] 3: -template<typename Numeric>
[3.733s] 3: -bool stem(const std::vector<Numeric> &x, const std::vector<Numeric> &y, const std::map<std::string, std::string>& keywords)
[3.733s] 3: -{
[3.733s] 3: +  template < typename Numeric >
[3.733s] 3: +  void plot_surface(
[3.733s] 3: +    const std::vector < ::std::vector < Numeric >> & x,
[3.733s] 3: +    const std::vector < ::std::vector < Numeric >> & y,
[3.733s] 3: +    const std::vector < ::std::vector < Numeric >> & z,
[3.733s] 3: +    const std::map < std::string, std::string > & keywords =
[3.733s] 3: +    std::map < std::string, std::string > ())
[3.733s] 3: +  {
[3.733s] 3: +    detail::_interpreter::get();
[3.733s] 3: +
[3.733s] 3: +    // We lazily load the modules here the first time this function is called
[3.733s] 3: +    // because I'm not sure that we can assume "matplotlib installed" implies
[3.733s] 3: +    // "mpl_toolkits installed" on all platforms, and we don't want to require
[3.734s] 3: +    // it for people who don't need 3d plots.
[3.734s] 3: +    static PyObject * mpl_toolkitsmod = nullptr, * axis3dmod = nullptr;
[3.734s] 3: +    if (!mpl_toolkitsmod) {
[3.734s] 3: +      detail::_interpreter::get();
[3.734s] 3: +
[3.734s] 3: +      PyObject * mpl_toolkits = PyString_FromString("mpl_toolkits");
[3.734s] 3: +      PyObject * axis3d = PyString_FromString("mpl_toolkits.mplot3d");
[3.734s] 3: +      if (!mpl_toolkits || !axis3d) {throw std::runtime_error("couldnt create string");}
[3.734s] 3: +
[3.734s] 3: +      mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
[3.734s] 3: +      Py_DECREF(mpl_toolkits);
[3.734s] 3: +      if (!mpl_toolkitsmod) {throw std::runtime_error("Error loading module mpl_toolkits!");}
[3.734s] 3: +
[3.734s] 3: +      axis3dmod = PyImport_Import(axis3d);
[3.734s] 3: +      Py_DECREF(axis3d);
[3.734s] 3: +      if (!axis3dmod) {throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!");}
[3.734s] 3: +    }
[3.734s] 3: +
[3.734s] 3: @@ -650,2 +517 @@
[3.734s] 3: -
[3.735s] 3: -    detail::_interpreter::get();
[3.735s] 3: +    assert(y.size() == z.size());
[3.735s] 3: @@ -654,2 +520,3 @@
[3.735s] 3: -    PyObject* xarray = detail::get_array(x);
[3.735s] 3: -    PyObject* yarray = detail::get_array(y);
[3.735s] 3: +    PyObject * xarray = detail::get_2darray(x);
[3.735s] 3: +    PyObject * yarray = detail::get_2darray(y);
[3.735s] 3: +    PyObject * zarray = detail::get_2darray(z);
[3.735s] 3: @@ -658 +525 @@
[3.735s] 3: -    PyObject* args = PyTuple_New(2);
[3.735s] 3: +    PyObject * args = PyTuple_New(3);
[3.735s] 3: @@ -661,23 +528,87 @@
[3.736s] 3: -
[3.736s] 3: -    // construct keyword args
[3.736s] 3: -    PyObject* kwargs = PyDict_New();
[3.736s] 3: -    for (std::map<std::string, std::string>::const_iterator it =
[3.736s] 3: -            keywords.begin(); it != keywords.end(); ++it) {
[3.736s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(),
[3.736s] 3: -                PyString_FromString(it->second.c_str()));
[3.736s] 3: -    }
[3.736s] 3: -
[3.736s] 3: -    PyObject* res = PyObject_Call(
[3.736s] 3: -            detail::_interpreter::get().s_python_function_stem, args, kwargs);
[3.736s] 3: -
[3.736s] 3: -    Py_DECREF(args);
[3.736s] 3: -    Py_DECREF(kwargs);
[3.736s] 3: -    if (res)
[3.737s] 3: -        Py_DECREF(res);
[3.737s] 3: -
[3.737s] 3: -    return res;
[3.737s] 3: -}
[3.737s] 3: -
[3.737s] 3: -template< typename Numeric >
[3.737s] 3: -bool fill(const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::map<std::string, std::string>& keywords)
[3.737s] 3: -{
[3.737s] 3: +    PyTuple_SetItem(args, 2, zarray);
[3.737s] 3: +
[3.737s] 3: +    // Build up the kw args.
[3.737s] 3: +    PyObject * kwargs = PyDict_New();
[3.737s] 3: +    PyDict_SetItemString(kwargs, "rstride", PyInt_FromLong(1));
[3.737s] 3: +    PyDict_SetItemString(kwargs, "cstride", PyInt_FromLong(1));
[3.737s] 3: +
[3.737s] 3: +    PyObject * python_colormap_coolwarm = PyObject_GetAttrString(
[3.737s] 3: +      detail::_interpreter::get().s_python_colormap, "coolwarm");
[3.737s] 3: +
[3.738s] 3: +    PyDict_SetItemString(kwargs, "cmap", python_colormap_coolwarm);
[3.738s] 3: +
[3.738s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.738s] 3: +      it != keywords.end(); ++it)
[3.738s] 3: +    {
[3.738s] 3: +      PyDict_SetItemString(
[3.738s] 3: +        kwargs, it->first.c_str(),
[3.738s] 3: +        PyString_FromString(it->second.c_str()));
[3.738s] 3: +    }
[3.738s] 3: +
[3.738s] 3: +
[3.738s] 3: +    PyObject * fig =
[3.738s] 3: +      PyObject_CallObject(
[3.738s] 3: +      detail::_interpreter::get().s_python_function_figure,
[3.738s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.738s] 3: +    if (!fig) {throw std::runtime_error("Call to figure() failed.");}
[3.738s] 3: +
[3.738s] 3: +    PyObject * gca_kwargs = PyDict_New();
[3.738s] 3: +    PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));
[3.739s] 3: +
[3.739s] 3: +    PyObject * gca = PyObject_GetAttrString(fig, "gca");
[3.739s] 3: +    if (!gca) {throw std::runtime_error("No gca");}
[3.739s] 3: +    Py_INCREF(gca);
[3.739s] 3: +    PyObject * axis = PyObject_Call(
[3.739s] 3: +      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);
[3.739s] 3: +
[3.739s] 3: +    if (!axis) {throw std::runtime_error("No axis");}
[3.739s] 3: +    Py_INCREF(axis);
[3.739s] 3: +
[3.739s] 3: +    Py_DECREF(gca);
[3.739s] 3: +    Py_DECREF(gca_kwargs);
[3.739s] 3: +
[3.739s] 3: +    PyObject * plot_surface = PyObject_GetAttrString(axis, "plot_surface");
[3.739s] 3: +    if (!plot_surface) {throw std::runtime_error("No surface");}
[3.740s] 3: +    Py_INCREF(plot_surface);
[3.740s] 3: +    PyObject * res = PyObject_Call(plot_surface, args, kwargs);
[3.740s] 3: +    if (!res) {throw std::runtime_error("failed surface");}
[3.740s] 3: +    Py_DECREF(plot_surface);
[3.740s] 3: +
[3.740s] 3: +    Py_DECREF(axis);
[3.740s] 3: +    Py_DECREF(args);
[3.740s] 3: +    Py_DECREF(kwargs);
[3.740s] 3: +    if (res) {Py_DECREF(res);}
[3.740s] 3: +  }
[3.740s] 3: +#endif // WITHOUT_NUMPY
[3.740s] 3: +
[3.741s] 3: +  template < typename Numeric >
[3.741s] 3: +  void plot3(
[3.741s] 3: +    const std::vector < Numeric > & x,
[3.741s] 3: +    const std::vector < Numeric > & y,
[3.741s] 3: +    const std::vector < Numeric > & z,
[3.741s] 3: +    const std::map < std::string, std::string > & keywords =
[3.741s] 3: +    std::map < std::string, std::string > ())
[3.741s] 3: +  {
[3.741s] 3: +    detail::_interpreter::get();
[3.741s] 3: +
[3.741s] 3: +    // Same as with plot_surface: We lazily load the modules here the first time
[3.741s] 3: +    // this function is called because I'm not sure that we can assume "matplotlib
[3.741s] 3: +    // installed" implies "mpl_toolkits installed" on all platforms, and we don't
[3.741s] 3: +    // want to require it for people who don't need 3d plots.
[3.741s] 3: +    static PyObject * mpl_toolkitsmod = nullptr, * axis3dmod = nullptr;
[3.742s] 3: +    if (!mpl_toolkitsmod) {
[3.742s] 3: +      detail::_interpreter::get();
[3.742s] 3: +
[3.742s] 3: +      PyObject * mpl_toolkits = PyString_FromString("mpl_toolkits");
[3.742s] 3: +      PyObject * axis3d = PyString_FromString("mpl_toolkits.mplot3d");
[3.742s] 3: +      if (!mpl_toolkits || !axis3d) {throw std::runtime_error("couldnt create string");}
[3.742s] 3: +
[3.742s] 3: +      mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
[3.742s] 3: +      Py_DECREF(mpl_toolkits);
[3.742s] 3: +      if (!mpl_toolkitsmod) {throw std::runtime_error("Error loading module mpl_toolkits!");}
[3.742s] 3: +
[3.742s] 3: +      axis3dmod = PyImport_Import(axis3d);
[3.742s] 3: +      Py_DECREF(axis3d);
[3.742s] 3: +      if (!axis3dmod) {throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!");}
[3.742s] 3: +    }
[3.742s] 3: +
[3.742s] 3: @@ -685,6 +616,5 @@
[3.742s] 3: -
[3.742s] 3: -    detail::_interpreter::get();
[3.742s] 3: -
[3.742s] 3: -    // using numpy arrays
[3.743s] 3: -    PyObject* xarray = detail::get_array(x);
[3.743s] 3: -    PyObject* yarray = detail::get_array(y);
[3.743s] 3: +    assert(y.size() == z.size());
[3.743s] 3: +
[3.743s] 3: +    PyObject * xarray = detail::get_array(x);
[3.743s] 3: +    PyObject * yarray = detail::get_array(y);
[3.743s] 3: +    PyObject * zarray = detail::get_array(z);
[3.743s] 3: @@ -693 +623 @@
[3.743s] 3: -    PyObject* args = PyTuple_New(2);
[3.743s] 3: +    PyObject * args = PyTuple_New(3);
[3.743s] 3: @@ -695,0 +626,64 @@
[3.743s] 3: +    PyTuple_SetItem(args, 2, zarray);
[3.743s] 3: +
[3.743s] 3: +    // Build up the kw args.
[3.743s] 3: +    PyObject * kwargs = PyDict_New();
[3.743s] 3: +
[3.743s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.743s] 3: +      it != keywords.end(); ++it)
[3.743s] 3: +    {
[3.743s] 3: +      PyDict_SetItemString(
[3.743s] 3: +        kwargs, it->first.c_str(),
[3.743s] 3: +        PyString_FromString(it->second.c_str()));
[3.744s] 3: +    }
[3.744s] 3: +
[3.744s] 3: +    PyObject * fig =
[3.744s] 3: +      PyObject_CallObject(
[3.744s] 3: +      detail::_interpreter::get().s_python_function_figure,
[3.744s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.744s] 3: +    if (!fig) {throw std::runtime_error("Call to figure() failed.");}
[3.744s] 3: +
[3.744s] 3: +    PyObject * gca_kwargs = PyDict_New();
[3.744s] 3: +    PyDict_SetItemString(gca_kwargs, "projection", PyString_FromString("3d"));
[3.744s] 3: +
[3.744s] 3: +    PyObject * gca = PyObject_GetAttrString(fig, "gca");
[3.744s] 3: +    if (!gca) {throw std::runtime_error("No gca");}
[3.744s] 3: +    Py_INCREF(gca);
[3.744s] 3: +    PyObject * axis = PyObject_Call(
[3.744s] 3: +      gca, detail::_interpreter::get().s_python_empty_tuple, gca_kwargs);
[3.744s] 3: +
[3.744s] 3: +    if (!axis) {throw std::runtime_error("No axis");}
[3.744s] 3: +    Py_INCREF(axis);
[3.744s] 3: +
[3.744s] 3: +    Py_DECREF(gca);
[3.745s] 3: +    Py_DECREF(gca_kwargs);
[3.745s] 3: +
[3.745s] 3: +    PyObject * plot3 = PyObject_GetAttrString(axis, "plot");
[3.745s] 3: +    if (!plot3) {throw std::runtime_error("No 3D line plot");}
[3.745s] 3: +    Py_INCREF(plot3);
[3.745s] 3: +    PyObject * res = PyObject_Call(plot3, args, kwargs);
[3.745s] 3: +    if (!res) {throw std::runtime_error("Failed 3D line plot");}
[3.745s] 3: +    Py_DECREF(plot3);
[3.745s] 3: +
[3.745s] 3: +    Py_DECREF(axis);
[3.745s] 3: +    Py_DECREF(args);
[3.745s] 3: +    Py_DECREF(kwargs);
[3.745s] 3: +    if (res) {Py_DECREF(res);}
[3.745s] 3: +  }
[3.745s] 3: +
[3.745s] 3: +  template < typename Numeric >
[3.745s] 3: +  bool stem(
[3.745s] 3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,
[3.745s] 3: +    const std::map < std::string, std::string > & keywords)
[3.745s] 3: +  {
[3.746s] 3: +    assert(x.size() == y.size());
[3.746s] 3: +
[3.746s] 3: +    detail::_interpreter::get();
[3.746s] 3: +
[3.746s] 3: +    // using numpy arrays
[3.746s] 3: +    PyObject * xarray = detail::get_array(x);
[3.746s] 3: +    PyObject * yarray = detail::get_array(y);
[3.746s] 3: +
[3.746s] 3: +    // construct positional args
[3.746s] 3: +    PyObject * args = PyTuple_New(2);
[3.746s] 3: +    PyTuple_SetItem(args, 0, xarray);
[3.746s] 3: +    PyTuple_SetItem(args, 1, yarray);
[3.746s] 3: @@ -698 +692,41 @@
[3.746s] 3: -    PyObject* kwargs = PyDict_New();
[3.746s] 3: +    PyObject * kwargs = PyDict_New();
[3.746s] 3: +    for (std::map < std::string, std::string > ::const_iterator it =
[3.747s] 3: +      keywords.begin(); it != keywords.end(); ++it)
[3.747s] 3: +    {
[3.747s] 3: +      PyDict_SetItemString(
[3.747s] 3: +        kwargs, it->first.c_str(),
[3.747s] 3: +        PyString_FromString(it->second.c_str()));
[3.747s] 3: +    }
[3.747s] 3: +
[3.747s] 3: +    PyObject * res = PyObject_Call(
[3.747s] 3: +      detail::_interpreter::get().s_python_function_stem, args, kwargs);
[3.747s] 3: +
[3.747s] 3: +    Py_DECREF(args);
[3.747s] 3: +    Py_DECREF(kwargs);
[3.747s] 3: +    if (res) {
[3.747s] 3: +      Py_DECREF(res);
[3.747s] 3: +    }
[3.747s] 3: +
[3.747s] 3: +    return res;
[3.747s] 3: +  }
[3.747s] 3: +
[3.747s] 3: +  template < typename Numeric >
[3.748s] 3: +  bool fill(
[3.748s] 3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,
[3.748s] 3: +    const std::map < std::string, std::string > & keywords)
[3.748s] 3: +  {
[3.748s] 3: +    assert(x.size() == y.size());
[3.748s] 3: +
[3.748s] 3: +    detail::_interpreter::get();
[3.748s] 3: +
[3.748s] 3: +    // using numpy arrays
[3.748s] 3: +    PyObject * xarray = detail::get_array(x);
[3.748s] 3: +    PyObject * yarray = detail::get_array(y);
[3.748s] 3: +
[3.748s] 3: +    // construct positional args
[3.748s] 3: +    PyObject * args = PyTuple_New(2);
[3.748s] 3: +    PyTuple_SetItem(args, 0, xarray);
[3.748s] 3: +    PyTuple_SetItem(args, 1, yarray);
[3.748s] 3: +
[3.748s] 3: +    // construct keyword args
[3.748s] 3: +    PyObject * kwargs = PyDict_New();
[3.749s] 3: @@ -700,9 +734,10 @@
[3.749s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.749s] 3: -    }
[3.749s] 3: -
[3.749s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_fill, args, kwargs);
[3.749s] 3: -
[3.749s] 3: -    Py_DECREF(args);
[3.749s] 3: -    Py_DECREF(kwargs);
[3.749s] 3: -
[3.749s] 3: -    if (res) Py_DECREF(res);
[3.749s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.749s] 3: +    }
[3.749s] 3: +
[3.749s] 3: +    PyObject * res =
[3.749s] 3: +      PyObject_Call(detail::_interpreter::get().s_python_function_fill, args, kwargs);
[3.749s] 3: +
[3.749s] 3: +    Py_DECREF(args);
[3.749s] 3: +    Py_DECREF(kwargs);
[3.749s] 3: +
[3.749s] 3: +    if (res) {Py_DECREF(res);}
[3.750s] 3: @@ -711,5 +746,8 @@
[3.750s] 3: -}
[3.750s] 3: -
[3.750s] 3: -template< typename Numeric >
[3.750s] 3: -bool fill_between(const std::vector<Numeric>& x, const std::vector<Numeric>& y1, const std::vector<Numeric>& y2, const std::map<std::string, std::string>& keywords)
[3.750s] 3: -{
[3.750s] 3: +  }
[3.750s] 3: +
[3.750s] 3: +  template < typename Numeric >
[3.750s] 3: +  bool fill_between(
[3.750s] 3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y1,
[3.750s] 3: +    const std::vector < Numeric > & y2, const std::map < std::string,
[3.750s] 3: +    std::string > & keywords)
[3.750s] 3: +  {
[3.750s] 3: @@ -722,3 +760,3 @@
[3.750s] 3: -    PyObject* xarray = detail::get_array(x);
[3.750s] 3: -    PyObject* y1array = detail::get_array(y1);
[3.750s] 3: -    PyObject* y2array = detail::get_array(y2);
[3.750s] 3: +    PyObject * xarray = detail::get_array(x);
[3.751s] 3: +    PyObject * y1array = detail::get_array(y1);
[3.751s] 3: +    PyObject * y2array = detail::get_array(y2);
[3.751s] 3: @@ -727 +765 @@
[3.751s] 3: -    PyObject* args = PyTuple_New(3);
[3.751s] 3: +    PyObject * args = PyTuple_New(3);
[3.751s] 3: @@ -733,10 +771,13 @@
[3.751s] 3: -    PyObject* kwargs = PyDict_New();
[3.751s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it) {
[3.751s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.751s] 3: -    }
[3.751s] 3: -
[3.751s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_fill_between, args, kwargs);
[3.751s] 3: -
[3.751s] 3: -    Py_DECREF(args);
[3.751s] 3: -    Py_DECREF(kwargs);
[3.751s] 3: -    if(res) Py_DECREF(res);
[3.751s] 3: +    PyObject * kwargs = PyDict_New();
[3.751s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.751s] 3: +      it != keywords.end(); ++it)
[3.752s] 3: +    {
[3.752s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.752s] 3: +    }
[3.752s] 3: +
[3.752s] 3: +    PyObject * res = PyObject_Call(
[3.752s] 3: +      detail::_interpreter::get().s_python_function_fill_between, args, kwargs);
[3.752s] 3: +
[3.752s] 3: +    Py_DECREF(args);
[3.752s] 3: +    Py_DECREF(kwargs);
[3.752s] 3: +    if (res) {Py_DECREF(res);}
[3.752s] 3: @@ -745,11 +786,13 @@
[3.752s] 3: -}
[3.752s] 3: -
[3.753s] 3: -template <typename Numeric>
[3.753s] 3: -bool arrow(Numeric x, Numeric y, Numeric end_x, Numeric end_y, const std::string& fc = "r",
[3.753s] 3: -           const std::string ec = "k", Numeric head_length = 0.25, Numeric head_width = 0.1625) {
[3.753s] 3: -    PyObject* obj_x = PyFloat_FromDouble(x);
[3.753s] 3: -    PyObject* obj_y = PyFloat_FromDouble(y);
[3.753s] 3: -    PyObject* obj_end_x = PyFloat_FromDouble(end_x);
[3.753s] 3: -    PyObject* obj_end_y = PyFloat_FromDouble(end_y);
[3.753s] 3: -
[3.753s] 3: -    PyObject* kwargs = PyDict_New();
[3.753s] 3: +  }
[3.753s] 3: +
[3.753s] 3: +  template < typename Numeric >
[3.753s] 3: +  bool arrow(
[3.753s] 3: +    Numeric x, Numeric y, Numeric end_x, Numeric end_y, const std::string & fc = "r",
[3.753s] 3: +    const std::string ec = "k", Numeric head_length = 0.25, Numeric head_width = 0.1625)
[3.753s] 3: +  {
[3.753s] 3: +    PyObject * obj_x = PyFloat_FromDouble(x);
[3.753s] 3: +    PyObject * obj_y = PyFloat_FromDouble(y);
[3.753s] 3: +    PyObject * obj_end_x = PyFloat_FromDouble(end_x);
[3.753s] 3: +    PyObject * obj_end_y = PyFloat_FromDouble(end_y);
[3.754s] 3: +
[3.754s] 3: +    PyObject * kwargs = PyDict_New();
[3.754s] 3: @@ -761 +804 @@
[3.754s] 3: -    PyObject* plot_args = PyTuple_New(4);
[3.754s] 3: +    PyObject * plot_args = PyTuple_New(4);
[3.754s] 3: @@ -767,2 +810,2 @@
[3.754s] 3: -    PyObject* res =
[3.754s] 3: -            PyObject_Call(detail::_interpreter::get().s_python_function_arrow, plot_args, kwargs);
[3.754s] 3: +    PyObject * res =
[3.754s] 3: +      PyObject_Call(detail::_interpreter::get().s_python_function_arrow, plot_args, kwargs);
[3.754s] 3: @@ -772,2 +815,3 @@
[3.754s] 3: -    if (res)
[3.754s] 3: -        Py_DECREF(res);
[3.754s] 3: +    if (res) {
[3.754s] 3: +      Py_DECREF(res);
[3.754s] 3: +    }
[3.754s] 3: @@ -776,11 +820,12 @@
[3.754s] 3: -}
[3.754s] 3: -
[3.755s] 3: -template< typename Numeric>
[3.755s] 3: -bool hist(const std::vector<Numeric>& y, long bins=10,std::string color="b",
[3.755s] 3: -          double alpha=1.0, bool cumulative=false)
[3.755s] 3: -{
[3.755s] 3: -    detail::_interpreter::get();
[3.755s] 3: -
[3.755s] 3: -    PyObject* yarray = detail::get_array(y);
[3.755s] 3: -
[3.755s] 3: -    PyObject* kwargs = PyDict_New();
[3.755s] 3: +  }
[3.755s] 3: +
[3.755s] 3: +  template < typename Numeric >
[3.755s] 3: +  bool hist(
[3.755s] 3: +    const std::vector < Numeric > & y, long bins = 10, std::string color = "b",
[3.755s] 3: +    double alpha = 1.0, bool cumulative = false)
[3.755s] 3: +  {
[3.755s] 3: +    detail::_interpreter::get();
[3.755s] 3: +
[3.755s] 3: +    PyObject * yarray = detail::get_array(y);
[3.755s] 3: +
[3.756s] 3: +    PyObject * kwargs = PyDict_New();
[3.756s] 3: @@ -792 +837 @@
[3.756s] 3: -    PyObject* plot_args = PyTuple_New(1);
[3.756s] 3: +    PyObject * plot_args = PyTuple_New(1);
[3.756s] 3: @@ -797 +842,2 @@
[3.756s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);
[3.756s] 3: +    PyObject * res = PyObject_Call(
[3.756s] 3: +      detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);
[3.756s] 3: @@ -802 +848 @@
[3.756s] 3: -    if(res) Py_DECREF(res);
[3.756s] 3: +    if (res) {Py_DECREF(res);}
[3.756s] 3: @@ -805 +851 @@
[3.756s] 3: -}
[3.756s] 3: +  }
[3.756s] 3: @@ -808,18 +854,22 @@
[3.756s] 3: -namespace detail {
[3.756s] 3: -
[3.756s] 3: -inline void imshow(void *ptr, const NPY_TYPES type, const int rows, const int columns, const int colors, const std::map<std::string, std::string> &keywords, PyObject** out)
[3.756s] 3: -{
[3.756s] 3: -    assert(type == NPY_UINT8 || type == NPY_FLOAT);
[3.757s] 3: -    assert(colors == 1 || colors == 3 || colors == 4);
[3.757s] 3: -
[3.757s] 3: -    detail::_interpreter::get();
[3.757s] 3: -
[3.757s] 3: -    // construct args
[3.757s] 3: -    npy_intp dims[3] = { rows, columns, colors };
[3.757s] 3: -    PyObject *args = PyTuple_New(1);
[3.757s] 3: -    PyTuple_SetItem(args, 0, PyArray_SimpleNewFromData(colors == 1 ? 2 : 3, dims, type, ptr));
[3.757s] 3: -
[3.757s] 3: -    // construct keyword args
[3.758s] 3: -    PyObject* kwargs = PyDict_New();
[3.758s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.758s] 3: -    {
[3.758s] 3: +  namespace detail {
[3.758s] 3: +
[3.758s] 3: +    inline void imshow(
[3.759s] 3: +      void * ptr, const NPY_TYPES type, const int rows, const int columns,
[3.759s] 3: +      const int colors, const std::map < std::string, std::string > & keywords,
[3.759s] 3: +      PyObject ** out)
[3.759s] 3: +    {
[3.759s] 3: +      assert(type == NPY_UINT8 || type == NPY_FLOAT);
[3.759s] 3: +      assert(colors == 1 || colors == 3 || colors == 4);
[3.759s] 3: +
[3.759s] 3: +      detail::_interpreter::get();
[3.759s] 3: +
[3.759s] 3: +      // construct args
[3.759s] 3: +      npy_intp dims[3] = {rows, columns, colors};
[3.759s] 3: +      PyObject * args = PyTuple_New(1);
[3.759s] 3: +      PyTuple_SetItem(args, 0, PyArray_SimpleNewFromData(colors == 1 ? 2 : 3, dims, type, ptr));
[3.759s] 3: +
[3.759s] 3: +      // construct keyword args
[3.759s] 3: +      PyObject * kwargs = PyDict_New();
[3.759s] 3: +      for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.759s] 3: +        it != keywords.end(); ++it)
[3.760s] 3: +      {
[3.760s] 3: @@ -827,6 +877,7 @@
[3.760s] 3: -    }
[3.760s] 3: -
[3.760s] 3: -    PyObject *res = PyObject_Call(detail::_interpreter::get().s_python_function_imshow, args, kwargs);
[3.760s] 3: -    Py_DECREF(args);
[3.760s] 3: -    Py_DECREF(kwargs);
[3.760s] 3: -    if (!res)
[3.760s] 3: +      }
[3.760s] 3: +
[3.760s] 3: +      PyObject * res = PyObject_Call(
[3.760s] 3: +        detail::_interpreter::get().s_python_function_imshow, args, kwargs);
[3.760s] 3: +      Py_DECREF(args);
[3.760s] 3: +      Py_DECREF(kwargs);
[3.760s] 3: +      if (!res) {
[3.760s] 3: @@ -834 +885,2 @@
[3.760s] 3: -    if (out)
[3.761s] 3: +      }
[3.761s] 3: +      if (out) {
[3.761s] 3: @@ -836 +888 @@
[3.761s] 3: -    else
[3.761s] 3: +      } else {
[3.761s] 3: @@ -838,6 +890,10 @@
[3.761s] 3: -}
[3.761s] 3: -
[3.761s] 3: -} // namespace detail
[3.761s] 3: -
[3.761s] 3: -inline void imshow(const unsigned char *ptr, const int rows, const int columns, const int colors, const std::map<std::string, std::string> &keywords = {}, PyObject** out = nullptr)
[3.761s] 3: -{
[3.761s] 3: +      }
[3.761s] 3: +    }
[3.761s] 3: +
[3.761s] 3: +  } // namespace detail
[3.761s] 3: +
[3.761s] 3: +  inline void imshow(
[3.762s] 3: +    const unsigned char * ptr, const int rows, const int columns, const int colors,
[3.762s] 3: +    const std::map < std::string, std::string > & keywords = {},
[3.762s] 3: +    PyObject ** out = nullptr)
[3.762s] 3: +  {
[3.762s] 3: @@ -845,4 +901,7 @@
[3.762s] 3: -}
[3.762s] 3: -
[3.762s] 3: -inline void imshow(const float *ptr, const int rows, const int columns, const int colors, const std::map<std::string, std::string> &keywords = {}, PyObject** out = nullptr)
[3.762s] 3: -{
[3.762s] 3: +  }
[3.762s] 3: +
[3.762s] 3: +  inline void imshow(
[3.762s] 3: +    const float * ptr, const int rows, const int columns, const int colors,
[3.762s] 3: +    const std::map < std::string, std::string > & keywords = {},
[3.762s] 3: +    PyObject ** out = nullptr)
[3.762s] 3: +  {
[3.762s] 3: @@ -850 +909 @@
[3.762s] 3: -}
[3.762s] 3: +  }
[3.763s] 3: @@ -853,2 +912,2 @@
[3.763s] 3: -void imshow(const cv::Mat &image, const std::map<std::string, std::string> &keywords = {})
[3.763s] 3: -{
[3.763s] 3: +  void imshow(const cv::Mat & image, const std::map < std::string, std::string > & keywords = {})
[3.763s] 3: +  {
[3.763s] 3: @@ -859 +918 @@
[3.763s] 3: -    case CV_8U:
[3.763s] 3: +      case CV_8U:
[3.763s] 3: @@ -862 +921 @@
[3.763s] 3: -    case CV_32F:
[3.763s] 3: +      case CV_32F:
[3.763s] 3: @@ -866 +925 @@
[3.763s] 3: -    default:
[3.763s] 3: +      default:
[3.763s] 3: @@ -872 +931 @@
[3.763s] 3: -    case 3:
[3.763s] 3: +      case 3:
[3.763s] 3: @@ -875 +934 @@
[3.763s] 3: -    case 4:
[3.763s] 3: +      case 4:
[3.764s] 3: @@ -880 +939 @@
[3.764s] 3: -}
[3.764s] 3: +  }
[3.764s] 3: @@ -884,6 +943,7 @@
[3.764s] 3: -template<typename NumericX, typename NumericY>
[3.764s] 3: -bool scatter(const std::vector<NumericX>& x,
[3.764s] 3: -             const std::vector<NumericY>& y,
[3.764s] 3: -             const double s=1.0, // The marker size in points**2
[3.764s] 3: -             const std::map<std::string, std::string> & keywords = {})
[3.764s] 3: -{
[3.764s] 3: +  template < typename NumericX, typename NumericY >
[3.764s] 3: +  bool scatter(
[3.764s] 3: +    const std::vector < NumericX > & x,
[3.764s] 3: +    const std::vector < NumericY > & y,
[3.764s] 3: +    const double s = 1.0,        // The marker size in points**2
[3.764s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.764s] 3: +  {
[3.764s] 3: @@ -894,4 +954,4 @@
[3.764s] 3: -    PyObject* xarray = detail::get_array(x);
[3.764s] 3: -    PyObject* yarray = detail::get_array(y);
[3.765s] 3: -
[3.765s] 3: -    PyObject* kwargs = PyDict_New();
[3.765s] 3: +    PyObject * xarray = detail::get_array(x);
[3.765s] 3: +    PyObject * yarray = detail::get_array(y);
[3.765s] 3: +
[3.765s] 3: +    PyObject * kwargs = PyDict_New();
[3.765s] 3: @@ -899,6 +959,5 @@
[3.765s] 3: -    for (const auto& it : keywords)
[3.765s] 3: -    {
[3.765s] 3: -        PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));
[3.765s] 3: -    }
[3.765s] 3: -
[3.765s] 3: -    PyObject* plot_args = PyTuple_New(2);
[3.765s] 3: +    for (const auto & it : keywords) {
[3.765s] 3: +      PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));
[3.765s] 3: +    }
[3.765s] 3: +
[3.765s] 3: +    PyObject * plot_args = PyTuple_New(2);
[3.765s] 3: @@ -908 +967,2 @@
[3.765s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_scatter, plot_args, kwargs);
[3.766s] 3: +    PyObject * res = PyObject_Call(
[3.766s] 3: +      detail::_interpreter::get().s_python_function_scatter, plot_args, kwargs);
[3.766s] 3: @@ -912 +972 @@
[3.766s] 3: -    if(res) Py_DECREF(res);
[3.766s] 3: +    if (res) {Py_DECREF(res);}
[3.766s] 3: @@ -915,11 +975,12 @@
[3.766s] 3: -}
[3.766s] 3: -
[3.766s] 3: -template<typename Numeric>
[3.766s] 3: -bool boxplot(const std::vector<std::vector<Numeric>>& data,
[3.766s] 3: -             const std::vector<std::string>& labels = {},
[3.766s] 3: -             const std::map<std::string, std::string> & keywords = {})
[3.766s] 3: -{
[3.766s] 3: -    detail::_interpreter::get();
[3.766s] 3: -
[3.766s] 3: -    PyObject* listlist = detail::get_listlist(data);
[3.766s] 3: -    PyObject* args = PyTuple_New(1);
[3.766s] 3: +  }
[3.766s] 3: +
[3.766s] 3: +  template < typename Numeric >
[3.767s] 3: +  bool boxplot(
[3.767s] 3: +    const std::vector < std::vector < Numeric >> & data,
[3.767s] 3: +    const std::vector < std::string > & labels = {},
[3.767s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.767s] 3: +  {
[3.767s] 3: +    detail::_interpreter::get();
[3.767s] 3: +
[3.767s] 3: +    PyObject * listlist = detail::get_listlist(data);
[3.767s] 3: +    PyObject * args = PyTuple_New(1);
[3.767s] 3: @@ -928 +989 @@
[3.767s] 3: -    PyObject* kwargs = PyDict_New();
[3.767s] 3: +    PyObject * kwargs = PyDict_New();
[3.767s] 3: @@ -932 +993 @@
[3.767s] 3: -        PyDict_SetItemString(kwargs, "labels", detail::get_array(labels));
[3.767s] 3: +      PyDict_SetItemString(kwargs, "labels", detail::get_array(labels));
[3.767s] 3: @@ -936,11 +997,11 @@
[3.767s] 3: -    for (const auto& it : keywords)
[3.767s] 3: -    {
[3.767s] 3: -        PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));
[3.768s] 3: -    }
[3.768s] 3: -
[3.768s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_boxplot, args, kwargs);
[3.768s] 3: -
[3.768s] 3: -    Py_DECREF(args);
[3.768s] 3: -    Py_DECREF(kwargs);
[3.768s] 3: -
[3.768s] 3: -    if(res) Py_DECREF(res);
[3.768s] 3: +    for (const auto & it : keywords) {
[3.768s] 3: +      PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));
[3.768s] 3: +    }
[3.768s] 3: +
[3.768s] 3: +    PyObject * res = PyObject_Call(
[3.768s] 3: +      detail::_interpreter::get().s_python_function_boxplot, args, kwargs);
[3.768s] 3: +
[3.768s] 3: +    Py_DECREF(args);
[3.768s] 3: +    Py_DECREF(kwargs);
[3.768s] 3: +
[3.768s] 3: +    if (res) {Py_DECREF(res);}
[3.768s] 3: @@ -949,10 +1010,11 @@
[3.769s] 3: -}
[3.769s] 3: -
[3.769s] 3: -template<typename Numeric>
[3.769s] 3: -bool boxplot(const std::vector<Numeric>& data,
[3.769s] 3: -             const std::map<std::string, std::string> & keywords = {})
[3.769s] 3: -{
[3.769s] 3: -    detail::_interpreter::get();
[3.769s] 3: -
[3.769s] 3: -    PyObject* vector = detail::get_array(data);
[3.769s] 3: -    PyObject* args = PyTuple_New(1);
[3.769s] 3: +  }
[3.769s] 3: +
[3.769s] 3: +  template < typename Numeric >
[3.769s] 3: +  bool boxplot(
[3.769s] 3: +    const std::vector < Numeric > & data,
[3.769s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.769s] 3: +  {
[3.769s] 3: +    detail::_interpreter::get();
[3.769s] 3: +
[3.770s] 3: +    PyObject * vector = detail::get_array(data);
[3.770s] 3: +    PyObject * args = PyTuple_New(1);
[3.770s] 3: @@ -961,12 +1023,12 @@
[3.770s] 3: -    PyObject* kwargs = PyDict_New();
[3.770s] 3: -    for (const auto& it : keywords)
[3.770s] 3: -    {
[3.770s] 3: -        PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));
[3.770s] 3: -    }
[3.770s] 3: -
[3.770s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_boxplot, args, kwargs);
[3.770s] 3: -
[3.770s] 3: -    Py_DECREF(args);
[3.770s] 3: -    Py_DECREF(kwargs);
[3.770s] 3: -
[3.770s] 3: -    if(res) Py_DECREF(res);
[3.770s] 3: +    PyObject * kwargs = PyDict_New();
[3.770s] 3: +    for (const auto & it : keywords) {
[3.770s] 3: +      PyDict_SetItemString(kwargs, it.first.c_str(), PyString_FromString(it.second.c_str()));
[3.770s] 3: +    }
[3.771s] 3: +
[3.771s] 3: +    PyObject * res = PyObject_Call(
[3.771s] 3: +      detail::_interpreter::get().s_python_function_boxplot, args, kwargs);
[3.771s] 3: +
[3.771s] 3: +    Py_DECREF(args);
[3.771s] 3: +    Py_DECREF(kwargs);
[3.771s] 3: +
[3.771s] 3: +    if (res) {Py_DECREF(res);}
[3.771s] 3: @@ -975,67 +1037,17 @@
[3.771s] 3: -}
[3.771s] 3: -
[3.771s] 3: -template <typename Numeric>
[3.771s] 3: -bool bar(const std::vector<Numeric> &               x,
[3.771s] 3: -         const std::vector<Numeric> &               y,
[3.771s] 3: -         std::string                                ec       = "black",
[3.771s] 3: -         std::string                                ls       = "-",
[3.771s] 3: -         double                                     lw       = 1.0,
[3.771s] 3: -         const std::map<std::string, std::string> & keywords = {})
[3.771s] 3: -{
[3.771s] 3: -  detail::_interpreter::get();
[3.772s] 3: -
[3.772s] 3: -  PyObject * xarray = detail::get_array(x);
[3.772s] 3: -  PyObject * yarray = detail::get_array(y);
[3.772s] 3: -
[3.772s] 3: -  PyObject * kwargs = PyDict_New();
[3.772s] 3: -
[3.772s] 3: -  PyDict_SetItemString(kwargs, "ec", PyString_FromString(ec.c_str()));
[3.772s] 3: -  PyDict_SetItemString(kwargs, "ls", PyString_FromString(ls.c_str()));
[3.772s] 3: -  PyDict_SetItemString(kwargs, "lw", PyFloat_FromDouble(lw));
[3.772s] 3: -
[3.772s] 3: -  for (std::map<std::string, std::string>::const_iterator it =
[3.772s] 3: -         keywords.begin();
[3.772s] 3: -       it != keywords.end();
[3.772s] 3: -       ++it) {
[3.772s] 3: -    PyDict_SetItemString(
[3.772s] 3: -      kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.772s] 3: -  }
[3.772s] 3: -
[3.772s] 3: -  PyObject * plot_args = PyTuple_New(2);
[3.772s] 3: -  PyTuple_SetItem(plot_args, 0, xarray);
[3.773s] 3: -  PyTuple_SetItem(plot_args, 1, yarray);
[3.773s] 3: -
[3.773s] 3: -  PyObject * res = PyObject_Call(
[3.773s] 3: -    detail::_interpreter::get().s_python_function_bar, plot_args, kwargs);
[3.773s] 3: -
[3.773s] 3: -  Py_DECREF(plot_args);
[3.773s] 3: -  Py_DECREF(kwargs);
[3.773s] 3: -  if (res) Py_DECREF(res);
[3.773s] 3: -
[3.773s] 3: -  return res;
[3.773s] 3: -}
[3.773s] 3: -
[3.781s] 3: -template <typename Numeric>
[3.781s] 3: -bool bar(const std::vector<Numeric> &               y,
[3.781s] 3: -         std::string                                ec       = "black",
[3.781s] 3: -         std::string                                ls       = "-",
[3.781s] 3: -         double                                     lw       = 1.0,
[3.781s] 3: -         const std::map<std::string, std::string> & keywords = {})
[3.781s] 3: -{
[3.781s] 3: -  using T = typename std::remove_reference<decltype(y)>::type::value_type;
[3.781s] 3: -
[3.782s] 3: -  detail::_interpreter::get();
[3.782s] 3: -
[3.782s] 3: -  std::vector<T> x;
[3.782s] 3: -  for (std::size_t i = 0; i < y.size(); i++) { x.push_back(i); }
[3.782s] 3: -
[3.782s] 3: -  return bar(x, y, ec, ls, lw, keywords);
[3.782s] 3: -}
[3.782s] 3: -
[3.782s] 3: -
[3.782s] 3: -template<typename Numeric>
[3.782s] 3: -bool barh(const std::vector<Numeric> &x, const std::vector<Numeric> &y, std::string ec = "black", std::string ls = "-", double lw = 1.0, const std::map<std::string, std::string> &keywords = { }) {
[3.782s] 3: -    PyObject *xarray = detail::get_array(x);
[3.782s] 3: -    PyObject *yarray = detail::get_array(y);
[3.782s] 3: -
[3.782s] 3: -    PyObject *kwargs = PyDict_New();
[3.782s] 3: +  }
[3.782s] 3: +
[3.782s] 3: +  template < typename Numeric >
[3.782s] 3: +  bool bar(
[3.783s] 3: +    const std::vector < Numeric > & x,
[3.783s] 3: +    const std::vector < Numeric > & y,
[3.783s] 3: +    std::string ec = "black",
[3.783s] 3: +    std::string ls = "-",
[3.783s] 3: +    double lw = 1.0,
[3.783s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.783s] 3: +  {
[3.783s] 3: +    detail::_interpreter::get();
[3.783s] 3: +
[3.783s] 3: +    PyObject * xarray = detail::get_array(x);
[3.783s] 3: +    PyObject * yarray = detail::get_array(y);
[3.783s] 3: +
[3.783s] 3: +    PyObject * kwargs = PyDict_New();
[3.783s] 3: @@ -1047,5 +1059,10 @@
[3.783s] 3: -    for (std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it) {
[3.783s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.783s] 3: -    }
[3.783s] 3: -
[3.783s] 3: -    PyObject *plot_args = PyTuple_New(2);
[3.783s] 3: +    for (std::map < std::string, std::string > ::const_iterator it =
[3.784s] 3: +      keywords.begin();
[3.784s] 3: +      it != keywords.end();
[3.784s] 3: +      ++it)
[3.784s] 3: +    {
[3.784s] 3: +      PyDict_SetItemString(
[3.784s] 3: +        kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.784s] 3: +    }
[3.784s] 3: +
[3.784s] 3: +    PyObject * plot_args = PyTuple_New(2);
[3.784s] 3: @@ -1055 +1072,2 @@
[3.784s] 3: -    PyObject *res = PyObject_Call(detail::_interpreter::get().s_python_function_barh, plot_args, kwargs);
[3.784s] 3: +    PyObject * res = PyObject_Call(
[3.784s] 3: +      detail::_interpreter::get().s_python_function_bar, plot_args, kwargs);
[3.784s] 3: @@ -1059 +1077 @@
[3.784s] 3: -    if (res) Py_DECREF(res);
[3.784s] 3: +    if (res) {Py_DECREF(res);}
[3.784s] 3: @@ -1062,18 +1080,50 @@
[3.784s] 3: -}
[3.784s] 3: -
[3.785s] 3: -
[3.785s] 3: -inline bool subplots_adjust(const std::map<std::string, double>& keywords = {})
[3.785s] 3: -{
[3.785s] 3: -    detail::_interpreter::get();
[3.785s] 3: -
[3.785s] 3: -    PyObject* kwargs = PyDict_New();
[3.785s] 3: -    for (std::map<std::string, double>::const_iterator it =
[3.785s] 3: -            keywords.begin(); it != keywords.end(); ++it) {
[3.785s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(),
[3.785s] 3: -                             PyFloat_FromDouble(it->second));
[3.785s] 3: -    }
[3.785s] 3: -
[3.785s] 3: -
[3.785s] 3: -    PyObject* plot_args = PyTuple_New(0);
[3.785s] 3: -
[3.785s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_subplots_adjust, plot_args, kwargs);
[3.785s] 3: +  }
[3.785s] 3: +
[3.785s] 3: +  template < typename Numeric >
[3.786s] 3: +  bool bar(
[3.786s] 3: +    const std::vector < Numeric > & y,
[3.786s] 3: +    std::string ec = "black",
[3.786s] 3: +    std::string ls = "-",
[3.786s] 3: +    double lw = 1.0,
[3.786s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.786s] 3: +  {
[3.786s] 3: +    using T = typename std::remove_reference < decltype(y) > ::type::value_type;
[3.786s] 3: +
[3.786s] 3: +    detail::_interpreter::get();
[3.786s] 3: +
[3.786s] 3: +    std::vector < T > x;
[3.786s] 3: +    for (std::size_t i = 0; i < y.size(); i++) {
[3.786s] 3: +      x.push_back(i);
[3.786s] 3: +    }
[3.786s] 3: +
[3.786s] 3: +    return bar(x, y, ec, ls, lw, keywords);
[3.786s] 3: +  }
[3.786s] 3: +
[3.787s] 3: +
[3.787s] 3: +  template < typename Numeric >
[3.787s] 3: +  bool barh(
[3.787s] 3: +    const std::vector < Numeric > & x, const std::vector < Numeric > & y,
[3.787s] 3: +    std::string ec = "black", std::string ls = "-", double lw = 1.0,
[3.787s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.787s] 3: +  {
[3.787s] 3: +    PyObject * xarray = detail::get_array(x);
[3.787s] 3: +    PyObject * yarray = detail::get_array(y);
[3.787s] 3: +
[3.787s] 3: +    PyObject * kwargs = PyDict_New();
[3.787s] 3: +
[3.787s] 3: +    PyDict_SetItemString(kwargs, "ec", PyString_FromString(ec.c_str()));
[3.787s] 3: +    PyDict_SetItemString(kwargs, "ls", PyString_FromString(ls.c_str()));
[3.787s] 3: +    PyDict_SetItemString(kwargs, "lw", PyFloat_FromDouble(lw));
[3.787s] 3: +
[3.787s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.787s] 3: +      it != keywords.end(); ++it)
[3.787s] 3: +    {
[3.787s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.788s] 3: +    }
[3.788s] 3: +
[3.788s] 3: +    PyObject * plot_args = PyTuple_New(2);
[3.788s] 3: +    PyTuple_SetItem(plot_args, 0, xarray);
[3.788s] 3: +    PyTuple_SetItem(plot_args, 1, yarray);
[3.788s] 3: +
[3.788s] 3: +    PyObject * res = PyObject_Call(
[3.788s] 3: +      detail::_interpreter::get().s_python_function_barh, plot_args, kwargs);
[3.788s] 3: @@ -1083 +1133 @@
[3.788s] 3: -    if(res) Py_DECREF(res);
[3.788s] 3: +    if (res) {Py_DECREF(res);}
[3.788s] 3: @@ -1086,10 +1136,39 @@
[3.788s] 3: -}
[3.788s] 3: -
[3.788s] 3: -template< typename Numeric>
[3.788s] 3: -bool named_hist(std::string label,const std::vector<Numeric>& y, long bins=10, std::string color="b", double alpha=1.0)
[3.788s] 3: -{
[3.788s] 3: -    detail::_interpreter::get();
[3.788s] 3: -
[3.789s] 3: -    PyObject* yarray = detail::get_array(y);
[3.789s] 3: -
[3.789s] 3: -    PyObject* kwargs = PyDict_New();
[3.789s] 3: +  }
[3.789s] 3: +
[3.789s] 3: +
[3.789s] 3: +  inline bool subplots_adjust(const std::map < std::string, double > & keywords = {})
[3.789s] 3: +  {
[3.789s] 3: +    detail::_interpreter::get();
[3.789s] 3: +
[3.789s] 3: +    PyObject * kwargs = PyDict_New();
[3.799s] 3: +    for (std::map < std::string, double > ::const_iterator it =
[3.800s] 3: +      keywords.begin(); it != keywords.end(); ++it)
[3.800s] 3: +    {
[3.800s] 3: +      PyDict_SetItemString(
[3.800s] 3: +        kwargs, it->first.c_str(),
[3.801s] 3: +        PyFloat_FromDouble(it->second));
[3.801s] 3: +    }
[3.801s] 3: +
[3.801s] 3: +
[3.801s] 3: +    PyObject * plot_args = PyTuple_New(0);
[3.801s] 3: +
[3.801s] 3: +    PyObject * res = PyObject_Call(
[3.801s] 3: +      detail::_interpreter::get().s_python_function_subplots_adjust, plot_args, kwargs);
[3.801s] 3: +
[3.801s] 3: +    Py_DECREF(plot_args);
[3.801s] 3: +    Py_DECREF(kwargs);
[3.801s] 3: +    if (res) {Py_DECREF(res);}
[3.801s] 3: +
[3.801s] 3: +    return res;
[3.801s] 3: +  }
[3.801s] 3: +
[3.801s] 3: +  template < typename Numeric >
[3.802s] 3: +  bool named_hist(
[3.802s] 3: +    std::string label, const std::vector < Numeric > & y, long bins = 10,
[3.802s] 3: +    std::string color = "b", double alpha = 1.0)
[3.802s] 3: +  {
[3.802s] 3: +    detail::_interpreter::get();
[3.802s] 3: +
[3.802s] 3: +    PyObject * yarray = detail::get_array(y);
[3.802s] 3: +
[3.802s] 3: +    PyObject * kwargs = PyDict_New();
[3.802s] 3: @@ -1102 +1181 @@
[3.802s] 3: -    PyObject* plot_args = PyTuple_New(1);
[3.802s] 3: +    PyObject * plot_args = PyTuple_New(1);
[3.802s] 3: @@ -1105 +1184,2 @@
[3.802s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);
[3.802s] 3: +    PyObject * res = PyObject_Call(
[3.802s] 3: +      detail::_interpreter::get().s_python_function_hist, plot_args, kwargs);
[3.803s] 3: @@ -1109 +1189 @@
[3.803s] 3: -    if(res) Py_DECREF(res);
[3.803s] 3: +    if (res) {Py_DECREF(res);}
[3.803s] 3: @@ -1112,5 +1192,7 @@
[3.803s] 3: -}
[3.803s] 3: -
[3.803s] 3: -template<typename NumericX, typename NumericY>
[3.803s] 3: -bool plot(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")
[3.803s] 3: -{
[3.803s] 3: +  }
[3.803s] 3: +
[3.803s] 3: +  template < typename NumericX, typename NumericY >
[3.803s] 3: +  bool plot(
[3.803s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.803s] 3: +    const std::string & s = "")
[3.803s] 3: +  {
[3.803s] 3: @@ -1121,6 +1203,6 @@
[3.803s] 3: -    PyObject* xarray = detail::get_array(x);
[3.803s] 3: -    PyObject* yarray = detail::get_array(y);
[3.803s] 3: -
[3.804s] 3: -    PyObject* pystring = PyString_FromString(s.c_str());
[3.804s] 3: -
[3.804s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.804s] 3: +    PyObject * xarray = detail::get_array(x);
[3.804s] 3: +    PyObject * yarray = detail::get_array(y);
[3.804s] 3: +
[3.804s] 3: +    PyObject * pystring = PyString_FromString(s.c_str());
[3.804s] 3: +
[3.804s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.804s] 3: @@ -1131 +1213,2 @@
[3.804s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_plot, plot_args);
[3.804s] 3: +    PyObject * res = PyObject_CallObject(
[3.804s] 3: +      detail::_interpreter::get().s_python_function_plot, plot_args);
[3.804s] 3: @@ -1134 +1217 @@
[3.804s] 3: -    if(res) Py_DECREF(res);
[3.804s] 3: +    if (res) {Py_DECREF(res);}
[3.804s] 3: @@ -1137,6 +1220,8 @@
[3.804s] 3: -}
[3.804s] 3: -
[3.804s] 3: -template <typename NumericX, typename NumericY, typename NumericZ>
[3.804s] 3: -bool contour(const std::vector<NumericX>& x, const std::vector<NumericY>& y,
[3.804s] 3: -             const std::vector<NumericZ>& z,
[3.805s] 3: -             const std::map<std::string, std::string>& keywords = {}) {
[3.805s] 3: +  }
[3.805s] 3: +
[3.805s] 3: +  template < typename NumericX, typename NumericY, typename NumericZ >
[3.805s] 3: +  bool contour(
[3.805s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.805s] 3: +    const std::vector < NumericZ > & z,
[3.805s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.805s] 3: +  {
[3.805s] 3: @@ -1145,5 +1230,5 @@
[3.805s] 3: -    PyObject* xarray = get_array(x);
[3.805s] 3: -    PyObject* yarray = get_array(y);
[3.806s] 3: -    PyObject* zarray = get_array(z);
[3.806s] 3: -
[3.806s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.806s] 3: +    PyObject * xarray = get_array(x);
[3.806s] 3: +    PyObject * yarray = get_array(y);
[3.806s] 3: +    PyObject * zarray = get_array(z);
[3.806s] 3: +
[3.806s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.806s] 3: @@ -1155,8 +1240,9 @@
[3.806s] 3: -    PyObject* kwargs = PyDict_New();
[3.806s] 3: -    for (std::map<std::string, std::string>::const_iterator it = keywords.begin();
[3.806s] 3: -         it != keywords.end(); ++it) {
[3.806s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.806s] 3: -    }
[3.806s] 3: -
[3.806s] 3: -    PyObject* res =
[3.806s] 3: -            PyObject_Call(detail::_interpreter::get().s_python_function_contour, plot_args, kwargs);
[3.806s] 3: +    PyObject * kwargs = PyDict_New();
[3.807s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.807s] 3: +      it != keywords.end(); ++it)
[3.807s] 3: +    {
[3.807s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.807s] 3: +    }
[3.807s] 3: +
[3.807s] 3: +    PyObject * res =
[3.807s] 3: +      PyObject_Call(detail::_interpreter::get().s_python_function_contour, plot_args, kwargs);
[3.807s] 3: @@ -1166,2 +1252,3 @@
[3.807s] 3: -    if (res)
[3.807s] 3: -        Py_DECREF(res);
[3.807s] 3: +    if (res) {
[3.807s] 3: +      Py_DECREF(res);
[3.808s] 3: +    }
[3.808s] 3: @@ -1170,5 +1257,8 @@
[3.808s] 3: -}
[3.808s] 3: -
[3.808s] 3: -template<typename NumericX, typename NumericY, typename NumericU, typename NumericW>
[3.808s] 3: -bool quiver(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::vector<NumericU>& u, const std::vector<NumericW>& w, const std::map<std::string, std::string>& keywords = {})
[3.808s] 3: -{
[3.808s] 3: +  }
[3.808s] 3: +
[3.808s] 3: +  template < typename NumericX, typename NumericY, typename NumericU, typename NumericW >
[3.808s] 3: +  bool quiver(
[3.809s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.809s] 3: +    const std::vector < NumericU > & u, const std::vector < NumericW > & w,
[3.809s] 3: +    const std::map < std::string, std::string > & keywords = {})
[3.809s] 3: +  {
[3.809s] 3: @@ -1179,6 +1269,6 @@
[3.809s] 3: -    PyObject* xarray = detail::get_array(x);
[3.809s] 3: -    PyObject* yarray = detail::get_array(y);
[3.809s] 3: -    PyObject* uarray = detail::get_array(u);
[3.809s] 3: -    PyObject* warray = detail::get_array(w);
[3.809s] 3: -
[3.809s] 3: -    PyObject* plot_args = PyTuple_New(4);
[3.810s] 3: +    PyObject * xarray = detail::get_array(x);
[3.810s] 3: +    PyObject * yarray = detail::get_array(y);
[3.810s] 3: +    PyObject * uarray = detail::get_array(u);
[3.810s] 3: +    PyObject * warray = detail::get_array(w);
[3.810s] 3: +
[3.810s] 3: +    PyObject * plot_args = PyTuple_New(4);
[3.810s] 3: @@ -1191,8 +1281,9 @@
[3.810s] 3: -    PyObject* kwargs = PyDict_New();
[3.810s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.810s] 3: -    {
[3.810s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.810s] 3: -    }
[3.811s] 3: -
[3.811s] 3: -    PyObject* res = PyObject_Call(
[3.811s] 3: -            detail::_interpreter::get().s_python_function_quiver, plot_args, kwargs);
[3.811s] 3: +    PyObject * kwargs = PyDict_New();
[3.811s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.811s] 3: +      it != keywords.end(); ++it)
[3.811s] 3: +    {
[3.811s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.811s] 3: +    }
[3.811s] 3: +
[3.811s] 3: +    PyObject * res = PyObject_Call(
[3.811s] 3: +      detail::_interpreter::get().s_python_function_quiver, plot_args, kwargs);
[3.812s] 3: @@ -1202,2 +1293,3 @@
[3.812s] 3: -    if (res)
[3.812s] 3: -        Py_DECREF(res);
[3.812s] 3: +    if (res) {
[3.812s] 3: +      Py_DECREF(res);
[3.812s] 3: +    }
[3.812s] 3: @@ -1206,5 +1298,7 @@
[3.812s] 3: -}
[3.812s] 3: -
[3.812s] 3: -template<typename NumericX, typename NumericY>
[3.813s] 3: -bool stem(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")
[3.813s] 3: -{
[3.813s] 3: +  }
[3.813s] 3: +
[3.813s] 3: +  template < typename NumericX, typename NumericY >
[3.813s] 3: +  bool stem(
[3.813s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.813s] 3: +    const std::string & s = "")
[3.813s] 3: +  {
[3.813s] 3: @@ -1215,6 +1309,6 @@
[3.813s] 3: -    PyObject* xarray = detail::get_array(x);
[3.813s] 3: -    PyObject* yarray = detail::get_array(y);
[3.814s] 3: -
[3.814s] 3: -    PyObject* pystring = PyString_FromString(s.c_str());
[3.814s] 3: -
[3.814s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.814s] 3: +    PyObject * xarray = detail::get_array(x);
[3.814s] 3: +    PyObject * yarray = detail::get_array(y);
[3.814s] 3: +
[3.814s] 3: +    PyObject * pystring = PyString_FromString(s.c_str());
[3.814s] 3: +
[3.814s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.814s] 3: @@ -1225,2 +1319,2 @@
[3.815s] 3: -    PyObject* res = PyObject_CallObject(
[3.815s] 3: -            detail::_interpreter::get().s_python_function_stem, plot_args);
[3.815s] 3: +    PyObject * res = PyObject_CallObject(
[3.815s] 3: +      detail::_interpreter::get().s_python_function_stem, plot_args);
[3.815s] 3: @@ -1229,2 +1323,3 @@
[3.815s] 3: -    if (res)
[3.815s] 3: -        Py_DECREF(res);
[3.815s] 3: +    if (res) {
[3.815s] 3: +      Py_DECREF(res);
[3.815s] 3: +    }
[3.815s] 3: @@ -1233,5 +1328,7 @@
[3.816s] 3: -}
[3.816s] 3: -
[3.816s] 3: -template<typename NumericX, typename NumericY>
[3.816s] 3: -bool semilogx(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")
[3.816s] 3: -{
[3.816s] 3: +  }
[3.816s] 3: +
[3.816s] 3: +  template < typename NumericX, typename NumericY >
[3.816s] 3: +  bool semilogx(
[3.816s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.816s] 3: +    const std::string & s = "")
[3.817s] 3: +  {
[3.817s] 3: @@ -1242,6 +1339,6 @@
[3.817s] 3: -    PyObject* xarray = detail::get_array(x);
[3.817s] 3: -    PyObject* yarray = detail::get_array(y);
[3.817s] 3: -
[3.817s] 3: -    PyObject* pystring = PyString_FromString(s.c_str());
[3.817s] 3: -
[3.817s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.817s] 3: +    PyObject * xarray = detail::get_array(x);
[3.817s] 3: +    PyObject * yarray = detail::get_array(y);
[3.817s] 3: +
[3.818s] 3: +    PyObject * pystring = PyString_FromString(s.c_str());
[3.818s] 3: +
[3.818s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.818s] 3: @@ -1252 +1349,2 @@
[3.818s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_semilogx, plot_args);
[3.818s] 3: +    PyObject * res = PyObject_CallObject(
[3.818s] 3: +      detail::_interpreter::get().s_python_function_semilogx, plot_args);
[3.818s] 3: @@ -1255 +1353 @@
[3.818s] 3: -    if(res) Py_DECREF(res);
[3.818s] 3: +    if (res) {Py_DECREF(res);}
[3.818s] 3: @@ -1258,5 +1356,7 @@
[3.819s] 3: -}
[3.819s] 3: -
[3.819s] 3: -template<typename NumericX, typename NumericY>
[3.819s] 3: -bool semilogy(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")
[3.819s] 3: -{
[3.819s] 3: +  }
[3.819s] 3: +
[3.819s] 3: +  template < typename NumericX, typename NumericY >
[3.819s] 3: +  bool semilogy(
[3.819s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.819s] 3: +    const std::string & s = "")
[3.820s] 3: +  {
[3.820s] 3: @@ -1267,6 +1367,6 @@
[3.820s] 3: -    PyObject* xarray = detail::get_array(x);
[3.821s] 3: -    PyObject* yarray = detail::get_array(y);
[3.822s] 3: -
[3.822s] 3: -    PyObject* pystring = PyString_FromString(s.c_str());
[3.822s] 3: -
[3.822s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.822s] 3: +    PyObject * xarray = detail::get_array(x);
[3.822s] 3: +    PyObject * yarray = detail::get_array(y);
[3.823s] 3: +
[3.823s] 3: +    PyObject * pystring = PyString_FromString(s.c_str());
[3.823s] 3: +
[3.823s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.823s] 3: @@ -1277 +1377,2 @@
[3.823s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_semilogy, plot_args);
[3.823s] 3: +    PyObject * res = PyObject_CallObject(
[3.823s] 3: +      detail::_interpreter::get().s_python_function_semilogy, plot_args);
[3.823s] 3: @@ -1280 +1381 @@
[3.823s] 3: -    if(res) Py_DECREF(res);
[3.823s] 3: +    if (res) {Py_DECREF(res);}
[3.824s] 3: @@ -1283,5 +1384,7 @@
[3.824s] 3: -}
[3.824s] 3: -
[3.824s] 3: -template<typename NumericX, typename NumericY>
[3.824s] 3: -bool loglog(const std::vector<NumericX>& x, const std::vector<NumericY>& y, const std::string& s = "")
[3.824s] 3: -{
[3.824s] 3: +  }
[3.824s] 3: +
[3.825s] 3: +  template < typename NumericX, typename NumericY >
[3.825s] 3: +  bool loglog(
[3.825s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.825s] 3: +    const std::string & s = "")
[3.825s] 3: +  {
[3.825s] 3: @@ -1292,6 +1395,6 @@
[3.825s] 3: -    PyObject* xarray = detail::get_array(x);
[3.825s] 3: -    PyObject* yarray = detail::get_array(y);
[3.825s] 3: -
[3.825s] 3: -    PyObject* pystring = PyString_FromString(s.c_str());
[3.825s] 3: -
[3.825s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.825s] 3: +    PyObject * xarray = detail::get_array(x);
[3.826s] 3: +    PyObject * yarray = detail::get_array(y);
[3.826s] 3: +
[3.826s] 3: +    PyObject * pystring = PyString_FromString(s.c_str());
[3.826s] 3: +
[3.826s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.826s] 3: @@ -1302 +1405,2 @@
[3.826s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_loglog, plot_args);
[3.826s] 3: +    PyObject * res = PyObject_CallObject(
[3.826s] 3: +      detail::_interpreter::get().s_python_function_loglog, plot_args);
[3.826s] 3: @@ -1305 +1409 @@
[3.826s] 3: -    if(res) Py_DECREF(res);
[3.826s] 3: +    if (res) {Py_DECREF(res);}
[3.826s] 3: @@ -1308,5 +1412,8 @@
[3.826s] 3: -}
[3.826s] 3: -
[3.826s] 3: -template<typename NumericX, typename NumericY>
[3.826s] 3: -bool errorbar(const std::vector<NumericX> &x, const std::vector<NumericY> &y, const std::vector<NumericX> &yerr, const std::map<std::string, std::string> &keywords = {})
[3.826s] 3: -{
[3.826s] 3: +  }
[3.827s] 3: +
[3.827s] 3: +  template < typename NumericX, typename NumericY >
[3.827s] 3: +  bool errorbar(
[3.827s] 3: +    const std::vector < NumericX > & x, const std::vector < NumericY > & y,
[3.827s] 3: +    const std::vector < NumericX > & yerr, const std::map < std::string,
[3.827s] 3: +    std::string > & keywords = {})
[3.827s] 3: +  {
[3.827s] 3: @@ -1317,3 +1424,3 @@
[3.827s] 3: -    PyObject* xarray = detail::get_array(x);
[3.827s] 3: -    PyObject* yarray = detail::get_array(y);
[3.827s] 3: -    PyObject* yerrarray = detail::get_array(yerr);
[3.827s] 3: +    PyObject * xarray = detail::get_array(x);
[3.827s] 3: +    PyObject * yarray = detail::get_array(y);
[3.827s] 3: +    PyObject * yerrarray = detail::get_array(yerr);
[3.827s] 3: @@ -1322,4 +1429,5 @@
[3.827s] 3: -    PyObject* kwargs = PyDict_New();
[3.827s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.827s] 3: -    {
[3.827s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.828s] 3: +    PyObject * kwargs = PyDict_New();
[3.828s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.828s] 3: +      it != keywords.end(); ++it)
[3.828s] 3: +    {
[3.828s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.828s] 3: @@ -1330 +1438 @@
[3.828s] 3: -    PyObject *plot_args = PyTuple_New(2);
[3.828s] 3: +    PyObject * plot_args = PyTuple_New(2);
[3.828s] 3: @@ -1334 +1442,2 @@
[3.828s] 3: -    PyObject *res = PyObject_Call(detail::_interpreter::get().s_python_function_errorbar, plot_args, kwargs);
[3.828s] 3: +    PyObject * res = PyObject_Call(
[3.828s] 3: +      detail::_interpreter::get().s_python_function_errorbar, plot_args, kwargs);
[3.828s] 3: @@ -1339,4 +1448,5 @@
[3.828s] 3: -    if (res)
[3.828s] 3: -        Py_DECREF(res);
[3.828s] 3: -    else
[3.829s] 3: -        throw std::runtime_error("Call to errorbar() failed.");
[3.829s] 3: +    if (res) {
[3.829s] 3: +      Py_DECREF(res);
[3.829s] 3: +    } else {
[3.829s] 3: +      throw std::runtime_error("Call to errorbar() failed.");
[3.829s] 3: +    }
[3.829s] 3: @@ -1345,8 +1455,10 @@
[3.829s] 3: -}
[3.829s] 3: -
[3.829s] 3: -template<typename Numeric>
[3.829s] 3: -bool named_plot(const std::string& name, const std::vector<Numeric>& y, const std::string& format = "")
[3.829s] 3: -{
[3.829s] 3: -    detail::_interpreter::get();
[3.829s] 3: -
[3.829s] 3: -    PyObject* kwargs = PyDict_New();
[3.829s] 3: +  }
[3.829s] 3: +
[3.829s] 3: +  template < typename Numeric >
[3.829s] 3: +  bool named_plot(
[3.830s] 3: +    const std::string & name, const std::vector < Numeric > & y,
[3.830s] 3: +    const std::string & format = "")
[3.830s] 3: +  {
[3.830s] 3: +    detail::_interpreter::get();
[3.830s] 3: +
[3.830s] 3: +    PyObject * kwargs = PyDict_New();
[3.830s] 3: @@ -1355,5 +1467,5 @@
[3.830s] 3: -    PyObject* yarray = detail::get_array(y);
[3.830s] 3: -
[3.830s] 3: -    PyObject* pystring = PyString_FromString(format.c_str());
[3.830s] 3: -
[3.830s] 3: -    PyObject* plot_args = PyTuple_New(2);
[3.830s] 3: +    PyObject * yarray = detail::get_array(y);
[3.830s] 3: +
[3.830s] 3: +    PyObject * pystring = PyString_FromString(format.c_str());
[3.830s] 3: +
[3.830s] 3: +    PyObject * plot_args = PyTuple_New(2);
[3.830s] 3: @@ -1364 +1476,2 @@
[3.830s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);
[3.830s] 3: +    PyObject * res = PyObject_Call(
[3.831s] 3: +      detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);
[3.831s] 3: @@ -1368 +1481 @@
[3.831s] 3: -    if (res) Py_DECREF(res);
[3.831s] 3: +    if (res) {Py_DECREF(res);}
[3.831s] 3: @@ -1371,8 +1484,10 @@
[3.831s] 3: -}
[3.831s] 3: -
[3.831s] 3: -template<typename Numeric>
[3.831s] 3: -bool named_plot(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")
[3.831s] 3: -{
[3.831s] 3: -    detail::_interpreter::get();
[3.831s] 3: -
[3.831s] 3: -    PyObject* kwargs = PyDict_New();
[3.831s] 3: +  }
[3.831s] 3: +
[3.831s] 3: +  template < typename Numeric >
[3.831s] 3: +  bool named_plot(
[3.831s] 3: +    const std::string & name, const std::vector < Numeric > & x,
[3.832s] 3: +    const std::vector < Numeric > & y, const std::string & format = "")
[3.832s] 3: +  {
[3.832s] 3: +    detail::_interpreter::get();
[3.832s] 3: +
[3.832s] 3: +    PyObject * kwargs = PyDict_New();
[3.832s] 3: @@ -1381,6 +1496,6 @@
[3.832s] 3: -    PyObject* xarray = detail::get_array(x);
[3.832s] 3: -    PyObject* yarray = detail::get_array(y);
[3.832s] 3: -
[3.832s] 3: -    PyObject* pystring = PyString_FromString(format.c_str());
[3.832s] 3: -
[3.832s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.832s] 3: +    PyObject * xarray = detail::get_array(x);
[3.832s] 3: +    PyObject * yarray = detail::get_array(y);
[3.832s] 3: +
[3.833s] 3: +    PyObject * pystring = PyString_FromString(format.c_str());
[3.833s] 3: +
[3.833s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.833s] 3: @@ -1391 +1506,2 @@
[3.833s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);
[3.833s] 3: +    PyObject * res = PyObject_Call(
[3.833s] 3: +      detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);
[3.833s] 3: @@ -1395 +1511 @@
[3.833s] 3: -    if (res) Py_DECREF(res);
[3.833s] 3: +    if (res) {Py_DECREF(res);}
[3.833s] 3: @@ -1398,8 +1514,10 @@
[3.833s] 3: -}
[3.833s] 3: -
[3.833s] 3: -template<typename Numeric>
[3.833s] 3: -bool named_semilogx(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")
[3.833s] 3: -{
[3.833s] 3: -    detail::_interpreter::get();
[3.833s] 3: -
[3.834s] 3: -    PyObject* kwargs = PyDict_New();
[3.834s] 3: +  }
[3.834s] 3: +
[3.834s] 3: +  template < typename Numeric >
[3.834s] 3: +  bool named_semilogx(
[3.834s] 3: +    const std::string & name, const std::vector < Numeric > & x,
[3.834s] 3: +    const std::vector < Numeric > & y, const std::string & format = "")
[3.834s] 3: +  {
[3.834s] 3: +    detail::_interpreter::get();
[3.834s] 3: +
[3.834s] 3: +    PyObject * kwargs = PyDict_New();
[3.834s] 3: @@ -1408,6 +1526,6 @@
[3.834s] 3: -    PyObject* xarray = detail::get_array(x);
[3.834s] 3: -    PyObject* yarray = detail::get_array(y);
[3.834s] 3: -
[3.834s] 3: -    PyObject* pystring = PyString_FromString(format.c_str());
[3.834s] 3: -
[3.835s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.835s] 3: +    PyObject * xarray = detail::get_array(x);
[3.835s] 3: +    PyObject * yarray = detail::get_array(y);
[3.835s] 3: +
[3.835s] 3: +    PyObject * pystring = PyString_FromString(format.c_str());
[3.835s] 3: +
[3.835s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.835s] 3: @@ -1418 +1536,2 @@
[3.835s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_semilogx, plot_args, kwargs);
[3.835s] 3: +    PyObject * res = PyObject_Call(
[3.835s] 3: +      detail::_interpreter::get().s_python_function_semilogx, plot_args, kwargs);
[3.835s] 3: @@ -1422 +1541 @@
[3.835s] 3: -    if (res) Py_DECREF(res);
[3.835s] 3: +    if (res) {Py_DECREF(res);}
[3.835s] 3: @@ -1425,8 +1544,10 @@
[3.835s] 3: -}
[3.835s] 3: -
[3.835s] 3: -template<typename Numeric>
[3.835s] 3: -bool named_semilogy(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")
[3.835s] 3: -{
[3.836s] 3: -    detail::_interpreter::get();
[3.836s] 3: -
[3.836s] 3: -    PyObject* kwargs = PyDict_New();
[3.836s] 3: +  }
[3.836s] 3: +
[3.836s] 3: +  template < typename Numeric >
[3.836s] 3: +  bool named_semilogy(
[3.836s] 3: +    const std::string & name, const std::vector < Numeric > & x,
[3.836s] 3: +    const std::vector < Numeric > & y, const std::string & format = "")
[3.836s] 3: +  {
[3.836s] 3: +    detail::_interpreter::get();
[3.836s] 3: +
[3.836s] 3: +    PyObject * kwargs = PyDict_New();
[3.836s] 3: @@ -1435,6 +1556,6 @@
[3.836s] 3: -    PyObject* xarray = detail::get_array(x);
[3.836s] 3: -    PyObject* yarray = detail::get_array(y);
[3.836s] 3: -
[3.836s] 3: -    PyObject* pystring = PyString_FromString(format.c_str());
[3.836s] 3: -
[3.837s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.837s] 3: +    PyObject * xarray = detail::get_array(x);
[3.837s] 3: +    PyObject * yarray = detail::get_array(y);
[3.837s] 3: +
[3.837s] 3: +    PyObject * pystring = PyString_FromString(format.c_str());
[3.837s] 3: +
[3.837s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.837s] 3: @@ -1445 +1566,2 @@
[3.837s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_semilogy, plot_args, kwargs);
[3.837s] 3: +    PyObject * res = PyObject_Call(
[3.837s] 3: +      detail::_interpreter::get().s_python_function_semilogy, plot_args, kwargs);
[3.838s] 3: @@ -1449 +1571 @@
[3.838s] 3: -    if (res) Py_DECREF(res);
[3.838s] 3: +    if (res) {Py_DECREF(res);}
[3.838s] 3: @@ -1452,8 +1574,10 @@
[3.838s] 3: -}
[3.838s] 3: -
[3.838s] 3: -template<typename Numeric>
[3.838s] 3: -bool named_loglog(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "")
[3.838s] 3: -{
[3.839s] 3: -    detail::_interpreter::get();
[3.839s] 3: -
[3.839s] 3: -    PyObject* kwargs = PyDict_New();
[3.839s] 3: +  }
[3.839s] 3: +
[3.839s] 3: +  template < typename Numeric >
[3.839s] 3: +  bool named_loglog(
[3.839s] 3: +    const std::string & name, const std::vector < Numeric > & x,
[3.839s] 3: +    const std::vector < Numeric > & y, const std::string & format = "")
[3.839s] 3: +  {
[3.839s] 3: +    detail::_interpreter::get();
[3.839s] 3: +
[3.839s] 3: +    PyObject * kwargs = PyDict_New();
[3.839s] 3: @@ -1462,6 +1586,6 @@
[3.839s] 3: -    PyObject* xarray = detail::get_array(x);
[3.839s] 3: -    PyObject* yarray = detail::get_array(y);
[3.839s] 3: -
[3.839s] 3: -    PyObject* pystring = PyString_FromString(format.c_str());
[3.840s] 3: -
[3.840s] 3: -    PyObject* plot_args = PyTuple_New(3);
[3.840s] 3: +    PyObject * xarray = detail::get_array(x);
[3.840s] 3: +    PyObject * yarray = detail::get_array(y);
[3.840s] 3: +
[3.840s] 3: +    PyObject * pystring = PyString_FromString(format.c_str());
[3.840s] 3: +
[3.840s] 3: +    PyObject * plot_args = PyTuple_New(3);
[3.840s] 3: @@ -1471 +1595,2 @@
[3.840s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_loglog, plot_args, kwargs);
[3.840s] 3: +    PyObject * res = PyObject_Call(
[3.840s] 3: +      detail::_interpreter::get().s_python_function_loglog, plot_args, kwargs);
[3.840s] 3: @@ -1475 +1600 @@
[3.840s] 3: -    if (res) Py_DECREF(res);
[3.840s] 3: +    if (res) {Py_DECREF(res);}
[3.840s] 3: @@ -1478,23 +1603,31 @@
[3.840s] 3: -}
[3.840s] 3: -
[3.840s] 3: -template<typename Numeric>
[3.841s] 3: -bool plot(const std::vector<Numeric>& y, const std::string& format = "")
[3.841s] 3: -{
[3.841s] 3: -    std::vector<Numeric> x(y.size());
[3.841s] 3: -    for(size_t i=0; i<x.size(); ++i) x.at(i) = i;
[3.841s] 3: -    return plot(x,y,format);
[3.841s] 3: -}
[3.841s] 3: -
[3.841s] 3: -template<typename Numeric>
[3.841s] 3: -bool plot(const std::vector<Numeric>& y, const std::map<std::string, std::string>& keywords)
[3.841s] 3: -{
[3.841s] 3: -    std::vector<Numeric> x(y.size());
[3.841s] 3: -    for(size_t i=0; i<x.size(); ++i) x.at(i) = i;
[3.841s] 3: -    return plot(x,y,keywords);
[3.841s] 3: -}
[3.841s] 3: -
[3.841s] 3: -template<typename Numeric>
[3.841s] 3: -bool stem(const std::vector<Numeric>& y, const std::string& format = "")
[3.841s] 3: -{
[3.841s] 3: -    std::vector<Numeric> x(y.size());
[3.842s] 3: -    for (size_t i = 0; i < x.size(); ++i) x.at(i) = i;
[3.842s] 3: +  }
[3.842s] 3: +
[3.842s] 3: +  template < typename Numeric >
[3.842s] 3: +  bool plot(const std::vector < Numeric > & y, const std::string & format = "")
[3.842s] 3: +  {
[3.842s] 3: +    std::vector < Numeric > x(y.size());
[3.842s] 3: +    for (size_t i = 0; i < x.size(); ++i) {
[3.842s] 3: +      x.at(i) = i;
[3.842s] 3: +    }
[3.842s] 3: +    return plot(x, y, format);
[3.842s] 3: +  }
[3.842s] 3: +
[3.842s] 3: +  template < typename Numeric >
[3.842s] 3: +  bool plot(
[3.842s] 3: +    const std::vector < Numeric > & y, const std::map < std::string,
[3.842s] 3: +    std::string > & keywords)
[3.842s] 3: +  {
[3.842s] 3: +    std::vector < Numeric > x(y.size());
[3.842s] 3: +    for (size_t i = 0; i < x.size(); ++i) {
[3.843s] 3: +      x.at(i) = i;
[3.843s] 3: +    }
[3.843s] 3: +    return plot(x, y, keywords);
[3.843s] 3: +  }
[3.843s] 3: +
[3.843s] 3: +  template < typename Numeric >
[3.843s] 3: +  bool stem(const std::vector < Numeric > & y, const std::string & format = "")
[3.843s] 3: +  {
[3.843s] 3: +    std::vector < Numeric > x(y.size());
[3.843s] 3: +    for (size_t i = 0; i < x.size(); ++i) {
[3.843s] 3: +      x.at(i) = i;
[3.843s] 3: +    }
[3.843s] 3: @@ -1502,8 +1635,8 @@
[3.843s] 3: -}
[3.843s] 3: -
[3.843s] 3: -template<typename Numeric>
[3.843s] 3: -void text(Numeric x, Numeric y, const std::string& s = "")
[3.843s] 3: -{
[3.844s] 3: -    detail::_interpreter::get();
[3.844s] 3: -
[3.844s] 3: -    PyObject* args = PyTuple_New(3);
[3.844s] 3: +  }
[3.844s] 3: +
[3.844s] 3: +  template < typename Numeric >
[3.844s] 3: +  void text(Numeric x, Numeric y, const std::string & s = "")
[3.844s] 3: +  {
[3.844s] 3: +    detail::_interpreter::get();
[3.844s] 3: +
[3.844s] 3: +    PyObject * args = PyTuple_New(3);
[3.844s] 3: @@ -1514,15 +1647,19 @@
[3.844s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_text, args);
[3.844s] 3: -    if(!res) throw std::runtime_error("Call to text() failed.");
[3.844s] 3: -
[3.844s] 3: -    Py_DECREF(args);
[3.844s] 3: -    Py_DECREF(res);
[3.844s] 3: -}
[3.844s] 3: -
[3.845s] 3: -inline void colorbar(PyObject* mappable = NULL, const std::map<std::string, float>& keywords = {})
[3.845s] 3: -{
[3.845s] 3: -    if (mappable == NULL)
[3.845s] 3: -        throw std::runtime_error("Must call colorbar with PyObject* returned from an image, contour, surface, etc.");
[3.845s] 3: -
[3.845s] 3: -    detail::_interpreter::get();
[3.845s] 3: -
[3.845s] 3: -    PyObject* args = PyTuple_New(1);
[3.845s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_text, args);
[3.845s] 3: +    if (!res) {throw std::runtime_error("Call to text() failed.");}
[3.845s] 3: +
[3.845s] 3: +    Py_DECREF(args);
[3.845s] 3: +    Py_DECREF(res);
[3.845s] 3: +  }
[3.845s] 3: +
[3.845s] 3: +  inline void colorbar(
[3.845s] 3: +    PyObject * mappable = NULL, const std::map < std::string,
[3.845s] 3: +    float > & keywords = {})
[3.845s] 3: +  {
[3.845s] 3: +    if (mappable == NULL) {
[3.846s] 3: +      throw std::runtime_error(
[3.846s] 3: +        "Must call colorbar with PyObject* returned from an image, contour, surface, etc.");
[3.846s] 3: +    }
[3.846s] 3: +
[3.846s] 3: +    detail::_interpreter::get();
[3.846s] 3: +
[3.846s] 3: +    PyObject * args = PyTuple_New(1);
[3.846s] 3: @@ -1531,38 +1668,42 @@
[3.846s] 3: -    PyObject* kwargs = PyDict_New();
[3.846s] 3: -    for(std::map<std::string, float>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.846s] 3: -    {
[3.846s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(it->second));
[3.846s] 3: -    }
[3.846s] 3: -
[3.847s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_colorbar, args, kwargs);
[3.847s] 3: -    if(!res) throw std::runtime_error("Call to colorbar() failed.");
[3.847s] 3: -
[3.847s] 3: -    Py_DECREF(args);
[3.847s] 3: -    Py_DECREF(kwargs);
[3.847s] 3: -    Py_DECREF(res);
[3.847s] 3: -}
[3.847s] 3: -
[3.847s] 3: -
[3.847s] 3: -inline long figure(long number = -1)
[3.847s] 3: -{
[3.847s] 3: -    detail::_interpreter::get();
[3.847s] 3: -
[3.847s] 3: -    PyObject *res;
[3.847s] 3: -    if (number == -1)
[3.847s] 3: -        res = PyObject_CallObject(detail::_interpreter::get().s_python_function_figure, detail::_interpreter::get().s_python_empty_tuple);
[3.847s] 3: -    else {
[3.847s] 3: -        assert(number > 0);
[3.847s] 3: -
[3.848s] 3: -        // Make sure interpreter is initialised
[3.848s] 3: -        detail::_interpreter::get();
[3.848s] 3: -
[3.848s] 3: -        PyObject *args = PyTuple_New(1);
[3.848s] 3: -        PyTuple_SetItem(args, 0, PyLong_FromLong(number));
[3.848s] 3: -        res = PyObject_CallObject(detail::_interpreter::get().s_python_function_figure, args);
[3.848s] 3: -        Py_DECREF(args);
[3.848s] 3: -    }
[3.848s] 3: -
[3.848s] 3: -    if(!res) throw std::runtime_error("Call to figure() failed.");
[3.848s] 3: -
[3.848s] 3: -    PyObject* num = PyObject_GetAttrString(res, "number");
[3.848s] 3: -    if (!num) throw std::runtime_error("Could not get number attribute of figure object");
[3.848s] 3: +    PyObject * kwargs = PyDict_New();
[3.848s] 3: +    for (std::map < std::string, float > ::const_iterator it = keywords.begin();
[3.848s] 3: +      it != keywords.end(); ++it)
[3.848s] 3: +    {
[3.848s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(it->second));
[3.848s] 3: +    }
[3.849s] 3: +
[3.849s] 3: +    PyObject * res = PyObject_Call(
[3.849s] 3: +      detail::_interpreter::get().s_python_function_colorbar, args, kwargs);
[3.849s] 3: +    if (!res) {throw std::runtime_error("Call to colorbar() failed.");}
[3.849s] 3: +
[3.849s] 3: +    Py_DECREF(args);
[3.849s] 3: +    Py_DECREF(kwargs);
[3.849s] 3: +    Py_DECREF(res);
[3.849s] 3: +  }
[3.849s] 3: +
[3.849s] 3: +
[3.849s] 3: +  inline long figure(long number = -1)
[3.849s] 3: +  {
[3.849s] 3: +    detail::_interpreter::get();
[3.849s] 3: +
[3.849s] 3: +    PyObject * res;
[3.849s] 3: +    if (number == -1) {
[3.849s] 3: +      res = PyObject_CallObject(
[3.849s] 3: +        detail::_interpreter::get().s_python_function_figure,
[3.850s] 3: +        detail::_interpreter::get().s_python_empty_tuple);
[3.850s] 3: +    } else {
[3.850s] 3: +      assert(number > 0);
[3.850s] 3: +
[3.850s] 3: +      // Make sure interpreter is initialised
[3.850s] 3: +      detail::_interpreter::get();
[3.850s] 3: +
[3.850s] 3: +      PyObject * args = PyTuple_New(1);
[3.850s] 3: +      PyTuple_SetItem(args, 0, PyLong_FromLong(number));
[3.850s] 3: +      res = PyObject_CallObject(detail::_interpreter::get().s_python_function_figure, args);
[3.850s] 3: +      Py_DECREF(args);
[3.850s] 3: +    }
[3.850s] 3: +
[3.850s] 3: +    if (!res) {throw std::runtime_error("Call to figure() failed.");}
[3.850s] 3: +
[3.850s] 3: +    PyObject * num = PyObject_GetAttrString(res, "number");
[3.850s] 3: +    if (!num) {throw std::runtime_error("Could not get number attribute of figure object");}
[3.850s] 3: @@ -1575,7 +1716,7 @@
[3.850s] 3: -}
[3.850s] 3: -
[3.851s] 3: -inline bool fignum_exists(long number)
[3.851s] 3: -{
[3.851s] 3: -    detail::_interpreter::get();
[3.851s] 3: -
[3.851s] 3: -    PyObject *args = PyTuple_New(1);
[3.851s] 3: +  }
[3.851s] 3: +
[3.851s] 3: +  inline bool fignum_exists(long number)
[3.851s] 3: +  {
[3.851s] 3: +    detail::_interpreter::get();
[3.851s] 3: +
[3.851s] 3: +    PyObject * args = PyTuple_New(1);
[3.851s] 3: @@ -1583,2 +1724,3 @@
[3.851s] 3: -    PyObject *res = PyObject_CallObject(detail::_interpreter::get().s_python_function_fignum_exists, args);
[3.851s] 3: -    if(!res) throw std::runtime_error("Call to fignum_exists() failed.");
[3.851s] 3: +    PyObject * res = PyObject_CallObject(
[3.851s] 3: +      detail::_interpreter::get().s_python_function_fignum_exists, args);
[3.851s] 3: +    if (!res) {throw std::runtime_error("Call to fignum_exists() failed.");}
[3.851s] 3: @@ -1591,4 +1733,4 @@
[3.851s] 3: -}
[3.852s] 3: -
[3.852s] 3: -inline void figure_size(size_t w, size_t h)
[3.852s] 3: -{
[3.852s] 3: +  }
[3.852s] 3: +
[3.852s] 3: +  inline void figure_size(size_t w, size_t h)
[3.852s] 3: +  {
[3.852s] 3: @@ -1598 +1740 @@
[3.852s] 3: -    PyObject* size = PyTuple_New(2);
[3.852s] 3: +    PyObject * size = PyTuple_New(2);
[3.852s] 3: @@ -1602 +1744 @@
[3.852s] 3: -    PyObject* kwargs = PyDict_New();
[3.852s] 3: +    PyObject * kwargs = PyDict_New();
[3.852s] 3: @@ -1606,43 +1748,49 @@
[3.852s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_figure,
[3.852s] 3: -            detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.852s] 3: -
[3.852s] 3: -    Py_DECREF(kwargs);
[3.852s] 3: -
[3.853s] 3: -    if(!res) throw std::runtime_error("Call to figure_size() failed.");
[3.853s] 3: -    Py_DECREF(res);
[3.853s] 3: -}
[3.853s] 3: -
[3.853s] 3: -inline void legend()
[3.853s] 3: -{
[3.853s] 3: -    detail::_interpreter::get();
[3.853s] 3: -
[3.853s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_legend, detail::_interpreter::get().s_python_empty_tuple);
[3.853s] 3: -    if(!res) throw std::runtime_error("Call to legend() failed.");
[3.853s] 3: -
[3.853s] 3: -    Py_DECREF(res);
[3.853s] 3: -}
[3.853s] 3: -
[3.853s] 3: -inline void legend(const std::map<std::string, std::string>& keywords)
[3.853s] 3: -{
[3.853s] 3: -  detail::_interpreter::get();
[3.854s] 3: -
[3.854s] 3: -  // construct keyword args
[3.854s] 3: -  PyObject* kwargs = PyDict_New();
[3.854s] 3: -  for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.854s] 3: -  {
[3.854s] 3: -    PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.854s] 3: -  }
[3.854s] 3: -
[3.854s] 3: -  PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_legend, detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.854s] 3: -  if(!res) throw std::runtime_error("Call to legend() failed.");
[3.854s] 3: -
[3.854s] 3: -  Py_DECREF(kwargs);
[3.854s] 3: -  Py_DECREF(res);  
[3.854s] 3: -}
[3.854s] 3: -
[3.854s] 3: -template<typename Numeric>
[3.854s] 3: -void ylim(Numeric left, Numeric right)
[3.854s] 3: -{
[3.854s] 3: -    detail::_interpreter::get();
[3.855s] 3: -
[3.855s] 3: -    PyObject* list = PyList_New(2);
[3.855s] 3: +    PyObject * res = PyObject_Call(
[3.855s] 3: +      detail::_interpreter::get().s_python_function_figure,
[3.855s] 3: +      detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.855s] 3: +
[3.855s] 3: +    Py_DECREF(kwargs);
[3.855s] 3: +
[3.855s] 3: +    if (!res) {throw std::runtime_error("Call to figure_size() failed.");}
[3.855s] 3: +    Py_DECREF(res);
[3.855s] 3: +  }
[3.855s] 3: +
[3.855s] 3: +  inline void legend()
[3.855s] 3: +  {
[3.855s] 3: +    detail::_interpreter::get();
[3.855s] 3: +
[3.855s] 3: +    PyObject * res = PyObject_CallObject(
[3.855s] 3: +      detail::_interpreter::get().s_python_function_legend,
[3.855s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.855s] 3: +    if (!res) {throw std::runtime_error("Call to legend() failed.");}
[3.856s] 3: +
[3.856s] 3: +    Py_DECREF(res);
[3.856s] 3: +  }
[3.856s] 3: +
[3.856s] 3: +  inline void legend(const std::map < std::string, std::string > & keywords)
[3.856s] 3: +  {
[3.856s] 3: +    detail::_interpreter::get();
[3.856s] 3: +
[3.856s] 3: +    // construct keyword args
[3.856s] 3: +    PyObject * kwargs = PyDict_New();
[3.856s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.856s] 3: +      it != keywords.end(); ++it)
[3.856s] 3: +    {
[3.856s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.856s] 3: +    }
[3.856s] 3: +
[3.856s] 3: +    PyObject * res = PyObject_Call(
[3.856s] 3: +      detail::_interpreter::get().s_python_function_legend,
[3.856s] 3: +      detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.856s] 3: +    if (!res) {throw std::runtime_error("Call to legend() failed.");}
[3.857s] 3: +
[3.857s] 3: +    Py_DECREF(kwargs);
[3.857s] 3: +    Py_DECREF(res);
[3.857s] 3: +  }
[3.857s] 3: +
[3.857s] 3: +  template < typename Numeric >
[3.857s] 3: +  void ylim(Numeric left, Numeric right)
[3.857s] 3: +  {
[3.857s] 3: +    detail::_interpreter::get();
[3.857s] 3: +
[3.857s] 3: +    PyObject * list = PyList_New(2);
[3.857s] 3: @@ -1652 +1800 @@
[3.857s] 3: -    PyObject* args = PyTuple_New(1);
[3.857s] 3: +    PyObject * args = PyTuple_New(1);
[3.857s] 3: @@ -1655,13 +1803,13 @@
[3.857s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);
[3.857s] 3: -    if(!res) throw std::runtime_error("Call to ylim() failed.");
[3.857s] 3: -
[3.857s] 3: -    Py_DECREF(args);
[3.857s] 3: -    Py_DECREF(res);
[3.857s] 3: -}
[3.858s] 3: -
[3.858s] 3: -template<typename Numeric>
[3.858s] 3: -void xlim(Numeric left, Numeric right)
[3.858s] 3: -{
[3.858s] 3: -    detail::_interpreter::get();
[3.858s] 3: -
[3.858s] 3: -    PyObject* list = PyList_New(2);
[3.858s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);
[3.858s] 3: +    if (!res) {throw std::runtime_error("Call to ylim() failed.");}
[3.858s] 3: +
[3.858s] 3: +    Py_DECREF(args);
[3.858s] 3: +    Py_DECREF(res);
[3.858s] 3: +  }
[3.858s] 3: +
[3.858s] 3: +  template < typename Numeric >
[3.858s] 3: +  void xlim(Numeric left, Numeric right)
[3.858s] 3: +  {
[3.858s] 3: +    detail::_interpreter::get();
[3.858s] 3: +
[3.858s] 3: +    PyObject * list = PyList_New(2);
[3.859s] 3: @@ -1671 +1819 @@
[3.859s] 3: -    PyObject* args = PyTuple_New(1);
[3.859s] 3: +    PyObject * args = PyTuple_New(1);
[3.859s] 3: @@ -1674,18 +1822,18 @@
[3.859s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);
[3.859s] 3: -    if(!res) throw std::runtime_error("Call to xlim() failed.");
[3.859s] 3: -
[3.859s] 3: -    Py_DECREF(args);
[3.859s] 3: -    Py_DECREF(res);
[3.859s] 3: -}
[3.859s] 3: -
[3.859s] 3: -
[3.859s] 3: -inline double* xlim()
[3.859s] 3: -{
[3.859s] 3: -    detail::_interpreter::get();
[3.859s] 3: -
[3.859s] 3: -    PyObject* args = PyTuple_New(0);
[3.859s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);
[3.859s] 3: -    PyObject* left = PyTuple_GetItem(res,0);
[3.860s] 3: -    PyObject* right = PyTuple_GetItem(res,1);
[3.860s] 3: -
[3.860s] 3: -    double* arr = new double[2];
[3.860s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);
[3.860s] 3: +    if (!res) {throw std::runtime_error("Call to xlim() failed.");}
[3.860s] 3: +
[3.860s] 3: +    Py_DECREF(args);
[3.860s] 3: +    Py_DECREF(res);
[3.860s] 3: +  }
[3.860s] 3: +
[3.860s] 3: +
[3.860s] 3: +  inline double * xlim()
[3.860s] 3: +  {
[3.860s] 3: +    detail::_interpreter::get();
[3.860s] 3: +
[3.860s] 3: +    PyObject * args = PyTuple_New(0);
[3.860s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_xlim, args);
[3.860s] 3: +    PyObject * left = PyTuple_GetItem(res, 0);
[3.860s] 3: +    PyObject * right = PyTuple_GetItem(res, 1);
[3.860s] 3: +
[3.861s] 3: +    double * arr = new double[2];
[3.861s] 3: @@ -1695 +1843 @@
[3.861s] 3: -    if(!res) throw std::runtime_error("Call to xlim() failed.");
[3.861s] 3: +    if (!res) {throw std::runtime_error("Call to xlim() failed.");}
[3.861s] 3: @@ -1699,13 +1847,13 @@
[3.861s] 3: -}
[3.861s] 3: -
[3.861s] 3: -
[3.861s] 3: -inline double* ylim()
[3.861s] 3: -{
[3.861s] 3: -    detail::_interpreter::get();
[3.861s] 3: -
[3.861s] 3: -    PyObject* args = PyTuple_New(0);
[3.861s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);
[3.861s] 3: -    PyObject* left = PyTuple_GetItem(res,0);
[3.861s] 3: -    PyObject* right = PyTuple_GetItem(res,1);
[3.861s] 3: -
[3.861s] 3: -    double* arr = new double[2];
[3.861s] 3: +  }
[3.861s] 3: +
[3.862s] 3: +
[3.862s] 3: +  inline double * ylim()
[3.862s] 3: +  {
[3.862s] 3: +    detail::_interpreter::get();
[3.862s] 3: +
[3.862s] 3: +    PyObject * args = PyTuple_New(0);
[3.862s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_ylim, args);
[3.862s] 3: +    PyObject * left = PyTuple_GetItem(res, 0);
[3.862s] 3: +    PyObject * right = PyTuple_GetItem(res, 1);
[3.862s] 3: +
[3.862s] 3: +    double * arr = new double[2];
[3.862s] 3: @@ -1715 +1863 @@
[3.862s] 3: -    if(!res) throw std::runtime_error("Call to ylim() failed.");
[3.862s] 3: +    if (!res) {throw std::runtime_error("Call to ylim() failed.");}
[3.862s] 3: @@ -1719,5 +1867,8 @@
[3.862s] 3: -}
[3.862s] 3: -
[3.862s] 3: -template<typename Numeric>
[3.862s] 3: -inline void xticks(const std::vector<Numeric> &ticks, const std::vector<std::string> &labels = {}, const std::map<std::string, std::string>& keywords = {})
[3.862s] 3: -{
[3.863s] 3: +  }
[3.863s] 3: +
[3.863s] 3: +  template < typename Numeric >
[3.863s] 3: +  inline void xticks(
[3.863s] 3: +    const std::vector < Numeric > & ticks,
[3.863s] 3: +    const std::vector < std::string > & labels = {}, const std::map < std::string,
[3.863s] 3: +    std::string > & keywords = {})
[3.863s] 3: +  {
[3.863s] 3: @@ -1729,7 +1880,7 @@
[3.863s] 3: -    PyObject* ticksarray = detail::get_array(ticks);
[3.863s] 3: -
[3.863s] 3: -    PyObject* args;
[3.863s] 3: -    if(labels.size() == 0) {
[3.863s] 3: -        // construct positional args
[3.863s] 3: -        args = PyTuple_New(1);
[3.863s] 3: -        PyTuple_SetItem(args, 0, ticksarray);
[3.863s] 3: +    PyObject * ticksarray = detail::get_array(ticks);
[3.863s] 3: +
[3.863s] 3: +    PyObject * args;
[3.863s] 3: +    if (labels.size() == 0) {
[3.864s] 3: +      // construct positional args
[3.864s] 3: +      args = PyTuple_New(1);
[3.864s] 3: +      PyTuple_SetItem(args, 0, ticksarray);
[3.864s] 3: @@ -1737,9 +1888,10 @@
[3.864s] 3: -        // make tuple of tick labels
[3.864s] 3: -        PyObject* labelstuple = PyTuple_New(labels.size());
[3.864s] 3: -        for (size_t i = 0; i < labels.size(); i++)
[3.864s] 3: -            PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));
[3.864s] 3: -
[3.864s] 3: -        // construct positional args
[3.864s] 3: -        args = PyTuple_New(2);
[3.864s] 3: -        PyTuple_SetItem(args, 0, ticksarray);
[3.864s] 3: -        PyTuple_SetItem(args, 1, labelstuple);
[3.864s] 3: +      // make tuple of tick labels
[3.864s] 3: +      PyObject * labelstuple = PyTuple_New(labels.size());
[3.864s] 3: +      for (size_t i = 0; i < labels.size(); i++) {
[3.864s] 3: +        PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));
[3.864s] 3: +      }
[3.864s] 3: +
[3.864s] 3: +      // construct positional args
[3.865s] 3: +      args = PyTuple_New(2);
[3.865s] 3: +      PyTuple_SetItem(args, 0, ticksarray);
[3.865s] 3: +      PyTuple_SetItem(args, 1, labelstuple);
[3.865s] 3: @@ -1749,18 +1901,22 @@
[3.865s] 3: -    PyObject* kwargs = PyDict_New();
[3.865s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.865s] 3: -    {
[3.865s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.865s] 3: -    }
[3.865s] 3: -
[3.865s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_xticks, args, kwargs);
[3.865s] 3: -
[3.865s] 3: -    Py_DECREF(args);
[3.865s] 3: -    Py_DECREF(kwargs);
[3.865s] 3: -    if(!res) throw std::runtime_error("Call to xticks() failed");
[3.865s] 3: -
[3.865s] 3: -    Py_DECREF(res);
[3.865s] 3: -}
[3.865s] 3: -
[3.866s] 3: -template<typename Numeric>
[3.866s] 3: -inline void xticks(const std::vector<Numeric> &ticks, const std::map<std::string, std::string>& keywords)
[3.866s] 3: -{
[3.866s] 3: +    PyObject * kwargs = PyDict_New();
[3.866s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.866s] 3: +      it != keywords.end(); ++it)
[3.866s] 3: +    {
[3.866s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.866s] 3: +    }
[3.866s] 3: +
[3.866s] 3: +    PyObject * res = PyObject_Call(
[3.866s] 3: +      detail::_interpreter::get().s_python_function_xticks, args, kwargs);
[3.866s] 3: +
[3.866s] 3: +    Py_DECREF(args);
[3.866s] 3: +    Py_DECREF(kwargs);
[3.866s] 3: +    if (!res) {throw std::runtime_error("Call to xticks() failed");}
[3.866s] 3: +
[3.866s] 3: +    Py_DECREF(res);
[3.866s] 3: +  }
[3.866s] 3: +
[3.866s] 3: +  template < typename Numeric >
[3.867s] 3: +  inline void xticks(
[3.867s] 3: +    const std::vector < Numeric > & ticks, const std::map < std::string,
[3.867s] 3: +    std::string > & keywords)
[3.867s] 3: +  {
[3.867s] 3: @@ -1768,5 +1924,8 @@
[3.867s] 3: -}
[3.867s] 3: -
[3.867s] 3: -template<typename Numeric>
[3.867s] 3: -inline void yticks(const std::vector<Numeric> &ticks, const std::vector<std::string> &labels = {}, const std::map<std::string, std::string>& keywords = {})
[3.867s] 3: -{
[3.867s] 3: +  }
[3.867s] 3: +
[3.867s] 3: +  template < typename Numeric >
[3.867s] 3: +  inline void yticks(
[3.867s] 3: +    const std::vector < Numeric > & ticks,
[3.867s] 3: +    const std::vector < std::string > & labels = {}, const std::map < std::string,
[3.867s] 3: +    std::string > & keywords = {})
[3.867s] 3: +  {
[3.867s] 3: @@ -1778,7 +1937,7 @@
[3.867s] 3: -    PyObject* ticksarray = detail::get_array(ticks);
[3.868s] 3: -
[3.868s] 3: -    PyObject* args;
[3.868s] 3: -    if(labels.size() == 0) {
[3.868s] 3: -        // construct positional args
[3.868s] 3: -        args = PyTuple_New(1);
[3.868s] 3: -        PyTuple_SetItem(args, 0, ticksarray);
[3.868s] 3: +    PyObject * ticksarray = detail::get_array(ticks);
[3.868s] 3: +
[3.868s] 3: +    PyObject * args;
[3.868s] 3: +    if (labels.size() == 0) {
[3.868s] 3: +      // construct positional args
[3.868s] 3: +      args = PyTuple_New(1);
[3.868s] 3: +      PyTuple_SetItem(args, 0, ticksarray);
[3.868s] 3: @@ -1786,9 +1945,10 @@
[3.868s] 3: -        // make tuple of tick labels
[3.868s] 3: -        PyObject* labelstuple = PyTuple_New(labels.size());
[3.868s] 3: -        for (size_t i = 0; i < labels.size(); i++)
[3.868s] 3: -            PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));
[3.868s] 3: -
[3.869s] 3: -        // construct positional args
[3.869s] 3: -        args = PyTuple_New(2);
[3.869s] 3: -        PyTuple_SetItem(args, 0, ticksarray);
[3.869s] 3: -        PyTuple_SetItem(args, 1, labelstuple);
[3.869s] 3: +      // make tuple of tick labels
[3.870s] 3: +      PyObject * labelstuple = PyTuple_New(labels.size());
[3.870s] 3: +      for (size_t i = 0; i < labels.size(); i++) {
[3.870s] 3: +        PyTuple_SetItem(labelstuple, i, PyUnicode_FromString(labels[i].c_str()));
[3.870s] 3: +      }
[3.871s] 3: +
[3.871s] 3: +      // construct positional args
[3.871s] 3: +      args = PyTuple_New(2);
[3.871s] 3: +      PyTuple_SetItem(args, 0, ticksarray);
[3.871s] 3: +      PyTuple_SetItem(args, 1, labelstuple);
[3.871s] 3: @@ -1798,18 +1958,22 @@
[3.871s] 3: -    PyObject* kwargs = PyDict_New();
[3.871s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.871s] 3: -    {
[3.871s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.871s] 3: -    }
[3.871s] 3: -
[3.871s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_yticks, args, kwargs);
[3.871s] 3: -
[3.871s] 3: -    Py_DECREF(args);
[3.871s] 3: -    Py_DECREF(kwargs);
[3.871s] 3: -    if(!res) throw std::runtime_error("Call to yticks() failed");
[3.871s] 3: -
[3.871s] 3: -    Py_DECREF(res);
[3.871s] 3: -}
[3.872s] 3: -
[3.872s] 3: -template<typename Numeric>
[3.872s] 3: -inline void yticks(const std::vector<Numeric> &ticks, const std::map<std::string, std::string>& keywords)
[3.872s] 3: -{
[3.872s] 3: +    PyObject * kwargs = PyDict_New();
[3.872s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.872s] 3: +      it != keywords.end(); ++it)
[3.872s] 3: +    {
[3.872s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.872s] 3: +    }
[3.872s] 3: +
[3.872s] 3: +    PyObject * res = PyObject_Call(
[3.872s] 3: +      detail::_interpreter::get().s_python_function_yticks, args, kwargs);
[3.872s] 3: +
[3.872s] 3: +    Py_DECREF(args);
[3.872s] 3: +    Py_DECREF(kwargs);
[3.872s] 3: +    if (!res) {throw std::runtime_error("Call to yticks() failed");}
[3.872s] 3: +
[3.872s] 3: +    Py_DECREF(res);
[3.873s] 3: +  }
[3.873s] 3: +
[3.873s] 3: +  template < typename Numeric >
[3.873s] 3: +  inline void yticks(
[3.873s] 3: +    const std::vector < Numeric > & ticks, const std::map < std::string,
[3.873s] 3: +    std::string > & keywords)
[3.873s] 3: +  {
[3.873s] 3: @@ -1817,4 +1981,4 @@
[3.873s] 3: -}
[3.873s] 3: -
[3.873s] 3: -template <typename Numeric> inline void margins(Numeric margin)
[3.873s] 3: -{
[3.873s] 3: +  }
[3.873s] 3: +
[3.873s] 3: +  template < typename Numeric > inline void margins(Numeric margin)
[3.874s] 3: +  {
[3.874s] 3: @@ -1822 +1986 @@
[3.874s] 3: -    PyObject* args = PyTuple_New(1);
[3.874s] 3: +    PyObject * args = PyTuple_New(1);
[3.874s] 3: @@ -1825,11 +1989,12 @@
[3.874s] 3: -    PyObject* res =
[3.874s] 3: -            PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);
[3.874s] 3: -    if (!res)
[3.874s] 3: -        throw std::runtime_error("Call to margins() failed.");
[3.874s] 3: -
[3.874s] 3: -    Py_DECREF(args);
[3.874s] 3: -    Py_DECREF(res);
[3.874s] 3: -}
[3.874s] 3: -
[3.874s] 3: -template <typename Numeric> inline void margins(Numeric margin_x, Numeric margin_y)
[3.874s] 3: -{
[3.874s] 3: +    PyObject * res =
[3.875s] 3: +      PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);
[3.875s] 3: +    if (!res) {
[3.875s] 3: +      throw std::runtime_error("Call to margins() failed.");
[3.875s] 3: +    }
[3.875s] 3: +
[3.875s] 3: +    Py_DECREF(args);
[3.875s] 3: +    Py_DECREF(res);
[3.875s] 3: +  }
[3.875s] 3: +
[3.875s] 3: +  template < typename Numeric > inline void margins(Numeric margin_x, Numeric margin_y)
[3.875s] 3: +  {
[3.875s] 3: @@ -1837 +2002 @@
[3.875s] 3: -    PyObject* args = PyTuple_New(2);
[3.876s] 3: +    PyObject * args = PyTuple_New(2);
[3.876s] 3: @@ -1841,40 +2006,17 @@
[3.876s] 3: -    PyObject* res =
[3.876s] 3: -            PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);
[3.876s] 3: -    if (!res)
[3.876s] 3: -        throw std::runtime_error("Call to margins() failed.");
[3.876s] 3: -
[3.876s] 3: -    Py_DECREF(args);
[3.876s] 3: -    Py_DECREF(res);
[3.876s] 3: -}
[3.876s] 3: -
[3.876s] 3: -
[3.876s] 3: -inline void tick_params(const std::map<std::string, std::string>& keywords, const std::string axis = "both")
[3.877s] 3: -{
[3.877s] 3: -  detail::_interpreter::get();
[3.877s] 3: -
[3.877s] 3: -  // construct positional args
[3.877s] 3: -  PyObject* args;
[3.877s] 3: -  args = PyTuple_New(1);
[3.877s] 3: -  PyTuple_SetItem(args, 0, PyString_FromString(axis.c_str()));
[3.877s] 3: -
[3.877s] 3: -  // construct keyword args
[3.877s] 3: -  PyObject* kwargs = PyDict_New();
[3.877s] 3: -  for (std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.877s] 3: -  {
[3.877s] 3: -    PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.877s] 3: -  }
[3.877s] 3: -
[3.877s] 3: -
[3.877s] 3: -  PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_tick_params, args, kwargs);
[3.877s] 3: -
[3.877s] 3: -  Py_DECREF(args);
[3.878s] 3: -  Py_DECREF(kwargs);
[3.878s] 3: -  if (!res) throw std::runtime_error("Call to tick_params() failed");
[3.878s] 3: -
[3.878s] 3: -  Py_DECREF(res);
[3.878s] 3: -}
[3.878s] 3: -
[3.878s] 3: -inline void subplot(long nrows, long ncols, long plot_number)
[3.878s] 3: -{
[3.878s] 3: -    detail::_interpreter::get();
[3.878s] 3: -    
[3.878s] 3: +    PyObject * res =
[3.878s] 3: +      PyObject_CallObject(detail::_interpreter::get().s_python_function_margins, args);
[3.878s] 3: +    if (!res) {
[3.878s] 3: +      throw std::runtime_error("Call to margins() failed.");
[3.878s] 3: +    }
[3.878s] 3: +
[3.878s] 3: +    Py_DECREF(args);
[3.878s] 3: +    Py_DECREF(res);
[3.879s] 3: +  }
[3.879s] 3: +
[3.879s] 3: +
[3.879s] 3: +  inline void tick_params(
[3.879s] 3: +    const std::map < std::string, std::string > & keywords,
[3.879s] 3: +    const std::string axis = "both")
[3.879s] 3: +  {
[3.879s] 3: +    detail::_interpreter::get();
[3.879s] 3: +
[3.879s] 3: @@ -1882 +2024,29 @@
[3.879s] 3: -    PyObject* args = PyTuple_New(3);
[3.879s] 3: +    PyObject * args;
[3.879s] 3: +    args = PyTuple_New(1);
[3.879s] 3: +    PyTuple_SetItem(args, 0, PyString_FromString(axis.c_str()));
[3.879s] 3: +
[3.879s] 3: +    // construct keyword args
[3.879s] 3: +    PyObject * kwargs = PyDict_New();
[3.879s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.880s] 3: +      it != keywords.end(); ++it)
[3.880s] 3: +    {
[3.880s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.880s] 3: +    }
[3.880s] 3: +
[3.880s] 3: +
[3.880s] 3: +    PyObject * res = PyObject_Call(
[3.880s] 3: +      detail::_interpreter::get().s_python_function_tick_params, args, kwargs);
[3.880s] 3: +
[3.880s] 3: +    Py_DECREF(args);
[3.880s] 3: +    Py_DECREF(kwargs);
[3.880s] 3: +    if (!res) {throw std::runtime_error("Call to tick_params() failed");}
[3.880s] 3: +
[3.880s] 3: +    Py_DECREF(res);
[3.880s] 3: +  }
[3.880s] 3: +
[3.880s] 3: +  inline void subplot(long nrows, long ncols, long plot_number)
[3.880s] 3: +  {
[3.881s] 3: +    detail::_interpreter::get();
[3.881s] 3: +
[3.881s] 3: +    // construct positional args
[3.881s] 3: +    PyObject * args = PyTuple_New(3);
[3.881s] 3: @@ -1887,12 +2057,15 @@
[3.881s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_subplot, args);
[3.881s] 3: -    if(!res) throw std::runtime_error("Call to subplot() failed.");
[3.881s] 3: -
[3.881s] 3: -    Py_DECREF(args);
[3.881s] 3: -    Py_DECREF(res);
[3.881s] 3: -}
[3.881s] 3: -
[3.881s] 3: -inline void subplot2grid(long nrows, long ncols, long rowid=0, long colid=0, long rowspan=1, long colspan=1)
[3.881s] 3: -{
[3.881s] 3: -    detail::_interpreter::get();
[3.881s] 3: -
[3.881s] 3: -    PyObject* shape = PyTuple_New(2);
[3.881s] 3: +    PyObject * res =
[3.881s] 3: +      PyObject_CallObject(detail::_interpreter::get().s_python_function_subplot, args);
[3.881s] 3: +    if (!res) {throw std::runtime_error("Call to subplot() failed.");}
[3.881s] 3: +
[3.882s] 3: +    Py_DECREF(args);
[3.882s] 3: +    Py_DECREF(res);
[3.882s] 3: +  }
[3.882s] 3: +
[3.882s] 3: +  inline void subplot2grid(
[3.882s] 3: +    long nrows, long ncols, long rowid = 0, long colid = 0, long rowspan = 1,
[3.882s] 3: +    long colspan = 1)
[3.882s] 3: +  {
[3.882s] 3: +    detail::_interpreter::get();
[3.882s] 3: +
[3.882s] 3: +    PyObject * shape = PyTuple_New(2);
[3.882s] 3: @@ -1902 +2075 @@
[3.882s] 3: -    PyObject* loc = PyTuple_New(2);
[3.882s] 3: +    PyObject * loc = PyTuple_New(2);
[3.882s] 3: @@ -1906 +2079 @@
[3.882s] 3: -    PyObject* args = PyTuple_New(4);
[3.882s] 3: +    PyObject * args = PyTuple_New(4);
[3.882s] 3: @@ -1912,2 +2085,3 @@
[3.882s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_subplot2grid, args);
[3.882s] 3: -    if(!res) throw std::runtime_error("Call to subplot2grid() failed.");
[3.883s] 3: +    PyObject * res = PyObject_CallObject(
[3.883s] 3: +      detail::_interpreter::get().s_python_function_subplot2grid, args);
[3.883s] 3: +    if (!res) {throw std::runtime_error("Call to subplot2grid() failed.");}
[3.883s] 3: @@ -1919,8 +2093,10 @@
[3.883s] 3: -}
[3.883s] 3: -
[3.883s] 3: -inline void title(const std::string &titlestr, const std::map<std::string, std::string> &keywords = {})
[3.883s] 3: -{
[3.883s] 3: -    detail::_interpreter::get();
[3.883s] 3: -
[3.883s] 3: -    PyObject* pytitlestr = PyString_FromString(titlestr.c_str());
[3.883s] 3: -    PyObject* args = PyTuple_New(1);
[3.883s] 3: +  }
[3.883s] 3: +
[3.883s] 3: +  inline void title(
[3.883s] 3: +    const std::string & titlestr, const std::map < std::string,
[3.883s] 3: +    std::string > & keywords = {})
[3.883s] 3: +  {
[3.883s] 3: +    detail::_interpreter::get();
[3.883s] 3: +
[3.883s] 3: +    PyObject * pytitlestr = PyString_FromString(titlestr.c_str());
[3.884s] 3: +    PyObject * args = PyTuple_New(1);
[3.884s] 3: @@ -1929 +2105 @@
[3.884s] 3: -    PyObject* kwargs = PyDict_New();
[3.884s] 3: +    PyObject * kwargs = PyDict_New();
[3.884s] 3: @@ -1931,17 +2107,20 @@
[3.884s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.884s] 3: -    }
[3.884s] 3: -
[3.884s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_title, args, kwargs);
[3.884s] 3: -    if(!res) throw std::runtime_error("Call to title() failed.");
[3.884s] 3: -
[3.884s] 3: -    Py_DECREF(args);
[3.884s] 3: -    Py_DECREF(kwargs);
[3.884s] 3: -    Py_DECREF(res);
[3.884s] 3: -}
[3.884s] 3: -
[3.884s] 3: -inline void suptitle(const std::string &suptitlestr, const std::map<std::string, std::string> &keywords = {})
[3.884s] 3: -{
[3.885s] 3: -    detail::_interpreter::get();
[3.885s] 3: -    
[3.885s] 3: -    PyObject* pysuptitlestr = PyString_FromString(suptitlestr.c_str());
[3.885s] 3: -    PyObject* args = PyTuple_New(1);
[3.885s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.885s] 3: +    }
[3.885s] 3: +
[3.885s] 3: +    PyObject * res =
[3.885s] 3: +      PyObject_Call(detail::_interpreter::get().s_python_function_title, args, kwargs);
[3.885s] 3: +    if (!res) {throw std::runtime_error("Call to title() failed.");}
[3.885s] 3: +
[3.890s] 3: +    Py_DECREF(args);
[3.890s] 3: +    Py_DECREF(kwargs);
[3.891s] 3: +    Py_DECREF(res);
[3.891s] 3: +  }
[3.891s] 3: +
[3.891s] 3: +  inline void suptitle(
[3.891s] 3: +    const std::string & suptitlestr, const std::map < std::string,
[3.891s] 3: +    std::string > & keywords = {})
[3.891s] 3: +  {
[3.891s] 3: +    detail::_interpreter::get();
[3.891s] 3: +
[3.891s] 3: +    PyObject * pysuptitlestr = PyString_FromString(suptitlestr.c_str());
[3.891s] 3: +    PyObject * args = PyTuple_New(1);
[3.891s] 3: @@ -1950 +2129 @@
[3.891s] 3: -    PyObject* kwargs = PyDict_New();
[3.891s] 3: +    PyObject * kwargs = PyDict_New();
[3.891s] 3: @@ -1952,17 +2131,18 @@
[3.891s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.892s] 3: -    }
[3.892s] 3: -
[3.892s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_suptitle, args, kwargs);
[3.892s] 3: -    if(!res) throw std::runtime_error("Call to suptitle() failed.");
[3.892s] 3: -
[3.892s] 3: -    Py_DECREF(args);
[3.892s] 3: -    Py_DECREF(kwargs);
[3.892s] 3: -    Py_DECREF(res);
[3.892s] 3: -}
[3.892s] 3: -
[3.892s] 3: -inline void axis(const std::string &axisstr)
[3.892s] 3: -{
[3.892s] 3: -    detail::_interpreter::get();
[3.893s] 3: -
[3.893s] 3: -    PyObject* str = PyString_FromString(axisstr.c_str());
[3.893s] 3: -    PyObject* args = PyTuple_New(1);
[3.893s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.893s] 3: +    }
[3.893s] 3: +
[3.893s] 3: +    PyObject * res = PyObject_Call(
[3.893s] 3: +      detail::_interpreter::get().s_python_function_suptitle, args, kwargs);
[3.893s] 3: +    if (!res) {throw std::runtime_error("Call to suptitle() failed.");}
[3.893s] 3: +
[3.893s] 3: +    Py_DECREF(args);
[3.893s] 3: +    Py_DECREF(kwargs);
[3.893s] 3: +    Py_DECREF(res);
[3.894s] 3: +  }
[3.894s] 3: +
[3.894s] 3: +  inline void axis(const std::string & axisstr)
[3.894s] 3: +  {
[3.894s] 3: +    detail::_interpreter::get();
[3.894s] 3: +
[3.894s] 3: +    PyObject * str = PyString_FromString(axisstr.c_str());
[3.894s] 3: +    PyObject * args = PyTuple_New(1);
[3.894s] 3: @@ -1971,9 +2151,11 @@
[3.894s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_axis, args);
[3.894s] 3: -    if(!res) throw std::runtime_error("Call to title() failed.");
[3.894s] 3: -
[3.894s] 3: -    Py_DECREF(args);
[3.894s] 3: -    Py_DECREF(res);
[3.894s] 3: -}
[3.894s] 3: -
[3.894s] 3: -inline void axvline(double x, double ymin = 0., double ymax = 1., const std::map<std::string, std::string>& keywords = std::map<std::string, std::string>())
[3.894s] 3: -{
[3.894s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_axis, args);
[3.894s] 3: +    if (!res) {throw std::runtime_error("Call to title() failed.");}
[3.895s] 3: +
[3.895s] 3: +    Py_DECREF(args);
[3.895s] 3: +    Py_DECREF(res);
[3.895s] 3: +  }
[3.895s] 3: +
[3.895s] 3: +  inline void axvline(
[3.895s] 3: +    double x, double ymin = 0., double ymax = 1., const std::map < std::string,
[3.895s] 3: +    std::string > & keywords = std::map < std::string, std::string > ())
[3.895s] 3: +  {
[3.895s] 3: @@ -1983 +2165 @@
[3.895s] 3: -    PyObject* args = PyTuple_New(3);
[3.895s] 3: +    PyObject * args = PyTuple_New(3);
[3.895s] 3: @@ -1989,16 +2171,21 @@
[3.895s] 3: -    PyObject* kwargs = PyDict_New();
[3.895s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.895s] 3: -    {
[3.895s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.896s] 3: -    }
[3.896s] 3: -
[3.896s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_axvline, args, kwargs);
[3.896s] 3: -
[3.896s] 3: -    Py_DECREF(args);
[3.896s] 3: -    Py_DECREF(kwargs);
[3.896s] 3: -
[3.896s] 3: -    if(res) Py_DECREF(res);
[3.896s] 3: -}
[3.896s] 3: -
[3.896s] 3: -inline void axvspan(double xmin, double xmax, double ymin = 0., double ymax = 1., const std::map<std::string, std::string>& keywords = std::map<std::string, std::string>())
[3.896s] 3: -{
[3.896s] 3: +    PyObject * kwargs = PyDict_New();
[3.896s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.896s] 3: +      it != keywords.end(); ++it)
[3.896s] 3: +    {
[3.896s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.896s] 3: +    }
[3.896s] 3: +
[3.896s] 3: +    PyObject * res = PyObject_Call(
[3.896s] 3: +      detail::_interpreter::get().s_python_function_axvline, args, kwargs);
[3.896s] 3: +
[3.897s] 3: +    Py_DECREF(args);
[3.897s] 3: +    Py_DECREF(kwargs);
[3.897s] 3: +
[3.897s] 3: +    if (res) {Py_DECREF(res);}
[3.897s] 3: +  }
[3.897s] 3: +
[3.897s] 3: +  inline void axvspan(
[3.897s] 3: +    double xmin, double xmax, double ymin = 0., double ymax = 1.,
[3.897s] 3: +    const std::map < std::string,
[3.897s] 3: +    std::string > & keywords = std::map < std::string, std::string > ())
[3.897s] 3: +  {
[3.897s] 3: @@ -2006 +2193 @@
[3.897s] 3: -    PyObject* args = PyTuple_New(4);
[3.897s] 3: +    PyObject * args = PyTuple_New(4);
[3.897s] 3: @@ -2013,22 +2200,27 @@
[3.897s] 3: -    PyObject* kwargs = PyDict_New();
[3.898s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.898s] 3: -    {
[3.898s] 3: -    if (it->first == "linewidth" || it->first == "alpha")
[3.898s] 3: -            PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(std::stod(it->second)));
[3.898s] 3: -    else
[3.898s] 3: -            PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.898s] 3: -    }
[3.898s] 3: -
[3.898s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_axvspan, args, kwargs);
[3.898s] 3: -    Py_DECREF(args);
[3.898s] 3: -    Py_DECREF(kwargs);
[3.898s] 3: -
[3.898s] 3: -    if(res) Py_DECREF(res);
[3.898s] 3: -}
[3.898s] 3: -
[3.898s] 3: -inline void xlabel(const std::string &str, const std::map<std::string, std::string> &keywords = {})
[3.899s] 3: -{
[3.899s] 3: -    detail::_interpreter::get();
[3.899s] 3: -
[3.899s] 3: -    PyObject* pystr = PyString_FromString(str.c_str());
[3.899s] 3: -    PyObject* args = PyTuple_New(1);
[3.899s] 3: +    PyObject * kwargs = PyDict_New();
[3.899s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.899s] 3: +      it != keywords.end(); ++it)
[3.899s] 3: +    {
[3.899s] 3: +      if (it->first == "linewidth" || it->first == "alpha") {
[3.899s] 3: +        PyDict_SetItemString(kwargs, it->first.c_str(), PyFloat_FromDouble(std::stod(it->second)));
[3.899s] 3: +      } else {
[3.899s] 3: +        PyDict_SetItemString(kwargs, it->first.c_str(), PyString_FromString(it->second.c_str()));
[3.899s] 3: +      }
[3.899s] 3: +    }
[3.899s] 3: +
[3.899s] 3: +    PyObject * res = PyObject_Call(
[3.900s] 3: +      detail::_interpreter::get().s_python_function_axvspan, args, kwargs);
[3.900s] 3: +    Py_DECREF(args);
[3.900s] 3: +    Py_DECREF(kwargs);
[3.900s] 3: +
[3.900s] 3: +    if (res) {Py_DECREF(res);}
[3.900s] 3: +  }
[3.900s] 3: +
[3.900s] 3: +  inline void xlabel(
[3.900s] 3: +    const std::string & str, const std::map < std::string,
[3.900s] 3: +    std::string > & keywords = {})
[3.900s] 3: +  {
[3.900s] 3: +    detail::_interpreter::get();
[3.900s] 3: +
[3.900s] 3: +    PyObject * pystr = PyString_FromString(str.c_str());
[3.900s] 3: +    PyObject * args = PyTuple_New(1);
[3.900s] 3: @@ -2037 +2229 @@
[3.900s] 3: -    PyObject* kwargs = PyDict_New();
[3.900s] 3: +    PyObject * kwargs = PyDict_New();
[3.900s] 3: @@ -2039,17 +2231,20 @@
[3.900s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.901s] 3: -    }
[3.901s] 3: -
[3.901s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_xlabel, args, kwargs);
[3.901s] 3: -    if(!res) throw std::runtime_error("Call to xlabel() failed.");
[3.901s] 3: -
[3.901s] 3: -    Py_DECREF(args);
[3.901s] 3: -    Py_DECREF(kwargs);
[3.901s] 3: -    Py_DECREF(res);
[3.901s] 3: -}
[3.901s] 3: -
[3.901s] 3: -inline void ylabel(const std::string &str, const std::map<std::string, std::string>& keywords = {})
[3.901s] 3: -{
[3.901s] 3: -    detail::_interpreter::get();
[3.901s] 3: -
[3.901s] 3: -    PyObject* pystr = PyString_FromString(str.c_str());
[3.902s] 3: -    PyObject* args = PyTuple_New(1);
[3.902s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.902s] 3: +    }
[3.902s] 3: +
[3.902s] 3: +    PyObject * res = PyObject_Call(
[3.902s] 3: +      detail::_interpreter::get().s_python_function_xlabel, args, kwargs);
[3.902s] 3: +    if (!res) {throw std::runtime_error("Call to xlabel() failed.");}
[3.902s] 3: +
[3.902s] 3: +    Py_DECREF(args);
[3.902s] 3: +    Py_DECREF(kwargs);
[3.902s] 3: +    Py_DECREF(res);
[3.902s] 3: +  }
[3.902s] 3: +
[3.902s] 3: +  inline void ylabel(
[3.902s] 3: +    const std::string & str, const std::map < std::string,
[3.902s] 3: +    std::string > & keywords = {})
[3.902s] 3: +  {
[3.902s] 3: +    detail::_interpreter::get();
[3.902s] 3: +
[3.902s] 3: +    PyObject * pystr = PyString_FromString(str.c_str());
[3.903s] 3: +    PyObject * args = PyTuple_New(1);
[3.903s] 3: @@ -2058 +2253 @@
[3.903s] 3: -    PyObject* kwargs = PyDict_New();
[3.903s] 3: +    PyObject * kwargs = PyDict_New();
[3.903s] 3: @@ -2060,18 +2255,21 @@
[3.903s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.903s] 3: -    }
[3.903s] 3: -
[3.903s] 3: -    PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_ylabel, args, kwargs);
[3.903s] 3: -    if(!res) throw std::runtime_error("Call to ylabel() failed.");
[3.903s] 3: -
[3.903s] 3: -    Py_DECREF(args);
[3.903s] 3: -    Py_DECREF(kwargs);
[3.903s] 3: -    Py_DECREF(res);
[3.903s] 3: -}
[3.903s] 3: -
[3.903s] 3: -inline void set_zlabel(const std::string &str, const std::map<std::string, std::string>& keywords = {})
[3.903s] 3: -{
[3.903s] 3: -    detail::_interpreter::get();
[3.904s] 3: -
[3.904s] 3: -    // Same as with plot_surface: We lazily load the modules here the first time 
[3.904s] 3: -    // this function is called because I'm not sure that we can assume "matplotlib 
[3.904s] 3: -    // installed" implies "mpl_toolkits installed" on all platforms, and we don't 
[3.904s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.904s] 3: +    }
[3.904s] 3: +
[3.904s] 3: +    PyObject * res = PyObject_Call(
[3.904s] 3: +      detail::_interpreter::get().s_python_function_ylabel, args, kwargs);
[3.904s] 3: +    if (!res) {throw std::runtime_error("Call to ylabel() failed.");}
[3.904s] 3: +
[3.904s] 3: +    Py_DECREF(args);
[3.904s] 3: +    Py_DECREF(kwargs);
[3.904s] 3: +    Py_DECREF(res);
[3.904s] 3: +  }
[3.904s] 3: +
[3.904s] 3: +  inline void set_zlabel(
[3.904s] 3: +    const std::string & str, const std::map < std::string,
[3.905s] 3: +    std::string > & keywords = {})
[3.905s] 3: +  {
[3.905s] 3: +    detail::_interpreter::get();
[3.905s] 3: +
[3.905s] 3: +    // Same as with plot_surface: We lazily load the modules here the first time
[3.905s] 3: +    // this function is called because I'm not sure that we can assume "matplotlib
[3.905s] 3: +    // installed" implies "mpl_toolkits installed" on all platforms, and we don't
[3.905s] 3: @@ -2079 +2277 @@
[3.905s] 3: -    static PyObject *mpl_toolkitsmod = nullptr, *axis3dmod = nullptr;
[3.905s] 3: +    static PyObject * mpl_toolkitsmod = nullptr, * axis3dmod = nullptr;
[3.905s] 3: @@ -2081,15 +2279,15 @@
[3.905s] 3: -        PyObject* mpl_toolkits = PyString_FromString("mpl_toolkits");
[3.905s] 3: -        PyObject* axis3d = PyString_FromString("mpl_toolkits.mplot3d");
[3.905s] 3: -        if (!mpl_toolkits || !axis3d) { throw std::runtime_error("couldnt create string"); }
[3.905s] 3: -
[3.905s] 3: -        mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
[3.905s] 3: -        Py_DECREF(mpl_toolkits);
[3.905s] 3: -        if (!mpl_toolkitsmod) { throw std::runtime_error("Error loading module mpl_toolkits!"); }
[3.906s] 3: -
[3.906s] 3: -        axis3dmod = PyImport_Import(axis3d);
[3.906s] 3: -        Py_DECREF(axis3d);
[3.906s] 3: -        if (!axis3dmod) { throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!"); }
[3.906s] 3: -    }
[3.906s] 3: -
[3.906s] 3: -    PyObject* pystr = PyString_FromString(str.c_str());
[3.906s] 3: -    PyObject* args = PyTuple_New(1);
[3.906s] 3: +      PyObject * mpl_toolkits = PyString_FromString("mpl_toolkits");
[3.906s] 3: +      PyObject * axis3d = PyString_FromString("mpl_toolkits.mplot3d");
[3.906s] 3: +      if (!mpl_toolkits || !axis3d) {throw std::runtime_error("couldnt create string");}
[3.906s] 3: +
[3.906s] 3: +      mpl_toolkitsmod = PyImport_Import(mpl_toolkits);
[3.906s] 3: +      Py_DECREF(mpl_toolkits);
[3.906s] 3: +      if (!mpl_toolkitsmod) {throw std::runtime_error("Error loading module mpl_toolkits!");}
[3.906s] 3: +
[3.906s] 3: +      axis3dmod = PyImport_Import(axis3d);
[3.907s] 3: +      Py_DECREF(axis3d);
[3.907s] 3: +      if (!axis3dmod) {throw std::runtime_error("Error loading module mpl_toolkits.mplot3d!");}
[3.907s] 3: +    }
[3.907s] 3: +
[3.907s] 3: +    PyObject * pystr = PyString_FromString(str.c_str());
[3.907s] 3: +    PyObject * args = PyTuple_New(1);
[3.907s] 3: @@ -2098 +2296 @@
[3.907s] 3: -    PyObject* kwargs = PyDict_New();
[3.907s] 3: +    PyObject * kwargs = PyDict_New();
[3.907s] 3: @@ -2100,5 +2298,6 @@
[3.907s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.907s] 3: -    }
[3.907s] 3: -
[3.907s] 3: -    PyObject *ax =
[3.907s] 3: -    PyObject_CallObject(detail::_interpreter::get().s_python_function_gca,
[3.907s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.907s] 3: +    }
[3.907s] 3: +
[3.908s] 3: +    PyObject * ax =
[3.908s] 3: +      PyObject_CallObject(
[3.908s] 3: +      detail::_interpreter::get().s_python_function_gca,
[3.908s] 3: @@ -2106 +2305 @@
[3.908s] 3: -    if (!ax) throw std::runtime_error("Call to gca() failed.");
[3.908s] 3: +    if (!ax) {throw std::runtime_error("Call to gca() failed.");}
[3.908s] 3: @@ -2109,2 +2308,2 @@
[3.908s] 3: -    PyObject *zlabel = PyObject_GetAttrString(ax, "set_zlabel");
[3.908s] 3: -    if (!zlabel) throw std::runtime_error("Attribute set_zlabel not found.");
[3.908s] 3: +    PyObject * zlabel = PyObject_GetAttrString(ax, "set_zlabel");
[3.908s] 3: +    if (!zlabel) {throw std::runtime_error("Attribute set_zlabel not found.");}
[3.908s] 3: @@ -2113,2 +2312,2 @@
[3.908s] 3: -    PyObject *res = PyObject_Call(zlabel, args, kwargs);
[3.908s] 3: -    if (!res) throw std::runtime_error("Call to set_zlabel() failed.");
[3.908s] 3: +    PyObject * res = PyObject_Call(zlabel, args, kwargs);
[3.908s] 3: +    if (!res) {throw std::runtime_error("Call to set_zlabel() failed.");}
[3.908s] 3: @@ -2120,8 +2319,8 @@
[3.908s] 3: -    if (res) Py_DECREF(res);
[3.909s] 3: -}
[3.909s] 3: -
[3.909s] 3: -inline void grid(bool flag)
[3.909s] 3: -{
[3.909s] 3: -    detail::_interpreter::get();
[3.909s] 3: -
[3.909s] 3: -    PyObject* pyflag = flag ? Py_True : Py_False;
[3.909s] 3: +    if (res) {Py_DECREF(res);}
[3.909s] 3: +  }
[3.909s] 3: +
[3.909s] 3: +  inline void grid(bool flag)
[3.909s] 3: +  {
[3.909s] 3: +    detail::_interpreter::get();
[3.909s] 3: +
[3.910s] 3: +    PyObject * pyflag = flag ? Py_True : Py_False;
[3.910s] 3: @@ -2130 +2329 @@
[3.910s] 3: -    PyObject* args = PyTuple_New(1);
[3.910s] 3: +    PyObject * args = PyTuple_New(1);
[3.910s] 3: @@ -2133,68 +2332,15 @@
[3.910s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_grid, args);
[3.910s] 3: -    if(!res) throw std::runtime_error("Call to grid() failed.");
[3.910s] 3: -
[3.910s] 3: -    Py_DECREF(args);
[3.910s] 3: -    Py_DECREF(res);
[3.910s] 3: -}
[3.910s] 3: -
[3.910s] 3: -inline void show(const bool block = true)
[3.910s] 3: -{
[3.910s] 3: -    detail::_interpreter::get();
[3.911s] 3: -
[3.911s] 3: -    PyObject* res;
[3.911s] 3: -    if(block)
[3.911s] 3: -    {
[3.911s] 3: -        res = PyObject_CallObject(
[3.911s] 3: -                detail::_interpreter::get().s_python_function_show,
[3.911s] 3: -                detail::_interpreter::get().s_python_empty_tuple);
[3.911s] 3: -    }
[3.911s] 3: -    else
[3.911s] 3: -    {
[3.911s] 3: -        PyObject *kwargs = PyDict_New();
[3.911s] 3: -        PyDict_SetItemString(kwargs, "block", Py_False);
[3.911s] 3: -        res = PyObject_Call( detail::_interpreter::get().s_python_function_show, detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.911s] 3: -       Py_DECREF(kwargs);
[3.911s] 3: -    }
[3.911s] 3: -
[3.911s] 3: -
[3.911s] 3: -    if (!res) throw std::runtime_error("Call to show() failed.");
[3.911s] 3: -
[3.912s] 3: -    Py_DECREF(res);
[3.912s] 3: -}
[3.912s] 3: -
[3.912s] 3: -inline void close()
[3.912s] 3: -{
[3.912s] 3: -    detail::_interpreter::get();
[3.912s] 3: -
[3.912s] 3: -    PyObject* res = PyObject_CallObject(
[3.912s] 3: -            detail::_interpreter::get().s_python_function_close,
[3.912s] 3: -            detail::_interpreter::get().s_python_empty_tuple);
[3.912s] 3: -
[3.912s] 3: -    if (!res) throw std::runtime_error("Call to close() failed.");
[3.912s] 3: -
[3.912s] 3: -    Py_DECREF(res);
[3.912s] 3: -}
[3.912s] 3: -
[3.913s] 3: -inline void xkcd() {
[3.913s] 3: -    detail::_interpreter::get();
[3.913s] 3: -
[3.913s] 3: -    PyObject* res;
[3.913s] 3: -    PyObject *kwargs = PyDict_New();
[3.913s] 3: -
[3.913s] 3: -    res = PyObject_Call(detail::_interpreter::get().s_python_function_xkcd,
[3.913s] 3: -            detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.913s] 3: -
[3.913s] 3: -    Py_DECREF(kwargs);
[3.913s] 3: -
[3.913s] 3: -    if (!res)
[3.913s] 3: -        throw std::runtime_error("Call to show() failed.");
[3.913s] 3: -
[3.913s] 3: -    Py_DECREF(res);
[3.913s] 3: -}
[3.914s] 3: -
[3.914s] 3: -inline void draw()
[3.914s] 3: -{
[3.914s] 3: -    detail::_interpreter::get();
[3.914s] 3: -
[3.914s] 3: -    PyObject* res = PyObject_CallObject(
[3.914s] 3: -        detail::_interpreter::get().s_python_function_draw,
[3.914s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_grid, args);
[3.914s] 3: +    if (!res) {throw std::runtime_error("Call to grid() failed.");}
[3.914s] 3: +
[3.914s] 3: +    Py_DECREF(args);
[3.914s] 3: +    Py_DECREF(res);
[3.914s] 3: +  }
[3.914s] 3: +
[3.914s] 3: +  inline void show(const bool block = true)
[3.914s] 3: +  {
[3.914s] 3: +    detail::_interpreter::get();
[3.915s] 3: +
[3.915s] 3: +    PyObject * res;
[3.915s] 3: +    if (block) {
[3.915s] 3: +      res = PyObject_CallObject(
[3.915s] 3: +        detail::_interpreter::get().s_python_function_show,
[3.915s] 3: @@ -2202,12 +2348,67 @@
[3.915s] 3: -
[3.915s] 3: -    if (!res) throw std::runtime_error("Call to draw() failed.");
[3.915s] 3: -
[3.915s] 3: -    Py_DECREF(res);
[3.915s] 3: -}
[3.915s] 3: -
[3.915s] 3: -template<typename Numeric>
[3.915s] 3: -inline void pause(Numeric interval)
[3.915s] 3: -{
[3.915s] 3: -    detail::_interpreter::get();
[3.915s] 3: -
[3.915s] 3: -    PyObject* args = PyTuple_New(1);
[3.915s] 3: +    } else {
[3.916s] 3: +      PyObject * kwargs = PyDict_New();
[3.916s] 3: +      PyDict_SetItemString(kwargs, "block", Py_False);
[3.916s] 3: +      res = PyObject_Call(
[3.916s] 3: +        detail::_interpreter::get().s_python_function_show,
[3.916s] 3: +        detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.916s] 3: +      Py_DECREF(kwargs);
[3.916s] 3: +    }
[3.916s] 3: +
[3.916s] 3: +
[3.916s] 3: +    if (!res) {throw std::runtime_error("Call to show() failed.");}
[3.916s] 3: +
[3.916s] 3: +    Py_DECREF(res);
[3.916s] 3: +  }
[3.916s] 3: +
[3.916s] 3: +  inline void close()
[3.916s] 3: +  {
[3.916s] 3: +    detail::_interpreter::get();
[3.916s] 3: +
[3.917s] 3: +    PyObject * res = PyObject_CallObject(
[3.917s] 3: +      detail::_interpreter::get().s_python_function_close,
[3.917s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.917s] 3: +
[3.917s] 3: +    if (!res) {throw std::runtime_error("Call to close() failed.");}
[3.918s] 3: +
[3.918s] 3: +    Py_DECREF(res);
[3.918s] 3: +  }
[3.918s] 3: +
[3.918s] 3: +  inline void xkcd()
[3.918s] 3: +  {
[3.918s] 3: +    detail::_interpreter::get();
[3.918s] 3: +
[3.918s] 3: +    PyObject * res;
[3.918s] 3: +    PyObject * kwargs = PyDict_New();
[3.918s] 3: +
[3.918s] 3: +    res = PyObject_Call(
[3.919s] 3: +      detail::_interpreter::get().s_python_function_xkcd,
[3.919s] 3: +      detail::_interpreter::get().s_python_empty_tuple, kwargs);
[3.919s] 3: +
[3.919s] 3: +    Py_DECREF(kwargs);
[3.919s] 3: +
[3.919s] 3: +    if (!res) {
[3.919s] 3: +      throw std::runtime_error("Call to show() failed.");
[3.919s] 3: +    }
[3.919s] 3: +
[3.919s] 3: +    Py_DECREF(res);
[3.919s] 3: +  }
[3.919s] 3: +
[3.919s] 3: +  inline void draw()
[3.920s] 3: +  {
[3.920s] 3: +    detail::_interpreter::get();
[3.920s] 3: +
[3.920s] 3: +    PyObject * res = PyObject_CallObject(
[3.920s] 3: +      detail::_interpreter::get().s_python_function_draw,
[3.920s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.920s] 3: +
[3.920s] 3: +    if (!res) {throw std::runtime_error("Call to draw() failed.");}
[3.920s] 3: +
[3.920s] 3: +    Py_DECREF(res);
[3.920s] 3: +  }
[3.920s] 3: +
[3.921s] 3: +  template < typename Numeric >
[3.921s] 3: +  inline void pause(Numeric interval)
[3.921s] 3: +  {
[3.921s] 3: +    detail::_interpreter::get();
[3.921s] 3: +
[3.921s] 3: +    PyObject * args = PyTuple_New(1);
[3.921s] 3: @@ -2216,14 +2417,14 @@
[3.921s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_pause, args);
[3.921s] 3: -    if(!res) throw std::runtime_error("Call to pause() failed.");
[3.921s] 3: -
[3.921s] 3: -    Py_DECREF(args);
[3.921s] 3: -    Py_DECREF(res);
[3.921s] 3: -}
[3.921s] 3: -
[3.922s] 3: -inline void save(const std::string& filename)
[3.922s] 3: -{
[3.922s] 3: -    detail::_interpreter::get();
[3.922s] 3: -
[3.922s] 3: -    PyObject* pyfilename = PyString_FromString(filename.c_str());
[3.922s] 3: -
[3.922s] 3: -    PyObject* args = PyTuple_New(1);
[3.922s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_pause, args);
[3.922s] 3: +    if (!res) {throw std::runtime_error("Call to pause() failed.");}
[3.922s] 3: +
[3.922s] 3: +    Py_DECREF(args);
[3.922s] 3: +    Py_DECREF(res);
[3.922s] 3: +  }
[3.922s] 3: +
[3.922s] 3: +  inline void save(const std::string & filename)
[3.922s] 3: +  {
[3.922s] 3: +    detail::_interpreter::get();
[3.922s] 3: +
[3.922s] 3: +    PyObject * pyfilename = PyString_FromString(filename.c_str());
[3.923s] 3: +
[3.923s] 3: +    PyObject * args = PyTuple_New(1);
[3.923s] 3: @@ -2232,48 +2433,56 @@
[3.923s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_save, args);
[3.923s] 3: -    if (!res) throw std::runtime_error("Call to save() failed.");
[3.923s] 3: -
[3.923s] 3: -    Py_DECREF(args);
[3.923s] 3: -    Py_DECREF(res);
[3.923s] 3: -}
[3.923s] 3: -
[3.923s] 3: -inline void clf() {
[3.923s] 3: -    detail::_interpreter::get();
[3.923s] 3: -
[3.923s] 3: -    PyObject *res = PyObject_CallObject(
[3.923s] 3: -        detail::_interpreter::get().s_python_function_clf,
[3.923s] 3: -        detail::_interpreter::get().s_python_empty_tuple);
[3.923s] 3: -
[3.923s] 3: -    if (!res) throw std::runtime_error("Call to clf() failed.");
[3.924s] 3: -
[3.924s] 3: -    Py_DECREF(res);
[3.924s] 3: -}
[3.924s] 3: -
[3.924s] 3: -inline void cla() {
[3.924s] 3: -    detail::_interpreter::get();
[3.924s] 3: -
[3.924s] 3: -    PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_cla,
[3.924s] 3: -                                        detail::_interpreter::get().s_python_empty_tuple);
[3.924s] 3: -
[3.924s] 3: -    if (!res)
[3.924s] 3: -        throw std::runtime_error("Call to cla() failed.");
[3.924s] 3: -
[3.925s] 3: -    Py_DECREF(res);
[3.925s] 3: -}
[3.925s] 3: -
[3.925s] 3: -inline void ion() {
[3.925s] 3: -    detail::_interpreter::get();
[3.925s] 3: -
[3.925s] 3: -    PyObject *res = PyObject_CallObject(
[3.925s] 3: -        detail::_interpreter::get().s_python_function_ion,
[3.925s] 3: -        detail::_interpreter::get().s_python_empty_tuple);
[3.925s] 3: -
[3.925s] 3: -    if (!res) throw std::runtime_error("Call to ion() failed.");
[3.925s] 3: -
[3.925s] 3: -    Py_DECREF(res);
[3.925s] 3: -}
[3.926s] 3: -
[3.926s] 3: -inline std::vector<std::array<double, 2>> ginput(const int numClicks = 1, const std::map<std::string, std::string>& keywords = {})
[3.926s] 3: -{
[3.926s] 3: -    detail::_interpreter::get();
[3.926s] 3: -
[3.926s] 3: -    PyObject *args = PyTuple_New(1);
[3.926s] 3: +    PyObject * res = PyObject_CallObject(detail::_interpreter::get().s_python_function_save, args);
[3.926s] 3: +    if (!res) {throw std::runtime_error("Call to save() failed.");}
[3.926s] 3: +
[3.926s] 3: +    Py_DECREF(args);
[3.926s] 3: +    Py_DECREF(res);
[3.926s] 3: +  }
[3.926s] 3: +
[3.927s] 3: +  inline void clf()
[3.927s] 3: +  {
[3.927s] 3: +    detail::_interpreter::get();
[3.927s] 3: +
[3.927s] 3: +    PyObject * res = PyObject_CallObject(
[3.927s] 3: +      detail::_interpreter::get().s_python_function_clf,
[3.927s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.927s] 3: +
[3.927s] 3: +    if (!res) {throw std::runtime_error("Call to clf() failed.");}
[3.927s] 3: +
[3.928s] 3: +    Py_DECREF(res);
[3.928s] 3: +  }
[3.928s] 3: +
[3.928s] 3: +  inline void cla()
[3.928s] 3: +  {
[3.928s] 3: +    detail::_interpreter::get();
[3.928s] 3: +
[3.928s] 3: +    PyObject * res = PyObject_CallObject(
[3.928s] 3: +      detail::_interpreter::get().s_python_function_cla,
[3.928s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.928s] 3: +
[3.929s] 3: +    if (!res) {
[3.929s] 3: +      throw std::runtime_error("Call to cla() failed.");
[3.929s] 3: +    }
[3.929s] 3: +
[3.929s] 3: +    Py_DECREF(res);
[3.929s] 3: +  }
[3.929s] 3: +
[3.929s] 3: +  inline void ion()
[3.929s] 3: +  {
[3.929s] 3: +    detail::_interpreter::get();
[3.929s] 3: +
[3.929s] 3: +    PyObject * res = PyObject_CallObject(
[3.929s] 3: +      detail::_interpreter::get().s_python_function_ion,
[3.929s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.929s] 3: +
[3.930s] 3: +    if (!res) {throw std::runtime_error("Call to ion() failed.");}
[3.930s] 3: +
[3.930s] 3: +    Py_DECREF(res);
[3.930s] 3: +  }
[3.930s] 3: +
[3.930s] 3: +  inline std::vector < std::array < double, 2 >> ginput(
[3.930s] 3: +    const int numClicks = 1,
[3.930s] 3: +    const std::map < std::string,
[3.930s] 3: +    std::string > & keywords = {})
[3.930s] 3: +  {
[3.930s] 3: +    detail::_interpreter::get();
[3.931s] 3: +
[3.931s] 3: +    PyObject * args = PyTuple_New(1);
[3.931s] 3: @@ -2283,12 +2492,13 @@
[3.931s] 3: -    PyObject* kwargs = PyDict_New();
[3.931s] 3: -    for(std::map<std::string, std::string>::const_iterator it = keywords.begin(); it != keywords.end(); ++it)
[3.931s] 3: -    {
[3.931s] 3: -        PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.931s] 3: -    }
[3.931s] 3: -
[3.931s] 3: -    PyObject* res = PyObject_Call(
[3.931s] 3: -        detail::_interpreter::get().s_python_function_ginput, args, kwargs);
[3.931s] 3: -
[3.932s] 3: -    Py_DECREF(kwargs);
[3.932s] 3: -    Py_DECREF(args);
[3.932s] 3: -    if (!res) throw std::runtime_error("Call to ginput() failed.");
[3.932s] 3: +    PyObject * kwargs = PyDict_New();
[3.932s] 3: +    for (std::map < std::string, std::string > ::const_iterator it = keywords.begin();
[3.932s] 3: +      it != keywords.end(); ++it)
[3.932s] 3: +    {
[3.932s] 3: +      PyDict_SetItemString(kwargs, it->first.c_str(), PyUnicode_FromString(it->second.c_str()));
[3.932s] 3: +    }
[3.932s] 3: +
[3.932s] 3: +    PyObject * res = PyObject_Call(
[3.932s] 3: +      detail::_interpreter::get().s_python_function_ginput, args, kwargs);
[3.932s] 3: +
[3.932s] 3: +    Py_DECREF(kwargs);
[3.932s] 3: +    Py_DECREF(args);
[3.932s] 3: +    if (!res) {throw std::runtime_error("Call to ginput() failed.");}
[3.933s] 3: @@ -2297 +2507 @@
[3.933s] 3: -    std::vector<std::array<double, 2>> out;
[3.933s] 3: +    std::vector < std::array < double, 2 >> out;
[3.933s] 3: @@ -2300,5 +2510,5 @@
[3.933s] 3: -        PyObject *current = PyList_GetItem(res, i);
[3.933s] 3: -        std::array<double, 2> position;
[3.933s] 3: -        position[0] = PyFloat_AsDouble(PyTuple_GetItem(current, 0));
[3.934s] 3: -        position[1] = PyFloat_AsDouble(PyTuple_GetItem(current, 1));
[3.934s] 3: -        out.push_back(position);
[3.934s] 3: +      PyObject * current = PyList_GetItem(res, i);
[3.934s] 3: +      std::array < double, 2 > position;
[3.934s] 3: +      position[0] = PyFloat_AsDouble(PyTuple_GetItem(current, 0));
[3.934s] 3: +      position[1] = PyFloat_AsDouble(PyTuple_GetItem(current, 1));
[3.934s] 3: +      out.push_back(position);
[3.934s] 3: @@ -2309 +2519 @@
[3.934s] 3: -}
[3.935s] 3: +  }
[3.935s] 3: @@ -2312,11 +2522,12 @@
[3.935s] 3: -inline void tight_layout() {
[3.935s] 3: -    detail::_interpreter::get();
[3.935s] 3: -
[3.935s] 3: -    PyObject *res = PyObject_CallObject(
[3.935s] 3: -        detail::_interpreter::get().s_python_function_tight_layout,
[3.935s] 3: -        detail::_interpreter::get().s_python_empty_tuple);
[3.936s] 3: -
[3.936s] 3: -    if (!res) throw std::runtime_error("Call to tight_layout() failed.");
[3.936s] 3: -
[3.936s] 3: -    Py_DECREF(res);
[3.936s] 3: -}
[3.936s] 3: +  inline void tight_layout()
[3.936s] 3: +  {
[3.936s] 3: +    detail::_interpreter::get();
[3.937s] 3: +
[3.937s] 3: +    PyObject * res = PyObject_CallObject(
[3.937s] 3: +      detail::_interpreter::get().s_python_function_tight_layout,
[3.937s] 3: +      detail::_interpreter::get().s_python_empty_tuple);
[3.937s] 3: +
[3.937s] 3: +    if (!res) {throw std::runtime_error("Call to tight_layout() failed.");}
[3.937s] 3: +
[3.937s] 3: +    Py_DECREF(res);
[3.937s] 3: +  }
[3.938s] 3: @@ -2326,27 +2537,28 @@
[3.938s] 3: -namespace detail {
[3.938s] 3: -
[3.938s] 3: -template<typename T>
[3.938s] 3: -using is_function = typename std::is_function<std::remove_pointer<std::remove_reference<T>>>::type;
[3.938s] 3: -
[3.938s] 3: -template<bool obj, typename T>
[3.938s] 3: -struct is_callable_impl;
[3.938s] 3: -
[3.939s] 3: -template<typename T>
[3.939s] 3: -struct is_callable_impl<false, T>
[3.939s] 3: -{
[3.939s] 3: -    typedef is_function<T> type;
[3.939s] 3: -}; // a non-object is callable iff it is a function
[3.939s] 3: -
[3.939s] 3: -template<typename T>
[3.940s] 3: -struct is_callable_impl<true, T>
[3.940s] 3: -{
[3.940s] 3: -    struct Fallback { void operator()(); };
[3.940s] 3: -    struct Derived : T, Fallback { };
[3.940s] 3: -
[3.940s] 3: -    template<typename U, U> struct Check;
[3.940s] 3: -
[3.940s] 3: -    template<typename U>
[3.940s] 3: -    static std::true_type test( ... ); // use a variadic function to make sure (1) it accepts everything and (2) its always the worst match
[3.940s] 3: -
[3.940s] 3: -    template<typename U>
[3.940s] 3: -    static std::false_type test( Check<void(Fallback::*)(), &U::operator()>* );
[3.940s] 3: +  namespace detail {
[3.940s] 3: +
[3.940s] 3: +    template < typename T >
[3.940s] 3: +    using is_function = typename std::is_function < std::remove_pointer < std::remove_reference <
[3.941s] 3: +      T >> > ::type;
[3.941s] 3: +
[3.941s] 3: +    template < bool obj, typename T >
[3.941s] 3: +    struct is_callable_impl;
[3.941s] 3: +
[3.941s] 3: +    template < typename T >
[3.941s] 3: +    struct is_callable_impl < false, T >
[3.942s] 3: +    {
[3.942s] 3: +      typedef is_function < T > type;
[3.942s] 3: +    } // a non-object is callable iff it is a function
[3.942s] 3: +
[3.942s] 3: +    template < typename T >
[3.942s] 3: +    struct is_callable_impl < true, T >
[3.942s] 3: +    {
[3.942s] 3: +      struct Fallback { void operator()(); };
[3.943s] 3: +      struct Derived : T, Fallback {};
[3.943s] 3: +
[3.943s] 3: +      template < typename U, U > struct Check;
[3.943s] 3: +
[3.943s] 3: +      template < typename U >
[3.943s] 3: +      static std::true_type test(...); // use a variadic function to make sure (1) it accepts everything and (2) its always the worst match
[3.943s] 3: +
[3.943s] 3: +      template < typename U >
[3.943s] 3: +      static std::false_type test(Check < void (Fallback::*)(), & U::operator() > *);
[3.944s] 3: @@ -2355,21 +2567,21 @@
[3.944s] 3: -    typedef decltype(test<Derived>(nullptr)) type;
[3.944s] 3: -    typedef decltype(&Fallback::operator()) dtype;
[3.944s] 3: -    static constexpr bool value = type::value;
[3.944s] 3: -}; // an object is callable iff it defines operator()
[3.944s] 3: -
[3.944s] 3: -template<typename T>
[3.944s] 3: -struct is_callable
[3.944s] 3: -{
[3.944s] 3: -    // dispatch to is_callable_impl<true, T> or is_callable_impl<false, T> depending on whether T is of class type or not
[3.944s] 3: -    typedef typename is_callable_impl<std::is_class<T>::value, T>::type type;
[3.944s] 3: -};
[3.944s] 3: -
[3.944s] 3: -template<typename IsYDataCallable>
[3.944s] 3: -struct plot_impl { };
[3.945s] 3: -
[3.945s] 3: -template<>
[3.945s] 3: -struct plot_impl<std::false_type>
[3.945s] 3: -{
[3.945s] 3: -    template<typename IterableX, typename IterableY>
[3.945s] 3: -    bool operator()(const IterableX& x, const IterableY& y, const std::string& format)
[3.945s] 3: -    {
[3.945s] 3: +      typedef decltype(test < Derived > (nullptr)) type;
[3.945s] 3: +      typedef decltype( & Fallback::operator ()) dtype;
[3.945s] 3: +      static constexpr bool value = type::value;
[3.945s] 3: +    } // an object is callable iff it defines operator()
[3.945s] 3: +
[3.945s] 3: +    template < typename T >
[3.945s] 3: +    struct is_callable
[3.945s] 3: +    {
[3.945s] 3: +      // dispatch to is_callable_impl<true, T> or is_callable_impl<false, T> depending on whether T is of class type or not
[3.945s] 3: +      typedef typename is_callable_impl < std::is_class < T > ::value, T > ::type type;
[3.946s] 3: +    };
[3.946s] 3: +
[3.946s] 3: +    template < typename IsYDataCallable >
[3.946s] 3: +    struct plot_impl {};
[3.946s] 3: +
[3.946s] 3: +    template < >
[3.946s] 3: +    struct plot_impl < std::false_type >
[3.946s] 3: +    {
[3.946s] 3: +      template < typename IterableX, typename IterableY >
[3.946s] 3: +      bool operator()(const IterableX & x, const IterableY & y, const std::string & format)
[3.946s] 3: +      {
[3.947s] 3: @@ -2387,3 +2599,3 @@
[3.947s] 3: -        PyObject* xlist = PyList_New(xs);
[3.947s] 3: -        PyObject* ylist = PyList_New(ys);
[3.948s] 3: -        PyObject* pystring = PyString_FromString(format.c_str());
[3.948s] 3: +        PyObject * xlist = PyList_New(xs);
[3.948s] 3: +        PyObject * ylist = PyList_New(ys);
[3.948s] 3: +        PyObject * pystring = PyString_FromString(format.c_str());
[3.948s] 3: @@ -2392,3 +2604,3 @@
[3.948s] 3: -        for(size_t i = 0; i < xs; ++i) {
[3.948s] 3: -            PyList_SetItem(xlist, i, PyFloat_FromDouble(*itx++));
[3.948s] 3: -            PyList_SetItem(ylist, i, PyFloat_FromDouble(*ity++));
[3.948s] 3: +        for (size_t i = 0; i < xs; ++i) {
[3.948s] 3: +          PyList_SetItem(xlist, i, PyFloat_FromDouble(*itx++));
[3.948s] 3: +          PyList_SetItem(ylist, i, PyFloat_FromDouble(*ity++));
[3.948s] 3: @@ -2397 +2609 @@
[3.948s] 3: -        PyObject* plot_args = PyTuple_New(3);
[3.949s] 3: +        PyObject * plot_args = PyTuple_New(3);
[3.949s] 3: @@ -2402 +2614,2 @@
[3.949s] 3: -        PyObject* res = PyObject_CallObject(detail::_interpreter::get().s_python_function_plot, plot_args);
[3.949s] 3: +        PyObject * res = PyObject_CallObject(
[3.949s] 3: +          detail::_interpreter::get().s_python_function_plot, plot_args);
[3.949s] 3: @@ -2405 +2618 @@
[3.949s] 3: -        if(res) Py_DECREF(res);
[3.949s] 3: +        if (res) {Py_DECREF(res);}
[3.949s] 3: @@ -2408,10 +2621,10 @@
[3.949s] 3: -    }
[3.949s] 3: -};
[3.949s] 3: -
[3.949s] 3: -template<>
[3.950s] 3: -struct plot_impl<std::true_type>
[3.950s] 3: -{
[3.950s] 3: -    template<typename Iterable, typename Callable>
[3.950s] 3: -    bool operator()(const Iterable& ticks, const Callable& f, const std::string& format)
[3.950s] 3: -    {
[3.950s] 3: -        if(begin(ticks) == end(ticks)) return true;
[3.950s] 3: +      }
[3.950s] 3: +    }
[3.950s] 3: +
[3.950s] 3: +    template < >
[3.951s] 3: +    struct plot_impl < std::true_type >
[3.951s] 3: +    {
[3.951s] 3: +      template < typename Iterable, typename Callable >
[3.951s] 3: +      bool operator()(const Iterable & ticks, const Callable & f, const std::string & format)
[3.951s] 3: +      {
[3.951s] 3: +        if (begin(ticks) == end(ticks)) {return true;}
[3.951s] 3: @@ -2421,7 +2634,9 @@
[3.951s] 3: -        std::vector<double> y;
[3.951s] 3: -        for(auto x : ticks) y.push_back(f(x));
[3.951s] 3: -        return plot_impl<std::false_type>()(ticks,y,format);
[3.951s] 3: -    }
[3.951s] 3: -};
[3.951s] 3: -
[3.951s] 3: -} // end namespace detail
[3.951s] 3: +        std::vector < double > y;
[3.951s] 3: +        for (auto x : ticks) {
[3.952s] 3: +          y.push_back(f(x));
[3.952s] 3: +        }
[3.952s] 3: +        return plot_impl < std::false_type > ()(ticks, y, format);
[3.952s] 3: +      }
[3.952s] 3: +    }
[3.952s] 3: +
[3.952s] 3: +  } // end namespace detail
[3.952s] 3: @@ -2430,8 +2645,9 @@
[3.952s] 3: -template<typename... Args>
[3.952s] 3: -bool plot() { return true; }
[3.952s] 3: -
[3.952s] 3: -template<typename A, typename B, typename... Args>
[3.952s] 3: -bool plot(const A& a, const B& b, const std::string& format, Args... args)
[3.952s] 3: -{
[3.952s] 3: -    return detail::plot_impl<typename detail::is_callable<B>::type>()(a,b,format) && plot(args...);
[3.953s] 3: -}
[3.953s] 3: +  template < typename ... Args >
[3.953s] 3: +  bool plot() {return true;}
[3.953s] 3: +
[3.953s] 3: +  template < typename A, typename B, typename ... Args >
[3.953s] 3: +  bool plot(const A & a, const B & b, const std::string & format, Args... args)
[3.953s] 3: +  {
[3.953s] 3: +    return detail::plot_impl < typename detail::is_callable < B > ::type > ()(a, b, format) && plot(
[3.953s] 3: +      args ...);
[3.953s] 3: +  }
[3.953s] 3: @@ -2443,11 +2659,18 @@
[3.953s] 3: -inline bool plot(const std::vector<double>& x, const std::vector<double>& y, const std::string& format = "") {
[3.953s] 3: -    return plot<double,double>(x,y,format);
[3.953s] 3: -}
[3.953s] 3: -
[3.953s] 3: -inline bool plot(const std::vector<double>& y, const std::string& format = "") {
[3.954s] 3: -    return plot<double>(y,format);
[3.954s] 3: -}
[3.954s] 3: -
[3.954s] 3: -inline bool plot(const std::vector<double>& x, const std::vector<double>& y, const std::map<std::string, std::string>& keywords) {
[3.954s] 3: -    return plot<double>(x,y,keywords);
[3.954s] 3: -}
[3.954s] 3: +  inline bool plot(
[3.954s] 3: +    const std::vector < double > & x, const std::vector < double > & y,
[3.954s] 3: +    const std::string & format = "")
[3.954s] 3: +  {
[3.954s] 3: +    return plot < double, double > (x, y, format);
[3.954s] 3: +  }
[3.954s] 3: +
[3.954s] 3: +  inline bool plot(const std::vector < double > & y, const std::string & format = "")
[3.954s] 3: +  {
[3.954s] 3: +    return plot < double > (y, format);
[3.955s] 3: +  }
[3.955s] 3: +
[3.955s] 3: +  inline bool plot(
[3.955s] 3: +    const std::vector < double > & x, const std::vector < double > & y,
[3.955s] 3: +    const std::map < std::string, std::string > & keywords)
[3.955s] 3: +  {
[3.955s] 3: +    return plot < double > (x, y, keywords);
[3.955s] 3: +  }
[3.955s] 3: @@ -2458,2 +2681,2 @@
[3.955s] 3: -class Plot
[3.955s] 3: -{
[3.955s] 3: +  class Plot
[3.955s] 3: +  {
[3.955s] 3: @@ -2462,16 +2685,56 @@
[3.955s] 3: -    template<typename Numeric>
[3.955s] 3: -    Plot(const std::string& name, const std::vector<Numeric>& x, const std::vector<Numeric>& y, const std::string& format = "") {
[3.955s] 3: -        detail::_interpreter::get();
[3.955s] 3: -
[3.955s] 3: -        assert(x.size() == y.size());
[3.956s] 3: -
[3.956s] 3: -        PyObject* kwargs = PyDict_New();
[3.956s] 3: -        if(name != "")
[3.956s] 3: -            PyDict_SetItemString(kwargs, "label", PyString_FromString(name.c_str()));
[3.956s] 3: -
[3.956s] 3: -        PyObject* xarray = detail::get_array(x);
[3.956s] 3: -        PyObject* yarray = detail::get_array(y);
[3.956s] 3: -
[3.956s] 3: -        PyObject* pystring = PyString_FromString(format.c_str());
[3.956s] 3: -
[3.956s] 3: -        PyObject* plot_args = PyTuple_New(3);
[3.956s] 3: +    template < typename Numeric >
[3.956s] 3: +    Plot(
[3.956s] 3: +      const std::string & name, const std::vector < Numeric > &x,
[3.956s] 3: +      const std::vector < Numeric > &y, const std::string & format = "") {
[3.956s] 3: +      detail::_interpreter::get();
[3.956s] 3: +
[3.956s] 3: +      assert(x.size() == y.size());
[3.957s] 3: +
[3.957s] 3: +      PyObject * kwargs = PyDict_New();
[3.957s] 3: +      if (name != "") {
[3.957s] 3: +        PyDict_SetItemString(kwargs, "label", PyString_FromString(name.c_str()));
[3.957s] 3: +      }
[3.957s] 3: +
[3.957s] 3: +      PyObject * xarray = detail::get_array(x);
[3.957s] 3: +      PyObject * yarray = detail::get_array(y);
[3.957s] 3: +
[3.957s] 3: +      PyObject * pystring = PyString_FromString(format.c_str());
[3.957s] 3: +
[3.957s] 3: +      PyObject * plot_args = PyTuple_New(3);
[3.957s] 3: +      PyTuple_SetItem(plot_args, 0, xarray);
[3.957s] 3: +      PyTuple_SetItem(plot_args, 1, yarray);
[3.957s] 3: +      PyTuple_SetItem(plot_args, 2, pystring);
[3.957s] 3: +
[3.957s] 3: +      PyObject * res = PyObject_Call(
[3.957s] 3: +        detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);
[3.957s] 3: +
[3.958s] 3: +      Py_DECREF(kwargs);
[3.958s] 3: +      Py_DECREF(plot_args);
[3.958s] 3: +
[3.958s] 3: +      if (res) {
[3.958s] 3: +        line = PyList_GetItem(res, 0);
[3.958s] 3: +
[3.958s] 3: +        if (line) {
[3.958s] 3: +          set_data_fct = PyObject_GetAttrString(line, "set_data");
[3.958s] 3: +        } else {
[3.958s] 3: +          Py_DECREF(line);
[3.958s] 3: +        }
[3.958s] 3: +        Py_DECREF(res);
[3.958s] 3: +      }
[3.958s] 3: +    }
[3.958s] 3: +
[3.958s] 3: +    // shorter initialization with name or format only
[3.958s] 3: +    // basically calls line, = plot([], [])
[3.958s] 3: +    Plot(const std::string & name = "", const std::string & format = "")
[3.958s] 3: +      : Plot(name, std::vector < double > (), std::vector < double > (), format) {
[3.959s] 3: +    }
[3.959s] 3: +
[3.959s] 3: +    template < typename Numeric >
[3.959s] 3: +    bool update(const std::vector < Numeric > & x, const std::vector < Numeric > & y)
[3.959s] 3: +    {
[3.959s] 3: +      assert(x.size() == y.size());
[3.959s] 3: +      if (set_data_fct) {
[3.959s] 3: +        PyObject * xarray = detail::get_array(x);
[3.959s] 3: +        PyObject * yarray = detail::get_array(y);
[3.959s] 3: +
[3.959s] 3: +        PyObject * plot_args = PyTuple_New(2);
[3.959s] 3: @@ -2480,41 +2743,6 @@
[3.959s] 3: -        PyTuple_SetItem(plot_args, 2, pystring);
[3.960s] 3: -
[3.960s] 3: -        PyObject* res = PyObject_Call(detail::_interpreter::get().s_python_function_plot, plot_args, kwargs);
[3.960s] 3: -
[3.960s] 3: -        Py_DECREF(kwargs);
[3.960s] 3: -        Py_DECREF(plot_args);
[3.960s] 3: -
[3.960s] 3: -        if(res)
[3.960s] 3: -        {
[3.960s] 3: -            line= PyList_GetItem(res, 0);
[3.960s] 3: -
[3.960s] 3: -            if(line)
[3.961s] 3: -                set_data_fct = PyObject_GetAttrString(line,"set_data");
[3.961s] 3: -            else
[3.961s] 3: -                Py_DECREF(line);
[3.961s] 3: -            Py_DECREF(res);
[3.961s] 3: -        }
[3.961s] 3: -    }
[3.961s] 3: -
[3.961s] 3: -    // shorter initialization with name or format only
[3.961s] 3: -    // basically calls line, = plot([], [])
[3.961s] 3: -    Plot(const std::string& name = "", const std::string& format = "")
[3.961s] 3: -        : Plot(name, std::vector<double>(), std::vector<double>(), format) {}
[3.961s] 3: -
[3.961s] 3: -    template<typename Numeric>
[3.961s] 3: -    bool update(const std::vector<Numeric>& x, const std::vector<Numeric>& y) {
[3.961s] 3: -        assert(x.size() == y.size());
[3.961s] 3: -        if(set_data_fct)
[3.961s] 3: -        {
[3.961s] 3: -            PyObject* xarray = detail::get_array(x);
[3.962s] 3: -            PyObject* yarray = detail::get_array(y);
[3.962s] 3: -
[3.962s] 3: -            PyObject* plot_args = PyTuple_New(2);
[3.962s] 3: -            PyTuple_SetItem(plot_args, 0, xarray);
[3.962s] 3: -            PyTuple_SetItem(plot_args, 1, yarray);
[3.962s] 3: -
[3.962s] 3: -            PyObject* res = PyObject_CallObject(set_data_fct, plot_args);
[3.962s] 3: -            if (res) Py_DECREF(res);
[3.962s] 3: -            return res;
[3.962s] 3: -        }
[3.962s] 3: -        return false;
[3.962s] 3: +
[3.962s] 3: +        PyObject * res = PyObject_CallObject(set_data_fct, plot_args);
[3.962s] 3: +        if (res) {Py_DECREF(res);}
[3.962s] 3: +        return res;
[3.962s] 3: +      }
[3.962s] 3: +      return false;
[3.962s] 3: @@ -2524,2 +2752,3 @@
[3.963s] 3: -    bool clear() {
[3.963s] 3: -        return update(std::vector<double>(), std::vector<double>());
[3.963s] 3: +    bool clear()
[3.963s] 3: +    {
[3.963s] 3: +      return update(std::vector < double > (), std::vector < double > ());
[3.963s] 3: @@ -2529,9 +2758,9 @@
[3.963s] 3: -    void remove() {
[3.963s] 3: -        if(line)
[3.963s] 3: -        {
[3.963s] 3: -            auto remove_fct = PyObject_GetAttrString(line,"remove");
[3.963s] 3: -            PyObject* args = PyTuple_New(0);
[3.963s] 3: -            PyObject* res = PyObject_CallObject(remove_fct, args);
[3.963s] 3: -            if (res) Py_DECREF(res);
[3.963s] 3: -        }
[3.963s] 3: -        decref();
[3.963s] 3: +    void remove()
[3.963s] 3: +    {
[3.963s] 3: +      if (line) {
[3.963s] 3: +        auto remove_fct = PyObject_GetAttrString(line, "remove");
[3.964s] 3: +        PyObject * args = PyTuple_New(0);
[3.964s] 3: +        PyObject * res = PyObject_CallObject(remove_fct, args);
[3.964s] 3: +        if (res) {Py_DECREF(res);}
[3.964s] 3: +      }
[3.964s] 3: +      decref();
[3.964s] 3: @@ -2541,2 +2770,3 @@
[3.964s] 3: -        decref();
[3.964s] 3: -    }
[3.964s] 3: +      decref();
[3.964s] 3: +    }
[3.964s] 3: +
[3.964s] 3: @@ -2544,12 +2774,14 @@
[3.964s] 3: -
[3.964s] 3: -    void decref() {
[3.964s] 3: -        if(line)
[3.964s] 3: -            Py_DECREF(line);
[3.964s] 3: -        if(set_data_fct)
[3.964s] 3: -            Py_DECREF(set_data_fct);
[3.964s] 3: -    }
[3.964s] 3: -
[3.965s] 3: -
[3.965s] 3: -    PyObject* line = nullptr;
[3.965s] 3: -    PyObject* set_data_fct = nullptr;
[3.965s] 3: -};
[3.965s] 3: +    void decref()
[3.965s] 3: +    {
[3.965s] 3: +      if (line) {
[3.965s] 3: +        Py_DECREF(line);
[3.965s] 3: +      }
[3.965s] 3: +      if (set_data_fct) {
[3.965s] 3: +        Py_DECREF(set_data_fct);
[3.965s] 3: +      }
[3.965s] 3: +    }
[3.965s] 3: +
[3.965s] 3: +
[3.966s] 3: +    PyObject * line = nullptr;
[3.966s] 3: +    PyObject * set_data_fct = nullptr;
[3.966s] 3: +  };
[3.966s] 3: 
[3.966s] 3: Code style divergence in file 'include/thirdParty/quadProgpp/Array.hh':
[3.966s] 3: 
[3.966s] 3: --- include/thirdParty/quadProgpp/Array.hh
[3.966s] 3: +++ include/thirdParty/quadProgpp/Array.hh.uncrustify
[3.966s] 3: @@ -4 +4 @@
[3.966s] 3: -// Copyright (C) 2001--2008 Andrea Schaerf, Luca Di Gaspero. 
[3.966s] 3: +// Copyright (C) 2001--2008 Andrea Schaerf, Luca Di Gaspero.
[3.966s] 3: @@ -21,113 +21,121 @@
[3.966s] 3: -enum MType { DIAG };
[3.966s] 3: -
[3.966s] 3: -template <typename T>
[3.966s] 3: -class Vector
[3.966s] 3: -{
[3.967s] 3: -public: 
[3.967s] 3: -  Vector(); 
[3.967s] 3: -  Vector(const unsigned int n);  
[3.967s] 3: -  Vector(const T& a, const unsigned int n); //initialize to constant value 
[3.967s] 3: -  Vector(const T* a, const unsigned int n); // Initialize to array 
[3.967s] 3: -  Vector(const Vector &rhs); // copy constructor 
[3.967s] 3: -  ~Vector(); // destructor
[3.967s] 3: -	
[3.967s] 3: -  inline void set(const T* a, const unsigned int n);
[3.967s] 3: -  Vector<T> extract(const std::set<unsigned int>& indexes) const;
[3.967s] 3: -  inline T& operator[](const unsigned int& i); //i-th element 
[3.967s] 3: -  inline const T& operator[](const unsigned int& i) const; 
[3.967s] 3: -	
[3.967s] 3: -  inline unsigned int size() const;
[3.967s] 3: -  inline void resize(const unsigned int n);
[3.967s] 3: -  inline void resize(const T& a, const unsigned int n);
[3.967s] 3: -	
[3.968s] 3: -  Vector<T>& operator=(const Vector<T>& rhs); //assignment 
[3.968s] 3: -  Vector<T>& operator=(const T& a); //assign a to every element 
[3.968s] 3: -  inline Vector<T>& operator+=(const Vector<T>& rhs);
[3.968s] 3: -  inline Vector<T>& operator-=(const Vector<T>& rhs);
[3.968s] 3: -  inline Vector<T>& operator*=(const Vector<T>& rhs);
[3.968s] 3: -  inline Vector<T>& operator/=(const Vector<T>& rhs);
[3.968s] 3: -  inline Vector<T>& operator^=(const Vector<T>& rhs);
[3.968s] 3: -  inline Vector<T>& operator+=(const T& a);
[3.968s] 3: -  inline Vector<T>& operator-=(const T& a);
[3.968s] 3: -  inline Vector<T>& operator*=(const T& a);
[3.968s] 3: -  inline Vector<T>& operator/=(const T& a);
[3.968s] 3: -  inline Vector<T>& operator^=(const T& a);
[3.968s] 3: -private: 
[3.968s] 3: -  unsigned int n; // size of array. upper index is n-1 
[3.968s] 3: -  T* v; // storage for data
[3.968s] 3: -}; 
[3.968s] 3: -
[3.969s] 3: -template <typename T> 
[3.969s] 3: -Vector<T>::Vector() 
[3.969s] 3: -  : n(0), v(0) 
[3.969s] 3: -{} 
[3.969s] 3: -
[3.969s] 3: -template <typename T> 
[3.969s] 3: -Vector<T>::Vector(const unsigned int n) 
[3.969s] 3: -  : v(new T[n]) 
[3.969s] 3: -{
[3.969s] 3: -  this->n = n;
[3.969s] 3: -} 
[3.969s] 3: -
[3.969s] 3: -template <typename T> 
[3.969s] 3: -Vector<T>::Vector(const T& a, const unsigned int n) 
[3.969s] 3: -  : v(new T[n])
[3.970s] 3: -{ 
[3.970s] 3: -  this->n = n;
[3.970s] 3: -  for (unsigned int i = 0; i < n; i++) 
[3.970s] 3: -    v[i] = a; 
[3.970s] 3: -} 
[3.970s] 3: -
[3.970s] 3: -template <typename T> 
[3.970s] 3: -Vector<T>::Vector(const T* a, const unsigned int n) 
[3.970s] 3: -  : v(new T[n])
[3.970s] 3: -{ 
[3.970s] 3: -  this->n = n;
[3.970s] 3: -  for (unsigned int i = 0; i < n; i++) 
[3.970s] 3: -    v[i] = *a++; 
[3.970s] 3: -} 
[3.970s] 3: -
[3.971s] 3: -template <typename T> 
[3.971s] 3: -Vector<T>::Vector(const Vector<T>& rhs) 
[3.971s] 3: -  : v(new T[rhs.n])
[3.971s] 3: -{ 
[3.971s] 3: -  this->n = rhs.n;
[3.971s] 3: -  for (unsigned int	i = 0; i < n; i++) 
[3.971s] 3: -    v[i] = rhs[i]; 
[3.971s] 3: -} 
[3.971s] 3: -
[3.971s] 3: -template <typename T> 
[3.971s] 3: -Vector<T>::~Vector() 
[3.971s] 3: -{ 
[3.971s] 3: -  if (v != 0) 
[3.971s] 3: -    delete[] (v); 
[3.971s] 3: -} 
[3.971s] 3: -
[3.972s] 3: -template <typename T> 
[3.972s] 3: -void Vector<T>::resize(const unsigned int n) 
[3.972s] 3: -{
[3.972s] 3: -  if (n == this->n)
[3.972s] 3: -    return;
[3.972s] 3: -  if (v != 0) 
[3.972s] 3: -    delete[] (v); 
[3.972s] 3: -  v = new T[n];
[3.972s] 3: -  this->n = n;
[3.972s] 3: -} 
[3.972s] 3: -
[3.972s] 3: -template <typename T> 
[3.972s] 3: -void Vector<T>::resize(const T& a, const unsigned int n) 
[3.972s] 3: -{
[3.972s] 3: -  resize(n);
[3.972s] 3: -  for (unsigned int i = 0; i < n; i++)
[3.972s] 3: -    v[i] = a;
[3.972s] 3: -} 
[3.972s] 3: -
[3.973s] 3: -
[3.973s] 3: -template <typename T> 
[3.973s] 3: -inline Vector<T>& Vector<T>::operator=(const Vector<T>& rhs) 
[3.973s] 3: -// postcondition: normal assignment via copying has been performed; 
[3.973s] 3: -// if vector and rhs were different sizes, vector 
[3.973s] 3: -// has been resized to match the size of rhs 
[3.973s] 3: -{ 
[3.973s] 3: -  if (this != &rhs) 
[3.973s] 3: -    { 
[3.973s] 3: +  enum MType { DIAG };
[3.973s] 3: +
[3.973s] 3: +  template < typename T >
[3.973s] 3: +  class Vector
[3.973s] 3: +  {
[3.973s] 3: +public:
[3.973s] 3: +    Vector();
[3.973s] 3: +    Vector(const unsigned int n);
[3.973s] 3: +    Vector(const T & a, const unsigned int n); //initialize to constant value
[3.973s] 3: +    Vector(const T * a, const unsigned int n); // Initialize to array
[3.973s] 3: +    Vector(const Vector & rhs); // copy constructor
[3.974s] 3: +    ~Vector(); // destructor
[3.974s] 3: +
[3.974s] 3: +    inline void set(const T * a, const unsigned int n);
[3.974s] 3: +    Vector < T > extract(const std::set < unsigned int > &indexes) const;
[3.974s] 3: +    inline T & operator[] (const unsigned int & i); //i-th element
[3.974s] 3: +    inline const T & operator[] (const unsigned int & i) const;
[3.974s] 3: +
[3.974s] 3: +    inline unsigned int size() const;
[3.974s] 3: +    inline void resize(const unsigned int n);
[3.974s] 3: +    inline void resize(const T & a, const unsigned int n);
[3.974s] 3: +
[3.974s] 3: +    Vector < T > & operator = (const Vector < T > &rhs); //assignment
[3.974s] 3: +    Vector < T > & operator = (const T & a); //assign a to every element
[3.974s] 3: +    inline Vector < T > & operator += (const Vector < T > &rhs);
[3.974s] 3: +    inline Vector < T > & operator -= (const Vector < T > &rhs);
[3.974s] 3: +    inline Vector < T > & operator *= (const Vector < T > &rhs);
[3.974s] 3: +    inline Vector < T > & operator /= (const Vector < T > &rhs);
[3.974s] 3: +    inline Vector < T > & operator ^= (const Vector < T > &rhs);
[3.974s] 3: +    inline Vector < T > & operator += (const T & a);
[3.975s] 3: +    inline Vector < T > & operator -= (const T & a);
[3.975s] 3: +    inline Vector < T > & operator *= (const T & a);
[3.975s] 3: +    inline Vector < T > & operator /= (const T & a);
[3.975s] 3: +    inline Vector < T > & operator ^= (const T & a);
[3.975s] 3: +
[3.975s] 3: +private:
[3.975s] 3: +    unsigned int n; // size of array. upper index is n-1
[3.975s] 3: +    T * v; // storage for data
[3.975s] 3: +  };
[3.975s] 3: +
[3.975s] 3: +  template < typename T >
[3.975s] 3: +  Vector < T > ::Vector()
[3.975s] 3: +    : n(0), v(0)
[3.975s] 3: +  {
[3.975s] 3: +  }
[3.975s] 3: +
[3.975s] 3: +  template < typename T >
[3.975s] 3: +  Vector < T > ::Vector(const unsigned int n)
[3.975s] 3: +    : v(new T[n])
[3.976s] 3: +  {
[3.976s] 3: +    this->n = n;
[3.976s] 3: +  }
[3.976s] 3: +
[3.976s] 3: +  template < typename T >
[3.976s] 3: +  Vector < T > ::Vector(const T & a, const unsigned int n)
[3.976s] 3: +    : v(new T[n])
[3.976s] 3: +  {
[3.976s] 3: +    this->n = n;
[3.976s] 3: +    for (unsigned int i = 0; i < n; i++) {
[3.976s] 3: +      v[i] = a;
[3.976s] 3: +    }
[3.976s] 3: +  }
[3.976s] 3: +
[3.976s] 3: +  template < typename T >
[3.976s] 3: +  Vector < T > ::Vector(const T * a, const unsigned int n)
[3.976s] 3: +    : v(new T[n])
[3.976s] 3: +  {
[3.976s] 3: +    this->n = n;
[3.977s] 3: +    for (unsigned int i = 0; i < n; i++) {
[3.977s] 3: +      v[i] = *a++;
[3.977s] 3: +    }
[3.977s] 3: +  }
[3.977s] 3: +
[3.977s] 3: +  template < typename T >
[3.977s] 3: +  Vector < T > ::Vector(const Vector < T > &rhs)
[3.977s] 3: +    : v(new T[rhs.n])
[3.977s] 3: +  {
[3.977s] 3: +    this->n = rhs.n;
[3.977s] 3: +    for (unsigned int i = 0; i < n; i++) {
[3.977s] 3: +      v[i] = rhs[i];
[3.977s] 3: +    }
[3.977s] 3: +  }
[3.977s] 3: +
[3.977s] 3: +  template < typename T >
[3.977s] 3: +  Vector < T > ::~Vector()
[3.977s] 3: +  {
[3.977s] 3: +    if (v != 0) {
[3.977s] 3: +      delete[] (v);
[3.978s] 3: +    }
[3.978s] 3: +  }
[3.978s] 3: +
[3.978s] 3: +  template < typename T >
[3.978s] 3: +  void Vector < T > ::resize(const unsigned int n)
[3.978s] 3: +  {
[3.978s] 3: +    if (n == this->n) {
[3.978s] 3: +      return;
[3.978s] 3: +    }
[3.978s] 3: +    if (v != 0) {
[3.978s] 3: +      delete[] (v);
[3.978s] 3: +    }
[3.978s] 3: +    v = new T[n];
[3.978s] 3: +    this->n = n;
[3.978s] 3: +  }
[3.978s] 3: +
[3.978s] 3: +  template < typename T >
[3.978s] 3: +  void Vector < T > ::resize(const T & a, const unsigned int n)
[3.979s] 3: +  {
[3.979s] 3: +    resize(n);
[3.979s] 3: +    for (unsigned int i = 0; i < n; i++) {
[3.979s] 3: +      v[i] = a;
[3.979s] 3: +    }
[3.979s] 3: +  }
[3.979s] 3: +
[3.979s] 3: +
[3.979s] 3: +  template < typename T >
[3.979s] 3: +  inline Vector < T > & Vector < T > ::operator = (const Vector < T > &rhs)
[3.979s] 3: +// postcondition: normal assignment via copying has been performed;
[3.979s] 3: +// if vector and rhs were different sizes, vector
[3.979s] 3: +// has been resized to match the size of rhs
[3.979s] 3: +  {
[3.979s] 3: +    if (this != &rhs) {
[3.979s] 3: @@ -135,47 +143,51 @@
[3.980s] 3: -      for (unsigned int i = 0; i < n; i++) 
[3.980s] 3: -	v[i] = rhs[i]; 
[3.980s] 3: -    } 
[3.980s] 3: -  return *this; 
[3.980s] 3: -} 
[3.980s] 3: -
[3.980s] 3: -template <typename T> 
[3.980s] 3: -inline Vector<T> & Vector<T>::operator=(const T& a) //assign a to every element 
[3.980s] 3: -{ 
[3.980s] 3: -  for (unsigned int i = 0; i < n; i++) 
[3.980s] 3: -    v[i] = a; 
[3.980s] 3: -  return *this; 
[3.980s] 3: -} 
[3.980s] 3: -
[3.980s] 3: -template <typename T> 
[3.980s] 3: -inline T & Vector<T>::operator[](const unsigned int& i) //subscripting 
[3.981s] 3: -{ 
[3.981s] 3: -  return v[i]; 
[3.981s] 3: -}
[3.981s] 3: -
[3.981s] 3: -template <typename T>
[3.981s] 3: -inline const T& Vector<T>::operator[](const unsigned int& i) const //subscripting 
[3.981s] 3: -{ 
[3.981s] 3: -  return v[i]; 
[3.981s] 3: -} 
[3.982s] 3: -
[3.982s] 3: -template <typename T> 
[3.982s] 3: -inline unsigned int Vector<T>::size() const 
[3.982s] 3: -{ 
[3.982s] 3: -  return n; 
[3.982s] 3: -}
[3.982s] 3: -
[3.982s] 3: -template <typename T> 
[3.982s] 3: -inline void Vector<T>::set(const T* a, unsigned int n) 
[3.982s] 3: -{ 
[3.982s] 3: -  resize(n);
[3.982s] 3: -  for (unsigned int i = 0; i < n; i++) 
[3.982s] 3: -    v[i] = a[i]; 
[3.982s] 3: -} 
[3.983s] 3: -
[3.983s] 3: -template <typename T> 
[3.983s] 3: -inline Vector<T> Vector<T>::extract(const std::set<unsigned int>& indexes) const
[3.983s] 3: -{
[3.983s] 3: -  Vector<T> tmp(indexes.size());
[3.983s] 3: -  unsigned int i = 0;
[3.983s] 3: -	
[3.983s] 3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)
[3.983s] 3: +      for (unsigned int i = 0; i < n; i++) {
[3.983s] 3: +        v[i] = rhs[i];
[3.983s] 3: +      }
[3.983s] 3: +    }
[3.983s] 3: +    return *this;
[3.983s] 3: +  }
[3.983s] 3: +
[3.984s] 3: +  template < typename T >
[3.984s] 3: +  inline Vector < T > & Vector < T > ::operator = (const T & a) //assign a to every element
[3.984s] 3: +  {
[3.984s] 3: +    for (unsigned int i = 0; i < n; i++) {
[3.984s] 3: +      v[i] = a;
[3.984s] 3: +    }
[3.984s] 3: +    return *this;
[3.984s] 3: +  }
[3.984s] 3: +
[3.984s] 3: +  template < typename T >
[3.984s] 3: +  inline T & Vector < T > ::operator[] (const unsigned int & i) //subscripting
[3.984s] 3: +  {
[3.984s] 3: +    return v[i];
[3.984s] 3: +  }
[3.984s] 3: +
[3.984s] 3: +  template < typename T >
[3.984s] 3: +  inline const T & Vector < T > ::operator[] (const unsigned int & i) const //subscripting
[3.984s] 3: +  {
[3.984s] 3: +    return v[i];
[3.985s] 3: +  }
[3.985s] 3: +
[3.985s] 3: +  template < typename T >
[3.985s] 3: +  inline unsigned int Vector < T > ::size() const
[3.985s] 3: +  {
[3.985s] 3: +    return n;
[3.985s] 3: +  }
[3.985s] 3: +
[3.985s] 3: +  template < typename T >
[3.985s] 3: +  inline void Vector < T > ::set(const T * a, unsigned int n)
[3.985s] 3: +  {
[3.986s] 3: +    resize(n);
[3.986s] 3: +    for (unsigned int i = 0; i < n; i++) {
[3.986s] 3: +      v[i] = a[i];
[3.986s] 3: +    }
[3.986s] 3: +  }
[3.986s] 3: +
[3.986s] 3: +  template < typename T >
[3.986s] 3: +  inline Vector < T > Vector < T > ::extract(const std::set < unsigned int > &indexes) const
[3.986s] 3: +  {
[3.986s] 3: +    Vector < T > tmp(indexes.size());
[3.986s] 3: +    unsigned int i = 0;
[3.987s] 3: +
[3.987s] 3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();
[3.987s] 3: +      el++)
[3.987s] 3: @@ -183,2 +195,3 @@
[3.987s] 3: -      if (*el >= n)
[3.987s] 3: -	throw std::logic_error("Error extracting subvector: the indexes are out of vector bounds");
[3.987s] 3: +      if (*el >= n) {
[3.987s] 3: +        throw std::logic_error("Error extracting subvector: the indexes are out of vector bounds");
[3.987s] 3: +      }
[3.988s] 3: @@ -187,345 +200,398 @@
[3.988s] 3: -	
[3.988s] 3: -  return tmp;
[3.988s] 3: -}
[3.988s] 3: -
[3.988s] 3: -template <typename T> 
[3.988s] 3: -inline Vector<T>& Vector<T>::operator+=(const Vector<T>& rhs)
[3.988s] 3: -{
[3.988s] 3: -  if (this->size() != rhs.size())
[3.988s] 3: -    throw std::logic_error("Operator+=: vectors have different sizes");
[3.989s] 3: -  for (unsigned int i = 0; i < n; i++)
[3.989s] 3: -    v[i] += rhs[i];
[3.989s] 3: -	
[3.989s] 3: -  return *this;
[3.989s] 3: -}
[3.989s] 3: -
[3.989s] 3: -
[3.989s] 3: -template <typename T> 
[3.989s] 3: -inline Vector<T>& Vector<T>::operator+=(const T& a)
[3.989s] 3: -{
[3.989s] 3: -  for (unsigned int i = 0; i < n; i++)
[3.989s] 3: -    v[i] += a;
[3.989s] 3: -	
[3.990s] 3: -  return *this;
[3.990s] 3: -}
[3.990s] 3: -
[3.990s] 3: -template <typename T>
[3.990s] 3: -inline Vector<T> operator+(const Vector<T>& rhs)
[3.990s] 3: -{
[3.990s] 3: -  return rhs;
[3.990s] 3: -}
[3.990s] 3: -
[3.990s] 3: -template <typename T>
[3.991s] 3: -inline Vector<T> operator+(const Vector<T>& lhs, const Vector<T>& rhs)
[3.991s] 3: -{
[3.991s] 3: -  if (lhs.size() != rhs.size())
[3.991s] 3: -    throw std::logic_error("Operator+: vectors have different sizes");
[3.991s] 3: -  Vector<T> tmp(lhs.size());
[3.991s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[3.991s] 3: -    tmp[i] = lhs[i] + rhs[i];
[3.991s] 3: -	
[3.991s] 3: -  return tmp;
[3.992s] 3: -}
[3.992s] 3: -
[3.992s] 3: -template <typename T>
[3.992s] 3: -inline Vector<T> operator+(const Vector<T>& lhs, const T& a)
[3.992s] 3: -{
[3.992s] 3: -  Vector<T> tmp(lhs.size());
[3.992s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[3.992s] 3: -    tmp[i] = lhs[i] + a;
[3.992s] 3: -		
[3.992s] 3: -  return tmp;
[3.992s] 3: -}
[3.992s] 3: -
[3.992s] 3: -template <typename T>
[3.992s] 3: -inline Vector<T> operator+(const T& a, const Vector<T>& rhs)
[3.992s] 3: -{
[3.992s] 3: -  Vector<T> tmp(rhs.size());
[3.992s] 3: -  for (unsigned int i = 0; i < rhs.size(); i++)
[3.993s] 3: -    tmp[i] = a + rhs[i];
[3.993s] 3: -		
[3.993s] 3: -  return tmp;
[3.993s] 3: -}
[3.993s] 3: -
[3.993s] 3: -template <typename T> 
[3.993s] 3: -inline Vector<T>& Vector<T>::operator-=(const Vector<T>& rhs)
[3.993s] 3: -{
[3.993s] 3: -  if (this->size() != rhs.size())
[3.994s] 3: -    throw std::logic_error("Operator-=: vectors have different sizes");
[3.994s] 3: -  for (unsigned int i = 0; i < n; i++)
[3.994s] 3: -    v[i] -= rhs[i];
[3.994s] 3: -	
[3.994s] 3: -  return *this;
[3.994s] 3: -}
[3.994s] 3: -
[3.994s] 3: -
[3.994s] 3: -template <typename T> 
[3.994s] 3: -inline Vector<T>& Vector<T>::operator-=(const T& a)
[3.994s] 3: -{
[3.994s] 3: -  for (unsigned int i = 0; i < n; i++)
[3.994s] 3: -    v[i] -= a;
[3.994s] 3: -	
[3.994s] 3: -  return *this;
[3.994s] 3: -}
[3.994s] 3: -
[3.994s] 3: -template <typename T>
[3.995s] 3: -inline Vector<T> operator-(const Vector<T>& rhs)
[3.995s] 3: -{
[3.995s] 3: -  return (T)(-1) * rhs;
[3.995s] 3: -}
[3.995s] 3: -
[3.995s] 3: -template <typename T>
[3.995s] 3: -inline Vector<T> operator-(const Vector<T>& lhs, const Vector<T>& rhs)
[3.995s] 3: -{
[3.995s] 3: -  if (lhs.size() != rhs.size())
[3.995s] 3: -    throw std::logic_error("Operator-: vectors have different sizes");
[3.995s] 3: -  Vector<T> tmp(lhs.size());
[3.995s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[3.995s] 3: -    tmp[i] = lhs[i] - rhs[i];
[3.995s] 3: -	
[3.995s] 3: -  return tmp;
[3.995s] 3: -}
[3.995s] 3: -
[3.995s] 3: -template <typename T>
[3.995s] 3: -inline Vector<T> operator-(const Vector<T>& lhs, const T& a)
[3.996s] 3: -{
[3.996s] 3: -  Vector<T> tmp(lhs.size());
[3.996s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[3.996s] 3: -    tmp[i] = lhs[i] - a;
[3.996s] 3: -		
[3.996s] 3: -  return tmp;
[3.996s] 3: -}
[3.996s] 3: -
[3.996s] 3: -template <typename T>
[3.996s] 3: -inline Vector<T> operator-(const T& a, const Vector<T>& rhs)
[3.996s] 3: -{
[3.996s] 3: -  Vector<T> tmp(rhs.size());
[3.996s] 3: -  for (unsigned int i = 0; i < rhs.size(); i++)
[3.996s] 3: -    tmp[i] = a - rhs[i];
[3.996s] 3: -		
[3.996s] 3: -  return tmp;
[3.996s] 3: -}
[3.996s] 3: -
[3.996s] 3: -template <typename T> 
[3.996s] 3: -inline Vector<T>& Vector<T>::operator*=(const Vector<T>& rhs)
[3.997s] 3: -{
[3.997s] 3: -  if (this->size() != rhs.size())
[3.997s] 3: -    throw std::logic_error("Operator*=: vectors have different sizes");
[3.997s] 3: -  for (unsigned int i = 0; i < n; i++)
[3.997s] 3: -    v[i] *= rhs[i];
[3.997s] 3: -	
[3.997s] 3: -  return *this;
[3.997s] 3: -}
[3.997s] 3: -
[3.997s] 3: -
[3.997s] 3: -template <typename T> 
[3.997s] 3: -inline Vector<T>& Vector<T>::operator*=(const T& a)
[3.997s] 3: -{
[3.997s] 3: -  for (unsigned int i = 0; i < n; i++)
[3.997s] 3: -    v[i] *= a;
[3.998s] 3: -	
[3.998s] 3: -  return *this;
[3.998s] 3: -}
[3.998s] 3: -
[3.998s] 3: -template <typename T>
[3.998s] 3: -inline Vector<T> operator*(const Vector<T>& lhs, const Vector<T>& rhs)
[3.998s] 3: -{
[3.998s] 3: -  if (lhs.size() != rhs.size())
[3.998s] 3: -    throw std::logic_error("Operator*: vectors have different sizes");
[3.998s] 3: -  Vector<T> tmp(lhs.size());
[3.998s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[3.998s] 3: -    tmp[i] = lhs[i] * rhs[i];
[3.998s] 3: -	
[3.998s] 3: -  return tmp;
[3.998s] 3: -}
[3.998s] 3: -
[3.998s] 3: -template <typename T>
[3.999s] 3: -inline Vector<T> operator*(const Vector<T>& lhs, const T& a)
[3.999s] 3: -{
[3.999s] 3: -  Vector<T> tmp(lhs.size());
[3.999s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[3.999s] 3: -    tmp[i] = lhs[i] * a;
[3.999s] 3: -		
[3.999s] 3: -  return tmp;
[3.999s] 3: -}
[3.999s] 3: -
[3.999s] 3: -template <typename T>
[3.999s] 3: -inline Vector<T> operator*(const T& a, const Vector<T>& rhs)
[3.999s] 3: -{
[3.999s] 3: -  Vector<T> tmp(rhs.size());
[3.999s] 3: -  for (unsigned int i = 0; i < rhs.size(); i++)
[3.999s] 3: -    tmp[i] = a * rhs[i];
[3.999s] 3: -		
[3.999s] 3: -  return tmp;
[4.000s] 3: -}
[4.000s] 3: -
[4.000s] 3: -template <typename T> 
[4.000s] 3: -inline Vector<T>& Vector<T>::operator/=(const Vector<T>& rhs)
[4.000s] 3: -{
[4.000s] 3: -  if (this->size() != rhs.size())
[4.000s] 3: -    throw std::logic_error("Operator/=: vectors have different sizes");
[4.000s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.000s] 3: -    v[i] /= rhs[i];
[4.000s] 3: -	
[4.000s] 3: -  return *this;
[4.001s] 3: -}
[4.001s] 3: -
[4.001s] 3: -
[4.001s] 3: -template <typename T> 
[4.001s] 3: -inline Vector<T>& Vector<T>::operator/=(const T& a)
[4.001s] 3: -{
[4.001s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.001s] 3: -    v[i] /= a;
[4.001s] 3: -	
[4.001s] 3: -  return *this;
[4.001s] 3: -}
[4.001s] 3: -
[4.001s] 3: -template <typename T>
[4.001s] 3: -inline Vector<T> operator/(const Vector<T>& lhs, const Vector<T>& rhs)
[4.001s] 3: -{
[4.002s] 3: -  if (lhs.size() != rhs.size())
[4.002s] 3: -    throw std::logic_error("Operator/: vectors have different sizes");
[4.002s] 3: -  Vector<T> tmp(lhs.size());
[4.002s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[4.002s] 3: -    tmp[i] = lhs[i] / rhs[i];
[4.002s] 3: -	
[4.002s] 3: -  return tmp;
[4.002s] 3: -}
[4.002s] 3: -
[4.002s] 3: -template <typename T>
[4.002s] 3: -inline Vector<T> operator/(const Vector<T>& lhs, const T& a)
[4.002s] 3: -{
[4.002s] 3: -  Vector<T> tmp(lhs.size());
[4.002s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[4.002s] 3: -    tmp[i] = lhs[i] / a;
[4.002s] 3: -		
[4.003s] 3: -  return tmp;
[4.003s] 3: -}
[4.003s] 3: -
[4.003s] 3: -template <typename T>
[4.003s] 3: -inline Vector<T> operator/(const T& a, const Vector<T>& rhs)
[4.003s] 3: -{
[4.003s] 3: -  Vector<T> tmp(rhs.size());
[4.003s] 3: -  for (unsigned int i = 0; i < rhs.size(); i++)
[4.003s] 3: -    tmp[i] = a / rhs[i];
[4.003s] 3: -		
[4.003s] 3: -  return tmp;
[4.003s] 3: -}
[4.003s] 3: -
[4.003s] 3: -template <typename T>
[4.003s] 3: -inline Vector<T> operator^(const Vector<T>& lhs, const Vector<T>& rhs)
[4.003s] 3: -{
[4.003s] 3: -  if (lhs.size() != rhs.size())
[4.004s] 3: -    throw std::logic_error("Operator^: vectors have different sizes");
[4.004s] 3: -  Vector<T> tmp(lhs.size());
[4.004s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[4.004s] 3: -    tmp[i] = pow(lhs[i], rhs[i]);
[4.004s] 3: -	
[4.004s] 3: -  return tmp;
[4.004s] 3: -}
[4.004s] 3: -
[4.004s] 3: -template <typename T>
[4.004s] 3: -inline Vector<T> operator^(const Vector<T>& lhs, const T& a)
[4.004s] 3: -{
[4.004s] 3: -  Vector<T> tmp(lhs.size());
[4.004s] 3: -  for (unsigned int i = 0; i < lhs.size(); i++)
[4.004s] 3: -    tmp[i] = pow(lhs[i], a);
[4.004s] 3: -		
[4.005s] 3: -  return tmp;
[4.005s] 3: -}
[4.005s] 3: -
[4.005s] 3: -template <typename T>
[4.005s] 3: -inline Vector<T> operator^(const T& a, const Vector<T>& rhs)
[4.005s] 3: -{
[4.005s] 3: -  Vector<T> tmp(rhs.size());
[4.005s] 3: -  for (unsigned int i = 0; i < rhs.size(); i++)
[4.005s] 3: -    tmp[i] = pow(a, rhs[i]);
[4.005s] 3: -		
[4.005s] 3: -  return tmp;
[4.005s] 3: -}
[4.005s] 3: -
[4.005s] 3: -template <typename T>
[4.005s] 3: -inline Vector<T>& Vector<T>::operator^=(const Vector<T>& rhs)
[4.005s] 3: -{
[4.005s] 3: -  if (this->size() != rhs.size())
[4.005s] 3: -    throw std::logic_error("Operator^=: vectors have different sizes");
[4.005s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.006s] 3: -    v[i] = pow(v[i], rhs[i]);
[4.006s] 3: -		
[4.006s] 3: -  return *this;
[4.006s] 3: -}
[4.006s] 3: -
[4.006s] 3: -template <typename T>
[4.006s] 3: -inline Vector<T>& Vector<T>::operator^=(const T& a)
[4.006s] 3: -{
[4.006s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.006s] 3: -    v[i] = pow(v[i], a);
[4.006s] 3: -		
[4.006s] 3: -  return *this;
[4.006s] 3: -}
[4.006s] 3: -
[4.006s] 3: -template <typename T>
[4.007s] 3: -inline bool operator==(const Vector<T>& v, const Vector<T>& w)
[4.007s] 3: -{
[4.007s] 3: -  if (v.size() != w.size())
[4.007s] 3: -    throw std::logic_error("Vectors of different size are not confrontable");
[4.007s] 3: -  for (unsigned i = 0; i < v.size(); i++)
[4.007s] 3: -    if (v[i] != w[i])
[4.007s] 3: -      return false;
[4.007s] 3: -  return true;
[4.007s] 3: -}
[4.007s] 3: -
[4.007s] 3: -template <typename T>
[4.007s] 3: -inline bool operator!=(const Vector<T>& v, const Vector<T>& w)
[4.008s] 3: -{
[4.008s] 3: -  if (v.size() != w.size())
[4.008s] 3: -    throw std::logic_error("Vectors of different size are not confrontable");
[4.008s] 3: -  for (unsigned i = 0; i < v.size(); i++)
[4.008s] 3: -    if (v[i] != w[i])
[4.008s] 3: -      return true;
[4.008s] 3: -  return false;
[4.008s] 3: -}
[4.008s] 3: -
[4.008s] 3: -template <typename T>
[4.008s] 3: -inline bool operator<(const Vector<T>& v, const Vector<T>& w)
[4.008s] 3: -{
[4.008s] 3: -  if (v.size() != w.size())
[4.008s] 3: -    throw std::logic_error("Vectors of different size are not confrontable");
[4.009s] 3: -  for (unsigned i = 0; i < v.size(); i++)
[4.009s] 3: -    if (v[i] >= w[i])
[4.009s] 3: -      return false;
[4.009s] 3: -  return true;
[4.009s] 3: -}
[4.009s] 3: -
[4.009s] 3: -template <typename T>
[4.009s] 3: -inline bool operator<=(const Vector<T>& v, const Vector<T>& w)
[4.009s] 3: -{
[4.009s] 3: -  if (v.size() != w.size())
[4.009s] 3: -    throw std::logic_error("Vectors of different size are not confrontable");
[4.010s] 3: -  for (unsigned i = 0; i < v.size(); i++)
[4.010s] 3: -    if (v[i] > w[i])
[4.010s] 3: -      return false;
[4.010s] 3: -  return true;
[4.010s] 3: -}
[4.010s] 3: -
[4.010s] 3: -template <typename T>
[4.010s] 3: -inline bool operator>(const Vector<T>& v, const Vector<T>& w)
[4.010s] 3: -{
[4.010s] 3: -  if (v.size() != w.size())
[4.010s] 3: -    throw std::logic_error("Vectors of different size are not confrontable");
[4.010s] 3: -  for (unsigned i = 0; i < v.size(); i++)
[4.010s] 3: -    if (v[i] <= w[i])
[4.010s] 3: -      return false;
[4.010s] 3: -  return true;
[4.011s] 3: -}
[4.011s] 3: -
[4.011s] 3: -template <typename T>
[4.011s] 3: -inline bool operator>=(const Vector<T>& v, const Vector<T>& w)
[4.011s] 3: -{
[4.011s] 3: -  if (v.size() != w.size())
[4.011s] 3: -    throw std::logic_error("Vectors of different size are not confrontable");
[4.011s] 3: -  for (unsigned i = 0; i < v.size(); i++)
[4.011s] 3: -    if (v[i] < w[i])
[4.011s] 3: -      return false;
[4.011s] 3: -  return true;
[4.011s] 3: -}
[4.011s] 3: +
[4.011s] 3: +    return tmp;
[4.011s] 3: +  }
[4.011s] 3: +
[4.011s] 3: +  template < typename T >
[4.011s] 3: +  inline Vector < T > & Vector < T > ::operator += (const Vector < T > &rhs)
[4.011s] 3: +  {
[4.012s] 3: +    if (this->size() != rhs.size()) {
[4.012s] 3: +      throw std::logic_error("Operator+=: vectors have different sizes");
[4.012s] 3: +    }
[4.012s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.012s] 3: +      v[i] += rhs[i];
[4.012s] 3: +    }
[4.012s] 3: +
[4.012s] 3: +    return *this;
[4.012s] 3: +  }
[4.012s] 3: +
[4.012s] 3: +
[4.012s] 3: +  template < typename T >
[4.012s] 3: +  inline Vector < T > & Vector < T > ::operator += (const T & a)
[4.012s] 3: +  {
[4.012s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.012s] 3: +      v[i] += a;
[4.012s] 3: +    }
[4.012s] 3: +
[4.012s] 3: +    return *this;
[4.012s] 3: +  }
[4.013s] 3: +
[4.013s] 3: +  template < typename T >
[4.013s] 3: +  inline Vector < T > operator + (const Vector < T > &rhs)
[4.013s] 3: +  {
[4.013s] 3: +    return rhs;
[4.013s] 3: +  }
[4.013s] 3: +
[4.013s] 3: +  template < typename T >
[4.013s] 3: +  inline Vector < T > operator + (const Vector < T > &lhs, const Vector < T > &rhs)
[4.013s] 3: +  {
[4.013s] 3: +    if (lhs.size() != rhs.size()) {
[4.013s] 3: +      throw std::logic_error("Operator+: vectors have different sizes");
[4.013s] 3: +    }
[4.013s] 3: +    Vector < T > tmp(lhs.size());
[4.013s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.013s] 3: +      tmp[i] = lhs[i] + rhs[i];
[4.014s] 3: +    }
[4.014s] 3: +
[4.014s] 3: +    return tmp;
[4.014s] 3: +  }
[4.014s] 3: +
[4.014s] 3: +  template < typename T >
[4.014s] 3: +  inline Vector < T > operator + (const Vector < T > &lhs, const T & a)
[4.014s] 3: +  {
[4.014s] 3: +    Vector < T > tmp(lhs.size());
[4.014s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.014s] 3: +      tmp[i] = lhs[i] + a;
[4.014s] 3: +    }
[4.014s] 3: +
[4.014s] 3: +    return tmp;
[4.014s] 3: +  }
[4.014s] 3: +
[4.014s] 3: +  template < typename T >
[4.014s] 3: +  inline Vector < T > operator + (const T & a, const Vector < T > &rhs)
[4.014s] 3: +  {
[4.014s] 3: +    Vector < T > tmp(rhs.size());
[4.015s] 3: +    for (unsigned int i = 0; i < rhs.size(); i++) {
[4.015s] 3: +      tmp[i] = a + rhs[i];
[4.015s] 3: +    }
[4.015s] 3: +
[4.015s] 3: +    return tmp;
[4.015s] 3: +  }
[4.015s] 3: +
[4.015s] 3: +  template < typename T >
[4.015s] 3: +  inline Vector < T > & Vector < T > ::operator -= (const Vector < T > &rhs)
[4.015s] 3: +  {
[4.015s] 3: +    if (this->size() != rhs.size()) {
[4.015s] 3: +      throw std::logic_error("Operator-=: vectors have different sizes");
[4.015s] 3: +    }
[4.015s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.015s] 3: +      v[i] -= rhs[i];
[4.016s] 3: +    }
[4.016s] 3: +
[4.016s] 3: +    return *this;
[4.016s] 3: +  }
[4.016s] 3: +
[4.016s] 3: +
[4.016s] 3: +  template < typename T >
[4.016s] 3: +  inline Vector < T > & Vector < T > ::operator -= (const T & a)
[4.016s] 3: +  {
[4.016s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.016s] 3: +      v[i] -= a;
[4.016s] 3: +    }
[4.016s] 3: +
[4.016s] 3: +    return *this;
[4.016s] 3: +  }
[4.016s] 3: +
[4.016s] 3: +  template < typename T >
[4.016s] 3: +  inline Vector < T > operator - (const Vector < T > &rhs)
[4.016s] 3: +  {
[4.017s] 3: +    return (T)(-1) * rhs;
[4.017s] 3: +  }
[4.017s] 3: +
[4.017s] 3: +  template < typename T >
[4.017s] 3: +  inline Vector < T > operator - (const Vector < T > &lhs, const Vector < T > &rhs)
[4.017s] 3: +  {
[4.017s] 3: +    if (lhs.size() != rhs.size()) {
[4.017s] 3: +      throw std::logic_error("Operator-: vectors have different sizes");
[4.017s] 3: +    }
[4.017s] 3: +    Vector < T > tmp(lhs.size());
[4.017s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.017s] 3: +      tmp[i] = lhs[i] - rhs[i];
[4.017s] 3: +    }
[4.017s] 3: +
[4.017s] 3: +    return tmp;
[4.017s] 3: +  }
[4.017s] 3: +
[4.017s] 3: +  template < typename T >
[4.017s] 3: +  inline Vector < T > operator - (const Vector < T > &lhs, const T & a)
[4.017s] 3: +  {
[4.018s] 3: +    Vector < T > tmp(lhs.size());
[4.018s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.018s] 3: +      tmp[i] = lhs[i] - a;
[4.018s] 3: +    }
[4.018s] 3: +
[4.018s] 3: +    return tmp;
[4.018s] 3: +  }
[4.018s] 3: +
[4.018s] 3: +  template < typename T >
[4.018s] 3: +  inline Vector < T > operator - (const T & a, const Vector < T > &rhs)
[4.018s] 3: +  {
[4.018s] 3: +    Vector < T > tmp(rhs.size());
[4.018s] 3: +    for (unsigned int i = 0; i < rhs.size(); i++) {
[4.018s] 3: +      tmp[i] = a - rhs[i];
[4.018s] 3: +    }
[4.018s] 3: +
[4.018s] 3: +    return tmp;
[4.018s] 3: +  }
[4.019s] 3: +
[4.019s] 3: +  template < typename T >
[4.019s] 3: +  inline Vector < T > & Vector < T > ::operator *= (const Vector < T > &rhs)
[4.019s] 3: +  {
[4.019s] 3: +    if (this->size() != rhs.size()) {
[4.019s] 3: +      throw std::logic_error("Operator*=: vectors have different sizes");
[4.019s] 3: +    }
[4.019s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.019s] 3: +      v[i] *= rhs[i];
[4.019s] 3: +    }
[4.019s] 3: +
[4.019s] 3: +    return *this;
[4.019s] 3: +  }
[4.019s] 3: +
[4.019s] 3: +
[4.019s] 3: +  template < typename T >
[4.019s] 3: +  inline Vector < T > & Vector < T > ::operator *= (const T & a)
[4.019s] 3: +  {
[4.019s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.019s] 3: +      v[i] *= a;
[4.019s] 3: +    }
[4.020s] 3: +
[4.020s] 3: +    return *this;
[4.020s] 3: +  }
[4.020s] 3: +
[4.020s] 3: +  template < typename T >
[4.020s] 3: +  inline Vector < T > operator * (const Vector < T > &lhs, const Vector < T > &rhs)
[4.020s] 3: +  {
[4.020s] 3: +    if (lhs.size() != rhs.size()) {
[4.020s] 3: +      throw std::logic_error("Operator*: vectors have different sizes");
[4.020s] 3: +    }
[4.020s] 3: +    Vector < T > tmp(lhs.size());
[4.020s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.020s] 3: +      tmp[i] = lhs[i] * rhs[i];
[4.020s] 3: +    }
[4.020s] 3: +
[4.020s] 3: +    return tmp;
[4.020s] 3: +  }
[4.020s] 3: +
[4.020s] 3: +  template < typename T >
[4.021s] 3: +  inline Vector < T > operator * (const Vector < T > &lhs, const T & a)
[4.021s] 3: +  {
[4.021s] 3: +    Vector < T > tmp(lhs.size());
[4.021s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.021s] 3: +      tmp[i] = lhs[i] * a;
[4.021s] 3: +    }
[4.021s] 3: +
[4.021s] 3: +    return tmp;
[4.021s] 3: +  }
[4.021s] 3: +
[4.021s] 3: +  template < typename T >
[4.021s] 3: +  inline Vector < T > operator * (const T & a, const Vector < T > &rhs)
[4.021s] 3: +  {
[4.022s] 3: +    Vector < T > tmp(rhs.size());
[4.022s] 3: +    for (unsigned int i = 0; i < rhs.size(); i++) {
[4.022s] 3: +      tmp[i] = a * rhs[i];
[4.022s] 3: +    }
[4.022s] 3: +
[4.022s] 3: +    return tmp;
[4.022s] 3: +  }
[4.022s] 3: +
[4.022s] 3: +  template < typename T >
[4.022s] 3: +  inline Vector < T > & Vector < T > ::operator /= (const Vector < T > &rhs)
[4.022s] 3: +  {
[4.022s] 3: +    if (this->size() != rhs.size()) {
[4.022s] 3: +      throw std::logic_error("Operator/=: vectors have different sizes");
[4.022s] 3: +    }
[4.022s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.022s] 3: +      v[i] /= rhs[i];
[4.022s] 3: +    }
[4.022s] 3: +
[4.022s] 3: +    return *this;
[4.022s] 3: +  }
[4.023s] 3: +
[4.023s] 3: +
[4.023s] 3: +  template < typename T >
[4.023s] 3: +  inline Vector < T > & Vector < T > ::operator /= (const T & a)
[4.023s] 3: +  {
[4.023s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.023s] 3: +      v[i] /= a;
[4.023s] 3: +    }
[4.023s] 3: +
[4.023s] 3: +    return *this;
[4.023s] 3: +  }
[4.023s] 3: +
[4.023s] 3: +  template < typename T >
[4.023s] 3: +  inline Vector < T > operator / (const Vector < T > &lhs, const Vector < T > &rhs)
[4.023s] 3: +  {
[4.023s] 3: +    if (lhs.size() != rhs.size()) {
[4.023s] 3: +      throw std::logic_error("Operator/: vectors have different sizes");
[4.023s] 3: +    }
[4.023s] 3: +    Vector < T > tmp(lhs.size());
[4.023s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.023s] 3: +      tmp[i] = lhs[i] / rhs[i];
[4.024s] 3: +    }
[4.024s] 3: +
[4.024s] 3: +    return tmp;
[4.024s] 3: +  }
[4.024s] 3: +
[4.024s] 3: +  template < typename T >
[4.024s] 3: +  inline Vector < T > operator / (const Vector < T > &lhs, const T & a)
[4.024s] 3: +  {
[4.024s] 3: +    Vector < T > tmp(lhs.size());
[4.024s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.024s] 3: +      tmp[i] = lhs[i] / a;
[4.024s] 3: +    }
[4.024s] 3: +
[4.024s] 3: +    return tmp;
[4.024s] 3: +  }
[4.024s] 3: +
[4.024s] 3: +  template < typename T >
[4.024s] 3: +  inline Vector < T > operator / (const T & a, const Vector < T > &rhs)
[4.024s] 3: +  {
[4.024s] 3: +    Vector < T > tmp(rhs.size());
[4.025s] 3: +    for (unsigned int i = 0; i < rhs.size(); i++) {
[4.025s] 3: +      tmp[i] = a / rhs[i];
[4.025s] 3: +    }
[4.025s] 3: +
[4.025s] 3: +    return tmp;
[4.025s] 3: +  }
[4.025s] 3: +
[4.025s] 3: +  template < typename T >
[4.025s] 3: +  inline Vector < T > operator ^ (const Vector < T > &lhs, const Vector < T > &rhs)
[4.025s] 3: +  {
[4.025s] 3: +    if (lhs.size() != rhs.size()) {
[4.025s] 3: +      throw std::logic_error("Operator^: vectors have different sizes");
[4.025s] 3: +    }
[4.025s] 3: +    Vector < T > tmp(lhs.size());
[4.025s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.025s] 3: +      tmp[i] = pow(lhs[i], rhs[i]);
[4.025s] 3: +    }
[4.025s] 3: +
[4.025s] 3: +    return tmp;
[4.025s] 3: +  }
[4.026s] 3: +
[4.026s] 3: +  template < typename T >
[4.026s] 3: +  inline Vector < T > operator ^ (const Vector < T > &lhs, const T & a)
[4.026s] 3: +  {
[4.026s] 3: +    Vector < T > tmp(lhs.size());
[4.026s] 3: +    for (unsigned int i = 0; i < lhs.size(); i++) {
[4.026s] 3: +      tmp[i] = pow(lhs[i], a);
[4.026s] 3: +    }
[4.026s] 3: +
[4.026s] 3: +    return tmp;
[4.026s] 3: +  }
[4.026s] 3: +
[4.026s] 3: +  template < typename T >
[4.026s] 3: +  inline Vector < T > operator ^ (const T & a, const Vector < T > &rhs)
[4.026s] 3: +  {
[4.027s] 3: +    Vector < T > tmp(rhs.size());
[4.027s] 3: +    for (unsigned int i = 0; i < rhs.size(); i++) {
[4.027s] 3: +      tmp[i] = pow(a, rhs[i]);
[4.027s] 3: +    }
[4.027s] 3: +
[4.027s] 3: +    return tmp;
[4.027s] 3: +  }
[4.027s] 3: +
[4.027s] 3: +  template < typename T >
[4.027s] 3: +  inline Vector < T > & Vector < T > ::operator ^= (const Vector < T > &rhs)
[4.028s] 3: +  {
[4.028s] 3: +    if (this->size() != rhs.size()) {
[4.028s] 3: +      throw std::logic_error("Operator^=: vectors have different sizes");
[4.028s] 3: +    }
[4.028s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.028s] 3: +      v[i] = pow(v[i], rhs[i]);
[4.028s] 3: +    }
[4.028s] 3: +
[4.028s] 3: +    return *this;
[4.028s] 3: +  }
[4.028s] 3: +
[4.029s] 3: +  template < typename T >
[4.029s] 3: +  inline Vector < T > & Vector < T > ::operator ^= (const T & a)
[4.029s] 3: +  {
[4.029s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.029s] 3: +      v[i] = pow(v[i], a);
[4.029s] 3: +    }
[4.029s] 3: +
[4.029s] 3: +    return *this;
[4.029s] 3: +  }
[4.029s] 3: +
[4.029s] 3: +  template < typename T >
[4.030s] 3: +  inline bool operator == (const Vector < T > &v, const Vector < T > &w)
[4.030s] 3: +  {
[4.030s] 3: +    if (v.size() != w.size()) {
[4.030s] 3: +      throw std::logic_error("Vectors of different size are not confrontable");
[4.030s] 3: +    }
[4.030s] 3: +    for (unsigned i = 0; i < v.size(); i++) {
[4.030s] 3: +      if (v[i] != w[i]) {
[4.030s] 3: +        return false;
[4.030s] 3: +      }
[4.030s] 3: +    }
[4.031s] 3: +    return true;
[4.031s] 3: +  }
[4.031s] 3: +
[4.031s] 3: +  template < typename T >
[4.031s] 3: +  inline bool operator != (const Vector < T > &v, const Vector < T > &w)
[4.031s] 3: +  {
[4.031s] 3: +    if (v.size() != w.size()) {
[4.031s] 3: +      throw std::logic_error("Vectors of different size are not confrontable");
[4.031s] 3: +    }
[4.031s] 3: +    for (unsigned i = 0; i < v.size(); i++) {
[4.031s] 3: +      if (v[i] != w[i]) {
[4.031s] 3: +        return true;
[4.031s] 3: +      }
[4.031s] 3: +    }
[4.031s] 3: +    return false;
[4.031s] 3: +  }
[4.031s] 3: +
[4.032s] 3: +  template < typename T >
[4.032s] 3: +  inline bool operator < (const Vector < T > &v, const Vector < T > &w)
[4.032s] 3: +  {
[4.032s] 3: +    if (v.size() != w.size()) {
[4.032s] 3: +      throw std::logic_error("Vectors of different size are not confrontable");
[4.032s] 3: +    }
[4.032s] 3: +    for (unsigned i = 0; i < v.size(); i++) {
[4.032s] 3: +      if (v[i] >= w[i]) {
[4.032s] 3: +        return false;
[4.032s] 3: +      }
[4.032s] 3: +    }
[4.032s] 3: +    return true;
[4.032s] 3: +  }
[4.032s] 3: +
[4.032s] 3: +  template < typename T >
[4.032s] 3: +  inline bool operator <= (const Vector < T > &v, const Vector < T > &w)
[4.033s] 3: +  {
[4.033s] 3: +    if (v.size() != w.size()) {
[4.033s] 3: +      throw std::logic_error("Vectors of different size are not confrontable");
[4.033s] 3: +    }
[4.033s] 3: +    for (unsigned i = 0; i < v.size(); i++) {
[4.033s] 3: +      if (v[i] > w[i]) {
[4.033s] 3: +        return false;
[4.033s] 3: +      }
[4.033s] 3: +    }
[4.033s] 3: +    return true;
[4.033s] 3: +  }
[4.033s] 3: +
[4.033s] 3: +  template < typename T >
[4.033s] 3: +  inline bool operator > (const Vector < T > &v, const Vector < T > &w)
[4.033s] 3: +  {
[4.033s] 3: +    if (v.size() != w.size()) {
[4.033s] 3: +      throw std::logic_error("Vectors of different size are not confrontable");
[4.033s] 3: +    }
[4.033s] 3: +    for (unsigned i = 0; i < v.size(); i++) {
[4.034s] 3: +      if (v[i] <= w[i]) {
[4.034s] 3: +        return false;
[4.034s] 3: +      }
[4.034s] 3: +    }
[4.034s] 3: +    return true;
[4.034s] 3: +  }
[4.034s] 3: +
[4.034s] 3: +  template < typename T >
[4.034s] 3: +  inline bool operator >= (const Vector < T > &v, const Vector < T > &w)
[4.034s] 3: +  {
[4.034s] 3: +    if (v.size() != w.size()) {
[4.034s] 3: +      throw std::logic_error("Vectors of different size are not confrontable");
[4.034s] 3: +    }
[4.034s] 3: +    for (unsigned i = 0; i < v.size(); i++) {
[4.034s] 3: +      if (v[i] < w[i]) {
[4.034s] 3: +        return false;
[4.034s] 3: +      }
[4.034s] 3: +    }
[4.034s] 3: +    return true;
[4.034s] 3: +  }
[4.034s] 3: @@ -534 +600 @@
[4.035s] 3: -   Input/Output 
[4.035s] 3: +   Input/Output
[4.035s] 3: @@ -536,35 +602,37 @@
[4.035s] 3: -template <typename T>
[4.035s] 3: -inline std::ostream& operator<<(std::ostream& os, const Vector<T>& v)
[4.035s] 3: -{
[4.035s] 3: -  os << std::endl << v.size() << std::endl;
[4.035s] 3: -  for (unsigned int i = 0; i < v.size() - 1; i++)
[4.035s] 3: -    os << std::setw(20) << std::setprecision(16) << v[i] << ", ";
[4.035s] 3: -  os << std::setw(20) << std::setprecision(16) << v[v.size() - 1] << std::endl;
[4.035s] 3: -	
[4.035s] 3: -  return os;
[4.035s] 3: -}
[4.035s] 3: -
[4.035s] 3: -template <typename T>
[4.035s] 3: -std::istream& operator>>(std::istream& is, Vector<T>& v)
[4.035s] 3: -{
[4.035s] 3: -  int elements;
[4.035s] 3: -  char comma;
[4.035s] 3: -  is >> elements;
[4.035s] 3: -  v.resize(elements);
[4.036s] 3: -  for (unsigned int i = 0; i < elements; i++)
[4.036s] 3: -    is >> v[i] >> comma;
[4.036s] 3: -	
[4.036s] 3: -  return is;
[4.036s] 3: -}
[4.036s] 3: -
[4.036s] 3: -/**
[4.036s] 3: -   Index utilities
[4.036s] 3: -*/
[4.036s] 3: -
[4.036s] 3: -std::set<unsigned int> seq(unsigned int s, unsigned int e);
[4.036s] 3: -
[4.036s] 3: -std::set<unsigned int> singleton(unsigned int i);
[4.036s] 3: -
[4.036s] 3: -template <typename T>
[4.036s] 3: -class CanonicalBaseVector : public Vector<T>
[4.036s] 3: -{
[4.036s] 3: +  template < typename T >
[4.037s] 3: +  inline std::ostream & operator << (std::ostream & os, const Vector < T > &v)
[4.037s] 3: +      {
[4.037s] 3: +      os << std::endl << v.size() << std::endl;
[4.037s] 3: +      for (unsigned int i = 0; i < v.size() - 1; i++) {
[4.037s] 3: +        os << std::setw(20) << std::setprecision(16) << v[i] << ", ";
[4.037s] 3: +      }
[4.037s] 3: +      os << std::setw(20) << std::setprecision(16) << v[v.size() - 1] << std::endl;
[4.037s] 3: +
[4.037s] 3: +      return os;
[4.037s] 3: +    }
[4.037s] 3: +
[4.037s] 3: +    template < typename T >
[4.037s] 3: +    std::istream & operator >> (std::istream & is, Vector < T > &v)
[4.037s] 3: +      {
[4.037s] 3: +      int elements;
[4.037s] 3: +      char comma;
[4.037s] 3: +      is >> elements;
[4.037s] 3: +      v.resize(elements);
[4.038s] 3: +      for (unsigned int i = 0; i < elements; i++) {
[4.038s] 3: +        is >> v[i] >> comma;
[4.038s] 3: +      }
[4.038s] 3: +
[4.038s] 3: +      return is;
[4.038s] 3: +    }
[4.038s] 3: +
[4.038s] 3: +    /**
[4.038s] 3: +       Index utilities
[4.038s] 3: +    */
[4.038s] 3: +
[4.038s] 3: +    std::set < unsigned int > seq(unsigned int s, unsigned int e);
[4.038s] 3: +
[4.038s] 3: +  std::set < unsigned int > singleton(unsigned int i);
[4.038s] 3: +
[4.038s] 3: +  template < typename T >
[4.038s] 3: +  class CanonicalBaseVector: public Vector < T >
[4.038s] 3: +  {
[4.038s] 3: @@ -572,2 +640,3 @@
[4.038s] 3: -  CanonicalBaseVector(unsigned int i, unsigned int n);
[4.038s] 3: -  inline void reset(unsigned int i);
[4.039s] 3: +    CanonicalBaseVector(unsigned int i, unsigned int n);
[4.039s] 3: +    inline void reset(unsigned int i);
[4.039s] 3: +
[4.039s] 3: @@ -575,15 +644,17 @@
[4.039s] 3: -  unsigned int e;
[4.039s] 3: -};
[4.039s] 3: -
[4.039s] 3: -template <typename T>
[4.039s] 3: -CanonicalBaseVector<T>::CanonicalBaseVector(unsigned int i, unsigned int n)
[4.039s] 3: -  : Vector<T>((T)0, n), e(i)
[4.039s] 3: -{ (*this)[e] = (T)1; }
[4.039s] 3: -
[4.039s] 3: -template <typename T>
[4.039s] 3: -inline void CanonicalBaseVector<T>::reset(unsigned int i)
[4.039s] 3: -{ 
[4.039s] 3: -  (*this)[e] = (T)0; 
[4.039s] 3: -  e = i; 
[4.039s] 3: -  (*this)[e] = (T)1;
[4.039s] 3: -}
[4.039s] 3: +    unsigned int e;
[4.040s] 3: +  }
[4.040s] 3: +
[4.040s] 3: +  template < typename T >
[4.040s] 3: +  CanonicalBaseVector < T > ::CanonicalBaseVector(unsigned int i, unsigned int n)
[4.040s] 3: +    : Vector < T > ((T)0, n), e(i)
[4.040s] 3: +  {
[4.040s] 3: +    (*this)[e] = (T)1;
[4.040s] 3: +  }
[4.040s] 3: +
[4.040s] 3: +  template < typename T >
[4.040s] 3: +  inline void CanonicalBaseVector < T > ::reset(unsigned int i)
[4.040s] 3: +  {
[4.040s] 3: +    (*this)[e] = (T)0;
[4.040s] 3: +    e = i;
[4.040s] 3: +    (*this)[e] = (T)1;
[4.040s] 3: +  }
[4.040s] 3: @@ -593,52 +664,55 @@
[4.041s] 3: -template <typename T>
[4.041s] 3: -inline T sum(const Vector<T>& v)
[4.041s] 3: -{
[4.041s] 3: -  T tmp = (T)0;
[4.041s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.041s] 3: -    tmp += v[i];
[4.041s] 3: -	
[4.041s] 3: -  return tmp;
[4.041s] 3: -}
[4.041s] 3: -
[4.041s] 3: -template <typename T>
[4.041s] 3: -inline T prod(const Vector<T>& v)
[4.041s] 3: -{
[4.041s] 3: -  T tmp = (T)1;
[4.041s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.041s] 3: -    tmp *= v[i];
[4.041s] 3: -	
[4.041s] 3: -  return tmp;
[4.041s] 3: -}
[4.041s] 3: -
[4.041s] 3: -template <typename T>
[4.042s] 3: -inline T mean(const Vector<T>& v)
[4.042s] 3: -{
[4.042s] 3: -  T sum = (T)0;
[4.042s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.042s] 3: -    sum += v[i];
[4.042s] 3: -  return sum / v.size();
[4.042s] 3: -}
[4.042s] 3: -
[4.042s] 3: -template <typename T>
[4.042s] 3: -inline T median(const Vector<T>& v)
[4.042s] 3: -{
[4.042s] 3: -  Vector<T> tmp = sort(v);
[4.042s] 3: -  if (v.size() % 2 == 1) // it is an odd-sized vector
[4.042s] 3: -    return tmp[v.size() / 2];
[4.042s] 3: -  else
[4.043s] 3: -    return 0.5 * (tmp[v.size() / 2 - 1] + tmp[v.size() / 2]);
[4.043s] 3: -}
[4.043s] 3: -
[4.043s] 3: -template <typename T>
[4.043s] 3: -inline T stdev(const Vector<T>& v, bool sample_correction = false)
[4.043s] 3: -{
[4.043s] 3: -  return sqrt(var(v, sample_correction));
[4.043s] 3: -}
[4.043s] 3: -
[4.043s] 3: -template <typename T>
[4.043s] 3: -inline T var(const Vector<T>& v, bool sample_correction = false)
[4.043s] 3: -{
[4.043s] 3: -  T sum = (T)0, ssum = (T)0;
[4.043s] 3: -  unsigned int n = v.size();
[4.043s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.043s] 3: -    {	
[4.043s] 3: +  template < typename T >
[4.043s] 3: +  inline T sum(const Vector < T > & v)
[4.043s] 3: +  {
[4.043s] 3: +    T tmp = (T)0;
[4.043s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.043s] 3: +      tmp += v[i];
[4.043s] 3: +    }
[4.044s] 3: +
[4.044s] 3: +    return tmp;
[4.044s] 3: +  }
[4.044s] 3: +
[4.044s] 3: +  template < typename T >
[4.044s] 3: +  inline T prod(const Vector < T > & v)
[4.044s] 3: +  {
[4.044s] 3: +    T tmp = (T)1;
[4.044s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.044s] 3: +      tmp *= v[i];
[4.044s] 3: +    }
[4.044s] 3: +
[4.044s] 3: +    return tmp;
[4.044s] 3: +  }
[4.044s] 3: +
[4.044s] 3: +  template < typename T >
[4.044s] 3: +  inline T mean(const Vector < T > & v)
[4.044s] 3: +  {
[4.044s] 3: +    T sum = (T)0;
[4.044s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.044s] 3: +      sum += v[i];
[4.044s] 3: +    }
[4.045s] 3: +    return sum / v.size();
[4.045s] 3: +  }
[4.045s] 3: +
[4.045s] 3: +  template < typename T >
[4.045s] 3: +  inline T median(const Vector < T > & v)
[4.045s] 3: +  {
[4.045s] 3: +    Vector < T > tmp = sort(v);
[4.045s] 3: +    if (v.size() % 2 == 1) { // it is an odd-sized vector
[4.045s] 3: +      return tmp[v.size() / 2];
[4.045s] 3: +    } else {
[4.045s] 3: +      return 0.5 * (tmp[v.size() / 2 - 1] + tmp[v.size() / 2]);
[4.045s] 3: +    }
[4.045s] 3: +  }
[4.045s] 3: +
[4.045s] 3: +  template < typename T >
[4.045s] 3: +  inline T stdev(const Vector < T > & v, bool sample_correction = false)
[4.045s] 3: +  {
[4.045s] 3: +    return sqrt(var(v, sample_correction));
[4.045s] 3: +  }
[4.045s] 3: +
[4.046s] 3: +  template < typename T >
[4.046s] 3: +  inline T var(const Vector < T > & v, bool sample_correction = false)
[4.046s] 3: +  {
[4.046s] 3: +    T sum = (T)0, ssum = (T)0;
[4.046s] 3: +    unsigned int n = v.size();
[4.046s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.046s] 3: @@ -648,60 +722,69 @@
[4.046s] 3: -  if (!sample_correction)
[4.046s] 3: -    return (ssum / n) - (sum / n) * (sum / n);
[4.046s] 3: -  else
[4.046s] 3: -    return n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);
[4.046s] 3: -}
[4.046s] 3: -
[4.046s] 3: -template <typename T>
[4.046s] 3: -inline T max(const Vector<T>& v)
[4.046s] 3: -{
[4.047s] 3: -  T value = v[0];
[4.047s] 3: -  for (unsigned int i = 1; i < v.size(); i++)
[4.047s] 3: -    value = std::max(v[i], value);
[4.047s] 3: -	
[4.047s] 3: -  return value;
[4.047s] 3: -}
[4.047s] 3: -
[4.047s] 3: -template <typename T>
[4.047s] 3: -inline T min(const Vector<T>& v)
[4.047s] 3: -{
[4.047s] 3: -  T value = v[0];
[4.047s] 3: -  for (unsigned int i = 1; i < v.size(); i++)
[4.047s] 3: -    value = std::min(v[i], value);
[4.047s] 3: -	
[4.047s] 3: -  return value;
[4.047s] 3: -}
[4.047s] 3: -
[4.047s] 3: -template <typename T>
[4.047s] 3: -inline unsigned int index_max(const Vector<T>& v)
[4.047s] 3: -{
[4.047s] 3: -  unsigned int max = 0;
[4.048s] 3: -  for (unsigned int i = 1; i < v.size(); i++)
[4.048s] 3: -    if (v[i] > v[max])
[4.048s] 3: -      max = i;
[4.048s] 3: -	
[4.048s] 3: -  return max;
[4.048s] 3: -}
[4.048s] 3: -
[4.048s] 3: -template <typename T>
[4.048s] 3: -inline unsigned int index_min(const Vector<T>& v)
[4.048s] 3: -{
[4.048s] 3: -  unsigned int min = 0;
[4.048s] 3: -  for (unsigned int i = 1; i < v.size(); i++)
[4.048s] 3: -    if (v[i] < v[min])
[4.048s] 3: -      min = i;
[4.048s] 3: -	
[4.048s] 3: -  return min;
[4.048s] 3: -}
[4.048s] 3: -
[4.048s] 3: -
[4.048s] 3: -template <typename T>
[4.049s] 3: -inline T dot_prod(const Vector<T>& a, const Vector<T>& b)
[4.049s] 3: -{
[4.049s] 3: -  T sum = (T)0;
[4.049s] 3: -  if (a.size() != b.size())
[4.049s] 3: -    throw std::logic_error("Dotprod error: the vectors are not the same size");
[4.049s] 3: -  for (unsigned int i = 0; i < a.size(); i++)
[4.049s] 3: -    sum += a[i] * b[i];
[4.049s] 3: -	
[4.049s] 3: -  return sum;
[4.049s] 3: -}
[4.049s] 3: +    if (!sample_correction) {
[4.049s] 3: +      return (ssum / n) - (sum / n) * (sum / n);
[4.049s] 3: +    } else {
[4.049s] 3: +      return n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);
[4.049s] 3: +    }
[4.049s] 3: +  }
[4.049s] 3: +
[4.049s] 3: +  template < typename T >
[4.049s] 3: +  inline T max(const Vector < T > & v)
[4.049s] 3: +  {
[4.050s] 3: +    T value = v[0];
[4.050s] 3: +    for (unsigned int i = 1; i < v.size(); i++) {
[4.050s] 3: +      value = std::max(v[i], value);
[4.050s] 3: +    }
[4.050s] 3: +
[4.050s] 3: +    return value;
[4.050s] 3: +  }
[4.050s] 3: +
[4.050s] 3: +  template < typename T >
[4.050s] 3: +  inline T min(const Vector < T > & v)
[4.050s] 3: +  {
[4.050s] 3: +    T value = v[0];
[4.050s] 3: +    for (unsigned int i = 1; i < v.size(); i++) {
[4.050s] 3: +      value = std::min(v[i], value);
[4.050s] 3: +    }
[4.050s] 3: +
[4.050s] 3: +    return value;
[4.050s] 3: +  }
[4.050s] 3: +
[4.050s] 3: +  template < typename T >
[4.051s] 3: +  inline unsigned int index_max(const Vector < T > & v)
[4.051s] 3: +  {
[4.051s] 3: +    unsigned int max = 0;
[4.051s] 3: +    for (unsigned int i = 1; i < v.size(); i++) {
[4.051s] 3: +      if (v[i] > v[max]) {
[4.051s] 3: +        max = i;
[4.051s] 3: +      }
[4.051s] 3: +    }
[4.051s] 3: +
[4.051s] 3: +    return max;
[4.051s] 3: +  }
[4.051s] 3: +
[4.051s] 3: +  template < typename T >
[4.051s] 3: +  inline unsigned int index_min(const Vector < T > & v)
[4.051s] 3: +  {
[4.051s] 3: +    unsigned int min = 0;
[4.051s] 3: +    for (unsigned int i = 1; i < v.size(); i++) {
[4.051s] 3: +      if (v[i] < v[min]) {
[4.051s] 3: +        min = i;
[4.051s] 3: +      }
[4.052s] 3: +    }
[4.052s] 3: +
[4.052s] 3: +    return min;
[4.052s] 3: +  }
[4.052s] 3: +
[4.052s] 3: +
[4.052s] 3: +  template < typename T >
[4.052s] 3: +  inline T dot_prod(const Vector < T > & a, const Vector < T > & b)
[4.052s] 3: +  {
[4.052s] 3: +    T sum = (T)0;
[4.052s] 3: +    if (a.size() != b.size()) {
[4.052s] 3: +      throw std::logic_error("Dotprod error: the vectors are not the same size");
[4.052s] 3: +    }
[4.052s] 3: +    for (unsigned int i = 0; i < a.size(); i++) {
[4.052s] 3: +      sum += a[i] * b[i];
[4.052s] 3: +    }
[4.052s] 3: +
[4.052s] 3: +    return sum;
[4.052s] 3: +  }
[4.052s] 3: @@ -713,67 +796,72 @@
[4.053s] 3: -template <typename T>
[4.053s] 3: -inline Vector<T> exp(const Vector<T>& v)
[4.053s] 3: -{
[4.053s] 3: -  Vector<T> tmp(v.size());
[4.053s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.053s] 3: -    tmp[i] = exp(v[i]);
[4.053s] 3: -	
[4.053s] 3: -  return tmp;
[4.053s] 3: -}
[4.053s] 3: -
[4.053s] 3: -template <typename T>
[4.053s] 3: -inline Vector<T> log(const Vector<T>& v)
[4.053s] 3: -{
[4.053s] 3: -  Vector<T> tmp(v.size());
[4.053s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.053s] 3: -    tmp[i] = log(v[i]);
[4.053s] 3: -	
[4.053s] 3: -  return tmp;
[4.053s] 3: -}
[4.053s] 3: -
[4.054s] 3: -template <typename T>
[4.054s] 3: -inline Vector<T> vec_sqrt(const Vector<T>& v)
[4.054s] 3: -{
[4.054s] 3: -  Vector<T> tmp(v.size());
[4.054s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.054s] 3: -    tmp[i] = sqrt(v[i]);
[4.054s] 3: -	
[4.054s] 3: -  return tmp;
[4.054s] 3: -}
[4.054s] 3: -
[4.054s] 3: -template <typename T>
[4.054s] 3: -inline Vector<T> pow(const Vector<T>& v, double a)
[4.054s] 3: -{
[4.054s] 3: -  Vector<T> tmp(v.size());
[4.054s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.054s] 3: -    tmp[i] = pow(v[i], a);
[4.054s] 3: -	
[4.054s] 3: -  return tmp;
[4.054s] 3: -}
[4.054s] 3: -
[4.055s] 3: -template <typename T>
[4.055s] 3: -inline Vector<T> abs(const Vector<T>& v)
[4.055s] 3: -{
[4.055s] 3: -  Vector<T> tmp(v.size());
[4.055s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.055s] 3: -    tmp[i] = (T)fabs(v[i]);
[4.055s] 3: -	
[4.055s] 3: -  return tmp;
[4.055s] 3: -}
[4.055s] 3: -
[4.055s] 3: -template <typename T>
[4.055s] 3: -inline Vector<T> sign(const Vector<T>& v)
[4.055s] 3: -{
[4.055s] 3: -  Vector<T> tmp(v.size());
[4.055s] 3: -  for (unsigned int i = 0; i < v.size(); i++)
[4.055s] 3: -    tmp[i] = v[i] > 0 ? +1 : v[i] == 0 ? 0 : -1;
[4.055s] 3: -	
[4.055s] 3: -  return tmp;
[4.056s] 3: -}
[4.056s] 3: -
[4.056s] 3: -template <typename T>
[4.056s] 3: -inline unsigned int partition(Vector<T>& v, unsigned int begin, unsigned int end)
[4.056s] 3: -{
[4.056s] 3: -  unsigned int i = begin + 1, j = begin + 1;
[4.056s] 3: -  T pivot = v[begin];
[4.056s] 3: -  while (j <= end) 
[4.056s] 3: -    {
[4.056s] 3: +  template < typename T >
[4.056s] 3: +  inline Vector < T > exp(const Vector < T > &v)
[4.056s] 3: +  {
[4.056s] 3: +    Vector < T > tmp(v.size());
[4.056s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.056s] 3: +      tmp[i] = exp(v[i]);
[4.056s] 3: +    }
[4.056s] 3: +
[4.056s] 3: +    return tmp;
[4.056s] 3: +  }
[4.056s] 3: +
[4.057s] 3: +  template < typename T >
[4.057s] 3: +  inline Vector < T > log(const Vector < T > &v)
[4.057s] 3: +  {
[4.057s] 3: +    Vector < T > tmp(v.size());
[4.057s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.057s] 3: +      tmp[i] = log(v[i]);
[4.057s] 3: +    }
[4.057s] 3: +
[4.057s] 3: +    return tmp;
[4.057s] 3: +  }
[4.057s] 3: +
[4.057s] 3: +  template < typename T >
[4.057s] 3: +  inline Vector < T > vec_sqrt(const Vector < T > &v)
[4.057s] 3: +  {
[4.057s] 3: +    Vector < T > tmp(v.size());
[4.057s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.057s] 3: +      tmp[i] = sqrt(v[i]);
[4.058s] 3: +    }
[4.058s] 3: +
[4.058s] 3: +    return tmp;
[4.058s] 3: +  }
[4.058s] 3: +
[4.058s] 3: +  template < typename T >
[4.058s] 3: +  inline Vector < T > pow(const Vector < T > &v, double a)
[4.058s] 3: +  {
[4.058s] 3: +    Vector < T > tmp(v.size());
[4.058s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.058s] 3: +      tmp[i] = pow(v[i], a);
[4.058s] 3: +    }
[4.058s] 3: +
[4.058s] 3: +    return tmp;
[4.058s] 3: +  }
[4.058s] 3: +
[4.058s] 3: +  template < typename T >
[4.058s] 3: +  inline Vector < T > abs(const Vector < T > &v)
[4.058s] 3: +  {
[4.059s] 3: +    Vector < T > tmp(v.size());
[4.059s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.059s] 3: +      tmp[i] = (T)fabs(v[i]);
[4.059s] 3: +    }
[4.059s] 3: +
[4.059s] 3: +    return tmp;
[4.059s] 3: +  }
[4.059s] 3: +
[4.059s] 3: +  template < typename T >
[4.059s] 3: +  inline Vector < T > sign(const Vector < T > &v)
[4.059s] 3: +  {
[4.059s] 3: +    Vector < T > tmp(v.size());
[4.059s] 3: +    for (unsigned int i = 0; i < v.size(); i++) {
[4.059s] 3: +      tmp[i] = v[i] > 0 ? +1 : v[i] == 0 ? 0 : -1;
[4.059s] 3: +    }
[4.059s] 3: +
[4.059s] 3: +    return tmp;
[4.059s] 3: +  }
[4.059s] 3: +
[4.059s] 3: +  template < typename T >
[4.060s] 3: +  inline unsigned int partition(Vector < T > & v, unsigned int begin, unsigned int end)
[4.060s] 3: +  {
[4.060s] 3: +    unsigned int i = begin + 1, j = begin + 1;
[4.060s] 3: +    T pivot = v[begin];
[4.060s] 3: +    while (j <= end) {
[4.060s] 3: @@ -781,2 +869,2 @@
[4.060s] 3: -	std::swap(v[i], v[j]);
[4.060s] 3: -	i++;
[4.060s] 3: +        std::swap(v[i], v[j]);
[4.060s] 3: +        i++;
[4.060s] 3: @@ -786,11 +874,10 @@
[4.060s] 3: -  v[begin] = v[i - 1];
[4.060s] 3: -  v[i - 1] = pivot;
[4.060s] 3: -  return i - 2;
[4.060s] 3: -}
[4.060s] 3: -	
[4.060s] 3: -
[4.060s] 3: -template <typename T>
[4.060s] 3: -inline void quicksort(Vector<T>& v, unsigned int begin, unsigned int end)
[4.061s] 3: -{
[4.061s] 3: -  if (end > begin)
[4.061s] 3: -    {
[4.061s] 3: +    v[begin] = v[i - 1];
[4.061s] 3: +    v[i - 1] = pivot;
[4.061s] 3: +    return i - 2;
[4.061s] 3: +  }
[4.061s] 3: +
[4.061s] 3: +
[4.061s] 3: +  template < typename T >
[4.061s] 3: +  inline void quicksort(Vector < T > & v, unsigned int begin, unsigned int end)
[4.061s] 3: +  {
[4.061s] 3: +    if (end > begin) {
[4.061s] 3: @@ -801,19 +888,341 @@
[4.061s] 3: -}
[4.061s] 3: -
[4.061s] 3: -template <typename T>
[4.061s] 3: -inline Vector<T> sort(const Vector<T>& v)
[4.061s] 3: -{
[4.062s] 3: -  Vector<T> tmp(v);
[4.062s] 3: -  
[4.062s] 3: -  quicksort<T>(tmp, 0, tmp.size() - 1);
[4.062s] 3: -  
[4.062s] 3: -  return tmp;
[4.062s] 3: -}
[4.062s] 3: -
[4.062s] 3: -template <typename T>
[4.062s] 3: -inline Vector<double> rank(const Vector<T>& v)
[4.062s] 3: -{
[4.062s] 3: -  Vector<T> tmp(v);
[4.062s] 3: -  Vector<double> tmp_rank(0.0, v.size());	
[4.062s] 3: -	
[4.062s] 3: -  for (unsigned int i = 0; i < tmp.size(); i++)
[4.062s] 3: +  }
[4.062s] 3: +
[4.062s] 3: +  template < typename T >
[4.062s] 3: +  inline Vector < T > sort(const Vector < T > &v)
[4.062s] 3: +  {
[4.062s] 3: +    Vector < T > tmp(v);
[4.062s] 3: +
[4.062s] 3: +    quicksort < T > (tmp, 0, tmp.size() - 1);
[4.063s] 3: +
[4.063s] 3: +    return tmp;
[4.063s] 3: +  }
[4.063s] 3: +
[4.063s] 3: +  template < typename T >
[4.063s] 3: +  inline Vector < double > rank(const Vector < T > &v)
[4.063s] 3: +  {
[4.063s] 3: +    Vector < T > tmp(v);
[4.063s] 3: +    Vector < double > tmp_rank(0.0, v.size());
[4.063s] 3: +
[4.063s] 3: +    for (unsigned int i = 0; i < tmp.size(); i++) {
[4.063s] 3: +      unsigned int smaller = 0, equal = 0;
[4.063s] 3: +      for (unsigned int j = 0; j < tmp.size(); j++) {
[4.063s] 3: +        if (i == j) {
[4.063s] 3: +          continue;
[4.063s] 3: +        } else if (tmp[j] < tmp[i]) {
[4.063s] 3: +          smaller++;
[4.063s] 3: +        } else if (tmp[j] == tmp[i]) {
[4.063s] 3: +          equal++;
[4.063s] 3: +        }
[4.063s] 3: +      }
[4.063s] 3: +      tmp_rank[i] = smaller + 1;
[4.064s] 3: +      if (equal > 0) {
[4.064s] 3: +        for (unsigned int j = 1; j <= equal; j++) {
[4.064s] 3: +          tmp_rank[i] += smaller + 1 + j;
[4.064s] 3: +        }
[4.064s] 3: +        tmp_rank[i] /= (double)(equal + 1);
[4.064s] 3: +      }
[4.064s] 3: +    }
[4.064s] 3: +
[4.064s] 3: +    return tmp_rank;
[4.064s] 3: +  }
[4.064s] 3: +
[4.064s] 3: +//enum MType { DIAG };
[4.064s] 3: +
[4.064s] 3: +  template < typename T >
[4.064s] 3: +  class Matrix
[4.064s] 3: +  {
[4.064s] 3: +public:
[4.064s] 3: +    Matrix(); // Default constructor
[4.064s] 3: +    Matrix(const unsigned int n, const unsigned int m); // Construct a n x m matrix
[4.064s] 3: +    Matrix(const T & a, const unsigned int n, const unsigned int m); // Initialize the content to constant a
[4.064s] 3: +    Matrix(MType t, const T & a, const T & o, const unsigned int n, const unsigned int m);
[4.065s] 3: +    Matrix(MType t, const Vector < T > &v, const T & o, const unsigned int n, const unsigned int m);
[4.065s] 3: +    Matrix(const T * a, const unsigned int n, const unsigned int m); // Initialize to array
[4.065s] 3: +    Matrix(const Matrix < T > &rhs); // Copy constructor
[4.065s] 3: +    ~Matrix(); // destructor
[4.065s] 3: +
[4.065s] 3: +    inline T * operator[] (const unsigned int & i) {return v[i];} // Subscripting: row i
[4.065s] 3: +    inline const T * operator[] (const unsigned int & i) const {return v[i];} // const subsctipting
[4.065s] 3: +
[4.065s] 3: +    inline void resize(const unsigned int n, const unsigned int m);
[4.065s] 3: +    inline void resize(const T & a, const unsigned int n, const unsigned int m);
[4.065s] 3: +
[4.065s] 3: +
[4.065s] 3: +    inline Vector < T > extractRow(const unsigned int i) const;
[4.065s] 3: +    inline Vector < T > extractColumn(const unsigned int j) const;
[4.065s] 3: +    inline Vector < T > extractDiag() const;
[4.065s] 3: +    inline Matrix < T > extractRows(const std::set < unsigned int > &indexes) const;
[4.065s] 3: +    inline Matrix < T > extractColumns(const std::set < unsigned int > &indexes) const;
[4.065s] 3: +    inline Matrix < T > extract(
[4.065s] 3: +      const std::set < unsigned int > &r_indexes,
[4.065s] 3: +      const std::set < unsigned int > &c_indexes) const;
[4.066s] 3: +
[4.066s] 3: +    inline void set(const T * a, unsigned int n, unsigned int m);
[4.066s] 3: +    inline void set(
[4.066s] 3: +      const std::set < unsigned int > & r_indexes,
[4.066s] 3: +      const std::set < unsigned int > & c_indexes, const Matrix < T > & m);
[4.066s] 3: +    inline void setRow(const unsigned int index, const Vector < T > & v);
[4.066s] 3: +    inline void setRow(const unsigned int index, const Matrix < T > & v);
[4.066s] 3: +    inline void setRows(const std::set < unsigned int > & indexes, const Matrix < T > & m);
[4.066s] 3: +    inline void setColumn(const unsigned int index, const Vector < T > & v);
[4.066s] 3: +    inline void setColumn(const unsigned int index, const Matrix < T > & v);
[4.066s] 3: +    inline void setColumns(const std::set < unsigned int > & indexes, const Matrix < T > & m);
[4.066s] 3: +
[4.066s] 3: +
[4.066s] 3: +    inline unsigned int nrows() const {return n;} // number of rows
[4.066s] 3: +    inline unsigned int ncols() const {return m;} // number of columns
[4.066s] 3: +
[4.066s] 3: +    inline Matrix < T > & operator = (const Matrix < T > &rhs); // Assignment operator
[4.066s] 3: +    inline Matrix < T > & operator = (const T & a); // Assign to every element value a
[4.066s] 3: +    inline Matrix < T > & operator += (const Matrix < T > &rhs);
[4.066s] 3: +    inline Matrix < T > & operator -= (const Matrix < T > &rhs);
[4.067s] 3: +    inline Matrix < T > & operator *= (const Matrix < T > &rhs);
[4.067s] 3: +    inline Matrix < T > & operator /= (const Matrix < T > &rhs);
[4.067s] 3: +    inline Matrix < T > & operator ^= (const Matrix < T > &rhs);
[4.067s] 3: +    inline Matrix < T > & operator += (const T & a);
[4.067s] 3: +    inline Matrix < T > & operator -= (const T & a);
[4.067s] 3: +    inline Matrix < T > & operator *= (const T & a);
[4.067s] 3: +    inline Matrix < T > & operator /= (const T & a);
[4.067s] 3: +    inline Matrix < T > & operator ^= (const T & a);
[4.067s] 3: +    inline operator Vector < T > ();
[4.067s] 3: +
[4.067s] 3: +private:
[4.067s] 3: +    unsigned int n; // number of rows
[4.067s] 3: +    unsigned int m; // number of columns
[4.067s] 3: +    T ** v; // storage for data
[4.067s] 3: +  };
[4.067s] 3: +
[4.067s] 3: +  template < typename T >
[4.067s] 3: +  Matrix < T > ::Matrix()
[4.067s] 3: +    : n(0), m(0), v(0)
[4.067s] 3: +  {
[4.068s] 3: +  }
[4.068s] 3: +
[4.068s] 3: +  template < typename T >
[4.068s] 3: +  Matrix < T > ::Matrix(unsigned int n, unsigned int m)
[4.068s] 3: +    : v(new T *[n])
[4.068s] 3: +  {
[4.068s] 3: +    this->n = n; this->m = m;
[4.068s] 3: +    v[0] = new T[m * n];
[4.068s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.068s] 3: +      v[i] = v[i - 1] + m;
[4.068s] 3: +    }
[4.068s] 3: +  }
[4.068s] 3: +
[4.068s] 3: +  template < typename T >
[4.068s] 3: +  Matrix < T > ::Matrix(const T & a, unsigned int n, unsigned int m)
[4.068s] 3: +    : v(new T *[n])
[4.068s] 3: +  {
[4.068s] 3: +    this->n = n; this->m = m;
[4.068s] 3: +    v[0] = new T[m * n];
[4.068s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.069s] 3: +      v[i] = v[i - 1] + m;
[4.069s] 3: +    }
[4.069s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.069s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.069s] 3: +        v[i][j] = a;
[4.069s] 3: +      }
[4.069s] 3: +    }
[4.069s] 3: +  }
[4.069s] 3: +
[4.069s] 3: +  template < class T >
[4.069s] 3: +  Matrix < T > ::Matrix(const T * a, unsigned int n, unsigned int m)
[4.069s] 3: +    : v(new T *[n])
[4.069s] 3: +  {
[4.069s] 3: +    this->n = n; this->m = m;
[4.069s] 3: +    v[0] = new T[m * n];
[4.069s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.069s] 3: +      v[i] = v[i - 1] + m;
[4.069s] 3: +    }
[4.069s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.069s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.069s] 3: +        v[i][j] = *a++;
[4.070s] 3: +      }
[4.070s] 3: +    }
[4.070s] 3: +  }
[4.070s] 3: +
[4.070s] 3: +  template < class T >
[4.070s] 3: +  Matrix < T > ::Matrix(MType t, const T & a, const T & o, unsigned int n, unsigned int m)
[4.070s] 3: +    : v(new T *[n])
[4.070s] 3: +  {
[4.070s] 3: +    this->n = n; this->m = m;
[4.070s] 3: +    v[0] = new T[m * n];
[4.070s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.070s] 3: +      v[i] = v[i - 1] + m;
[4.070s] 3: +    }
[4.070s] 3: +    switch (t) {
[4.070s] 3: +      case DIAG:
[4.070s] 3: +        for (unsigned int i = 0; i < n; i++) {
[4.070s] 3: +          for (unsigned int j = 0; j < m; j++) {
[4.070s] 3: +            if (i != j) {
[4.070s] 3: +              v[i][j] = o;
[4.070s] 3: +            } else {
[4.071s] 3: +              v[i][j] = a;
[4.071s] 3: +            }
[4.071s] 3: +          }
[4.071s] 3: +        }
[4.071s] 3: +        break;
[4.071s] 3: +      default:
[4.071s] 3: +        throw std::logic_error("Matrix type not supported");
[4.071s] 3: +    }
[4.071s] 3: +  }
[4.071s] 3: +
[4.071s] 3: +  template < class T >
[4.071s] 3: +  Matrix < T > ::Matrix(MType t, const Vector < T > &a, const T & o, unsigned int n, unsigned int m)
[4.071s] 3: +    : v(new T *[n])
[4.071s] 3: +  {
[4.071s] 3: +    this->n = n; this->m = m;
[4.072s] 3: +    v[0] = new T[m * n];
[4.072s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.072s] 3: +      v[i] = v[i - 1] + m;
[4.072s] 3: +    }
[4.072s] 3: +    switch (t) {
[4.072s] 3: +      case DIAG:
[4.072s] 3: +        for (unsigned int i = 0; i < n; i++) {
[4.072s] 3: +          for (unsigned int j = 0; j < m; j++) {
[4.072s] 3: +            if (i != j) {
[4.072s] 3: +              v[i][j] = o;
[4.072s] 3: +            } else {
[4.072s] 3: +              v[i][j] = a[i];
[4.072s] 3: +            }
[4.072s] 3: +          }
[4.072s] 3: +        }
[4.072s] 3: +        break;
[4.072s] 3: +      default:
[4.072s] 3: +        throw std::logic_error("Matrix type not supported");
[4.072s] 3: +    }
[4.073s] 3: +  }
[4.073s] 3: +
[4.073s] 3: +  template < typename T >
[4.073s] 3: +  Matrix < T > ::Matrix(const Matrix < T > &rhs)
[4.073s] 3: +    : v(new T *[rhs.n])
[4.073s] 3: +  {
[4.073s] 3: +    n = rhs.n; m = rhs.m;
[4.073s] 3: +    v[0] = new T[m * n];
[4.073s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.073s] 3: +      v[i] = v[i - 1] + m;
[4.073s] 3: +    }
[4.073s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.073s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.073s] 3: +        v[i][j] = rhs[i][j];
[4.073s] 3: +      }
[4.073s] 3: +    }
[4.073s] 3: +  }
[4.073s] 3: +
[4.073s] 3: +  template < typename T >
[4.073s] 3: +  Matrix < T > ::~Matrix()
[4.074s] 3: +  {
[4.074s] 3: +    if (v != 0) {
[4.074s] 3: +      delete[] (v[0]);
[4.074s] 3: +      delete[] (v);
[4.074s] 3: +    }
[4.074s] 3: +  }
[4.074s] 3: +
[4.074s] 3: +  template < typename T >
[4.074s] 3: +  inline Matrix < T > & Matrix < T > ::operator = (const Matrix < T > &rhs)
[4.074s] 3: +// postcondition: normal assignment via copying has been performed;
[4.074s] 3: +// if matrix and rhs were different sizes, matrix
[4.074s] 3: +// has been resized to match the size of rhs
[4.074s] 3: +  {
[4.074s] 3: +    if (this != &rhs) {
[4.074s] 3: +      resize(rhs.n, rhs.m);
[4.074s] 3: +      for (unsigned int i = 0; i < n; i++) {
[4.074s] 3: +        for (unsigned int j = 0; j < m; j++) {
[4.074s] 3: +          v[i][j] = rhs[i][j];
[4.074s] 3: +        }
[4.074s] 3: +      }
[4.075s] 3: +    }
[4.075s] 3: +    return *this;
[4.075s] 3: +  }
[4.075s] 3: +
[4.075s] 3: +  template < typename T >
[4.075s] 3: +  inline Matrix < T > & Matrix < T > ::operator = (const T & a) // assign a to every element
[4.075s] 3: +  {
[4.075s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.075s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.075s] 3: +        v[i][j] = a;
[4.075s] 3: +      }
[4.075s] 3: +    }
[4.075s] 3: +    return *this;
[4.075s] 3: +  }
[4.075s] 3: +
[4.075s] 3: +
[4.075s] 3: +  template < typename T >
[4.075s] 3: +  inline void Matrix < T > ::resize(const unsigned int n, const unsigned int m)
[4.075s] 3: +  {
[4.075s] 3: +    if (n == this->n && m == this->m) {
[4.075s] 3: +      return;
[4.076s] 3: +    }
[4.076s] 3: +    if (v != 0) {
[4.076s] 3: +      delete[] (v[0]);
[4.076s] 3: +      delete[] (v);
[4.076s] 3: +    }
[4.076s] 3: +    this->n = n; this->m = m;
[4.076s] 3: +    v = new T *[n];
[4.076s] 3: +    v[0] = new T[m * n];
[4.076s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.076s] 3: +      v[i] = v[i - 1] + m;
[4.076s] 3: +    }
[4.076s] 3: +  }
[4.076s] 3: +
[4.076s] 3: +  template < typename T >
[4.076s] 3: +  inline void Matrix < T > ::resize(const T & a, const unsigned int n, const unsigned int m)
[4.076s] 3: +  {
[4.076s] 3: +    resize(n, m);
[4.076s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.076s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.076s] 3: +        v[i][j] = a;
[4.076s] 3: +      }
[4.076s] 3: +    }
[4.076s] 3: +  }
[4.076s] 3: +
[4.077s] 3: +
[4.077s] 3: +  template < typename T >
[4.077s] 3: +  inline Vector < T > Matrix < T > ::extractRow(const unsigned int i) const
[4.077s] 3: +  {
[4.077s] 3: +    if (i >= n) {
[4.077s] 3: +      throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");
[4.077s] 3: +    }
[4.077s] 3: +    Vector < T > tmp(v[i], m);
[4.077s] 3: +
[4.077s] 3: +    return tmp;
[4.077s] 3: +  }
[4.077s] 3: +
[4.077s] 3: +  template < typename T >
[4.077s] 3: +  inline Vector < T > Matrix < T > ::extractColumn(const unsigned int j) const
[4.077s] 3: +  {
[4.077s] 3: +    if (j >= m) {
[4.077s] 3: +      throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");
[4.077s] 3: +    }
[4.077s] 3: +    Vector < T > tmp(n);
[4.077s] 3: +
[4.077s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.078s] 3: +      tmp[i] = v[i][j];
[4.078s] 3: +    }
[4.078s] 3: +
[4.078s] 3: +    return tmp;
[4.078s] 3: +  }
[4.078s] 3: +
[4.078s] 3: +  template < typename T >
[4.078s] 3: +  inline Vector < T > Matrix < T > ::extractDiag() const
[4.078s] 3: +  {
[4.078s] 3: +    unsigned int d = std::min(n, m);
[4.078s] 3: +
[4.078s] 3: +    Vector < T > tmp(d);
[4.078s] 3: +
[4.078s] 3: +    for (unsigned int i = 0; i < d; i++) {
[4.078s] 3: +      tmp[i] = v[i][i];
[4.078s] 3: +    }
[4.078s] 3: +
[4.078s] 3: +    return tmp;
[4.078s] 3: +
[4.078s] 3: +  }
[4.079s] 3: +
[4.079s] 3: +  template < typename T >
[4.079s] 3: +  inline Matrix < T > Matrix < T > ::extractRows(const std::set < unsigned int > &indexes) const
[4.079s] 3: +  {
[4.079s] 3: +    Matrix < T > tmp(indexes.size(), m);
[4.079s] 3: +    unsigned int i = 0;
[4.079s] 3: +
[4.079s] 3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();
[4.079s] 3: +      el++)
[4.079s] 3: @@ -821,132 +1230,20 @@
[4.079s] 3: -      unsigned int smaller = 0, equal = 0;
[4.079s] 3: -      for (unsigned int j = 0; j < tmp.size(); j++)
[4.079s] 3: -	if (i == j)
[4.079s] 3: -	  continue;
[4.079s] 3: -	else
[4.079s] 3: -	  if (tmp[j] < tmp[i])
[4.079s] 3: -	    smaller++;
[4.079s] 3: -	  else if (tmp[j] == tmp[i])
[4.079s] 3: -	    equal++;
[4.079s] 3: -      tmp_rank[i] = smaller + 1;
[4.079s] 3: -      if (equal > 0)
[4.079s] 3: -	{
[4.080s] 3: -	  for (unsigned int j = 1; j <= equal; j++)
[4.080s] 3: -	    tmp_rank[i] += smaller + 1 + j;
[4.080s] 3: -	  tmp_rank[i] /= (double)(equal + 1);
[4.080s] 3: -	}
[4.080s] 3: -    }
[4.080s] 3: -	
[4.080s] 3: -  return tmp_rank;
[4.080s] 3: -}
[4.080s] 3: -
[4.080s] 3: -//enum MType { DIAG };
[4.080s] 3: -
[4.080s] 3: -template <typename T>
[4.080s] 3: -class Matrix 
[4.080s] 3: -{
[4.080s] 3: -public:
[4.080s] 3: -  Matrix(); // Default constructor
[4.080s] 3: -  Matrix(const unsigned int n, const unsigned int m); // Construct a n x m matrix
[4.080s] 3: -  Matrix(const T& a, const unsigned int n, const unsigned int m); // Initialize the content to constant a
[4.080s] 3: -  Matrix(MType t, const T& a, const T& o, const unsigned int n, const unsigned int m);
[4.080s] 3: -  Matrix(MType t, const Vector<T>& v, const T& o, const unsigned int n, const unsigned int m);
[4.080s] 3: -  Matrix(const T* a, const unsigned int n, const unsigned int m); // Initialize to array 
[4.080s] 3: -  Matrix(const Matrix<T>& rhs); // Copy constructor
[4.080s] 3: -  ~Matrix(); // destructor
[4.080s] 3: -	
[4.080s] 3: -  inline T* operator[](const unsigned int& i) { return v[i]; } // Subscripting: row i
[4.081s] 3: -  inline const T* operator[](const unsigned int& i) const { return v[i]; }; // const subsctipting
[4.081s] 3: -	
[4.081s] 3: -  inline void resize(const unsigned int n, const unsigned int m);
[4.081s] 3: -  inline void resize(const T& a, const unsigned int n, const unsigned int m);
[4.081s] 3: -	
[4.081s] 3: -	
[4.081s] 3: -  inline Vector<T> extractRow(const unsigned int i) const; 
[4.081s] 3: -  inline Vector<T> extractColumn(const unsigned int j) const;
[4.081s] 3: -  inline Vector<T> extractDiag() const;
[4.081s] 3: -  inline Matrix<T> extractRows(const std::set<unsigned int>& indexes) const;
[4.081s] 3: -  inline Matrix<T> extractColumns(const std::set<unsigned int>& indexes) const;
[4.081s] 3: -  inline Matrix<T> extract(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes) const;
[4.081s] 3: -	
[4.081s] 3: -  inline void set(const T* a, unsigned int n, unsigned int m);
[4.081s] 3: -  inline void set(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes, const Matrix<T>& m);
[4.081s] 3: -  inline void setRow(const unsigned int index, const Vector<T>& v);
[4.081s] 3: -  inline void setRow(const unsigned int index, const Matrix<T>& v);
[4.081s] 3: -  inline void setRows(const std::set<unsigned int>& indexes, const Matrix<T>& m);
[4.081s] 3: -  inline void setColumn(const unsigned int index, const Vector<T>& v);
[4.081s] 3: -  inline void setColumn(const unsigned int index, const Matrix<T>& v);
[4.081s] 3: -  inline void setColumns(const std::set<unsigned int>& indexes, const Matrix<T>& m);
[4.081s] 3: -	
[4.081s] 3: -	
[4.082s] 3: -  inline unsigned int nrows() const { return n; } // number of rows
[4.082s] 3: -  inline unsigned int ncols() const { return m; } // number of columns
[4.082s] 3: -	
[4.082s] 3: -  inline Matrix<T>& operator=(const Matrix<T>& rhs); // Assignment operator
[4.082s] 3: -  inline Matrix<T>& operator=(const T& a); // Assign to every element value a
[4.082s] 3: -  inline Matrix<T>& operator+=(const Matrix<T>& rhs);
[4.082s] 3: -  inline Matrix<T>& operator-=(const Matrix<T>& rhs);
[4.082s] 3: -  inline Matrix<T>& operator*=(const Matrix<T>& rhs);
[4.082s] 3: -  inline Matrix<T>& operator/=(const Matrix<T>& rhs);
[4.082s] 3: -  inline Matrix<T>& operator^=(const Matrix<T>& rhs);
[4.082s] 3: -  inline Matrix<T>& operator+=(const T& a);
[4.082s] 3: -  inline Matrix<T>& operator-=(const T& a);
[4.082s] 3: -  inline Matrix<T>& operator*=(const T& a);
[4.082s] 3: -  inline Matrix<T>& operator/=(const T& a);
[4.082s] 3: -  inline Matrix<T>& operator^=(const T& a);
[4.082s] 3: -  inline operator Vector<T>();
[4.082s] 3: -private:
[4.082s] 3: -  unsigned int n; // number of rows
[4.082s] 3: -  unsigned int m; // number of columns
[4.082s] 3: -  T **v; // storage for data
[4.082s] 3: -};
[4.082s] 3: -
[4.082s] 3: -template <typename T>
[4.082s] 3: -Matrix<T>::Matrix() 
[4.083s] 3: -  : n(0), m(0), v(0)
[4.083s] 3: -{}
[4.083s] 3: -
[4.083s] 3: -template <typename T>
[4.083s] 3: -Matrix<T>::Matrix(unsigned int n, unsigned int m)
[4.083s] 3: -  : v(new T*[n])
[4.083s] 3: -{
[4.083s] 3: -  this->n = n; this->m = m;
[4.083s] 3: -  v[0] = new T[m * n];
[4.083s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.083s] 3: -    v[i] = v[i - 1] + m;
[4.083s] 3: -}
[4.083s] 3: -
[4.083s] 3: -template <typename T>
[4.083s] 3: -Matrix<T>::Matrix(const T& a, unsigned int n, unsigned int m)
[4.083s] 3: -  : v(new T*[n])
[4.083s] 3: -{
[4.083s] 3: -  this->n = n; this->m = m;
[4.083s] 3: -  v[0] = new T[m * n];
[4.083s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.083s] 3: -    v[i] = v[i - 1] + m;
[4.083s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.083s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.083s] 3: -      v[i][j] = a;
[4.084s] 3: -}
[4.084s] 3: -
[4.084s] 3: -template <class T> 
[4.084s] 3: -Matrix<T>::Matrix(const T* a, unsigned int n, unsigned int m) 
[4.084s] 3: -  : v(new T*[n])
[4.084s] 3: -{ 
[4.084s] 3: -  this->n = n; this->m = m;
[4.084s] 3: -  v[0] = new T[m * n]; 
[4.084s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.084s] 3: -    v[i] = v[i - 1] + m; 
[4.084s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.084s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.084s] 3: -      v[i][j] = *a++; 
[4.084s] 3: -} 
[4.084s] 3: -
[4.084s] 3: -template <class T> 
[4.084s] 3: -Matrix<T>::Matrix(MType t, const T& a, const T& o, unsigned int n, unsigned int m) 
[4.084s] 3: -  : v(new T*[n])
[4.084s] 3: -{ 
[4.084s] 3: -  this->n = n; this->m = m;
[4.084s] 3: -  v[0] = new T[m * n]; 
[4.084s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.084s] 3: -    v[i] = v[i - 1] + m; 
[4.085s] 3: -  switch (t)
[4.085s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.085s] 3: +        if (*el >= n) {
[4.085s] 3: +          throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");
[4.085s] 3: +        }
[4.085s] 3: +        tmp[i][j] = v[*el][j];
[4.085s] 3: +      }
[4.085s] 3: +      i++;
[4.085s] 3: +    }
[4.085s] 3: +
[4.085s] 3: +    return tmp;
[4.085s] 3: +  }
[4.085s] 3: +
[4.085s] 3: +  template < typename T >
[4.085s] 3: +  inline Matrix < T > Matrix < T > ::extractColumns(const std::set < unsigned int > &indexes) const
[4.085s] 3: +  {
[4.085s] 3: +    Matrix < T > tmp(n, indexes.size());
[4.085s] 3: +    unsigned int j = 0;
[4.085s] 3: +
[4.085s] 3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();
[4.085s] 3: +      el++)
[4.085s] 3: @@ -954,22 +1251,22 @@
[4.085s] 3: -    case DIAG:
[4.086s] 3: -      for (unsigned int i = 0; i < n; i++)
[4.086s] 3: -	for (unsigned int j = 0; j < m; j++)
[4.086s] 3: -	  if (i != j)
[4.086s] 3: -	    v[i][j] = o; 
[4.086s] 3: -	  else
[4.086s] 3: -	    v[i][j] = a;
[4.086s] 3: -      break;
[4.086s] 3: -    default:
[4.086s] 3: -      throw std::logic_error("Matrix type not supported");
[4.086s] 3: -    }
[4.086s] 3: -} 
[4.086s] 3: -
[4.086s] 3: -template <class T> 
[4.086s] 3: -Matrix<T>::Matrix(MType t, const Vector<T>& a, const T& o, unsigned int n, unsigned int m) 
[4.086s] 3: -  : v(new T*[n])
[4.086s] 3: -{ 
[4.086s] 3: -  this->n = n; this->m = m;
[4.086s] 3: -  v[0] = new T[m * n]; 
[4.086s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.086s] 3: -    v[i] = v[i - 1] + m; 
[4.086s] 3: -  switch (t)
[4.086s] 3: +      for (unsigned int i = 0; i < n; i++) {
[4.086s] 3: +        if (*el >= m) {
[4.086s] 3: +          throw std::logic_error("Error extracting columns: the indexes are out of matrix bounds");
[4.087s] 3: +        }
[4.087s] 3: +        tmp[i][j] = v[i][*el];
[4.087s] 3: +      }
[4.087s] 3: +      j++;
[4.087s] 3: +    }
[4.087s] 3: +
[4.087s] 3: +    return tmp;
[4.087s] 3: +  }
[4.087s] 3: +
[4.087s] 3: +  template < typename T >
[4.087s] 3: +  inline Matrix < T > Matrix < T > ::extract(
[4.087s] 3: +    const std::set < unsigned int > &r_indexes,
[4.087s] 3: +    const std::set < unsigned int > &c_indexes) const
[4.087s] 3: +  {
[4.087s] 3: +    Matrix < T > tmp(r_indexes.size(), c_indexes.size());
[4.087s] 3: +    unsigned int i = 0, j;
[4.087s] 3: +
[4.087s] 3: +    for (std::set < unsigned int > ::const_iterator r_el = r_indexes.begin();
[4.087s] 3: +      r_el != r_indexes.end(); r_el++)
[4.087s] 3: @@ -977,42 +1274,61 @@
[4.087s] 3: -    case DIAG:
[4.087s] 3: -      for (unsigned int i = 0; i < n; i++)
[4.087s] 3: -	for (unsigned int j = 0; j < m; j++)
[4.087s] 3: -	  if (i != j)
[4.088s] 3: -	    v[i][j] = o; 
[4.088s] 3: -	  else
[4.088s] 3: -	    v[i][j] = a[i];
[4.088s] 3: -      break;
[4.088s] 3: -    default:
[4.088s] 3: -      throw std::logic_error("Matrix type not supported");
[4.088s] 3: -    }
[4.088s] 3: -} 
[4.088s] 3: -
[4.088s] 3: -template <typename T>
[4.088s] 3: -Matrix<T>::Matrix(const Matrix<T>& rhs)
[4.088s] 3: -  : v(new T*[rhs.n])
[4.088s] 3: -{
[4.088s] 3: -  n = rhs.n; m = rhs.m;
[4.088s] 3: -  v[0] = new T[m * n]; 
[4.088s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.088s] 3: -    v[i] = v[i - 1] + m;
[4.088s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.088s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.088s] 3: -      v[i][j] = rhs[i][j];
[4.088s] 3: -}
[4.088s] 3: -
[4.088s] 3: -template <typename T> 
[4.088s] 3: -Matrix<T>::~Matrix() 
[4.089s] 3: -{ 
[4.089s] 3: -  if (v != 0) { 
[4.089s] 3: -    delete[] (v[0]); 
[4.089s] 3: -    delete[] (v); 
[4.089s] 3: -  } 
[4.089s] 3: -}
[4.089s] 3: -				
[4.089s] 3: -template <typename T> 
[4.089s] 3: -inline Matrix<T>& Matrix<T>::operator=(const Matrix<T> &rhs) 
[4.089s] 3: -// postcondition: normal assignment via copying has been performed; 
[4.089s] 3: -// if matrix and rhs were different sizes, matrix 
[4.089s] 3: -// has been resized to match the size of rhs 
[4.089s] 3: -{ 
[4.089s] 3: -  if (this != &rhs) 
[4.089s] 3: +      if (*r_el >= n) {
[4.089s] 3: +        throw std::logic_error("Error extracting submatrix: the indexes are out of matrix bounds");
[4.089s] 3: +      }
[4.089s] 3: +      j = 0;
[4.089s] 3: +      for (std::set < unsigned int > ::const_iterator c_el = c_indexes.begin();
[4.089s] 3: +        c_el != c_indexes.end(); c_el++)
[4.090s] 3: +      {
[4.090s] 3: +        if (*c_el >= m) {
[4.090s] 3: +          throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");
[4.090s] 3: +        }
[4.090s] 3: +        tmp[i][j] = v[*r_el][*c_el];
[4.090s] 3: +        j++;
[4.090s] 3: +      }
[4.090s] 3: +      i++;
[4.090s] 3: +    }
[4.090s] 3: +
[4.090s] 3: +    return tmp;
[4.090s] 3: +  }
[4.090s] 3: +
[4.090s] 3: +  template < typename T >
[4.090s] 3: +  inline void Matrix < T > ::setRow(unsigned int i, const Vector < T > &a)
[4.090s] 3: +  {
[4.090s] 3: +    if (i >= n) {
[4.090s] 3: +      throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");
[4.090s] 3: +    }
[4.090s] 3: +    if (this->m != a.size()) {
[4.090s] 3: +      throw std::logic_error("Error setting matrix row: ranges are not compatible");
[4.090s] 3: +    }
[4.091s] 3: +    for (unsigned int j = 0; j < ncols(); j++) {
[4.091s] 3: +      v[i][j] = a[j];
[4.091s] 3: +    }
[4.091s] 3: +  }
[4.091s] 3: +
[4.091s] 3: +  template < typename T >
[4.091s] 3: +  inline void Matrix < T > ::setRow(unsigned int i, const Matrix < T > &a)
[4.091s] 3: +  {
[4.091s] 3: +    if (i >= n) {
[4.091s] 3: +      throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");
[4.091s] 3: +    }
[4.091s] 3: +    if (this->m != a.ncols()) {
[4.091s] 3: +      throw std::logic_error("Error setting matrix column: ranges are not compatible");
[4.091s] 3: +    }
[4.091s] 3: +    if (a.nrows() != 1) {
[4.091s] 3: +      throw std::logic_error("Error setting matrix column with a non-row matrix");
[4.091s] 3: +    }
[4.091s] 3: +    for (unsigned int j = 0; j < ncols(); j++) {
[4.091s] 3: +      v[i][j] = a[0][j];
[4.091s] 3: +    }
[4.091s] 3: +  }
[4.091s] 3: +
[4.091s] 3: +  template < typename T >
[4.092s] 3: +  inline void Matrix < T >
[4.092s] 3: +  ::setRows(const std::set < unsigned int > &indexes, const Matrix < T > &m)
[4.092s] 3: +  {
[4.092s] 3: +    unsigned int i = 0;
[4.092s] 3: +
[4.092s] 3: +    if (indexes.size() != m.nrows() || this->m != m.ncols()) {
[4.092s] 3: +      throw std::logic_error("Error setting matrix rows: ranges are not compatible");
[4.092s] 3: +    }
[4.092s] 3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();
[4.092s] 3: +      el++)
[4.092s] 3: @@ -1020,90 +1336,54 @@
[4.092s] 3: -      resize(rhs.n, rhs.m);
[4.092s] 3: -      for (unsigned int i = 0; i < n; i++)
[4.092s] 3: -	for (unsigned int j = 0; j < m; j++)
[4.092s] 3: -	  v[i][j] = rhs[i][j]; 
[4.092s] 3: -    } 
[4.092s] 3: -  return *this; 
[4.092s] 3: -} 
[4.092s] 3: -
[4.092s] 3: -template <typename T> 
[4.092s] 3: -inline Matrix<T>& Matrix<T>::operator=(const T& a) // assign a to every element 
[4.092s] 3: -{ 
[4.093s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.093s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.093s] 3: -      v[i][j] = a; 
[4.093s] 3: -  return *this; 
[4.093s] 3: -} 
[4.093s] 3: -
[4.093s] 3: -
[4.093s] 3: -template <typename T> 
[4.093s] 3: -inline void Matrix<T>::resize(const unsigned int n, const unsigned int m) 
[4.093s] 3: -{
[4.093s] 3: -  if (n == this->n && m == this->m)
[4.093s] 3: -    return;
[4.093s] 3: -  if (v != 0) 
[4.093s] 3: -    { 
[4.093s] 3: -      delete[] (v[0]); 
[4.093s] 3: -      delete[] (v); 
[4.093s] 3: -    } 
[4.093s] 3: -  this->n = n; this->m = m;
[4.093s] 3: -  v = new T*[n]; 
[4.093s] 3: -  v[0] = new T[m * n];  
[4.093s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.094s] 3: -    v[i] = v[i - 1] + m;
[4.094s] 3: -} 
[4.094s] 3: -
[4.094s] 3: -template <typename T> 
[4.094s] 3: -inline void Matrix<T>::resize(const T& a, const unsigned int n, const unsigned int m) 
[4.094s] 3: -{
[4.094s] 3: -  resize(n, m);
[4.094s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.094s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.094s] 3: -      v[i][j] = a;
[4.094s] 3: -} 
[4.094s] 3: -
[4.094s] 3: -
[4.094s] 3: -
[4.094s] 3: -template <typename T> 
[4.094s] 3: -inline Vector<T> Matrix<T>::extractRow(const unsigned int i) const
[4.094s] 3: -{
[4.094s] 3: -  if (i >= n)
[4.094s] 3: -    throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");
[4.094s] 3: -  Vector<T> tmp(v[i], m);
[4.094s] 3: -	
[4.094s] 3: -  return tmp;
[4.095s] 3: -}
[4.095s] 3: -
[4.095s] 3: -template <typename T> 
[4.095s] 3: -inline Vector<T> Matrix<T>::extractColumn(const unsigned int j) const
[4.095s] 3: -{
[4.095s] 3: -  if (j >= m)
[4.095s] 3: -    throw std::logic_error("Error in extractRow: trying to extract a row out of matrix bounds");
[4.095s] 3: -  Vector<T> tmp(n);
[4.095s] 3: -	
[4.095s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.095s] 3: -    tmp[i] = v[i][j];
[4.095s] 3: -	
[4.095s] 3: -  return tmp;
[4.095s] 3: -}
[4.095s] 3: -
[4.095s] 3: -template <typename T>
[4.095s] 3: -inline Vector<T> Matrix<T>::extractDiag() const
[4.095s] 3: -{
[4.095s] 3: -  unsigned int d = std::min(n, m);
[4.095s] 3: -  
[4.096s] 3: -  Vector<T> tmp(d);
[4.096s] 3: -	
[4.096s] 3: -  for (unsigned int i = 0; i < d; i++)
[4.096s] 3: -    tmp[i] = v[i][i];
[4.096s] 3: -	
[4.096s] 3: -  return tmp;
[4.096s] 3: -	
[4.096s] 3: -}
[4.096s] 3: -
[4.096s] 3: -template <typename T> 
[4.096s] 3: -inline Matrix<T> Matrix<T>::extractRows(const std::set<unsigned int>& indexes) const
[4.096s] 3: -{
[4.096s] 3: -  Matrix<T> tmp(indexes.size(), m);
[4.096s] 3: -  unsigned int i = 0;
[4.096s] 3: -	
[4.096s] 3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)
[4.096s] 3: +      for (unsigned int j = 0; j < ncols(); j++) {
[4.096s] 3: +        if (*el >= n) {
[4.096s] 3: +          throw std::logic_error("Error in setRows: trying to set a row out of matrix bounds");
[4.096s] 3: +        }
[4.096s] 3: +        v[*el][j] = m[i][j];
[4.097s] 3: +      }
[4.097s] 3: +      i++;
[4.097s] 3: +    }
[4.097s] 3: +  }
[4.097s] 3: +
[4.097s] 3: +  template < typename T >
[4.097s] 3: +  inline void Matrix < T > ::setColumn(unsigned int j, const Vector < T > &a)
[4.097s] 3: +  {
[4.097s] 3: +    if (j >= m) {
[4.097s] 3: +      throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");
[4.097s] 3: +    }
[4.097s] 3: +    if (this->n != a.size()) {
[4.097s] 3: +      throw std::logic_error("Error setting matrix column: ranges are not compatible");
[4.097s] 3: +    }
[4.097s] 3: +    for (unsigned int i = 0; i < nrows(); i++) {
[4.097s] 3: +      v[i][j] = a[i];
[4.097s] 3: +    }
[4.097s] 3: +  }
[4.097s] 3: +
[4.097s] 3: +  template < typename T >
[4.097s] 3: +  inline void Matrix < T > ::setColumn(unsigned int j, const Matrix < T > &a)
[4.097s] 3: +  {
[4.097s] 3: +    if (j >= m) {
[4.098s] 3: +      throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");
[4.098s] 3: +    }
[4.098s] 3: +    if (this->n != a.nrows()) {
[4.098s] 3: +      throw std::logic_error("Error setting matrix column: ranges are not compatible");
[4.098s] 3: +    }
[4.098s] 3: +    if (a.ncols() != 1) {
[4.098s] 3: +      throw std::logic_error("Error setting matrix column with a non-column matrix");
[4.098s] 3: +    }
[4.098s] 3: +    for (unsigned int i = 0; i < nrows(); i++) {
[4.098s] 3: +      v[i][j] = a[i][0];
[4.098s] 3: +    }
[4.098s] 3: +  }
[4.098s] 3: +
[4.098s] 3: +
[4.098s] 3: +  template < typename T >
[4.099s] 3: +  inline void Matrix < T > ::setColumns(
[4.099s] 3: +    const std::set < unsigned int > &indexes,
[4.099s] 3: +    const Matrix < T > &a)
[4.099s] 3: +  {
[4.099s] 3: +    unsigned int j = 0;
[4.099s] 3: +
[4.099s] 3: +    if (indexes.size() != a.ncols() || this->n != a.nrows()) {
[4.099s] 3: +      throw std::logic_error("Error setting matrix columns: ranges are not compatible");
[4.099s] 3: +    }
[4.099s] 3: +    for (std::set < unsigned int > ::const_iterator el = indexes.begin(); el != indexes.end();
[4.099s] 3: +      el++)
[4.099s] 3: @@ -1111,6 +1391,37 @@
[4.099s] 3: -      for (unsigned int j = 0; j < m; j++)
[4.099s] 3: -	{
[4.099s] 3: -	  if (*el >= n)
[4.099s] 3: -	    throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");
[4.099s] 3: -	  tmp[i][j] = v[*el][j];
[4.099s] 3: -	}
[4.099s] 3: +      for (unsigned int i = 0; i < nrows(); i++) {
[4.099s] 3: +        if (*el >= m) {
[4.099s] 3: +          throw std::logic_error(
[4.100s] 3: +            "Error in setColumns: trying to set a column out of matrix bounds");
[4.100s] 3: +        }
[4.100s] 3: +        v[i][*el] = a[i][j];
[4.100s] 3: +      }
[4.100s] 3: +      j++;
[4.100s] 3: +    }
[4.100s] 3: +  }
[4.100s] 3: +
[4.100s] 3: +  template < typename T >
[4.100s] 3: +  inline void Matrix < T > ::set(
[4.100s] 3: +    const std::set < unsigned int > &r_indexes,
[4.100s] 3: +    const std::set < unsigned int > &c_indexes, const Matrix < T > &a)
[4.100s] 3: +  {
[4.100s] 3: +    unsigned int i = 0, j;
[4.100s] 3: +    if (c_indexes.size() != a.ncols() || r_indexes.size() != a.nrows()) {
[4.100s] 3: +      throw std::logic_error("Error setting matrix elements: ranges are not compatible");
[4.100s] 3: +    }
[4.100s] 3: +
[4.100s] 3: +    for (std::set < unsigned int > ::const_iterator r_el = r_indexes.begin();
[4.100s] 3: +      r_el != r_indexes.end(); r_el++)
[4.100s] 3: +    {
[4.101s] 3: +      if (*r_el >= n) {
[4.101s] 3: +        throw std::logic_error("Error in set: trying to set a row out of matrix bounds");
[4.101s] 3: +      }
[4.101s] 3: +      j = 0;
[4.101s] 3: +      for (std::set < unsigned int > ::const_iterator c_el = c_indexes.begin();
[4.101s] 3: +        c_el != c_indexes.end(); c_el++)
[4.101s] 3: +      {
[4.101s] 3: +        if (*c_el >= m) {
[4.101s] 3: +          throw std::logic_error("Error in set: trying to set a column out of matrix bounds");
[4.101s] 3: +        }
[4.101s] 3: +        v[*r_el][*c_el] = a[i][j];
[4.101s] 3: +        j++;
[4.101s] 3: +      }
[4.101s] 3: @@ -1119,479 +1430,391 @@
[4.101s] 3: -	
[4.101s] 3: -  return tmp;
[4.101s] 3: -}
[4.101s] 3: -
[4.101s] 3: -template <typename T> 
[4.101s] 3: -inline Matrix<T> Matrix<T>::extractColumns(const std::set<unsigned int>& indexes) const
[4.101s] 3: -{
[4.102s] 3: -  Matrix<T> tmp(n, indexes.size());
[4.102s] 3: -  unsigned int j = 0;
[4.102s] 3: -	
[4.102s] 3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)
[4.102s] 3: -    {
[4.102s] 3: -      for (unsigned int i = 0; i < n; i++)
[4.102s] 3: -	{
[4.102s] 3: -	  if (*el >= m)
[4.102s] 3: -	    throw std::logic_error("Error extracting columns: the indexes are out of matrix bounds");
[4.102s] 3: -	  tmp[i][j] = v[i][*el];
[4.102s] 3: -	}
[4.102s] 3: -      j++;
[4.102s] 3: -    }
[4.102s] 3: -	
[4.102s] 3: -  return tmp;
[4.102s] 3: -}
[4.102s] 3: -
[4.102s] 3: -template <typename T> 
[4.102s] 3: -inline Matrix<T> Matrix<T>::extract(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes) const
[4.103s] 3: -{
[4.103s] 3: -  Matrix<T> tmp(r_indexes.size(), c_indexes.size());
[4.103s] 3: -  unsigned int i = 0, j;
[4.103s] 3: -	
[4.103s] 3: -  for (std::set<unsigned int>::const_iterator r_el = r_indexes.begin(); r_el != r_indexes.end(); r_el++)
[4.103s] 3: -    {
[4.103s] 3: -      if (*r_el >= n)
[4.103s] 3: -	throw std::logic_error("Error extracting submatrix: the indexes are out of matrix bounds");
[4.103s] 3: -      j = 0;
[4.103s] 3: -      for (std::set<unsigned int>::const_iterator c_el = c_indexes.begin(); c_el != c_indexes.end(); c_el++)
[4.103s] 3: -	{
[4.103s] 3: -	  if (*c_el >= m)
[4.103s] 3: -	    throw std::logic_error("Error extracting rows: the indexes are out of matrix bounds");
[4.103s] 3: -	  tmp[i][j] = v[*r_el][*c_el];
[4.103s] 3: -	  j++;
[4.103s] 3: -	}
[4.103s] 3: -      i++;
[4.103s] 3: -    }
[4.103s] 3: -	
[4.103s] 3: -  return tmp;
[4.104s] 3: -}
[4.104s] 3: -
[4.104s] 3: -template <typename T> 
[4.104s] 3: -inline void Matrix<T>::setRow(unsigned int i, const Vector<T>& a)
[4.104s] 3: -{	
[4.104s] 3: -  if (i >= n)
[4.104s] 3: -    throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");
[4.104s] 3: -  if (this->m != a.size())
[4.104s] 3: -    throw std::logic_error("Error setting matrix row: ranges are not compatible");
[4.104s] 3: -  for (unsigned int j = 0; j < ncols(); j++)
[4.104s] 3: -    v[i][j] = a[j];
[4.104s] 3: -}
[4.104s] 3: -
[4.104s] 3: -template <typename T> 
[4.104s] 3: -inline void Matrix<T>::setRow(unsigned int i, const Matrix<T>& a)
[4.104s] 3: -{	
[4.104s] 3: -  if (i >= n)
[4.105s] 3: -    throw std::logic_error("Error in setRow: trying to set a row out of matrix bounds");
[4.105s] 3: -  if (this->m != a.ncols())
[4.105s] 3: -    throw std::logic_error("Error setting matrix column: ranges are not compatible");
[4.105s] 3: -  if (a.nrows() != 1)
[4.105s] 3: -    throw std::logic_error("Error setting matrix column with a non-row matrix");
[4.105s] 3: -  for (unsigned int j = 0; j < ncols(); j++)
[4.105s] 3: -    v[i][j] = a[0][j];
[4.105s] 3: -}
[4.105s] 3: -
[4.105s] 3: -template <typename T> 
[4.105s] 3: -inline void Matrix<T>::setRows(const std::set<unsigned int>& indexes, const Matrix<T>& m)
[4.105s] 3: -{
[4.105s] 3: -  unsigned int i = 0;
[4.105s] 3: -	
[4.105s] 3: -  if (indexes.size() != m.nrows() || this->m != m.ncols())
[4.105s] 3: -    throw std::logic_error("Error setting matrix rows: ranges are not compatible");
[4.105s] 3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)
[4.105s] 3: -    {
[4.105s] 3: -      for (unsigned int j = 0; j < ncols(); j++)
[4.105s] 3: -	{
[4.105s] 3: -	  if (*el >= n)
[4.105s] 3: -	    throw std::logic_error("Error in setRows: trying to set a row out of matrix bounds");
[4.105s] 3: -	  v[*el][j] = m[i][j];
[4.106s] 3: -	}
[4.106s] 3: -      i++;
[4.106s] 3: -    }
[4.106s] 3: -}
[4.106s] 3: -
[4.106s] 3: -template <typename T> 
[4.106s] 3: -inline void Matrix<T>::setColumn(unsigned int j, const Vector<T>& a)
[4.106s] 3: -{	
[4.106s] 3: -  if (j >= m)
[4.106s] 3: -    throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");
[4.106s] 3: -  if (this->n != a.size())
[4.106s] 3: -    throw std::logic_error("Error setting matrix column: ranges are not compatible");
[4.106s] 3: -  for (unsigned int i = 0; i < nrows(); i++)
[4.106s] 3: -    v[i][j] = a[i];
[4.106s] 3: -}
[4.106s] 3: -
[4.106s] 3: -template <typename T> 
[4.106s] 3: -inline void Matrix<T>::setColumn(unsigned int j, const Matrix<T>& a)
[4.106s] 3: -{	
[4.106s] 3: -  if (j >= m)
[4.106s] 3: -    throw std::logic_error("Error in setColumn: trying to set a column out of matrix bounds");
[4.106s] 3: -  if (this->n != a.nrows())
[4.107s] 3: -    throw std::logic_error("Error setting matrix column: ranges are not compatible");
[4.107s] 3: -  if (a.ncols() != 1)
[4.107s] 3: -    throw std::logic_error("Error setting matrix column with a non-column matrix");
[4.107s] 3: -  for (unsigned int i = 0; i < nrows(); i++)
[4.107s] 3: -    v[i][j] = a[i][0];
[4.107s] 3: -}
[4.107s] 3: -
[4.107s] 3: -
[4.107s] 3: -template <typename T> 
[4.107s] 3: -inline void Matrix<T>::setColumns(const std::set<unsigned int>& indexes, const Matrix<T>& a)
[4.107s] 3: -{
[4.107s] 3: -  unsigned int j = 0;
[4.107s] 3: -	
[4.107s] 3: -  if (indexes.size() != a.ncols() || this->n != a.nrows())
[4.107s] 3: -    throw std::logic_error("Error setting matrix columns: ranges are not compatible");
[4.107s] 3: -  for (std::set<unsigned int>::const_iterator el = indexes.begin(); el != indexes.end(); el++)
[4.107s] 3: -    {
[4.107s] 3: -      for (unsigned int i = 0; i < nrows(); i++)
[4.107s] 3: -	{
[4.107s] 3: -	  if (*el >= m)
[4.107s] 3: -	    throw std::logic_error("Error in setColumns: trying to set a column out of matrix bounds");
[4.107s] 3: -	  v[i][*el] = a[i][j];
[4.108s] 3: -	}
[4.108s] 3: -      j++;
[4.108s] 3: -    }
[4.108s] 3: -}
[4.108s] 3: -
[4.108s] 3: -template <typename T> 
[4.108s] 3: -inline void Matrix<T>::set(const std::set<unsigned int>& r_indexes, const std::set<unsigned int>& c_indexes, const Matrix<T>& a)
[4.108s] 3: -{
[4.108s] 3: -  unsigned int i = 0, j;
[4.108s] 3: -  if (c_indexes.size() != a.ncols() || r_indexes.size() != a.nrows())
[4.108s] 3: -    throw std::logic_error("Error setting matrix elements: ranges are not compatible");
[4.108s] 3: -	
[4.108s] 3: -  for (std::set<unsigned int>::const_iterator r_el = r_indexes.begin(); r_el != r_indexes.end(); r_el++)
[4.108s] 3: -    {
[4.108s] 3: -      if (*r_el >= n)
[4.108s] 3: -	throw std::logic_error("Error in set: trying to set a row out of matrix bounds");
[4.108s] 3: -      j = 0;
[4.108s] 3: -      for (std::set<unsigned int>::const_iterator c_el = c_indexes.begin(); c_el != c_indexes.end(); c_el++)
[4.108s] 3: -	{
[4.108s] 3: -	  if (*c_el >= m)
[4.108s] 3: -	    throw std::logic_error("Error in set: trying to set a column out of matrix bounds");
[4.109s] 3: -	  v[*r_el][*c_el] = a[i][j];
[4.109s] 3: -	  j++;
[4.109s] 3: -	}
[4.109s] 3: -      i++;
[4.109s] 3: -    }
[4.109s] 3: -}
[4.109s] 3: -
[4.109s] 3: -template <typename T> 
[4.109s] 3: -inline void Matrix<T>::set(const T* a, unsigned int n, unsigned int m)
[4.109s] 3: -{
[4.109s] 3: -  if (this->n != n || this->m != m)
[4.109s] 3: -    resize(n, m);
[4.109s] 3: -  unsigned int k = 0;
[4.109s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.109s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.109s] 3: -      v[i][j] = a[k++];
[4.109s] 3: -}
[4.109s] 3: -
[4.109s] 3: -
[4.109s] 3: -template <typename T>
[4.109s] 3: -Matrix<T> operator+(const Matrix<T>& rhs)
[4.109s] 3: -{
[4.110s] 3: -  return rhs;
[4.110s] 3: -}
[4.110s] 3: -
[4.110s] 3: -template <typename T>
[4.110s] 3: -Matrix<T> operator+(const Matrix<T>& lhs, const Matrix<T>& rhs)
[4.110s] 3: -{
[4.110s] 3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())
[4.110s] 3: -    throw std::logic_error("Operator+: matrices have different sizes");
[4.110s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.110s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.110s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.110s] 3: -      tmp[i][j] = lhs[i][j] + rhs[i][j];
[4.110s] 3: -	
[4.110s] 3: -  return tmp;
[4.110s] 3: -}
[4.110s] 3: -
[4.110s] 3: -template <typename T>
[4.110s] 3: -Matrix<T> operator+(const Matrix<T>& lhs, const T& a)
[4.110s] 3: -{
[4.110s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.111s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.111s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.111s] 3: -      tmp[i][j] = lhs[i][j] + a;
[4.111s] 3: -	
[4.111s] 3: -  return tmp;
[4.111s] 3: -}
[4.111s] 3: -
[4.111s] 3: -template <typename T>
[4.111s] 3: -Matrix<T> operator+(const T& a, const Matrix<T>& rhs)
[4.111s] 3: -{
[4.111s] 3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());
[4.111s] 3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)
[4.111s] 3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)
[4.111s] 3: -      tmp[i][j] = a + rhs[i][j];
[4.111s] 3: -	
[4.111s] 3: -  return tmp;
[4.111s] 3: -}
[4.111s] 3: -
[4.111s] 3: -template <typename T>
[4.111s] 3: -inline Matrix<T>& Matrix<T>::operator+=(const Matrix<T>& rhs)
[4.111s] 3: -{
[4.111s] 3: -  if (m != rhs.ncols() || n != rhs.nrows())
[4.112s] 3: -    throw std::logic_error("Operator+=: matrices have different sizes");
[4.112s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.112s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.112s] 3: -      v[i][j] += rhs[i][j];
[4.112s] 3: -	
[4.112s] 3: -  return *this;
[4.112s] 3: -}
[4.112s] 3: -
[4.112s] 3: -template <typename T>
[4.112s] 3: -inline Matrix<T>& Matrix<T>::operator+=(const T& a)
[4.112s] 3: -{
[4.112s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.112s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.112s] 3: -      v[i][j] += a;
[4.112s] 3: -	
[4.112s] 3: -  return *this;
[4.112s] 3: -}
[4.112s] 3: -
[4.112s] 3: -template <typename T>
[4.112s] 3: -Matrix<T> operator-(const Matrix<T>& rhs)
[4.112s] 3: -{	
[4.112s] 3: -  return (T)(-1) * rhs;
[4.112s] 3: -}
[4.112s] 3: -
[4.113s] 3: -template <typename T>
[4.113s] 3: -Matrix<T> operator-(const Matrix<T>& lhs, const Matrix<T>& rhs)
[4.113s] 3: -{
[4.113s] 3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())
[4.113s] 3: -    throw std::logic_error("Operator-: matrices have different sizes");
[4.113s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.113s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.113s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.113s] 3: -      tmp[i][j] = lhs[i][j] - rhs[i][j];
[4.113s] 3: -	
[4.113s] 3: -  return tmp;
[4.113s] 3: -}
[4.113s] 3: -
[4.113s] 3: -template <typename T>
[4.113s] 3: -Matrix<T> operator-(const Matrix<T>& lhs, const T& a)
[4.113s] 3: -{
[4.113s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.113s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.113s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.113s] 3: -      tmp[i][j] = lhs[i][j] - a;
[4.113s] 3: -	
[4.113s] 3: -  return tmp;
[4.114s] 3: -}
[4.114s] 3: -
[4.114s] 3: -template <typename T>
[4.114s] 3: -Matrix<T> operator-(const T& a, const Matrix<T>& rhs)
[4.114s] 3: -{
[4.114s] 3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());
[4.114s] 3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)
[4.114s] 3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)
[4.114s] 3: -      tmp[i][j] = a - rhs[i][j];
[4.114s] 3: -	
[4.114s] 3: -  return tmp;
[4.114s] 3: -}
[4.114s] 3: -
[4.114s] 3: -template <typename T>
[4.114s] 3: -inline Matrix<T>& Matrix<T>::operator-=(const Matrix<T>& rhs)
[4.114s] 3: -{
[4.114s] 3: -  if (m != rhs.ncols() || n != rhs.nrows())
[4.114s] 3: -    throw std::logic_error("Operator-=: matrices have different sizes");
[4.114s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.114s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.114s] 3: -      v[i][j] -= rhs[i][j];
[4.114s] 3: -	
[4.114s] 3: -  return *this;
[4.114s] 3: -}
[4.115s] 3: -
[4.115s] 3: -template <typename T>
[4.115s] 3: -inline Matrix<T>& Matrix<T>::operator-=(const T& a)
[4.115s] 3: -{
[4.115s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.115s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.115s] 3: -      v[i][j] -= a;
[4.115s] 3: -	
[4.115s] 3: -  return *this;
[4.115s] 3: -}
[4.115s] 3: -
[4.115s] 3: -template <typename T>
[4.115s] 3: -Matrix<T> operator*(const Matrix<T>& lhs, const Matrix<T>& rhs)
[4.115s] 3: -{
[4.115s] 3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())
[4.115s] 3: -    throw std::logic_error("Operator*: matrices have different sizes");
[4.115s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.115s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.115s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.115s] 3: -      tmp[i][j] = lhs[i][j] * rhs[i][j];
[4.115s] 3: -	
[4.115s] 3: -  return tmp;
[4.115s] 3: -}
[4.116s] 3: -
[4.116s] 3: -template <typename T>
[4.116s] 3: -Matrix<T> operator*(const Matrix<T>& lhs, const T& a)
[4.116s] 3: -{
[4.116s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.116s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.116s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.116s] 3: -      tmp[i][j] = lhs[i][j] * a;
[4.116s] 3: -	
[4.116s] 3: -  return tmp;
[4.116s] 3: -}
[4.116s] 3: -
[4.116s] 3: -template <typename T>
[4.116s] 3: -Matrix<T> operator*(const T& a, const Matrix<T>& rhs)
[4.116s] 3: -{
[4.116s] 3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());
[4.116s] 3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)
[4.116s] 3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)
[4.116s] 3: -      tmp[i][j] = a * rhs[i][j];
[4.116s] 3: -	
[4.116s] 3: -  return tmp;
[4.116s] 3: -}
[4.116s] 3: -
[4.117s] 3: -template <typename T>
[4.117s] 3: -inline Matrix<T>& Matrix<T>::operator*=(const Matrix<T>& rhs)
[4.117s] 3: -{
[4.117s] 3: -  if (m != rhs.ncols() || n != rhs.nrows())
[4.117s] 3: -    throw std::logic_error("Operator*=: matrices have different sizes");
[4.117s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.117s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.117s] 3: -      v[i][j] *= rhs[i][j];
[4.117s] 3: -	
[4.117s] 3: -  return *this;
[4.117s] 3: -}
[4.117s] 3: -
[4.117s] 3: -template <typename T>
[4.117s] 3: -inline Matrix<T>& Matrix<T>::operator*=(const T& a)
[4.117s] 3: -{
[4.117s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.117s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.117s] 3: -      v[i][j] *= a;
[4.117s] 3: -	
[4.117s] 3: -  return *this;
[4.117s] 3: -}
[4.117s] 3: -
[4.117s] 3: -template <typename T>
[4.118s] 3: -Matrix<T> operator/(const Matrix<T>& lhs, const Matrix<T>& rhs)
[4.118s] 3: -{
[4.118s] 3: -  if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows())
[4.118s] 3: -    throw std::logic_error("Operator+: matrices have different sizes");
[4.118s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.118s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.118s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.118s] 3: -      tmp[i][j] = lhs[i][j] / rhs[i][j];
[4.118s] 3: -	
[4.118s] 3: -  return tmp;
[4.118s] 3: -}
[4.118s] 3: -
[4.118s] 3: -template <typename T>
[4.118s] 3: -Matrix<T> operator/(const Matrix<T>& lhs, const T& a)
[4.118s] 3: -{
[4.118s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.118s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.118s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.118s] 3: -      tmp[i][j] = lhs[i][j] / a;
[4.118s] 3: -	
[4.118s] 3: -  return tmp;
[4.118s] 3: -}
[4.118s] 3: -
[4.118s] 3: -template <typename T>
[4.119s] 3: -Matrix<T> operator/(const T& a, const Matrix<T>& rhs)
[4.119s] 3: -{
[4.119s] 3: -  Matrix<T> tmp(rhs.nrows(), rhs.ncols());
[4.119s] 3: -  for (unsigned int i = 0; i < rhs.nrows(); i++)
[4.119s] 3: -    for (unsigned int j = 0; j < rhs.ncols(); j++)
[4.119s] 3: -      tmp[i][j] = a / rhs[i][j];
[4.119s] 3: -	
[4.119s] 3: -  return tmp;
[4.119s] 3: -}
[4.119s] 3: -
[4.119s] 3: -template <typename T>
[4.119s] 3: -inline Matrix<T>& Matrix<T>::operator/=(const Matrix<T>& rhs)
[4.119s] 3: -{
[4.119s] 3: -  if (m != rhs.ncols() || n != rhs.nrows())
[4.119s] 3: -    throw std::logic_error("Operator+=: matrices have different sizes");
[4.119s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.119s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.119s] 3: -      v[i][j] /= rhs[i][j];
[4.119s] 3: -	
[4.119s] 3: -  return *this;
[4.119s] 3: -}
[4.119s] 3: -
[4.120s] 3: -template <typename T>
[4.120s] 3: -inline Matrix<T>& Matrix<T>::operator/=(const T& a)
[4.120s] 3: -{
[4.120s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.120s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.120s] 3: -      v[i][j] /= a;
[4.120s] 3: -	
[4.120s] 3: -  return *this;
[4.120s] 3: -}
[4.120s] 3: -
[4.120s] 3: -template <typename T>
[4.120s] 3: -Matrix<T> operator^(const Matrix<T>& lhs, const T& a)
[4.120s] 3: -{
[4.120s] 3: -  Matrix<T> tmp(lhs.nrows(), lhs.ncols());
[4.120s] 3: -  for (unsigned int i = 0; i < lhs.nrows(); i++)
[4.120s] 3: -    for (unsigned int j = 0; j < lhs.ncols(); j++)
[4.120s] 3: -      tmp[i][j] = pow(lhs[i][j], a);
[4.120s] 3: -	
[4.120s] 3: -  return tmp;
[4.120s] 3: -}
[4.120s] 3: -
[4.121s] 3: -template <typename T>
[4.121s] 3: -inline Matrix<T>& Matrix<T>::operator^=(const Matrix<T>& rhs)
[4.121s] 3: -{
[4.121s] 3: -  if (m != rhs.ncols() || n != rhs.nrows())
[4.121s] 3: -    throw std::logic_error("Operator^=: matrices have different sizes");
[4.121s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.121s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.121s] 3: -      v[i][j] = pow(v[i][j], rhs[i][j]);
[4.121s] 3: -	
[4.121s] 3: -  return *this;
[4.121s] 3: -}
[4.121s] 3: -
[4.121s] 3: -
[4.121s] 3: -template <typename T>
[4.121s] 3: -inline Matrix<T>& Matrix<T>::operator^=(const T& a)
[4.121s] 3: -{
[4.122s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.122s] 3: -    for (unsigned int j = 0; j < m; j++)
[4.122s] 3: -      v[i][j] = pow(v[i][j], a);
[4.122s] 3: -	
[4.122s] 3: -  return *this;
[4.122s] 3: -}
[4.122s] 3: -
[4.122s] 3: -template <typename T>
[4.122s] 3: -inline Matrix<T>::operator Vector<T>()
[4.122s] 3: -{
[4.122s] 3: -  if (n > 1 && m > 1)
[4.122s] 3: -    throw std::logic_error("Error matrix cast to vector: trying to cast a multi-dimensional matrix");
[4.122s] 3: -  if (n == 1)
[4.122s] 3: -    return extractRow(0);
[4.122s] 3: -  else
[4.122s] 3: -    return extractColumn(0);
[4.122s] 3: -}
[4.122s] 3: -
[4.122s] 3: -template <typename T>
[4.122s] 3: -inline bool operator==(const Matrix<T>& a, const Matrix<T>& b)
[4.122s] 3: -{
[4.122s] 3: -  if (a.nrows() != b.nrows() || a.ncols() != b.ncols())
[4.123s] 3: -    throw std::logic_error("Matrices of different size are not confrontable");
[4.123s] 3: -  for (unsigned i = 0; i < a.nrows(); i++)
[4.123s] 3: -    for (unsigned j = 0; j < a.ncols(); j++)
[4.123s] 3: -      if (a[i][j] != b[i][j])
[4.123s] 3: -	return false;
[4.123s] 3: -  return true;
[4.123s] 3: -}
[4.123s] 3: -
[4.123s] 3: -template <typename T>
[4.123s] 3: -inline bool operator!=(const Matrix<T>& a, const Matrix<T>& b)
[4.123s] 3: -{
[4.123s] 3: -  if (a.nrows() != b.nrows() || a.ncols() != b.ncols())
[4.123s] 3: -    throw std::logic_error("Matrices of different size are not confrontable");
[4.123s] 3: -  for (unsigned i = 0; i < a.nrows(); i++)
[4.123s] 3: -    for (unsigned j = 0; j < a.ncols(); j++)
[4.123s] 3: -      if (a[i][j] != b[i][j])
[4.123s] 3: -	return true;
[4.123s] 3: -  return false;
[4.123s] 3: -}
[4.123s] 3: -
[4.123s] 3: +  }
[4.123s] 3: +
[4.123s] 3: +  template < typename T >
[4.124s] 3: +  inline void Matrix < T > ::set(const T * a, unsigned int n, unsigned int m)
[4.124s] 3: +  {
[4.124s] 3: +    if (this->n != n || this->m != m) {
[4.124s] 3: +      resize(n, m);
[4.124s] 3: +    }
[4.124s] 3: +    unsigned int k = 0;
[4.124s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.124s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.124s] 3: +        v[i][j] = a[k++];
[4.124s] 3: +      }
[4.124s] 3: +    }
[4.124s] 3: +  }
[4.124s] 3: +
[4.124s] 3: +
[4.124s] 3: +  template < typename T >
[4.124s] 3: +  Matrix < T > operator + (const Matrix < T > &rhs)
[4.124s] 3: +  {
[4.124s] 3: +    return rhs;
[4.124s] 3: +  }
[4.124s] 3: +
[4.124s] 3: +  template < typename T >
[4.124s] 3: +  Matrix < T > operator + (const Matrix < T > &lhs, const Matrix < T > &rhs)
[4.124s] 3: +  {
[4.125s] 3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {
[4.125s] 3: +      throw std::logic_error("Operator+: matrices have different sizes");
[4.125s] 3: +    }
[4.125s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.125s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.125s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.125s] 3: +        tmp[i][j] = lhs[i][j] + rhs[i][j];
[4.125s] 3: +      }
[4.125s] 3: +    }
[4.125s] 3: +
[4.125s] 3: +    return tmp;
[4.125s] 3: +  }
[4.125s] 3: +
[4.125s] 3: +  template < typename T >
[4.125s] 3: +  Matrix < T > operator + (const Matrix < T > &lhs, const T & a)
[4.125s] 3: +  {
[4.125s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.125s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.125s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.125s] 3: +        tmp[i][j] = lhs[i][j] + a;
[4.125s] 3: +      }
[4.125s] 3: +    }
[4.126s] 3: +
[4.126s] 3: +    return tmp;
[4.126s] 3: +  }
[4.126s] 3: +
[4.126s] 3: +  template < typename T >
[4.126s] 3: +  Matrix < T > operator + (const T & a, const Matrix < T > &rhs)
[4.126s] 3: +  {
[4.126s] 3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());
[4.126s] 3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {
[4.126s] 3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {
[4.126s] 3: +        tmp[i][j] = a + rhs[i][j];
[4.126s] 3: +      }
[4.126s] 3: +    }
[4.127s] 3: +
[4.127s] 3: +    return tmp;
[4.127s] 3: +  }
[4.127s] 3: +
[4.127s] 3: +  template < typename T >
[4.127s] 3: +  inline Matrix < T > & Matrix < T > ::operator += (const Matrix < T > &rhs)
[4.127s] 3: +  {
[4.127s] 3: +    if (m != rhs.ncols() || n != rhs.nrows()) {
[4.127s] 3: +      throw std::logic_error("Operator+=: matrices have different sizes");
[4.127s] 3: +    }
[4.127s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.127s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.127s] 3: +        v[i][j] += rhs[i][j];
[4.127s] 3: +      }
[4.127s] 3: +    }
[4.127s] 3: +
[4.127s] 3: +    return *this;
[4.127s] 3: +  }
[4.127s] 3: +
[4.128s] 3: +  template < typename T >
[4.128s] 3: +  inline Matrix < T > & Matrix < T > ::operator += (const T & a)
[4.128s] 3: +  {
[4.128s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.128s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.128s] 3: +        v[i][j] += a;
[4.128s] 3: +      }
[4.128s] 3: +    }
[4.128s] 3: +
[4.128s] 3: +    return *this;
[4.128s] 3: +  }
[4.128s] 3: +
[4.128s] 3: +  template < typename T >
[4.128s] 3: +  Matrix < T > operator - (const Matrix < T > &rhs)
[4.128s] 3: +  {
[4.128s] 3: +    return (T)(-1) * rhs;
[4.128s] 3: +  }
[4.128s] 3: +
[4.128s] 3: +  template < typename T >
[4.128s] 3: +  Matrix < T > operator - (const Matrix < T > &lhs, const Matrix < T > &rhs)
[4.128s] 3: +  {
[4.128s] 3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {
[4.129s] 3: +      throw std::logic_error("Operator-: matrices have different sizes");
[4.129s] 3: +    }
[4.129s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.129s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.129s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.129s] 3: +        tmp[i][j] = lhs[i][j] - rhs[i][j];
[4.129s] 3: +      }
[4.129s] 3: +    }
[4.129s] 3: +
[4.129s] 3: +    return tmp;
[4.129s] 3: +  }
[4.129s] 3: +
[4.129s] 3: +  template < typename T >
[4.129s] 3: +  Matrix < T > operator - (const Matrix < T > &lhs, const T & a)
[4.129s] 3: +  {
[4.129s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.129s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.129s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.129s] 3: +        tmp[i][j] = lhs[i][j] - a;
[4.129s] 3: +      }
[4.129s] 3: +    }
[4.130s] 3: +
[4.130s] 3: +    return tmp;
[4.130s] 3: +  }
[4.130s] 3: +
[4.130s] 3: +  template < typename T >
[4.130s] 3: +  Matrix < T > operator - (const T & a, const Matrix < T > &rhs)
[4.130s] 3: +  {
[4.130s] 3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());
[4.130s] 3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {
[4.130s] 3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {
[4.130s] 3: +        tmp[i][j] = a - rhs[i][j];
[4.130s] 3: +      }
[4.130s] 3: +    }
[4.130s] 3: +
[4.130s] 3: +    return tmp;
[4.130s] 3: +  }
[4.130s] 3: +
[4.130s] 3: +  template < typename T >
[4.130s] 3: +  inline Matrix < T > & Matrix < T > ::operator -= (const Matrix < T > &rhs)
[4.130s] 3: +  {
[4.130s] 3: +    if (m != rhs.ncols() || n != rhs.nrows()) {
[4.130s] 3: +      throw std::logic_error("Operator-=: matrices have different sizes");
[4.131s] 3: +    }
[4.131s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.131s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.131s] 3: +        v[i][j] -= rhs[i][j];
[4.131s] 3: +      }
[4.131s] 3: +    }
[4.131s] 3: +
[4.131s] 3: +    return *this;
[4.131s] 3: +  }
[4.131s] 3: +
[4.131s] 3: +  template < typename T >
[4.131s] 3: +  inline Matrix < T > & Matrix < T > ::operator -= (const T & a)
[4.131s] 3: +  {
[4.131s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.131s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.131s] 3: +        v[i][j] -= a;
[4.131s] 3: +      }
[4.131s] 3: +    }
[4.131s] 3: +
[4.131s] 3: +    return *this;
[4.131s] 3: +  }
[4.131s] 3: +
[4.132s] 3: +  template < typename T >
[4.132s] 3: +  Matrix < T > operator * (const Matrix < T > &lhs, const Matrix < T > &rhs)
[4.132s] 3: +  {
[4.132s] 3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {
[4.132s] 3: +      throw std::logic_error("Operator*: matrices have different sizes");
[4.132s] 3: +    }
[4.132s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.132s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.132s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.132s] 3: +        tmp[i][j] = lhs[i][j] * rhs[i][j];
[4.132s] 3: +      }
[4.132s] 3: +    }
[4.132s] 3: +
[4.132s] 3: +    return tmp;
[4.132s] 3: +  }
[4.132s] 3: +
[4.132s] 3: +  template < typename T >
[4.132s] 3: +  Matrix < T > operator * (const Matrix < T > &lhs, const T & a)
[4.132s] 3: +  {
[4.132s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.133s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.133s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.133s] 3: +        tmp[i][j] = lhs[i][j] * a;
[4.133s] 3: +      }
[4.133s] 3: +    }
[4.133s] 3: +
[4.133s] 3: +    return tmp;
[4.133s] 3: +  }
[4.133s] 3: +
[4.133s] 3: +  template < typename T >
[4.133s] 3: +  Matrix < T > operator * (const T & a, const Matrix < T > &rhs)
[4.133s] 3: +  {
[4.133s] 3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());
[4.133s] 3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {
[4.133s] 3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {
[4.133s] 3: +        tmp[i][j] = a * rhs[i][j];
[4.133s] 3: +      }
[4.133s] 3: +    }
[4.133s] 3: +
[4.133s] 3: +    return tmp;
[4.133s] 3: +  }
[4.133s] 3: +
[4.133s] 3: +  template < typename T >
[4.134s] 3: +  inline Matrix < T > & Matrix < T > ::operator *= (const Matrix < T > &rhs)
[4.134s] 3: +  {
[4.134s] 3: +    if (m != rhs.ncols() || n != rhs.nrows()) {
[4.134s] 3: +      throw std::logic_error("Operator*=: matrices have different sizes");
[4.134s] 3: +    }
[4.134s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.134s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.134s] 3: +        v[i][j] *= rhs[i][j];
[4.134s] 3: +      }
[4.134s] 3: +    }
[4.134s] 3: +
[4.134s] 3: +    return *this;
[4.134s] 3: +  }
[4.134s] 3: +
[4.134s] 3: +  template < typename T >
[4.134s] 3: +  inline Matrix < T > & Matrix < T > ::operator *= (const T & a)
[4.134s] 3: +  {
[4.134s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.134s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.134s] 3: +        v[i][j] *= a;
[4.134s] 3: +      }
[4.134s] 3: +    }
[4.134s] 3: +
[4.135s] 3: +    return *this;
[4.135s] 3: +  }
[4.135s] 3: +
[4.135s] 3: +  template < typename T >
[4.135s] 3: +  Matrix < T > operator / (const Matrix < T > &lhs, const Matrix < T > &rhs)
[4.135s] 3: +  {
[4.135s] 3: +    if (lhs.ncols() != rhs.ncols() || lhs.nrows() != rhs.nrows()) {
[4.135s] 3: +      throw std::logic_error("Operator+: matrices have different sizes");
[4.135s] 3: +    }
[4.135s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.135s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.135s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.135s] 3: +        tmp[i][j] = lhs[i][j] / rhs[i][j];
[4.135s] 3: +      }
[4.135s] 3: +    }
[4.135s] 3: +
[4.135s] 3: +    return tmp;
[4.135s] 3: +  }
[4.135s] 3: +
[4.135s] 3: +  template < typename T >
[4.135s] 3: +  Matrix < T > operator / (const Matrix < T > &lhs, const T & a)
[4.135s] 3: +  {
[4.135s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.136s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.136s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.136s] 3: +        tmp[i][j] = lhs[i][j] / a;
[4.136s] 3: +      }
[4.136s] 3: +    }
[4.136s] 3: +
[4.136s] 3: +    return tmp;
[4.136s] 3: +  }
[4.136s] 3: +
[4.136s] 3: +  template < typename T >
[4.136s] 3: +  Matrix < T > operator / (const T & a, const Matrix < T > &rhs)
[4.136s] 3: +  {
[4.136s] 3: +    Matrix < T > tmp(rhs.nrows(), rhs.ncols());
[4.136s] 3: +    for (unsigned int i = 0; i < rhs.nrows(); i++) {
[4.136s] 3: +      for (unsigned int j = 0; j < rhs.ncols(); j++) {
[4.136s] 3: +        tmp[i][j] = a / rhs[i][j];
[4.136s] 3: +      }
[4.136s] 3: +    }
[4.136s] 3: +
[4.136s] 3: +    return tmp;
[4.136s] 3: +  }
[4.136s] 3: +
[4.136s] 3: +  template < typename T >
[4.136s] 3: +  inline Matrix < T > & Matrix < T > ::operator /= (const Matrix < T > &rhs)
[4.137s] 3: +  {
[4.137s] 3: +    if (m != rhs.ncols() || n != rhs.nrows()) {
[4.137s] 3: +      throw std::logic_error("Operator+=: matrices have different sizes");
[4.137s] 3: +    }
[4.137s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.137s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.137s] 3: +        v[i][j] /= rhs[i][j];
[4.137s] 3: +      }
[4.137s] 3: +    }
[4.137s] 3: +
[4.137s] 3: +    return *this;
[4.137s] 3: +  }
[4.137s] 3: +
[4.137s] 3: +  template < typename T >
[4.137s] 3: +  inline Matrix < T > & Matrix < T > ::operator /= (const T & a)
[4.137s] 3: +  {
[4.137s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.137s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.137s] 3: +        v[i][j] /= a;
[4.137s] 3: +      }
[4.137s] 3: +    }
[4.137s] 3: +
[4.137s] 3: +    return *this;
[4.138s] 3: +  }
[4.138s] 3: +
[4.138s] 3: +  template < typename T >
[4.138s] 3: +  Matrix < T > operator ^ (const Matrix < T > &lhs, const T & a)
[4.138s] 3: +  {
[4.138s] 3: +    Matrix < T > tmp(lhs.nrows(), lhs.ncols());
[4.138s] 3: +    for (unsigned int i = 0; i < lhs.nrows(); i++) {
[4.138s] 3: +      for (unsigned int j = 0; j < lhs.ncols(); j++) {
[4.138s] 3: +        tmp[i][j] = pow(lhs[i][j], a);
[4.138s] 3: +      }
[4.138s] 3: +    }
[4.138s] 3: +
[4.138s] 3: +    return tmp;
[4.138s] 3: +  }
[4.138s] 3: +
[4.138s] 3: +  template < typename T >
[4.138s] 3: +  inline Matrix < T > & Matrix < T > ::operator ^= (const Matrix < T > &rhs)
[4.138s] 3: +  {
[4.138s] 3: +    if (m != rhs.ncols() || n != rhs.nrows()) {
[4.138s] 3: +      throw std::logic_error("Operator^=: matrices have different sizes");
[4.138s] 3: +    }
[4.138s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.138s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.138s] 3: +        v[i][j] = pow(v[i][j], rhs[i][j]);
[4.139s] 3: +      }
[4.139s] 3: +    }
[4.139s] 3: +
[4.139s] 3: +    return *this;
[4.139s] 3: +  }
[4.139s] 3: +
[4.139s] 3: +
[4.139s] 3: +  template < typename T >
[4.139s] 3: +  inline Matrix < T > & Matrix < T > ::operator ^= (const T & a)
[4.139s] 3: +  {
[4.139s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.139s] 3: +      for (unsigned int j = 0; j < m; j++) {
[4.139s] 3: +        v[i][j] = pow(v[i][j], a);
[4.139s] 3: +      }
[4.139s] 3: +    }
[4.139s] 3: +
[4.139s] 3: +    return *this;
[4.139s] 3: +  }
[4.139s] 3: +
[4.139s] 3: +  template < typename T >
[4.139s] 3: +  inline Matrix < T > ::operator Vector < T > ()
[4.139s] 3: +  {
[4.139s] 3: +    if (n > 1 && m > 1) {
[4.140s] 3: +      throw std::logic_error(
[4.140s] 3: +        "Error matrix cast to vector: trying to cast a multi-dimensional matrix");
[4.140s] 3: +    }
[4.140s] 3: +    if (n == 1) {
[4.140s] 3: +      return extractRow(0);
[4.140s] 3: +    } else {
[4.140s] 3: +      return extractColumn(0);
[4.140s] 3: +    }
[4.140s] 3: +  }
[4.140s] 3: +
[4.140s] 3: +  template < typename T >
[4.140s] 3: +  inline bool operator == (const Matrix < T > &a, const Matrix < T > &b)
[4.140s] 3: +  {
[4.140s] 3: +    if (a.nrows() != b.nrows() || a.ncols() != b.ncols()) {
[4.140s] 3: +      throw std::logic_error("Matrices of different size are not confrontable");
[4.140s] 3: +    }
[4.140s] 3: +    for (unsigned i = 0; i < a.nrows(); i++) {
[4.140s] 3: +      for (unsigned j = 0; j < a.ncols(); j++) {
[4.140s] 3: +        if (a[i][j] != b[i][j]) {
[4.140s] 3: +          return false;
[4.140s] 3: +        }
[4.140s] 3: +      }
[4.140s] 3: +    }
[4.140s] 3: +    return true;
[4.141s] 3: +  }
[4.141s] 3: +
[4.141s] 3: +  template < typename T >
[4.141s] 3: +  inline bool operator != (const Matrix < T > &a, const Matrix < T > &b)
[4.141s] 3: +  {
[4.141s] 3: +    if (a.nrows() != b.nrows() || a.ncols() != b.ncols()) {
[4.141s] 3: +      throw std::logic_error("Matrices of different size are not confrontable");
[4.141s] 3: +    }
[4.141s] 3: +    for (unsigned i = 0; i < a.nrows(); i++) {
[4.141s] 3: +      for (unsigned j = 0; j < a.ncols(); j++) {
[4.141s] 3: +        if (a[i][j] != b[i][j]) {
[4.141s] 3: +          return true;
[4.141s] 3: +        }
[4.141s] 3: +      }
[4.141s] 3: +    }
[4.141s] 3: +    return false;
[4.141s] 3: +  }
[4.141s] 3: @@ -1601 +1824 @@
[4.141s] 3: -   Input/Output 
[4.141s] 3: +   Input/Output
[4.141s] 3: @@ -1603,300 +1826,297 @@
[4.141s] 3: -template <typename T>
[4.142s] 3: -std::ostream& operator<<(std::ostream& os, const Matrix<T>& m)
[4.142s] 3: -{
[4.142s] 3: -  os << std::endl << m.nrows() << " " << m.ncols() << std::endl;
[4.142s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.142s] 3: -    {
[4.142s] 3: -      for (unsigned int j = 0; j < m.ncols() - 1; j++)
[4.142s] 3: -	os << std::setw(20) << std::setprecision(16) << m[i][j] << ", ";
[4.142s] 3: -      os << std::setw(20) << std::setprecision(16) << m[i][m.ncols() - 1] << std::endl;
[4.142s] 3: -    }
[4.142s] 3: -	
[4.142s] 3: -  return os;
[4.142s] 3: -}
[4.142s] 3: -
[4.142s] 3: -template <typename T>
[4.142s] 3: -std::istream& operator>>(std::istream& is, Matrix<T>& m)
[4.142s] 3: -{
[4.142s] 3: -  int rows, cols;
[4.142s] 3: -  char comma;
[4.142s] 3: -  is >> rows >> cols;
[4.142s] 3: -  m.resize(rows, cols);
[4.142s] 3: -  for (unsigned int i = 0; i < rows; i++)
[4.143s] 3: -    for (unsigned int j = 0; j < cols; j++)
[4.143s] 3: -      is >> m[i][j] >> comma;
[4.143s] 3: -	
[4.143s] 3: -  return is;
[4.143s] 3: -}
[4.143s] 3: -
[4.143s] 3: -template <typename T>
[4.143s] 3: -T sign(const T& v)
[4.143s] 3: -{
[4.143s] 3: -  if (v >= (T)0.0)
[4.143s] 3: -    return (T)1.0;
[4.143s] 3: -  else
[4.143s] 3: -    return (T)-1.0;
[4.143s] 3: -}
[4.143s] 3: -
[4.143s] 3: -template <typename T>
[4.143s] 3: -T dist(const T& a, const T& b)
[4.143s] 3: -{
[4.143s] 3: -  T abs_a = (T)fabs(a), abs_b = (T)fabs(b);
[4.143s] 3: -  if (abs_a > abs_b)
[4.143s] 3: -    return abs_a * sqrt((T)1.0 + (abs_b / abs_a) * (abs_b / abs_a));
[4.143s] 3: -  else
[4.143s] 3: -    return (abs_b == (T)0.0 ? (T)0.0 : abs_b * sqrt((T)1.0 + (abs_a / abs_b) * (abs_a / abs_b)));
[4.143s] 3: -}
[4.144s] 3: -
[4.144s] 3: -template <typename T>
[4.144s] 3: -void svd(const Matrix<T>& A, Matrix<T>& U, Vector<T>& W, Matrix<T>& V)
[4.144s] 3: -{
[4.144s] 3: -  int m = A.nrows(), n = A.ncols(), i, j, k, l, jj, nm;
[4.144s] 3: -  const unsigned int max_its = 30;
[4.144s] 3: -  bool flag;
[4.144s] 3: -  Vector<T> rv1(n);
[4.144s] 3: -  U = A;
[4.144s] 3: -  W.resize(n);
[4.144s] 3: -  V.resize(n, n);
[4.144s] 3: -  T anorm, c, f, g, h, s, scale, x, y, z;
[4.144s] 3: -  g = scale = anorm = (T)0.0;
[4.144s] 3: -	
[4.144s] 3: -  // Householder reduction to bidiagonal form
[4.144s] 3: -  for (i = 0; i < n; i++)
[4.144s] 3: -    {
[4.144s] 3: -      l = i + 1;
[4.144s] 3: -      rv1[i] = scale * g;
[4.144s] 3: -      g = s = scale = (T)0.0;
[4.144s] 3: -      if (i < m)
[4.144s] 3: -	{
[4.144s] 3: -	  for (k = i; k < m; k++)
[4.144s] 3: -	    scale += fabs(U[k][i]);
[4.145s] 3: -	  if (scale != (T)0.0)
[4.145s] 3: -	    {
[4.145s] 3: -	      for (k = i; k < m; k++)
[4.145s] 3: -		{
[4.145s] 3: -		  U[k][i] /= scale;
[4.145s] 3: -		  s += U[k][i] * U[k][i];
[4.145s] 3: -		}
[4.145s] 3: -	      f = U[i][i];
[4.145s] 3: -	      g = -sign(f) * sqrt(s);
[4.145s] 3: -	      h = f * g - s;
[4.145s] 3: -	      U[i][i] = f - g;
[4.145s] 3: -	      for (j = l; j < n; j++)
[4.145s] 3: -		{
[4.145s] 3: -		  s = (T)0.0;
[4.145s] 3: -		  for (k = i; k < m; k++)
[4.145s] 3: -		    s += U[k][i] * U[k][j];
[4.145s] 3: -		  f = s / h;
[4.145s] 3: -		  for (k = i; k < m; k++)
[4.145s] 3: -		    U[k][j] += f * U[k][i];
[4.145s] 3: -		}
[4.145s] 3: -	      for (k = i; k < m; k++)
[4.145s] 3: -		U[k][i] *= scale;
[4.145s] 3: -	    }
[4.145s] 3: -	}
[4.146s] 3: -      W[i] = scale * g;
[4.146s] 3: -      g = s = scale = (T)0.0;
[4.146s] 3: -      if (i < m && i != n - 1)
[4.146s] 3: -	{
[4.146s] 3: -	  for (k = l; k < n; k++)
[4.146s] 3: -	    scale += fabs(U[i][k]);
[4.146s] 3: -	  if (scale != (T)0.0)
[4.146s] 3: -	    {
[4.146s] 3: -	      for (k = l; k < n; k++)
[4.146s] 3: -		{
[4.146s] 3: -		  U[i][k] /= scale;
[4.146s] 3: -		  s += U[i][k] * U[i][k];					
[4.146s] 3: -		}
[4.146s] 3: -	      f = U[i][l];
[4.146s] 3: -	      g = -sign(f) * sqrt(s);
[4.146s] 3: -	      h = f * g - s;
[4.146s] 3: -	      U[i][l] = f - g;
[4.147s] 3: -	      for (k = l; k <n; k++)
[4.147s] 3: -		rv1[k] = U[i][k] / h;
[4.147s] 3: -	      for (j = l; j < m; j++)
[4.147s] 3: -		{
[4.147s] 3: -		  s = (T)0.0;
[4.147s] 3: -		  for (k = l; k < n; k++)
[4.147s] 3: -		    s += U[j][k] * U[i][k];
[4.147s] 3: -		  for (k = l; k < n; k++)
[4.147s] 3: -		    U[j][k] += s * rv1[k];
[4.147s] 3: -		}
[4.147s] 3: -	      for (k = l; k < n; k++)
[4.147s] 3: -		U[i][k] *= scale;
[4.147s] 3: -	    }
[4.147s] 3: -	}
[4.147s] 3: -      anorm = std::max(anorm, fabs(W[i]) + fabs(rv1[i]));
[4.147s] 3: -    }
[4.147s] 3: -  // Accumulation of right-hand transformations
[4.147s] 3: -  for (i = n - 1; i >= 0; i--)
[4.147s] 3: -    {
[4.147s] 3: -      if (i < n - 1) 
[4.147s] 3: -	{
[4.147s] 3: -	  if (g != (T)0.0)
[4.147s] 3: -	    {
[4.148s] 3: -	      for (j = l; j < n; j++)
[4.148s] 3: -		V[j][i] = (U[i][j] / U[i][l]) / g;
[4.148s] 3: -	      for (j = l; j < n; j++)
[4.148s] 3: -		{
[4.148s] 3: -		  s = (T)0.0;
[4.148s] 3: -		  for (k = l; k < n; k++)
[4.148s] 3: -		    s += U[i][k] * V[k][j];
[4.148s] 3: -		  for (k = l; k < n; k++)
[4.148s] 3: -		    V[k][j] += s * V[k][i];
[4.148s] 3: -		}
[4.148s] 3: -	    }
[4.148s] 3: -	  for (j = l; j < n; j++)
[4.148s] 3: -	    V[i][j] = V[j][i] = (T)0.0;
[4.148s] 3: -	}
[4.148s] 3: -      V[i][i] = (T)1.0;
[4.148s] 3: -      g = rv1[i];
[4.148s] 3: -      l = i;
[4.148s] 3: -    }
[4.148s] 3: -  // Accumulation of left-hand transformations
[4.148s] 3: -  for (i = std::min(m, n) - 1; i >= 0; i--)
[4.148s] 3: -    {
[4.148s] 3: -      l = i + 1;
[4.149s] 3: -      g = W[i];
[4.149s] 3: -      for (j = l; j < n; j++)
[4.149s] 3: -	U[i][j] = (T)0.0;
[4.149s] 3: -      if (g != (T)0.0)
[4.149s] 3: -	{
[4.149s] 3: -	  g = (T)1.0 / g;
[4.149s] 3: -	  for (j = l; j < n; j++)
[4.149s] 3: -	    {
[4.149s] 3: -	      s = (T)0.0;
[4.149s] 3: -	      for (k = l; k < m; k++)
[4.149s] 3: -		s += U[k][i] * U[k][j];
[4.149s] 3: -	      f = (s / U[i][i]) * g;
[4.149s] 3: -	      for (k = i; k < m; k++)
[4.149s] 3: -		U[k][j] += f * U[k][i];
[4.149s] 3: -	    }
[4.149s] 3: -	  for (j = i; j < m; j++)
[4.149s] 3: -	    U[j][i] *= g;
[4.149s] 3: -	}
[4.149s] 3: -      else
[4.149s] 3: -	for (j = i; j < m; j++)
[4.149s] 3: -	  U[j][i] = (T)0.0;
[4.149s] 3: -      U[i][i]++;
[4.149s] 3: -    }
[4.149s] 3: -  // Diagonalization of the bidiagonal form: loop over singular values, and over allowed iterations.
[4.150s] 3: -  for (k = n - 1; k >= 0; k--)
[4.150s] 3: -    {
[4.150s] 3: -      for (unsigned int its = 0; its < max_its; its++)
[4.150s] 3: -	{
[4.150s] 3: -	  flag = true;
[4.150s] 3: -	  for (l = k; l >= 0; l--) // FIXME: in NR it was l >= 1 but there subscripts start from one
[4.150s] 3: -	    { // Test for splitting
[4.150s] 3: -	      nm = l - 1; // Note that rV[0] is always zero
[4.150s] 3: -	      if ((T)(fabs(rv1[l]) + anorm) == anorm)
[4.150s] 3: -		{
[4.150s] 3: -		  flag = false;
[4.150s] 3: -		  break;
[4.150s] 3: -		}
[4.150s] 3: -	      if ((T)(fabs(W[nm]) + anorm) == anorm)
[4.150s] 3: -		break;
[4.150s] 3: -	    }
[4.150s] 3: -	  if (flag)
[4.150s] 3: -	    {
[4.150s] 3: -	      // Cancellation of rv1[l], if l > 0 FIXME: it was l > 1 in NR
[4.150s] 3: -	      c = (T)0.0;
[4.150s] 3: -	      s = (T)1.0;
[4.150s] 3: -	      for (i = l; i <= k; i++)
[4.150s] 3: -		{
[4.150s] 3: -		  f = s * rv1[i];
[4.151s] 3: -		  rv1[i] *= c;
[4.151s] 3: -		  if ((T)(fabs(f) + anorm) == anorm)
[4.151s] 3: -		    break;
[4.151s] 3: -		  g = W[i];
[4.151s] 3: -		  h = dist(f, g);
[4.151s] 3: -		  W[i] = h;
[4.151s] 3: -		  h = (T)1.0 / h;
[4.151s] 3: -		  c = g * h;
[4.151s] 3: -		  s = -f * h;
[4.151s] 3: -		  for (j = 0; j < m; j++)
[4.151s] 3: -		    {
[4.151s] 3: -		      y = U[j][nm];
[4.151s] 3: -		      z = U[j][i];
[4.151s] 3: -		      U[j][nm] = y * c + z * s;
[4.151s] 3: -		      U[j][i] = z * c - y * s;
[4.151s] 3: -		    }
[4.151s] 3: -		}
[4.151s] 3: -	    }
[4.151s] 3: -	  z = W[k];
[4.151s] 3: -	  if (l == k)
[4.151s] 3: -	    {  // Convergence
[4.151s] 3: -	      if (z < (T)0.0)
[4.151s] 3: -		{ // Singular value is made nonnegative
[4.152s] 3: -		  W[k] = -z;
[4.152s] 3: -		  for (j = 0; j < n; j++)
[4.152s] 3: -		    V[j][k] = -V[j][k];
[4.152s] 3: -		}
[4.152s] 3: -	      break;
[4.152s] 3: -	    }
[4.152s] 3: -	  if (its == max_its)
[4.152s] 3: -	    throw std::logic_error("Error svd: no convergence in the maximum number of iterations");
[4.152s] 3: -	  x = W[l];
[4.152s] 3: -	  nm = k - 1;
[4.152s] 3: -	  y = W[nm];
[4.152s] 3: -	  g = rv1[nm];
[4.152s] 3: -	  h = rv1[k];
[4.152s] 3: -	  f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);
[4.152s] 3: -	  g = dist(f, (T)1.0);
[4.152s] 3: -	  f = ((x - z) * (x + z) + h * ((y / (f + sign(f)*fabs(g))) - h)) / x;
[4.152s] 3: -	  c = s = (T)1.0; // Next QR transformation
[4.152s] 3: -	  for (j = l; j <= nm; j++)
[4.152s] 3: -	    {
[4.152s] 3: -	      i = j + 1;
[4.152s] 3: -	      g = rv1[i];
[4.152s] 3: -	      y = W[i];
[4.152s] 3: -	      h = s * g;
[4.152s] 3: -	      g *= c;
[4.153s] 3: -	      z = dist(f, h);
[4.153s] 3: -	      rv1[j] = z;
[4.153s] 3: -	      c = f / z;
[4.153s] 3: -	      s = h / z;
[4.153s] 3: -	      f = x * c + g * s;
[4.153s] 3: -	      g = g * c - x * s;
[4.153s] 3: -	      h = y * s;
[4.153s] 3: -	      y *= c;
[4.153s] 3: -	      for (jj = 0; jj < n; jj++)
[4.153s] 3: -		{
[4.153s] 3: -		  x = V[jj][j];
[4.153s] 3: -		  z = V[jj][i];
[4.153s] 3: -		  V[jj][j] = x * c + z * s;
[4.153s] 3: -		  V[jj][i] = z * c - x * s;
[4.153s] 3: -		}
[4.153s] 3: -	      z = dist(f, h);
[4.153s] 3: -	      W[j] = z; 
[4.153s] 3: -	      if (z != 0) // Rotation can be arbitrary if z = 0
[4.153s] 3: -		{
[4.153s] 3: -		  z = (T)1.0 / z;
[4.153s] 3: -		  c = f * z;
[4.153s] 3: -		  s = h * z;
[4.153s] 3: -		}
[4.153s] 3: -	      f = c * g + s * y;
[4.154s] 3: -	      x = c * y - s * g;
[4.154s] 3: -	      for (jj = 0; jj < m; jj++)
[4.154s] 3: -		{
[4.154s] 3: -		  y = U[jj][j];
[4.154s] 3: -		  z = U[jj][i];
[4.154s] 3: -		  U[jj][j] = y * c + z * s;
[4.154s] 3: -		  U[jj][i] = z * c - y * s;
[4.154s] 3: -		}
[4.154s] 3: -	    }
[4.154s] 3: -	  rv1[l] = (T)0.0;
[4.154s] 3: -	  rv1[k] = f;
[4.154s] 3: -	  W[k] = x;
[4.154s] 3: -	}
[4.154s] 3: -    }	
[4.154s] 3: -}
[4.154s] 3: -
[4.154s] 3: -template <typename T>
[4.154s] 3: -Matrix<T> pinv(const Matrix<T>& A)
[4.154s] 3: -{
[4.154s] 3: -  Matrix<T> U, V, x, tmp(A.ncols(), A.nrows());
[4.154s] 3: -  Vector<T> W;
[4.154s] 3: -  CanonicalBaseVector<T> e(0, A.nrows());
[4.154s] 3: -  svd(A, U, W, V);
[4.154s] 3: -  for (unsigned int i = 0; i < A.nrows(); i++)
[4.154s] 3: -    {
[4.155s] 3: +  template < typename T >
[4.155s] 3: +  std::ostream & operator << (std::ostream & os, const Matrix < T > &m)
[4.155s] 3: +      {
[4.155s] 3: +      os << std::endl << m.nrows() << " " << m.ncols() << std::endl;
[4.155s] 3: +      for (unsigned int i = 0; i < m.nrows(); i++) {
[4.155s] 3: +        for (unsigned int j = 0; j < m.ncols() - 1; j++) {
[4.155s] 3: +          os << std::setw(20) << std::setprecision(16) << m[i][j] << ", ";
[4.155s] 3: +        }
[4.155s] 3: +        os << std::setw(20) << std::setprecision(16) << m[i][m.ncols() - 1] << std::endl;
[4.155s] 3: +      }
[4.155s] 3: +
[4.155s] 3: +      return os;
[4.155s] 3: +    }
[4.155s] 3: +
[4.155s] 3: +    template < typename T >
[4.155s] 3: +    std::istream & operator >> (std::istream & is, Matrix < T > &m)
[4.155s] 3: +      {
[4.155s] 3: +      int rows, cols;
[4.155s] 3: +      char comma;
[4.155s] 3: +      is >> rows >> cols;
[4.155s] 3: +      m.resize(rows, cols);
[4.155s] 3: +      for (unsigned int i = 0; i < rows; i++) {
[4.156s] 3: +        for (unsigned int j = 0; j < cols; j++) {
[4.156s] 3: +          is >> m[i][j] >> comma;
[4.156s] 3: +        }
[4.156s] 3: +      }
[4.156s] 3: +
[4.156s] 3: +      return is;
[4.156s] 3: +    }
[4.156s] 3: +
[4.156s] 3: +    template < typename T >
[4.156s] 3: +    T sign(const T & v)
[4.156s] 3: +      {
[4.156s] 3: +      if (v >= (T)0.0) {
[4.156s] 3: +        return (T)1.0;
[4.156s] 3: +      } else {
[4.156s] 3: +        return (T)-1.0;
[4.156s] 3: +      }
[4.156s] 3: +    }
[4.156s] 3: +
[4.156s] 3: +    template < typename T >
[4.156s] 3: +    T dist(const T & a, const T & b)
[4.156s] 3: +      {
[4.156s] 3: +      T abs_a = (T)fabs(a), abs_b = (T)fabs(b);
[4.157s] 3: +      if (abs_a > abs_b) {
[4.157s] 3: +        return abs_a * sqrt((T)1.0 + (abs_b / abs_a) * (abs_b / abs_a));
[4.157s] 3: +      } else {
[4.157s] 3: +        return abs_b == (T)0.0 ? (T)0.0 : abs_b * sqrt((T)1.0 + (abs_a / abs_b) * (abs_a / abs_b));
[4.157s] 3: +      }
[4.157s] 3: +    }
[4.157s] 3: +
[4.157s] 3: +    template < typename T >
[4.157s] 3: +    void svd(const Matrix < T > & A, Matrix < T > & U, Vector < T > & W, Matrix < T > & V)
[4.157s] 3: +      {
[4.157s] 3: +      int m = A.nrows(), n = A.ncols(), i, j, k, l, jj, nm;
[4.157s] 3: +      const unsigned int max_its = 30;
[4.157s] 3: +      bool flag;
[4.157s] 3: +      Vector < T > rv1(n);
[4.157s] 3: +      U = A;
[4.157s] 3: +      W.resize(n);
[4.157s] 3: +      V.resize(n, n);
[4.157s] 3: +      T anorm, c, f, g, h, s, scale, x, y, z;
[4.157s] 3: +      g = scale = anorm = (T)0.0;
[4.157s] 3: +
[4.157s] 3: +      // Householder reduction to bidiagonal form
[4.157s] 3: +      for (i = 0; i < n; i++) {
[4.158s] 3: +        l = i + 1;
[4.158s] 3: +        rv1[i] = scale * g;
[4.158s] 3: +        g = s = scale = (T)0.0;
[4.158s] 3: +        if (i < m) {
[4.158s] 3: +          for (k = i; k < m; k++) {
[4.158s] 3: +            scale += fabs(U[k][i]);
[4.158s] 3: +          }
[4.158s] 3: +          if (scale != (T)0.0) {
[4.158s] 3: +            for (k = i; k < m; k++) {
[4.158s] 3: +              U[k][i] /= scale;
[4.158s] 3: +              s += U[k][i] * U[k][i];
[4.158s] 3: +            }
[4.158s] 3: +            f = U[i][i];
[4.158s] 3: +            g = -sign(f) * sqrt(s);
[4.158s] 3: +            h = f * g - s;
[4.158s] 3: +            U[i][i] = f - g;
[4.158s] 3: +            for (j = l; j < n; j++) {
[4.158s] 3: +              s = (T)0.0;
[4.158s] 3: +              for (k = i; k < m; k++) {
[4.158s] 3: +                s += U[k][i] * U[k][j];
[4.158s] 3: +              }
[4.158s] 3: +              f = s / h;
[4.158s] 3: +              for (k = i; k < m; k++) {
[4.159s] 3: +                U[k][j] += f * U[k][i];
[4.159s] 3: +              }
[4.159s] 3: +            }
[4.159s] 3: +            for (k = i; k < m; k++) {
[4.159s] 3: +              U[k][i] *= scale;
[4.159s] 3: +            }
[4.159s] 3: +          }
[4.159s] 3: +        }
[4.159s] 3: +        W[i] = scale * g;
[4.159s] 3: +        g = s = scale = (T)0.0;
[4.159s] 3: +        if (i < m && i != n - 1) {
[4.159s] 3: +          for (k = l; k < n; k++) {
[4.159s] 3: +            scale += fabs(U[i][k]);
[4.159s] 3: +          }
[4.159s] 3: +          if (scale != (T)0.0) {
[4.159s] 3: +            for (k = l; k < n; k++) {
[4.159s] 3: +              U[i][k] /= scale;
[4.159s] 3: +              s += U[i][k] * U[i][k];
[4.159s] 3: +            }
[4.159s] 3: +            f = U[i][l];
[4.159s] 3: +            g = -sign(f) * sqrt(s);
[4.159s] 3: +            h = f * g - s;
[4.159s] 3: +            U[i][l] = f - g;
[4.159s] 3: +            for (k = l; k < n; k++) {
[4.160s] 3: +              rv1[k] = U[i][k] / h;
[4.160s] 3: +            }
[4.160s] 3: +            for (j = l; j < m; j++) {
[4.160s] 3: +              s = (T)0.0;
[4.160s] 3: +              for (k = l; k < n; k++) {
[4.160s] 3: +                s += U[j][k] * U[i][k];
[4.160s] 3: +              }
[4.160s] 3: +              for (k = l; k < n; k++) {
[4.160s] 3: +                U[j][k] += s * rv1[k];
[4.160s] 3: +              }
[4.160s] 3: +            }
[4.160s] 3: +            for (k = l; k < n; k++) {
[4.160s] 3: +              U[i][k] *= scale;
[4.160s] 3: +            }
[4.160s] 3: +          }
[4.160s] 3: +        }
[4.160s] 3: +        anorm = std::max(anorm, fabs(W[i]) + fabs(rv1[i]));
[4.160s] 3: +      }
[4.160s] 3: +      // Accumulation of right-hand transformations
[4.161s] 3: +      for (i = n - 1; i >= 0; i--) {
[4.161s] 3: +        if (i < n - 1) {
[4.161s] 3: +          if (g != (T)0.0) {
[4.161s] 3: +            for (j = l; j < n; j++) {
[4.161s] 3: +              V[j][i] = (U[i][j] / U[i][l]) / g;
[4.161s] 3: +            }
[4.161s] 3: +            for (j = l; j < n; j++) {
[4.161s] 3: +              s = (T)0.0;
[4.161s] 3: +              for (k = l; k < n; k++) {
[4.161s] 3: +                s += U[i][k] * V[k][j];
[4.161s] 3: +              }
[4.161s] 3: +              for (k = l; k < n; k++) {
[4.161s] 3: +                V[k][j] += s * V[k][i];
[4.161s] 3: +              }
[4.161s] 3: +            }
[4.161s] 3: +          }
[4.161s] 3: +          for (j = l; j < n; j++) {
[4.161s] 3: +            V[i][j] = V[j][i] = (T)0.0;
[4.161s] 3: +          }
[4.161s] 3: +        }
[4.161s] 3: +        V[i][i] = (T)1.0;
[4.161s] 3: +        g = rv1[i];
[4.161s] 3: +        l = i;
[4.161s] 3: +      }
[4.162s] 3: +      // Accumulation of left-hand transformations
[4.162s] 3: +      for (i = std::min(m, n) - 1; i >= 0; i--) {
[4.162s] 3: +        l = i + 1;
[4.162s] 3: +        g = W[i];
[4.162s] 3: +        for (j = l; j < n; j++) {
[4.162s] 3: +          U[i][j] = (T)0.0;
[4.162s] 3: +        }
[4.162s] 3: +        if (g != (T)0.0) {
[4.162s] 3: +          g = (T)1.0 / g;
[4.162s] 3: +          for (j = l; j < n; j++) {
[4.162s] 3: +            s = (T)0.0;
[4.162s] 3: +            for (k = l; k < m; k++) {
[4.162s] 3: +              s += U[k][i] * U[k][j];
[4.162s] 3: +            }
[4.162s] 3: +            f = (s / U[i][i]) * g;
[4.162s] 3: +            for (k = i; k < m; k++) {
[4.162s] 3: +              U[k][j] += f * U[k][i];
[4.162s] 3: +            }
[4.162s] 3: +          }
[4.162s] 3: +          for (j = i; j < m; j++) {
[4.162s] 3: +            U[j][i] *= g;
[4.162s] 3: +          }
[4.162s] 3: +        } else {
[4.162s] 3: +          for (j = i; j < m; j++) {
[4.163s] 3: +            U[j][i] = (T)0.0;
[4.163s] 3: +          }
[4.163s] 3: +        }
[4.163s] 3: +        U[i][i]++;
[4.163s] 3: +      }
[4.163s] 3: +      // Diagonalization of the bidiagonal form: loop over singular values, and over allowed iterations.
[4.163s] 3: +      for (k = n - 1; k >= 0; k--) {
[4.163s] 3: +        for (unsigned int its = 0; its < max_its; its++) {
[4.163s] 3: +          flag = true;
[4.163s] 3: +          for (l = k; l >= 0; l--) { // FIXME: in NR it was l >= 1 but there subscripts start from one
[4.163s] 3: +            // Test for splitting
[4.163s] 3: +            nm = l - 1;   // Note that rV[0] is always zero
[4.163s] 3: +            if ((T)(fabs(rv1[l]) + anorm) == anorm) {
[4.163s] 3: +              flag = false;
[4.163s] 3: +              break;
[4.163s] 3: +            }
[4.163s] 3: +            if ((T)(fabs(W[nm]) + anorm) == anorm) {
[4.163s] 3: +              break;
[4.163s] 3: +            }
[4.163s] 3: +          }
[4.163s] 3: +          if (flag) {
[4.163s] 3: +            // Cancellation of rv1[l], if l > 0 FIXME: it was l > 1 in NR
[4.163s] 3: +            c = (T)0.0;
[4.164s] 3: +            s = (T)1.0;
[4.164s] 3: +            for (i = l; i <= k; i++) {
[4.164s] 3: +              f = s * rv1[i];
[4.164s] 3: +              rv1[i] *= c;
[4.164s] 3: +              if ((T)(fabs(f) + anorm) == anorm) {
[4.164s] 3: +                break;
[4.164s] 3: +              }
[4.164s] 3: +              g = W[i];
[4.164s] 3: +              h = dist(f, g);
[4.164s] 3: +              W[i] = h;
[4.164s] 3: +              h = (T)1.0 / h;
[4.164s] 3: +              c = g * h;
[4.164s] 3: +              s = -f * h;
[4.164s] 3: +              for (j = 0; j < m; j++) {
[4.164s] 3: +                y = U[j][nm];
[4.164s] 3: +                z = U[j][i];
[4.164s] 3: +                U[j][nm] = y * c + z * s;
[4.164s] 3: +                U[j][i] = z * c - y * s;
[4.164s] 3: +              }
[4.164s] 3: +            }
[4.164s] 3: +          }
[4.164s] 3: +          z = W[k];
[4.164s] 3: +          if (l == k) { // Convergence
[4.164s] 3: +            if (z < (T)0.0) { // Singular value is made nonnegative
[4.165s] 3: +              W[k] = -z;
[4.165s] 3: +              for (j = 0; j < n; j++) {
[4.165s] 3: +                V[j][k] = -V[j][k];
[4.165s] 3: +              }
[4.165s] 3: +            }
[4.165s] 3: +            break;
[4.165s] 3: +          }
[4.165s] 3: +          if (its == max_its) {
[4.165s] 3: +            throw std::logic_error("Error svd: no convergence in the maximum number of iterations");
[4.165s] 3: +          }
[4.165s] 3: +          x = W[l];
[4.165s] 3: +          nm = k - 1;
[4.165s] 3: +          y = W[nm];
[4.165s] 3: +          g = rv1[nm];
[4.165s] 3: +          h = rv1[k];
[4.165s] 3: +          f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2.0 * h * y);
[4.165s] 3: +          g = dist(f, (T)1.0);
[4.165s] 3: +          f = ((x - z) * (x + z) + h * ((y / (f + sign(f) * fabs(g))) - h)) / x;
[4.165s] 3: +          c = s = (T)1.0; // Next QR transformation
[4.165s] 3: +          for (j = l; j <= nm; j++) {
[4.165s] 3: +            i = j + 1;
[4.165s] 3: +            g = rv1[i];
[4.165s] 3: +            y = W[i];
[4.165s] 3: +            h = s * g;
[4.166s] 3: +            g *= c;
[4.166s] 3: +            z = dist(f, h);
[4.166s] 3: +            rv1[j] = z;
[4.166s] 3: +            c = f / z;
[4.166s] 3: +            s = h / z;
[4.166s] 3: +            f = x * c + g * s;
[4.166s] 3: +            g = g * c - x * s;
[4.166s] 3: +            h = y * s;
[4.166s] 3: +            y *= c;
[4.166s] 3: +            for (jj = 0; jj < n; jj++) {
[4.166s] 3: +              x = V[jj][j];
[4.166s] 3: +              z = V[jj][i];
[4.166s] 3: +              V[jj][j] = x * c + z * s;
[4.166s] 3: +              V[jj][i] = z * c - x * s;
[4.166s] 3: +            }
[4.166s] 3: +            z = dist(f, h);
[4.166s] 3: +            W[j] = z;
[4.166s] 3: +            if (z != 0) { // Rotation can be arbitrary if z = 0
[4.166s] 3: +              z = (T)1.0 / z;
[4.166s] 3: +              c = f * z;
[4.166s] 3: +              s = h * z;
[4.166s] 3: +            }
[4.166s] 3: +            f = c * g + s * y;
[4.167s] 3: +            x = c * y - s * g;
[4.167s] 3: +            for (jj = 0; jj < m; jj++) {
[4.167s] 3: +              y = U[jj][j];
[4.167s] 3: +              z = U[jj][i];
[4.167s] 3: +              U[jj][j] = y * c + z * s;
[4.167s] 3: +              U[jj][i] = z * c - y * s;
[4.167s] 3: +            }
[4.167s] 3: +          }
[4.167s] 3: +          rv1[l] = (T)0.0;
[4.167s] 3: +          rv1[k] = f;
[4.167s] 3: +          W[k] = x;
[4.167s] 3: +        }
[4.167s] 3: +      }
[4.167s] 3: +      }
[4.167s] 3: +
[4.167s] 3: +  template < typename T >
[4.167s] 3: +  Matrix < T > pinv(const Matrix < T > &A)
[4.167s] 3: +  {
[4.167s] 3: +    Matrix < T > U, V, x, tmp(A.ncols(), A.nrows());
[4.167s] 3: +    Vector < T > W;
[4.167s] 3: +    CanonicalBaseVector < T > e(0, A.nrows());
[4.167s] 3: +    svd(A, U, W, V);
[4.167s] 3: +    for (unsigned int i = 0; i < A.nrows(); i++) {
[4.167s] 3: @@ -1904,20 +2124,25 @@
[4.168s] 3: -      tmp.setColumn(i, dot_prod(dot_prod(dot_prod(V, Matrix<double>(DIAG, 1.0 / W, 0.0, W.size(), W.size())), t(U)), e));
[4.168s] 3: -    }
[4.168s] 3: -		
[4.168s] 3: -  return tmp;
[4.168s] 3: -}
[4.168s] 3: -
[4.168s] 3: -template <typename T>
[4.168s] 3: -int lu(const Matrix<T>& A, Matrix<T>& LU, Vector<unsigned int>& index)
[4.168s] 3: -{
[4.168s] 3: -  if (A.ncols() != A.nrows())
[4.168s] 3: -    throw std::logic_error("Error in LU decomposition: matrix must be squared");
[4.168s] 3: -  int i, p, j, k, n = A.ncols(), ex;
[4.168s] 3: -  T val, tmp;
[4.168s] 3: -  Vector<T> d(n);
[4.168s] 3: -  LU = A;
[4.168s] 3: -  index.resize(n);
[4.168s] 3: -	
[4.168s] 3: -  ex = 1;
[4.168s] 3: -  for (i = 0; i < n; i++)
[4.168s] 3: -    {
[4.168s] 3: +      tmp.setColumn(
[4.168s] 3: +        i,
[4.169s] 3: +        dot_prod(
[4.169s] 3: +          dot_prod(
[4.169s] 3: +            dot_prod(V, Matrix < double > (DIAG, 1.0 / W, 0.0, W.size(), W.size())),
[4.169s] 3: +            t(U)), e));
[4.169s] 3: +    }
[4.169s] 3: +
[4.169s] 3: +    return tmp;
[4.169s] 3: +  }
[4.169s] 3: +
[4.169s] 3: +  template < typename T >
[4.169s] 3: +  int lu(const Matrix < T > & A, Matrix < T > & LU, Vector < unsigned int > & index)
[4.169s] 3: +  {
[4.169s] 3: +    if (A.ncols() != A.nrows()) {
[4.169s] 3: +      throw std::logic_error("Error in LU decomposition: matrix must be squared");
[4.169s] 3: +    }
[4.169s] 3: +    int i, p, j, k, n = A.ncols(), ex;
[4.169s] 3: +    T val, tmp;
[4.169s] 3: +    Vector < T > d(n);
[4.169s] 3: +    LU = A;
[4.169s] 3: +    index.resize(n);
[4.169s] 3: +
[4.169s] 3: +    ex = 1;
[4.169s] 3: +    for (i = 0; i < n; i++) {
[4.170s] 3: @@ -1926,4 +2151,6 @@
[4.170s] 3: -      for (j = 0; j < n; j++)
[4.170s] 3: -	val = std::max(val, (T)fabs(LU[i][j]));
[4.170s] 3: -      if (val == (T)0.0)
[4.170s] 3: -	std::logic_error("Error in LU decomposition: matrix was singular");
[4.170s] 3: +      for (j = 0; j < n; j++) {
[4.170s] 3: +        val = std::max(val, (T)fabs(LU[i][j]));
[4.170s] 3: +      }
[4.170s] 3: +      if (val == (T)0.0) {
[4.170s] 3: +        std::logic_error("Error in LU decomposition: matrix was singular");
[4.170s] 3: +      }
[4.170s] 3: @@ -1933,2 +2160 @@
[4.171s] 3: -  for (k = 0; k < n - 1; k++)
[4.171s] 3: -    {
[4.171s] 3: +    for (k = 0; k < n - 1; k++) {
[4.171s] 3: @@ -1937,50 +2163,54 @@
[4.171s] 3: -      for (i = k + 1; i < n; i++)
[4.171s] 3: -	{
[4.171s] 3: -	  tmp = fabs(LU[i][k]) / d[i];
[4.171s] 3: -	  if (tmp > val)
[4.171s] 3: -	    {
[4.171s] 3: -	      val = tmp;
[4.171s] 3: -	      p = i;
[4.171s] 3: -	    }
[4.171s] 3: -	}
[4.171s] 3: -      if (val == (T)0.0)
[4.172s] 3: -	std::logic_error("Error in LU decomposition: matrix was singular");
[4.172s] 3: -      if (p > k)
[4.172s] 3: -	{
[4.172s] 3: -	  ex = -ex;
[4.172s] 3: -	  std::swap(index[k], index[p]);
[4.172s] 3: -	  std::swap(d[k], d[p]);
[4.172s] 3: -	  for (j = 0; j < n; j++)
[4.172s] 3: -	    std::swap(LU[k][j], LU[p][j]);
[4.172s] 3: -	}
[4.172s] 3: -		
[4.172s] 3: -      for (i = k + 1; i < n; i++)
[4.172s] 3: -	{
[4.172s] 3: -	  LU[i][k] /= LU[k][k];
[4.172s] 3: -	  for (j = k + 1; j < n; j++)
[4.172s] 3: -	    LU[i][j] -= LU[i][k] * LU[k][j];
[4.172s] 3: -	}
[4.172s] 3: -    }
[4.172s] 3: -  if (LU[n - 1][n - 1] == (T)0.0)
[4.172s] 3: -    std::logic_error("Error in LU decomposition: matrix was singular");
[4.172s] 3: -		
[4.172s] 3: -  return ex;
[4.173s] 3: -}
[4.173s] 3: -
[4.173s] 3: -template <typename T>
[4.173s] 3: -Vector<T> lu_solve(const Matrix<T>& LU, const Vector<T>& b, Vector<unsigned int>& index)
[4.173s] 3: -{
[4.173s] 3: -  if (LU.ncols() != LU.nrows())
[4.173s] 3: -    throw std::logic_error("Error in LU solve: LU matrix should be squared");
[4.173s] 3: -  unsigned int n = LU.ncols();
[4.173s] 3: -  if (b.size() != n)
[4.173s] 3: -    throw std::logic_error("Error in LU solve: b vector must be of the same dimensions of LU matrix");
[4.173s] 3: -  Vector<T> x((T)0.0, n);
[4.173s] 3: -  int i, j, p;
[4.173s] 3: -  T sum;
[4.173s] 3: -	
[4.173s] 3: -  p = index[0];
[4.173s] 3: -  x[0] = b[p];
[4.173s] 3: -	
[4.173s] 3: -  for (i = 1; i < n; i++)
[4.173s] 3: -    {
[4.173s] 3: +      for (i = k + 1; i < n; i++) {
[4.173s] 3: +        tmp = fabs(LU[i][k]) / d[i];
[4.173s] 3: +        if (tmp > val) {
[4.173s] 3: +          val = tmp;
[4.173s] 3: +          p = i;
[4.174s] 3: +        }
[4.174s] 3: +      }
[4.174s] 3: +      if (val == (T)0.0) {
[4.174s] 3: +        std::logic_error("Error in LU decomposition: matrix was singular");
[4.174s] 3: +      }
[4.174s] 3: +      if (p > k) {
[4.174s] 3: +        ex = -ex;
[4.174s] 3: +        std::swap(index[k], index[p]);
[4.174s] 3: +        std::swap(d[k], d[p]);
[4.174s] 3: +        for (j = 0; j < n; j++) {
[4.174s] 3: +          std::swap(LU[k][j], LU[p][j]);
[4.174s] 3: +        }
[4.174s] 3: +      }
[4.174s] 3: +
[4.174s] 3: +      for (i = k + 1; i < n; i++) {
[4.174s] 3: +        LU[i][k] /= LU[k][k];
[4.174s] 3: +        for (j = k + 1; j < n; j++) {
[4.174s] 3: +          LU[i][j] -= LU[i][k] * LU[k][j];
[4.174s] 3: +        }
[4.174s] 3: +      }
[4.174s] 3: +    }
[4.175s] 3: +    if (LU[n - 1][n - 1] == (T)0.0) {
[4.175s] 3: +      std::logic_error("Error in LU decomposition: matrix was singular");
[4.175s] 3: +    }
[4.175s] 3: +
[4.175s] 3: +    return ex;
[4.175s] 3: +  }
[4.175s] 3: +
[4.175s] 3: +  template < typename T >
[4.175s] 3: +  Vector < T > lu_solve(
[4.175s] 3: +    const Matrix < T > &LU, const Vector < T > &b,
[4.175s] 3: +    Vector < unsigned int > &index)
[4.175s] 3: +  {
[4.175s] 3: +    if (LU.ncols() != LU.nrows()) {
[4.175s] 3: +      throw std::logic_error("Error in LU solve: LU matrix should be squared");
[4.175s] 3: +    }
[4.175s] 3: +    unsigned int n = LU.ncols();
[4.175s] 3: +    if (b.size() != n) {
[4.175s] 3: +      throw std::logic_error(
[4.175s] 3: +        "Error in LU solve: b vector must be of the same dimensions of LU matrix");
[4.175s] 3: +    }
[4.175s] 3: +    Vector < T > x((T)0.0, n);
[4.175s] 3: +    int i, j, p;
[4.175s] 3: +    T sum;
[4.175s] 3: +
[4.176s] 3: +    p = index[0];
[4.176s] 3: +    x[0] = b[p];
[4.176s] 3: +
[4.176s] 3: +    for (i = 1; i < n; i++) {
[4.176s] 3: @@ -1988,2 +2218,3 @@
[4.176s] 3: -      for (j = 0; j < i; j++)
[4.176s] 3: -	sum += LU[i][j] * x[j];
[4.176s] 3: +      for (j = 0; j < i; j++) {
[4.176s] 3: +        sum += LU[i][j] * x[j];
[4.176s] 3: +      }
[4.176s] 3: @@ -1993,3 +2224,2 @@
[4.176s] 3: -  x[n - 1] /= LU[n - 1][n - 1];
[4.176s] 3: -  for (i = n - 2; i >= 0; i--)
[4.176s] 3: -    {
[4.176s] 3: +    x[n - 1] /= LU[n - 1][n - 1];
[4.176s] 3: +    for (i = n - 2; i >= 0; i--) {
[4.176s] 3: @@ -1997,2 +2227,3 @@
[4.176s] 3: -      for (j = i + 1; j < n; j++)
[4.176s] 3: -	sum += LU[i][j] * x[j];
[4.176s] 3: +      for (j = i + 1; j < n; j++) {
[4.176s] 3: +        sum += LU[i][j] * x[j];
[4.176s] 3: +      }
[4.176s] 3: @@ -2001,22 +2232,24 @@
[4.176s] 3: -  return x;
[4.177s] 3: -}
[4.177s] 3: -
[4.177s] 3: -template <typename T>
[4.177s] 3: -void lu_solve(const Matrix<T>& LU, Vector<T>& x, const Vector<T>& b, Vector<unsigned int>& index)
[4.177s] 3: -{
[4.177s] 3: -  x = lu_solve(LU, b, index);
[4.177s] 3: -}
[4.177s] 3: -
[4.177s] 3: -template <typename T>
[4.177s] 3: -Matrix<T> lu_inverse(const Matrix<T>& A)
[4.177s] 3: -{
[4.177s] 3: -  if (A.ncols() != A.nrows())
[4.177s] 3: -    throw std::logic_error("Error in LU invert: matrix must be squared");	
[4.177s] 3: -  unsigned int n = A.ncols();
[4.177s] 3: -  Matrix<T> A1(n, n), LU;
[4.177s] 3: -  Vector<unsigned int> index;
[4.177s] 3: -	
[4.177s] 3: -  lu(A, LU, index);
[4.177s] 3: -  CanonicalBaseVector<T> e(0, n);
[4.177s] 3: -  for (unsigned i = 0; i < n; i++)
[4.177s] 3: -    {
[4.177s] 3: +    return x;
[4.177s] 3: +  }
[4.178s] 3: +
[4.178s] 3: +  template < typename T >
[4.178s] 3: +  void lu_solve(
[4.178s] 3: +    const Matrix < T > & LU, Vector < T > & x, const Vector < T > & b,
[4.178s] 3: +    Vector < unsigned int > & index)
[4.178s] 3: +  {
[4.178s] 3: +    x = lu_solve(LU, b, index);
[4.178s] 3: +  }
[4.178s] 3: +
[4.178s] 3: +  template < typename T >
[4.178s] 3: +  Matrix < T > lu_inverse(const Matrix < T > &A)
[4.178s] 3: +  {
[4.178s] 3: +    if (A.ncols() != A.nrows()) {
[4.178s] 3: +      throw std::logic_error("Error in LU invert: matrix must be squared");
[4.178s] 3: +    }
[4.178s] 3: +    unsigned int n = A.ncols();
[4.178s] 3: +    Matrix < T > A1(n, n), LU;
[4.178s] 3: +    Vector < unsigned int > index;
[4.178s] 3: +
[4.178s] 3: +    lu(A, LU, index);
[4.178s] 3: +    CanonicalBaseVector < T > e(0, n);
[4.178s] 3: +    for (unsigned i = 0; i < n; i++) {
[4.178s] 3: @@ -2026,94 +2259,103 @@
[4.178s] 3: -	
[4.179s] 3: -  return A1;
[4.179s] 3: -}
[4.179s] 3: -
[4.179s] 3: -template <typename T>
[4.179s] 3: -T lu_det(const Matrix<T>& A)
[4.179s] 3: -{
[4.179s] 3: -  if (A.ncols() != A.nrows())
[4.179s] 3: -    throw std::logic_error("Error in LU determinant: matrix must be squared");	
[4.179s] 3: -  unsigned int d;
[4.179s] 3: -  Matrix<T> LU;
[4.179s] 3: -  Vector<unsigned int> index;
[4.179s] 3: -	
[4.179s] 3: -  d = lu(A, LU, index);
[4.179s] 3: -	
[4.179s] 3: -  return d * prod(LU.extractDiag());
[4.179s] 3: -}
[4.179s] 3: -
[4.179s] 3: -template <typename T>
[4.179s] 3: -void cholesky(const Matrix<T> A, Matrix<T>& LL) 
[4.179s] 3: -{
[4.179s] 3: -  if (A.ncols() != A.nrows())
[4.179s] 3: -    throw std::logic_error("Error in Cholesky decomposition: matrix must be squared");
[4.179s] 3: -  int n = A.ncols();
[4.180s] 3: -  double sum;
[4.180s] 3: -  LL = A;
[4.180s] 3: -	
[4.180s] 3: -  for (unsigned int i = 0; i < n; i++)
[4.180s] 3: -    {
[4.180s] 3: -      for (unsigned int j = i; j < n; j++)
[4.180s] 3: -	{
[4.180s] 3: -	  sum = LL[i][j];
[4.180s] 3: -	  for (int k = i - 1; k >= 0; k--)
[4.180s] 3: -	    sum -= LL[i][k] * LL[j][k];
[4.180s] 3: -	  if (i == j) 
[4.180s] 3: -	    {
[4.180s] 3: -	      if (sum <= 0.0)
[4.180s] 3: -		throw std::logic_error("Error in Cholesky decomposition: matrix is not postive definite");
[4.180s] 3: -	      LL[i][i] = sqrt(sum);
[4.180s] 3: -	    }
[4.180s] 3: -	  else
[4.180s] 3: -	    LL[j][i] = sum / LL[i][i];
[4.180s] 3: -	}
[4.180s] 3: -      for (unsigned int k = i + 1; k < n; k++)
[4.180s] 3: -	LL[i][k] = LL[k][i];
[4.180s] 3: -    } 
[4.180s] 3: -}
[4.180s] 3: -
[4.181s] 3: -template <typename T>
[4.181s] 3: -Matrix<T> cholesky(const Matrix<T> A) 
[4.181s] 3: -{
[4.181s] 3: -  Matrix<T> LL;
[4.181s] 3: -  cholesky(A, LL);
[4.181s] 3: -	
[4.181s] 3: -  return LL;
[4.181s] 3: -}
[4.181s] 3: -
[4.181s] 3: -template <typename T>
[4.181s] 3: -Vector<T> cholesky_solve(const Matrix<T>& LL, const Vector<T>& b)
[4.181s] 3: -{
[4.181s] 3: -  if (LL.ncols() != LL.nrows())
[4.181s] 3: -    throw std::logic_error("Error in Cholesky solve: matrix must be squared");
[4.181s] 3: -  unsigned int n = LL.ncols();
[4.181s] 3: -  if (b.size() != n)
[4.181s] 3: -    throw std::logic_error("Error in Cholesky decomposition: b vector must be of the same dimensions of LU matrix");
[4.181s] 3: -  Vector<T> x, y;
[4.181s] 3: -	
[4.181s] 3: -  /* Solve L * y = b */
[4.181s] 3: -  forward_elimination(LL, y, b);
[4.181s] 3: -  /* Solve L^T * x = y */
[4.181s] 3: -  backward_elimination(LL, x, y);
[4.182s] 3: -	
[4.182s] 3: -  return x;
[4.182s] 3: -}
[4.182s] 3: -
[4.182s] 3: -template <typename T>
[4.182s] 3: -void cholesky_solve(const Matrix<T>& LL, Vector<T>& x, const Vector<T>& b)
[4.182s] 3: -{
[4.182s] 3: -  x = cholesky_solve(LL, b);
[4.182s] 3: -}
[4.182s] 3: -
[4.182s] 3: -template <typename T>
[4.182s] 3: -void forward_elimination(const Matrix<T>& L, Vector<T>& y, const Vector<T> b)
[4.182s] 3: -{
[4.182s] 3: -  if (L.ncols() != L.nrows())
[4.182s] 3: -    throw std::logic_error("Error in Forward elimination: matrix must be squared (lower triangular)");
[4.182s] 3: -  if (b.size() != L.nrows())
[4.182s] 3: -    throw std::logic_error("Error in Forward elimination: b vector must be of the same dimensions of L matrix");
[4.182s] 3: -  unsigned int n = b.size();
[4.182s] 3: -  y.resize(n);
[4.182s] 3: -	
[4.182s] 3: -  y[0] = b[0] / L[0][0];
[4.182s] 3: -  for (unsigned int i = 1; i < n; i++)
[4.183s] 3: -    {
[4.183s] 3: +
[4.183s] 3: +    return A1;
[4.183s] 3: +  }
[4.183s] 3: +
[4.183s] 3: +  template < typename T >
[4.183s] 3: +  T lu_det(const Matrix < T > & A)
[4.183s] 3: +  {
[4.183s] 3: +    if (A.ncols() != A.nrows()) {
[4.183s] 3: +      throw std::logic_error("Error in LU determinant: matrix must be squared");
[4.183s] 3: +    }
[4.183s] 3: +    unsigned int d;
[4.183s] 3: +    Matrix < T > LU;
[4.183s] 3: +    Vector < unsigned int > index;
[4.183s] 3: +
[4.183s] 3: +    d = lu(A, LU, index);
[4.183s] 3: +
[4.183s] 3: +    return d * prod(LU.extractDiag());
[4.183s] 3: +  }
[4.183s] 3: +
[4.183s] 3: +  template < typename T >
[4.183s] 3: +  void cholesky(const Matrix < T > A, Matrix < T > & LL)
[4.183s] 3: +  {
[4.183s] 3: +    if (A.ncols() != A.nrows()) {
[4.184s] 3: +      throw std::logic_error("Error in Cholesky decomposition: matrix must be squared");
[4.184s] 3: +    }
[4.184s] 3: +    int n = A.ncols();
[4.184s] 3: +    double sum;
[4.184s] 3: +    LL = A;
[4.184s] 3: +
[4.184s] 3: +    for (unsigned int i = 0; i < n; i++) {
[4.184s] 3: +      for (unsigned int j = i; j < n; j++) {
[4.184s] 3: +        sum = LL[i][j];
[4.184s] 3: +        for (int k = i - 1; k >= 0; k--) {
[4.184s] 3: +          sum -= LL[i][k] * LL[j][k];
[4.184s] 3: +        }
[4.184s] 3: +        if (i == j) {
[4.184s] 3: +          if (sum <= 0.0) {
[4.184s] 3: +            throw std::logic_error(
[4.184s] 3: +              "Error in Cholesky decomposition: matrix is not postive definite");
[4.184s] 3: +          }
[4.184s] 3: +          LL[i][i] = sqrt(sum);
[4.184s] 3: +        } else {
[4.185s] 3: +          LL[j][i] = sum / LL[i][i];
[4.185s] 3: +        }
[4.185s] 3: +      }
[4.185s] 3: +      for (unsigned int k = i + 1; k < n; k++) {
[4.185s] 3: +        LL[i][k] = LL[k][i];
[4.185s] 3: +      }
[4.185s] 3: +    }
[4.185s] 3: +  }
[4.185s] 3: +
[4.185s] 3: +  template < typename T >
[4.185s] 3: +  Matrix < T > cholesky(const Matrix < T > A)
[4.185s] 3: +  {
[4.185s] 3: +    Matrix < T > LL;
[4.185s] 3: +    cholesky(A, LL);
[4.185s] 3: +
[4.185s] 3: +    return LL;
[4.185s] 3: +  }
[4.185s] 3: +
[4.185s] 3: +  template < typename T >
[4.185s] 3: +  Vector < T > cholesky_solve(const Matrix < T > &LL, const Vector < T > &b)
[4.185s] 3: +  {
[4.185s] 3: +    if (LL.ncols() != LL.nrows()) {
[4.186s] 3: +      throw std::logic_error("Error in Cholesky solve: matrix must be squared");
[4.186s] 3: +    }
[4.186s] 3: +    unsigned int n = LL.ncols();
[4.186s] 3: +    if (b.size() != n) {
[4.186s] 3: +      throw std::logic_error(
[4.186s] 3: +        "Error in Cholesky decomposition: b vector must be of the same dimensions of LU matrix");
[4.186s] 3: +    }
[4.186s] 3: +    Vector < T > x, y;
[4.186s] 3: +
[4.186s] 3: +    /* Solve L * y = b */
[4.186s] 3: +    forward_elimination(LL, y, b);
[4.186s] 3: +    /* Solve L^T * x = y */
[4.186s] 3: +    backward_elimination(LL, x, y);
[4.186s] 3: +
[4.186s] 3: +    return x;
[4.186s] 3: +  }
[4.187s] 3: +
[4.187s] 3: +  template < typename T >
[4.187s] 3: +  void cholesky_solve(const Matrix < T > & LL, Vector < T > & x, const Vector < T > & b)
[4.187s] 3: +  {
[4.187s] 3: +    x = cholesky_solve(LL, b);
[4.187s] 3: +  }
[4.187s] 3: +
[4.187s] 3: +  template < typename T >
[4.187s] 3: +  void forward_elimination(const Matrix < T > & L, Vector < T > & y, const Vector < T > b)
[4.187s] 3: +  {
[4.187s] 3: +    if (L.ncols() != L.nrows()) {
[4.187s] 3: +      throw std::logic_error(
[4.187s] 3: +        "Error in Forward elimination: matrix must be squared (lower triangular)");
[4.187s] 3: +    }
[4.187s] 3: +    if (b.size() != L.nrows()) {
[4.187s] 3: +      throw std::logic_error(
[4.187s] 3: +        "Error in Forward elimination: b vector must be of the same dimensions of L matrix");
[4.187s] 3: +    }
[4.187s] 3: +    unsigned int n = b.size();
[4.187s] 3: +    y.resize(n);
[4.187s] 3: +
[4.187s] 3: +    y[0] = b[0] / L[0][0];
[4.188s] 3: +    for (unsigned int i = 1; i < n; i++) {
[4.188s] 3: @@ -2121,2 +2363,3 @@
[4.188s] 3: -      for (unsigned int j = 0; j < i; j++)
[4.188s] 3: -	y[i] -= L[i][j] * y[j];
[4.188s] 3: +      for (unsigned int j = 0; j < i; j++) {
[4.188s] 3: +        y[i] -= L[i][j] * y[j];
[4.188s] 3: +      }
[4.188s] 3: @@ -2125,24 +2368,27 @@
[4.188s] 3: -}
[4.188s] 3: -
[4.188s] 3: -template <typename T>
[4.188s] 3: -Vector<T> forward_elimination(const Matrix<T>& L, const Vector<T> b)
[4.188s] 3: -{
[4.188s] 3: -  Vector<T> y;
[4.188s] 3: -  forward_elimination(L, y, b);
[4.188s] 3: -	
[4.188s] 3: -  return y;
[4.188s] 3: -}
[4.188s] 3: -
[4.188s] 3: -template <typename T>
[4.188s] 3: -void backward_elimination(const Matrix<T>& U, Vector<T>& x, const Vector<T>& y)
[4.188s] 3: -{
[4.188s] 3: -  if (U.ncols() != U.nrows())
[4.188s] 3: -    throw std::logic_error("Error in Backward elimination: matrix must be squared (upper triangular)");
[4.189s] 3: -  if (y.size() != U.nrows())
[4.189s] 3: -    throw std::logic_error("Error in Backward elimination: b vector must be of the same dimensions of U matrix");
[4.189s] 3: -  int n = y.size();
[4.189s] 3: -  x.resize(n);
[4.189s] 3: -	
[4.189s] 3: -  x[n - 1] = y[n - 1] / U[n - 1][n - 1];
[4.189s] 3: -  for (int i = n - 2; i >= 0; i--)
[4.189s] 3: -    {
[4.189s] 3: +  }
[4.189s] 3: +
[4.189s] 3: +  template < typename T >
[4.189s] 3: +  Vector < T > forward_elimination(const Matrix < T > &L, const Vector < T > b)
[4.189s] 3: +  {
[4.189s] 3: +    Vector < T > y;
[4.189s] 3: +    forward_elimination(L, y, b);
[4.189s] 3: +
[4.189s] 3: +    return y;
[4.189s] 3: +  }
[4.189s] 3: +
[4.189s] 3: +  template < typename T >
[4.189s] 3: +  void backward_elimination(const Matrix < T > & U, Vector < T > & x, const Vector < T > & y)
[4.189s] 3: +  {
[4.189s] 3: +    if (U.ncols() != U.nrows()) {
[4.190s] 3: +      throw std::logic_error(
[4.190s] 3: +        "Error in Backward elimination: matrix must be squared (upper triangular)");
[4.190s] 3: +    }
[4.190s] 3: +    if (y.size() != U.nrows()) {
[4.190s] 3: +      throw std::logic_error(
[4.190s] 3: +        "Error in Backward elimination: b vector must be of the same dimensions of U matrix");
[4.190s] 3: +    }
[4.190s] 3: +    int n = y.size();
[4.190s] 3: +    x.resize(n);
[4.190s] 3: +
[4.190s] 3: +    x[n - 1] = y[n - 1] / U[n - 1][n - 1];
[4.190s] 3: +    for (int i = n - 2; i >= 0; i--) {
[4.190s] 3: @@ -2150,2 +2396,3 @@
[4.190s] 3: -      for (int j = i + 1; j < n; j++)
[4.190s] 3: -	x[i] -= U[i][j] * x[j];
[4.190s] 3: +      for (int j = i + 1; j < n; j++) {
[4.190s] 3: +        x[i] -= U[i][j] * x[j];
[4.190s] 3: +      }
[4.191s] 3: @@ -2154,10 +2401,10 @@
[4.191s] 3: -}
[4.191s] 3: -
[4.191s] 3: -template <typename T>
[4.191s] 3: -Vector<T> backward_elimination(const Matrix<T>& U, const Vector<T> y)
[4.191s] 3: -{
[4.191s] 3: -  Vector<T> x;
[4.191s] 3: -  forward_elimination(U, x, y);
[4.191s] 3: -	
[4.191s] 3: -  return x;
[4.191s] 3: -}
[4.191s] 3: +  }
[4.191s] 3: +
[4.191s] 3: +  template < typename T >
[4.191s] 3: +  Vector < T > backward_elimination(const Matrix < T > &U, const Vector < T > y)
[4.191s] 3: +  {
[4.191s] 3: +    Vector < T > x;
[4.191s] 3: +    forward_elimination(U, x, y);
[4.191s] 3: +
[4.191s] 3: +    return x;
[4.191s] 3: +  }
[4.191s] 3: @@ -2173,7 +2420,9 @@
[4.191s] 3: -template <typename T>
[4.191s] 3: -void random(Matrix<T>& m)
[4.192s] 3: -{
[4.192s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.192s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.192s] 3: -      m[i][j] = (T)(rand() / double(RAND_MAX));
[4.192s] 3: -}
[4.192s] 3: +  template < typename T >
[4.192s] 3: +  void random(Matrix < T > & m)
[4.192s] 3: +  {
[4.192s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.192s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.192s] 3: +        m[i][j] = (T)(rand() / double(RAND_MAX));
[4.192s] 3: +      }
[4.192s] 3: +    }
[4.192s] 3: +  }
[4.192s] 3: @@ -2185,68 +2434,80 @@
[4.192s] 3: -template <typename T>
[4.192s] 3: -Vector<T> sum(const Matrix<T>& m)
[4.192s] 3: -{
[4.192s] 3: -  Vector<T> tmp((T)0, m.ncols());
[4.192s] 3: -  for (unsigned int j = 0; j < m.ncols(); j++)
[4.192s] 3: -    for (unsigned int i = 0; i < m.nrows(); i++)
[4.192s] 3: -      tmp[j] += m[i][j];
[4.192s] 3: -  return tmp;
[4.192s] 3: -}
[4.193s] 3: -
[4.193s] 3: -template <typename T>
[4.193s] 3: -Vector<T> r_sum(const Matrix<T>& m)
[4.193s] 3: -{
[4.193s] 3: -  Vector<T> tmp((T)0, m.nrows());
[4.193s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.193s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.193s] 3: -      tmp[i] += m[i][j];
[4.193s] 3: -  return tmp;
[4.193s] 3: -}
[4.193s] 3: -
[4.193s] 3: -template <typename T>
[4.193s] 3: -T all_sum(const Matrix<T>& m)
[4.193s] 3: -{
[4.193s] 3: -  T tmp = (T)0;
[4.193s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.193s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.193s] 3: -      tmp += m[i][j];
[4.193s] 3: -  return tmp;
[4.193s] 3: -}
[4.193s] 3: -
[4.193s] 3: -template <typename T>
[4.193s] 3: -Vector<T> prod(const Matrix<T>& m)
[4.194s] 3: -{
[4.194s] 3: -  Vector<T> tmp((T)1, m.ncols());
[4.194s] 3: -  for (unsigned int j = 0; j < m.ncols(); j++)
[4.194s] 3: -    for (unsigned int i = 0; i < m.nrows(); i++)
[4.194s] 3: -      tmp[j] *= m[i][j];
[4.194s] 3: -  return tmp;
[4.194s] 3: -}
[4.194s] 3: -
[4.194s] 3: -template <typename T>
[4.194s] 3: -Vector<T> r_prod(const Matrix<T>& m)
[4.194s] 3: -{
[4.194s] 3: -  Vector<T> tmp((T)1, m.nrows());
[4.194s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.194s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.194s] 3: -      tmp[i] *= m[i][j];
[4.194s] 3: -  return tmp;
[4.194s] 3: -}
[4.194s] 3: -
[4.194s] 3: -template <typename T>
[4.194s] 3: -T all_prod(const Matrix<T>& m)
[4.194s] 3: -{
[4.194s] 3: -  T tmp = (T)1;
[4.194s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.194s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.194s] 3: -      tmp *= m[i][j];
[4.195s] 3: -  return tmp;
[4.195s] 3: -}
[4.195s] 3: -
[4.195s] 3: -template <typename T>
[4.195s] 3: -Vector<T> mean(const Matrix<T>& m)
[4.195s] 3: -{
[4.195s] 3: -  Vector<T> res((T)0, m.ncols());
[4.195s] 3: -  for (unsigned int j = 0; j < m.ncols(); j++)
[4.195s] 3: -    {
[4.195s] 3: -      for (unsigned int i = 0; i < m.nrows(); i++)
[4.195s] 3: -	res[j] += m[i][j];
[4.195s] 3: +  template < typename T >
[4.195s] 3: +  Vector < T > sum(const Matrix < T > &m)
[4.195s] 3: +  {
[4.195s] 3: +    Vector < T > tmp((T)0, m.ncols());
[4.195s] 3: +    for (unsigned int j = 0; j < m.ncols(); j++) {
[4.195s] 3: +      for (unsigned int i = 0; i < m.nrows(); i++) {
[4.195s] 3: +        tmp[j] += m[i][j];
[4.195s] 3: +      }
[4.195s] 3: +    }
[4.195s] 3: +    return tmp;
[4.195s] 3: +  }
[4.195s] 3: +
[4.196s] 3: +  template < typename T >
[4.196s] 3: +  Vector < T > r_sum(const Matrix < T > &m)
[4.196s] 3: +  {
[4.196s] 3: +    Vector < T > tmp((T)0, m.nrows());
[4.196s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.196s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.196s] 3: +        tmp[i] += m[i][j];
[4.196s] 3: +      }
[4.196s] 3: +    }
[4.196s] 3: +    return tmp;
[4.196s] 3: +  }
[4.196s] 3: +
[4.196s] 3: +  template < typename T >
[4.196s] 3: +  T all_sum(const Matrix < T > & m)
[4.196s] 3: +  {
[4.196s] 3: +    T tmp = (T)0;
[4.196s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.196s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.196s] 3: +        tmp += m[i][j];
[4.196s] 3: +      }
[4.196s] 3: +    }
[4.196s] 3: +    return tmp;
[4.196s] 3: +  }
[4.196s] 3: +
[4.196s] 3: +  template < typename T >
[4.197s] 3: +  Vector < T > prod(const Matrix < T > &m)
[4.197s] 3: +  {
[4.197s] 3: +    Vector < T > tmp((T)1, m.ncols());
[4.197s] 3: +    for (unsigned int j = 0; j < m.ncols(); j++) {
[4.197s] 3: +      for (unsigned int i = 0; i < m.nrows(); i++) {
[4.197s] 3: +        tmp[j] *= m[i][j];
[4.197s] 3: +      }
[4.197s] 3: +    }
[4.197s] 3: +    return tmp;
[4.197s] 3: +  }
[4.197s] 3: +
[4.197s] 3: +  template < typename T >
[4.197s] 3: +  Vector < T > r_prod(const Matrix < T > &m)
[4.197s] 3: +  {
[4.197s] 3: +    Vector < T > tmp((T)1, m.nrows());
[4.197s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.197s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.197s] 3: +        tmp[i] *= m[i][j];
[4.197s] 3: +      }
[4.197s] 3: +    }
[4.197s] 3: +    return tmp;
[4.197s] 3: +  }
[4.197s] 3: +
[4.197s] 3: +  template < typename T >
[4.198s] 3: +  T all_prod(const Matrix < T > & m)
[4.198s] 3: +  {
[4.198s] 3: +    T tmp = (T)1;
[4.198s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.198s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.198s] 3: +        tmp *= m[i][j];
[4.198s] 3: +      }
[4.198s] 3: +    }
[4.198s] 3: +    return tmp;
[4.198s] 3: +  }
[4.198s] 3: +
[4.198s] 3: +  template < typename T >
[4.198s] 3: +  Vector < T > mean(const Matrix < T > &m)
[4.198s] 3: +  {
[4.198s] 3: +    Vector < T > res((T)0, m.ncols());
[4.198s] 3: +    for (unsigned int j = 0; j < m.ncols(); j++) {
[4.198s] 3: +      for (unsigned int i = 0; i < m.nrows(); i++) {
[4.198s] 3: +        res[j] += m[i][j];
[4.198s] 3: +      }
[4.198s] 3: @@ -2255,12 +2516,12 @@
[4.198s] 3: -	
[4.198s] 3: -  return res;
[4.198s] 3: -}
[4.198s] 3: -
[4.199s] 3: -template <typename T>
[4.199s] 3: -Vector<T> r_mean(const Matrix<T>& m)
[4.199s] 3: -{
[4.199s] 3: -  Vector<T> res((T)0, m.rows());
[4.199s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.199s] 3: -    {
[4.199s] 3: -      for (unsigned int j = 0; j < m.ncols(); j++)
[4.199s] 3: -	res[i] += m[i][j];
[4.199s] 3: +
[4.199s] 3: +    return res;
[4.199s] 3: +  }
[4.199s] 3: +
[4.199s] 3: +  template < typename T >
[4.199s] 3: +  Vector < T > r_mean(const Matrix < T > &m)
[4.199s] 3: +  {
[4.199s] 3: +    Vector < T > res((T)0, m.rows());
[4.199s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.199s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.199s] 3: +        res[i] += m[i][j];
[4.199s] 3: +      }
[4.199s] 3: @@ -2269,22 +2530,23 @@
[4.199s] 3: -	
[4.199s] 3: -  return res;
[4.199s] 3: -}
[4.199s] 3: -
[4.200s] 3: -template <typename T>
[4.200s] 3: -T all_mean(const Matrix<T>& m)
[4.200s] 3: -{
[4.200s] 3: -  T tmp = (T)0;
[4.200s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.200s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.200s] 3: -      tmp += m[i][j];
[4.200s] 3: -  return tmp / (m.nrows() * m.ncols());
[4.200s] 3: -}
[4.200s] 3: -
[4.200s] 3: -template <typename T>
[4.200s] 3: -Vector<T> var(const Matrix<T>& m, bool sample_correction = false)
[4.200s] 3: -{
[4.200s] 3: -  Vector<T> res((T)0, m.ncols());
[4.200s] 3: -  unsigned int n = m.nrows();
[4.200s] 3: -  double sum, ssum;
[4.200s] 3: -  for (unsigned int j = 0; j < m.ncols(); j++)
[4.200s] 3: -    {	
[4.200s] 3: +
[4.201s] 3: +    return res;
[4.201s] 3: +  }
[4.201s] 3: +
[4.201s] 3: +  template < typename T >
[4.201s] 3: +  T all_mean(const Matrix < T > & m)
[4.201s] 3: +  {
[4.201s] 3: +    T tmp = (T)0;
[4.201s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.201s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.201s] 3: +        tmp += m[i][j];
[4.201s] 3: +      }
[4.201s] 3: +    }
[4.201s] 3: +    return tmp / (m.nrows() * m.ncols());
[4.201s] 3: +  }
[4.201s] 3: +
[4.201s] 3: +  template < typename T >
[4.201s] 3: +  Vector < T > var(const Matrix < T > &m, bool sample_correction = false)
[4.201s] 3: +  {
[4.201s] 3: +    Vector < T > res((T)0, m.ncols());
[4.201s] 3: +    unsigned int n = m.nrows();
[4.201s] 3: +    double sum, ssum;
[4.202s] 3: +    for (unsigned int j = 0; j < m.ncols(); j++) {
[4.202s] 3: @@ -2292,28 +2554,27 @@
[4.202s] 3: -      for (unsigned int i = 0; i < m.nrows(); i++)
[4.202s] 3: -	{
[4.202s] 3: -	  sum += m[i][j];
[4.202s] 3: -	  ssum += (m[i][j] * m[i][j]);
[4.202s] 3: -	}
[4.202s] 3: -      if (!sample_correction)
[4.202s] 3: -	res[j] = (ssum / n) - (sum / n) * (sum / n);
[4.202s] 3: -      else
[4.202s] 3: -	res[j] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);		 
[4.202s] 3: -    }
[4.202s] 3: -	
[4.202s] 3: -  return res;
[4.202s] 3: -}
[4.202s] 3: -
[4.202s] 3: -template <typename T>
[4.202s] 3: -Vector<T> stdev(const Matrix<T>& m, bool sample_correction = false)
[4.202s] 3: -{
[4.202s] 3: -  return vec_sqrt(var(m, sample_correction));
[4.202s] 3: -}
[4.202s] 3: -
[4.203s] 3: -template <typename T>
[4.203s] 3: -Vector<T> r_var(const Matrix<T>& m, bool sample_correction = false)
[4.203s] 3: -{
[4.203s] 3: -  Vector<T> res((T)0, m.nrows());
[4.203s] 3: -  double sum, ssum;
[4.203s] 3: -  unsigned int n = m.ncols();
[4.203s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.203s] 3: -    {	
[4.203s] 3: +      for (unsigned int i = 0; i < m.nrows(); i++) {
[4.203s] 3: +        sum += m[i][j];
[4.203s] 3: +        ssum += (m[i][j] * m[i][j]);
[4.203s] 3: +      }
[4.203s] 3: +      if (!sample_correction) {
[4.203s] 3: +        res[j] = (ssum / n) - (sum / n) * (sum / n);
[4.203s] 3: +      } else {
[4.203s] 3: +        res[j] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);
[4.203s] 3: +      }
[4.203s] 3: +    }
[4.203s] 3: +
[4.203s] 3: +    return res;
[4.203s] 3: +  }
[4.203s] 3: +
[4.203s] 3: +  template < typename T >
[4.204s] 3: +  Vector < T > stdev(const Matrix < T > &m, bool sample_correction = false)
[4.204s] 3: +  {
[4.204s] 3: +    return vec_sqrt(var(m, sample_correction));
[4.204s] 3: +  }
[4.204s] 3: +
[4.204s] 3: +  template < typename T >
[4.204s] 3: +  Vector < T > r_var(const Matrix < T > &m, bool sample_correction = false)
[4.204s] 3: +  {
[4.204s] 3: +    Vector < T > res((T)0, m.nrows());
[4.204s] 3: +    double sum, ssum;
[4.204s] 3: +    unsigned int n = m.ncols();
[4.204s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.204s] 3: @@ -2321,27 +2582,26 @@
[4.204s] 3: -      for (unsigned int j = 0; j < m.ncols(); j++)
[4.204s] 3: -	{
[4.204s] 3: -	  sum += m[i][j];
[4.204s] 3: -	  ssum += (m[i][j] * m[i][j]);
[4.204s] 3: -	}
[4.204s] 3: -      if (!sample_correction)
[4.204s] 3: -	res[i] = (ssum / n) - (sum / n) * (sum / n);
[4.204s] 3: -      else
[4.204s] 3: -	res[i] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);
[4.204s] 3: -    }
[4.205s] 3: -	
[4.205s] 3: -  return res;
[4.205s] 3: -}
[4.205s] 3: -
[4.205s] 3: -template <typename T>
[4.205s] 3: -Vector<T> r_stdev(const Matrix<T>& m, bool sample_correction = false)
[4.205s] 3: -{
[4.205s] 3: -  return vec_sqrt(r_var(m, sample_correction));
[4.205s] 3: -}
[4.205s] 3: -
[4.205s] 3: -template <typename T>
[4.205s] 3: -Vector<T> max(const Matrix<T>& m)
[4.205s] 3: -{
[4.205s] 3: -  Vector<T> res(m.ncols());
[4.205s] 3: -  double value;
[4.205s] 3: -  for (unsigned int j = 0; j < m.ncols(); j++)
[4.205s] 3: -    {
[4.205s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.205s] 3: +        sum += m[i][j];
[4.205s] 3: +        ssum += (m[i][j] * m[i][j]);
[4.205s] 3: +      }
[4.206s] 3: +      if (!sample_correction) {
[4.206s] 3: +        res[i] = (ssum / n) - (sum / n) * (sum / n);
[4.206s] 3: +      } else {
[4.206s] 3: +        res[i] = n * ((ssum / n) - (sum / n) * (sum / n)) / (n - 1);
[4.206s] 3: +      }
[4.206s] 3: +    }
[4.206s] 3: +
[4.206s] 3: +    return res;
[4.206s] 3: +  }
[4.206s] 3: +
[4.206s] 3: +  template < typename T >
[4.206s] 3: +  Vector < T > r_stdev(const Matrix < T > &m, bool sample_correction = false)
[4.206s] 3: +  {
[4.206s] 3: +    return vec_sqrt(r_var(m, sample_correction));
[4.206s] 3: +  }
[4.206s] 3: +
[4.206s] 3: +  template < typename T >
[4.206s] 3: +  Vector < T > max(const Matrix < T > &m)
[4.206s] 3: +  {
[4.207s] 3: +    Vector < T > res(m.ncols());
[4.207s] 3: +    double value;
[4.207s] 3: +    for (unsigned int j = 0; j < m.ncols(); j++) {
[4.207s] 3: @@ -2349,2 +2609,3 @@
[4.207s] 3: -      for (unsigned int i = 1; i < m.nrows(); i++)
[4.207s] 3: -	value = std::max(m[i][j], value);
[4.207s] 3: +      for (unsigned int i = 1; i < m.nrows(); i++) {
[4.207s] 3: +        value = std::max(m[i][j], value);
[4.207s] 3: +      }
[4.207s] 3: @@ -2353,11 +2614,10 @@
[4.207s] 3: -	
[4.207s] 3: -  return res;
[4.207s] 3: -}
[4.207s] 3: -
[4.207s] 3: -template <typename T>
[4.207s] 3: -Vector<T> r_max(const Matrix<T>& m)
[4.207s] 3: -{
[4.207s] 3: -  Vector<T> res(m.nrows());
[4.207s] 3: -  double value;
[4.207s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.207s] 3: -    {
[4.207s] 3: +
[4.207s] 3: +    return res;
[4.208s] 3: +  }
[4.208s] 3: +
[4.208s] 3: +  template < typename T >
[4.208s] 3: +  Vector < T > r_max(const Matrix < T > &m)
[4.208s] 3: +  {
[4.208s] 3: +    Vector < T > res(m.nrows());
[4.208s] 3: +    double value;
[4.208s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.208s] 3: @@ -2365,2 +2625,3 @@
[4.208s] 3: -      for (unsigned int j = 1; j < m.ncols(); j++)
[4.208s] 3: -	value = std::max(m[i][j], value);
[4.208s] 3: +      for (unsigned int j = 1; j < m.ncols(); j++) {
[4.208s] 3: +        value = std::max(m[i][j], value);
[4.208s] 3: +      }
[4.208s] 3: @@ -2369,11 +2630,10 @@
[4.208s] 3: -	
[4.208s] 3: -  return res;
[4.208s] 3: -}
[4.208s] 3: -
[4.208s] 3: -template <typename T>
[4.208s] 3: -Vector<T> min(const Matrix<T>& m)
[4.209s] 3: -{
[4.209s] 3: -  Vector<T> res(m.ncols());
[4.209s] 3: -  double value;
[4.209s] 3: -  for (unsigned int j = 0; j < m.ncols(); j++)
[4.209s] 3: -    {
[4.209s] 3: +
[4.209s] 3: +    return res;
[4.209s] 3: +  }
[4.209s] 3: +
[4.209s] 3: +  template < typename T >
[4.209s] 3: +  Vector < T > min(const Matrix < T > &m)
[4.209s] 3: +  {
[4.209s] 3: +    Vector < T > res(m.ncols());
[4.209s] 3: +    double value;
[4.209s] 3: +    for (unsigned int j = 0; j < m.ncols(); j++) {
[4.209s] 3: @@ -2381,2 +2641,3 @@
[4.209s] 3: -      for (unsigned int i = 1; i < m.nrows(); i++)
[4.209s] 3: -	value = std::min(m[i][j], value);
[4.209s] 3: +      for (unsigned int i = 1; i < m.nrows(); i++) {
[4.209s] 3: +        value = std::min(m[i][j], value);
[4.209s] 3: +      }
[4.209s] 3: @@ -2385,11 +2646,10 @@
[4.209s] 3: -	
[4.210s] 3: -  return res;
[4.210s] 3: -}
[4.210s] 3: -
[4.210s] 3: -template <typename T>
[4.210s] 3: -Vector<T> r_min(const Matrix<T>& m)
[4.210s] 3: -{
[4.210s] 3: -  Vector<T> res(m.nrows());
[4.210s] 3: -  double value;
[4.210s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.210s] 3: -    {
[4.210s] 3: +
[4.210s] 3: +    return res;
[4.210s] 3: +  }
[4.210s] 3: +
[4.210s] 3: +  template < typename T >
[4.210s] 3: +  Vector < T > r_min(const Matrix < T > &m)
[4.210s] 3: +  {
[4.210s] 3: +    Vector < T > res(m.nrows());
[4.210s] 3: +    double value;
[4.210s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.210s] 3: @@ -2397,2 +2657,3 @@
[4.210s] 3: -      for (unsigned int j = 1; j < m.ncols(); j++)
[4.211s] 3: -	value = std::min(m[i][j], value);
[4.211s] 3: +      for (unsigned int j = 1; j < m.ncols(); j++) {
[4.211s] 3: +        value = std::min(m[i][j], value);
[4.211s] 3: +      }
[4.211s] 3: @@ -2401,4 +2662,3 @@
[4.211s] 3: -	
[4.211s] 3: -  return res;
[4.211s] 3: -}
[4.211s] 3: -
[4.211s] 3: +
[4.211s] 3: +    return res;
[4.211s] 3: +  }
[4.211s] 3: @@ -2411,23 +2671,27 @@
[4.211s] 3: -template <typename T>
[4.211s] 3: -Matrix<T> exp(const Matrix<T>&m)
[4.211s] 3: -{
[4.211s] 3: -  Matrix<T> tmp(m.nrows(), m.ncols());
[4.211s] 3: -	
[4.211s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.212s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.212s] 3: -      tmp[i][j] = exp(m[i][j]);
[4.212s] 3: -	
[4.212s] 3: -  return tmp;
[4.212s] 3: -}
[4.212s] 3: -
[4.212s] 3: -template <typename T>
[4.212s] 3: -Matrix<T> mat_sqrt(const Matrix<T>&m)
[4.212s] 3: -{
[4.212s] 3: -  Matrix<T> tmp(m.nrows(), m.ncols());
[4.212s] 3: -	
[4.212s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.212s] 3: -    for (unsigned int j = 0; j < m.ncols(); j++)
[4.212s] 3: -      tmp[i][j] = sqrt(m[i][j]);
[4.212s] 3: -	
[4.212s] 3: -  return tmp;
[4.212s] 3: -}
[4.212s] 3: +  template < typename T >
[4.212s] 3: +  Matrix < T > exp(const Matrix < T > &m)
[4.213s] 3: +  {
[4.213s] 3: +    Matrix < T > tmp(m.nrows(), m.ncols());
[4.213s] 3: +
[4.213s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.213s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.213s] 3: +        tmp[i][j] = exp(m[i][j]);
[4.213s] 3: +      }
[4.213s] 3: +    }
[4.213s] 3: +
[4.213s] 3: +    return tmp;
[4.213s] 3: +  }
[4.213s] 3: +
[4.213s] 3: +  template < typename T >
[4.213s] 3: +  Matrix < T > mat_sqrt(const Matrix < T > &m)
[4.213s] 3: +  {
[4.213s] 3: +    Matrix < T > tmp(m.nrows(), m.ncols());
[4.213s] 3: +
[4.213s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.213s] 3: +      for (unsigned int j = 0; j < m.ncols(); j++) {
[4.213s] 3: +        tmp[i][j] = sqrt(m[i][j]);
[4.213s] 3: +      }
[4.213s] 3: +    }
[4.213s] 3: +
[4.214s] 3: +    return tmp;
[4.214s] 3: +  }
[4.214s] 3: @@ -2439,47 +2703,55 @@
[4.214s] 3: -template <typename T>
[4.214s] 3: -Matrix<T> kron(const Vector<T>& b, const Vector<T>& a)
[4.214s] 3: -{
[4.214s] 3: -  Matrix<T> tmp(b.size(), a.size());
[4.214s] 3: -  for (unsigned int i = 0; i < b.size(); i++)
[4.214s] 3: -    for (unsigned int j = 0; j < a.size(); j++)
[4.214s] 3: -      tmp[i][j] = a[j] * b[i];
[4.214s] 3: -	
[4.214s] 3: -  return tmp;
[4.214s] 3: -}
[4.214s] 3: -
[4.214s] 3: -template <typename T>
[4.214s] 3: -Matrix<T> t(const Matrix<T>& a)
[4.214s] 3: -{
[4.214s] 3: -  Matrix<T> tmp(a.ncols(), a.nrows());
[4.214s] 3: -  for (unsigned int i = 0; i < a.nrows(); i++)
[4.214s] 3: -    for (unsigned int j = 0; j < a.ncols(); j++)
[4.214s] 3: -      tmp[j][i] = a[i][j];
[4.214s] 3: -	
[4.215s] 3: -  return tmp;
[4.215s] 3: -}
[4.215s] 3: -
[4.215s] 3: -template <typename T>
[4.215s] 3: -Matrix<T> dot_prod(const Matrix<T>& a, const Matrix<T>& b)
[4.215s] 3: -{
[4.215s] 3: -  if (a.ncols() != b.nrows())
[4.215s] 3: -    throw std::logic_error("Error matrix dot product: dimensions of the matrices are not compatible");
[4.215s] 3: -  Matrix<T> tmp(a.nrows(), b.ncols());
[4.215s] 3: -  for (unsigned int i = 0; i < tmp.nrows(); i++)
[4.215s] 3: -    for (unsigned int j = 0; j < tmp.ncols(); j++)
[4.215s] 3: -      {
[4.215s] 3: -	tmp[i][j] = (T)0;
[4.215s] 3: -	for (unsigned int k = 0; k < a.ncols(); k++)
[4.215s] 3: -	  tmp[i][j] += a[i][k] * b[k][j];
[4.215s] 3: -      }
[4.215s] 3: -			
[4.215s] 3: -  return tmp;
[4.215s] 3: -}
[4.215s] 3: -
[4.216s] 3: -template <typename T>
[4.216s] 3: -Matrix<T> dot_prod(const Matrix<T>& a, const Vector<T>& b)
[4.216s] 3: -{
[4.216s] 3: -  if (a.ncols() != b.size())
[4.216s] 3: -    throw std::logic_error("Error matrix dot product: dimensions of the matrix and the vector are not compatible");
[4.216s] 3: -  Matrix<T> tmp(a.nrows(), 1);
[4.216s] 3: -  for (unsigned int i = 0; i < tmp.nrows(); i++)
[4.216s] 3: -    {
[4.216s] 3: +  template < typename T >
[4.216s] 3: +  Matrix < T > kron(const Vector < T > &b, const Vector < T > &a)
[4.216s] 3: +  {
[4.216s] 3: +    Matrix < T > tmp(b.size(), a.size());
[4.216s] 3: +    for (unsigned int i = 0; i < b.size(); i++) {
[4.216s] 3: +      for (unsigned int j = 0; j < a.size(); j++) {
[4.216s] 3: +        tmp[i][j] = a[j] * b[i];
[4.216s] 3: +      }
[4.216s] 3: +    }
[4.216s] 3: +
[4.216s] 3: +    return tmp;
[4.216s] 3: +  }
[4.216s] 3: +
[4.217s] 3: +  template < typename T >
[4.217s] 3: +  Matrix < T > t(const Matrix < T > &a)
[4.217s] 3: +  {
[4.217s] 3: +    Matrix < T > tmp(a.ncols(), a.nrows());
[4.217s] 3: +    for (unsigned int i = 0; i < a.nrows(); i++) {
[4.217s] 3: +      for (unsigned int j = 0; j < a.ncols(); j++) {
[4.217s] 3: +        tmp[j][i] = a[i][j];
[4.217s] 3: +      }
[4.217s] 3: +    }
[4.217s] 3: +
[4.217s] 3: +    return tmp;
[4.217s] 3: +  }
[4.217s] 3: +
[4.217s] 3: +  template < typename T >
[4.217s] 3: +  Matrix < T > dot_prod(const Matrix < T > &a, const Matrix < T > &b)
[4.217s] 3: +  {
[4.217s] 3: +    if (a.ncols() != b.nrows()) {
[4.217s] 3: +      throw std::logic_error(
[4.217s] 3: +        "Error matrix dot product: dimensions of the matrices are not compatible");
[4.217s] 3: +    }
[4.217s] 3: +    Matrix < T > tmp(a.nrows(), b.ncols());
[4.217s] 3: +    for (unsigned int i = 0; i < tmp.nrows(); i++) {
[4.218s] 3: +      for (unsigned int j = 0; j < tmp.ncols(); j++) {
[4.218s] 3: +        tmp[i][j] = (T)0;
[4.218s] 3: +        for (unsigned int k = 0; k < a.ncols(); k++) {
[4.218s] 3: +          tmp[i][j] += a[i][k] * b[k][j];
[4.218s] 3: +        }
[4.218s] 3: +      }
[4.218s] 3: +    }
[4.218s] 3: +
[4.218s] 3: +    return tmp;
[4.218s] 3: +  }
[4.218s] 3: +
[4.218s] 3: +  template < typename T >
[4.218s] 3: +  Matrix < T > dot_prod(const Matrix < T > &a, const Vector < T > &b)
[4.218s] 3: +  {
[4.218s] 3: +    if (a.ncols() != b.size()) {
[4.218s] 3: +      throw std::logic_error(
[4.218s] 3: +        "Error matrix dot product: dimensions of the matrix and the vector are not compatible");
[4.218s] 3: +    }
[4.218s] 3: +    Matrix < T > tmp(a.nrows(), 1);
[4.219s] 3: +    for (unsigned int i = 0; i < tmp.nrows(); i++) {
[4.219s] 3: @@ -2487,15 +2759,17 @@
[4.219s] 3: -      for (unsigned int k = 0; k < a.ncols(); k++)
[4.219s] 3: -	tmp[i][0] += a[i][k] * b[k];
[4.219s] 3: -    }
[4.219s] 3: -		
[4.219s] 3: -  return tmp;
[4.219s] 3: -}
[4.219s] 3: -
[4.219s] 3: -template <typename T>
[4.219s] 3: -Matrix<T> dot_prod(const Vector<T>& a, const Matrix<T>& b)
[4.219s] 3: -{
[4.219s] 3: -  if (a.size() != b.nrows())
[4.219s] 3: -    throw std::logic_error("Error matrix dot product: dimensions of the vector and matrix are not compatible");
[4.219s] 3: -  Matrix<T> tmp(1, b.ncols());
[4.219s] 3: -  for (unsigned int j = 0; j < tmp.ncols(); j++)
[4.219s] 3: -    {
[4.220s] 3: +      for (unsigned int k = 0; k < a.ncols(); k++) {
[4.220s] 3: +        tmp[i][0] += a[i][k] * b[k];
[4.220s] 3: +      }
[4.220s] 3: +    }
[4.220s] 3: +
[4.220s] 3: +    return tmp;
[4.220s] 3: +  }
[4.220s] 3: +
[4.220s] 3: +  template < typename T >
[4.220s] 3: +  Matrix < T > dot_prod(const Vector < T > &a, const Matrix < T > &b)
[4.220s] 3: +  {
[4.220s] 3: +    if (a.size() != b.nrows()) {
[4.220s] 3: +      throw std::logic_error(
[4.220s] 3: +        "Error matrix dot product: dimensions of the vector and matrix are not compatible");
[4.220s] 3: +    }
[4.220s] 3: +    Matrix < T > tmp(1, b.ncols());
[4.220s] 3: +    for (unsigned int j = 0; j < tmp.ncols(); j++) {
[4.220s] 3: @@ -2503,26 +2777,29 @@
[4.220s] 3: -      for (unsigned int k = 0; k < a.size(); k++)
[4.220s] 3: -	tmp[0][j] += a[k] * b[k][j];
[4.221s] 3: -    }
[4.221s] 3: -		
[4.221s] 3: -  return tmp;
[4.221s] 3: -}
[4.221s] 3: -
[4.221s] 3: -template <typename T>
[4.221s] 3: -inline Matrix<double> rank(const Matrix<T> m)
[4.221s] 3: -{
[4.221s] 3: -  Matrix<double> tmp(m.nrows(), m.ncols());
[4.221s] 3: -  for (unsigned int j = 0; j < m.ncols(); j++)
[4.221s] 3: -    tmp.setColumn(j, rank<T>(m.extractColumn(j)));
[4.221s] 3: -  
[4.221s] 3: -  return tmp;                  
[4.221s] 3: -}
[4.221s] 3: -
[4.221s] 3: -template <typename T>
[4.221s] 3: -inline Matrix<double> r_rank(const Matrix<T> m)
[4.222s] 3: -{
[4.222s] 3: -  Matrix<double> tmp(m.nrows(), m.ncols());
[4.222s] 3: -  for (unsigned int i = 0; i < m.nrows(); i++)
[4.222s] 3: -    tmp.setRow(i, rank<T>(m.extractRow(i)));
[4.222s] 3: -  
[4.222s] 3: -  return tmp;                  
[4.222s] 3: -}
[4.222s] 3: +      for (unsigned int k = 0; k < a.size(); k++) {
[4.222s] 3: +        tmp[0][j] += a[k] * b[k][j];
[4.222s] 3: +      }
[4.222s] 3: +    }
[4.222s] 3: +
[4.222s] 3: +    return tmp;
[4.222s] 3: +  }
[4.222s] 3: +
[4.222s] 3: +  template < typename T >
[4.222s] 3: +  inline Matrix < double > rank(const Matrix < T > m)
[4.222s] 3: +  {
[4.222s] 3: +    Matrix < double > tmp(m.nrows(), m.ncols());
[4.222s] 3: +    for (unsigned int j = 0; j < m.ncols(); j++) {
[4.223s] 3: +      tmp.setColumn(j, rank < T > (m.extractColumn(j)));
[4.223s] 3: +    }
[4.223s] 3: +
[4.223s] 3: +    return tmp;
[4.223s] 3: +  }
[4.223s] 3: +
[4.223s] 3: +  template < typename T >
[4.223s] 3: +  inline Matrix < double > r_rank(const Matrix < T > m)
[4.223s] 3: +  {
[4.223s] 3: +    Matrix < double > tmp(m.nrows(), m.ncols());
[4.223s] 3: +    for (unsigned int i = 0; i < m.nrows(); i++) {
[4.223s] 3: +      tmp.setRow(i, rank < T > (m.extractRow(i)));
[4.223s] 3: +    }
[4.223s] 3: +
[4.223s] 3: +    return tmp;
[4.223s] 3: +  }
[4.223s] 3: 
[4.223s] 3: Code style divergence in file 'include/thirdParty/quadProgpp/QuadProg++.hh':
[4.223s] 3: 
[4.223s] 3: --- include/thirdParty/quadProgpp/QuadProg++.hh
[4.223s] 3: +++ include/thirdParty/quadProgpp/QuadProg++.hh.uncrustify
[4.223s] 3: @@ -2,3 +2,3 @@
[4.224s] 3: - File $Id: QuadProg++.hh 232 2007-06-21 12:29:00Z digasper $ 
[4.224s] 3: - 
[4.224s] 3: - The quadprog_solve() function implements the algorithm of Goldfarb and Idnani 
[4.224s] 3: + File $Id: QuadProg++.hh 232 2007-06-21 12:29:00Z digasper $
[4.224s] 3: +
[4.224s] 3: + The quadprog_solve() function implements the algorithm of Goldfarb and Idnani
[4.224s] 3: @@ -7 +7 @@
[4.224s] 3: -	 
[4.224s] 3: +
[4.224s] 3: @@ -14 +14 @@
[4.224s] 3: -	 
[4.224s] 3: +
[4.224s] 3: @@ -18 +18 @@
[4.224s] 3: -				
[4.224s] 3: +
[4.224s] 3: @@ -21 +21 @@
[4.224s] 3: -				
[4.224s] 3: +
[4.224s] 3: @@ -26 +26 @@
[4.224s] 3: - 
[4.224s] 3: +
[4.224s] 3: @@ -30 +30 @@
[4.225s] 3: - 
[4.225s] 3: +
[4.225s] 3: @@ -35,2 +35,2 @@
[4.225s] 3: -  1. pay attention in setting up the vectors ce0 and ci0. 
[4.225s] 3: -	   If the constraints of your problem are specified in the form 
[4.225s] 3: +  1. pay attention in setting up the vectors ce0 and ci0.
[4.225s] 3: +	   If the constraints of your problem are specified in the form
[4.225s] 3: @@ -38,2 +38,2 @@
[4.225s] 3: -  2. The matrices have column dimension equal to MATRIX_DIM, 
[4.225s] 3: -     a constant set to 20 in this file (by means of a #define macro). 
[4.225s] 3: +  2. The matrices have column dimension equal to MATRIX_DIM,
[4.225s] 3: +     a constant set to 20 in this file (by means of a #define macro).
[4.225s] 3: @@ -43 +43 @@
[4.225s] 3: -     the G = L^T L cholesky factorization for further computations inside the function. 
[4.225s] 3: +     the G = L^T L cholesky factorization for further computations inside the function.
[4.225s] 3: @@ -46 +46 @@
[4.225s] 3: -    
[4.225s] 3: +
[4.225s] 3: @@ -48 +48 @@
[4.225s] 3: -  			 DIEGM - University of Udine, Italy
[4.225s] 3: +                         DIEGM - University of Udine, Italy
[4.225s] 3: @@ -51 +51 @@
[4.225s] 3: - 
[4.226s] 3: +
[4.226s] 3: @@ -54 +54 @@
[4.226s] 3: - 
[4.226s] 3: +
[4.226s] 3: @@ -56 +56 @@
[4.226s] 3: - 
[4.226s] 3: +
[4.226s] 3: @@ -70,4 +70,5 @@
[4.226s] 3: -double solve_quadprog(Matrix<double>& G, Vector<double>& g0, 
[4.226s] 3: -                      const Matrix<double>& CE, const Vector<double>& ce0,  
[4.226s] 3: -                      const Matrix<double>& CI, const Vector<double>& ci0, 
[4.226s] 3: -                      Vector<double>& x);
[4.226s] 3: +  double solve_quadprog(
[4.226s] 3: +    Matrix < double > & G, Vector < double > & g0,
[4.226s] 3: +    const Matrix < double > & CE, const Vector < double > & ce0,
[4.226s] 3: +    const Matrix < double > & CI, const Vector < double > & ci0,
[4.226s] 3: +    Vector < double > & x);
[4.226s] 3: 
[4.226s] 3: Code style divergence in file 'src/FSM/FSM.cpp':
[4.226s] 3: 
[4.226s] 3: --- src/FSM/FSM.cpp
[4.226s] 3: +++ src/FSM/FSM.cpp.uncrustify
[4.226s] 3: @@ -7,2 +7,3 @@
[4.227s] 3: -FSM::FSM(CtrlComponents *ctrlComp)
[4.227s] 3: -    :_ctrlComp(ctrlComp){
[4.227s] 3: +FSM::FSM(CtrlComponents * ctrlComp)
[4.227s] 3: +: _ctrlComp(ctrlComp)
[4.227s] 3: +{
[4.227s] 3: @@ -10,8 +11,8 @@
[4.227s] 3: -    _stateList.invalid = nullptr;
[4.227s] 3: -    _stateList.passive = new State_Passive(_ctrlComp);
[4.227s] 3: -    _stateList.fixedStand = new State_FixedStand(_ctrlComp);
[4.227s] 3: -    _stateList.freeStand = new State_FreeStand(_ctrlComp);
[4.227s] 3: -    _stateList.trotting = new State_Trotting(_ctrlComp);
[4.227s] 3: -    _stateList.balanceTest = new State_BalanceTest(_ctrlComp);
[4.227s] 3: -    _stateList.swingTest = new State_SwingTest(_ctrlComp);
[4.227s] 3: -    _stateList.stepTest = new State_StepTest(_ctrlComp);
[4.227s] 3: +  _stateList.invalid = nullptr;
[4.227s] 3: +  _stateList.passive = new State_Passive(_ctrlComp);
[4.227s] 3: +  _stateList.fixedStand = new State_FixedStand(_ctrlComp);
[4.227s] 3: +  _stateList.freeStand = new State_FreeStand(_ctrlComp);
[4.227s] 3: +  _stateList.trotting = new State_Trotting(_ctrlComp);
[4.227s] 3: +  _stateList.balanceTest = new State_BalanceTest(_ctrlComp);
[4.227s] 3: +  _stateList.swingTest = new State_SwingTest(_ctrlComp);
[4.227s] 3: +  _stateList.stepTest = new State_StepTest(_ctrlComp);
[4.227s] 3: @@ -19 +20 @@
[4.227s] 3: -    _stateList.moveBase = new State_move_base(_ctrlComp);
[4.228s] 3: +  _stateList.moveBase = new State_move_base(_ctrlComp);
[4.228s] 3: @@ -22 +23 @@
[4.228s] 3: -    _stateList.moveBase = new State_move_base(_ctrlComp);
[4.228s] 3: +  _stateList.moveBase = new State_move_base(_ctrlComp);
[4.228s] 3: @@ -24 +25 @@
[4.228s] 3: -    initialize();
[4.228s] 3: +  initialize();
[4.228s] 3: @@ -27,2 +28,3 @@
[4.228s] 3: -FSM::~FSM(){
[4.228s] 3: -    _stateList.deletePtr();
[4.228s] 3: +FSM::~FSM()
[4.228s] 3: +{
[4.228s] 3: +  _stateList.deletePtr();
[4.228s] 3: @@ -31,5 +33,6 @@
[4.228s] 3: -void FSM::initialize(){
[4.228s] 3: -    _currentState = _stateList.passive;
[4.228s] 3: -    _currentState -> enter();
[4.228s] 3: -    _nextState = _currentState;
[4.228s] 3: -    _mode = FSMMode::NORMAL;
[4.228s] 3: +void FSM::initialize()
[4.228s] 3: +{
[4.228s] 3: +  _currentState = _stateList.passive;
[4.228s] 3: +  _currentState->enter();
[4.229s] 3: +  _nextState = _currentState;
[4.229s] 3: +  _mode = FSMMode::NORMAL;
[4.229s] 3: @@ -38,7 +41,18 @@
[4.229s] 3: -void FSM::run(){
[4.229s] 3: -    _startTime = getSystemTime();
[4.229s] 3: -    _ctrlComp->sendRecv();
[4.229s] 3: -    _ctrlComp->runWaveGen();
[4.229s] 3: -    _ctrlComp->estimator->run();
[4.229s] 3: -    if(!checkSafty()){
[4.229s] 3: -        _ctrlComp->ioInter->setPassive();
[4.229s] 3: +void FSM::run()
[4.229s] 3: +{
[4.229s] 3: +  _startTime = getSystemTime();
[4.229s] 3: +  _ctrlComp->sendRecv();
[4.229s] 3: +  _ctrlComp->runWaveGen();
[4.229s] 3: +  _ctrlComp->estimator->run();
[4.229s] 3: +  if (!checkSafty()) {
[4.229s] 3: +    _ctrlComp->ioInter->setPassive();
[4.229s] 3: +  }
[4.229s] 3: +
[4.229s] 3: +  if (_mode == FSMMode::NORMAL) {
[4.229s] 3: +    _currentState->run();
[4.229s] 3: +    _nextStateName = _currentState->checkChange();
[4.230s] 3: +    if (_nextStateName != _currentState->_stateName) {
[4.230s] 3: +      _mode = FSMMode::CHANGE;
[4.230s] 3: +      _nextState = getNextState(_nextStateName);
[4.230s] 3: +      std::cout << "Switched from " << _currentState->_stateNameString
[4.230s] 3: +                << " to " << _nextState->_stateNameString << std::endl;
[4.230s] 3: @@ -45,0 +60,7 @@
[4.230s] 3: +  } else if (_mode == FSMMode::CHANGE) {
[4.230s] 3: +    _currentState->exit();
[4.230s] 3: +    _currentState = _nextState;
[4.230s] 3: +    _currentState->enter();
[4.230s] 3: +    _mode = FSMMode::NORMAL;
[4.230s] 3: +    _currentState->run();
[4.230s] 3: +  }
[4.230s] 3: @@ -47,19 +68 @@
[4.230s] 3: -    if(_mode == FSMMode::NORMAL){
[4.230s] 3: -        _currentState->run();
[4.230s] 3: -        _nextStateName = _currentState->checkChange();
[4.230s] 3: -        if(_nextStateName != _currentState->_stateName){
[4.230s] 3: -            _mode = FSMMode::CHANGE;
[4.230s] 3: -            _nextState = getNextState(_nextStateName);
[4.230s] 3: -            std::cout << "Switched from " << _currentState->_stateNameString
[4.230s] 3: -                      << " to " << _nextState->_stateNameString << std::endl;
[4.230s] 3: -        }
[4.231s] 3: -    }
[4.231s] 3: -    else if(_mode == FSMMode::CHANGE){
[4.231s] 3: -        _currentState->exit();
[4.231s] 3: -        _currentState = _nextState;
[4.231s] 3: -        _currentState->enter();
[4.231s] 3: -        _mode = FSMMode::NORMAL;
[4.231s] 3: -        _currentState->run();
[4.231s] 3: -    }
[4.231s] 3: -
[4.231s] 3: -    absoluteWait(_startTime, (long long)(_ctrlComp->dt * 1000000));
[4.231s] 3: +  absoluteWait(_startTime, (long long)(_ctrlComp->dt * 1000000));
[4.231s] 3: @@ -68,3 +71,3 @@
[4.231s] 3: -FSMState* FSM::getNextState(FSMStateName stateName){
[4.231s] 3: -    switch (stateName)
[4.231s] 3: -    {
[4.231s] 3: +FSMState * FSM::getNextState(FSMStateName stateName)
[4.231s] 3: +{
[4.231s] 3: +  switch (stateName) {
[4.231s] 3: @@ -72,2 +75,2 @@
[4.231s] 3: -        return _stateList.invalid;
[4.231s] 3: -        break;
[4.231s] 3: +      return _stateList.invalid;
[4.231s] 3: +      break;
[4.232s] 3: @@ -75,2 +78,2 @@
[4.232s] 3: -        return _stateList.passive;
[4.232s] 3: -        break;
[4.232s] 3: +      return _stateList.passive;
[4.232s] 3: +      break;
[4.232s] 3: @@ -78,2 +81,2 @@
[4.232s] 3: -        return _stateList.fixedStand;
[4.232s] 3: -        break;
[4.232s] 3: +      return _stateList.fixedStand;
[4.232s] 3: +      break;
[4.232s] 3: @@ -81,2 +84,2 @@
[4.232s] 3: -        return _stateList.freeStand;
[4.232s] 3: -        break;
[4.232s] 3: +      return _stateList.freeStand;
[4.232s] 3: +      break;
[4.232s] 3: @@ -84,2 +87,2 @@
[4.232s] 3: -        return _stateList.trotting;
[4.232s] 3: -        break;
[4.232s] 3: +      return _stateList.trotting;
[4.232s] 3: +      break;
[4.232s] 3: @@ -87,2 +90,2 @@
[4.232s] 3: -        return _stateList.balanceTest;
[4.232s] 3: -        break;
[4.233s] 3: +      return _stateList.balanceTest;
[4.233s] 3: +      break;
[4.233s] 3: @@ -90,2 +93,2 @@
[4.233s] 3: -        return _stateList.swingTest;
[4.233s] 3: -        break;
[4.233s] 3: +      return _stateList.swingTest;
[4.233s] 3: +      break;
[4.233s] 3: @@ -93,2 +96,2 @@
[4.233s] 3: -        return _stateList.stepTest;
[4.233s] 3: -        break;
[4.233s] 3: +      return _stateList.stepTest;
[4.233s] 3: +      break;
[4.233s] 3: @@ -97,2 +100,2 @@
[4.233s] 3: -        return _stateList.moveBase;
[4.233s] 3: -        break;
[4.233s] 3: +      return _stateList.moveBase;
[4.233s] 3: +      break;
[4.233s] 3: @@ -102,2 +105,2 @@
[4.233s] 3: -        return _stateList.moveBase;
[4.233s] 3: -        break;
[4.233s] 3: +      return _stateList.moveBase;
[4.233s] 3: +      break;
[4.233s] 3: @@ -106,3 +109,3 @@
[4.233s] 3: -        return _stateList.invalid;
[4.234s] 3: -        break;
[4.234s] 3: -    }
[4.234s] 3: +      return _stateList.invalid;
[4.234s] 3: +      break;
[4.234s] 3: +  }
[4.234s] 3: @@ -111,8 +114,9 @@
[4.234s] 3: -bool FSM::checkSafty(){
[4.234s] 3: -    // The angle with z axis less than 60 degree
[4.234s] 3: -    if(_ctrlComp->lowState->getRotMat()(2,2) < 0.5 ){
[4.234s] 3: -        return false;
[4.234s] 3: -    }else{
[4.234s] 3: -        return true;
[4.234s] 3: -    }
[4.234s] 3: -}
[4.234s] 3: +bool FSM::checkSafty()
[4.234s] 3: +{
[4.234s] 3: +  // The angle with z axis less than 60 degree
[4.234s] 3: +  if (_ctrlComp->lowState->getRotMat()(2, 2) < 0.5) {
[4.234s] 3: +    return false;
[4.234s] 3: +  } else {
[4.234s] 3: +    return true;
[4.234s] 3: +  }
[4.234s] 3: +}
[4.235s] 3: 
[4.235s] 3: Code style divergence in file 'src/FSM/FSMState.cpp':
[4.235s] 3: 
[4.235s] 3: --- src/FSM/FSMState.cpp
[4.235s] 3: +++ src/FSM/FSMState.cpp.uncrustify
[4.235s] 3: @@ -6,5 +6,6 @@
[4.235s] 3: -FSMState::FSMState(CtrlComponents *ctrlComp, FSMStateName stateName, std::string stateNameString)
[4.235s] 3: -            :_ctrlComp(ctrlComp), _stateName(stateName), _stateNameString(stateNameString){
[4.235s] 3: -    _lowCmd = _ctrlComp->lowCmd;
[4.235s] 3: -    _lowState = _ctrlComp->lowState;
[4.235s] 3: -}
[4.235s] 3: +FSMState::FSMState(CtrlComponents * ctrlComp, FSMStateName stateName, std::string stateNameString)
[4.235s] 3: +: _ctrlComp(ctrlComp), _stateName(stateName), _stateNameString(stateNameString)
[4.235s] 3: +{
[4.235s] 3: +  _lowCmd = _ctrlComp->lowCmd;
[4.235s] 3: +  _lowState = _ctrlComp->lowState;
[4.235s] 3: +}
[4.235s] 3: 
[4.235s] 3: Code style divergence in file 'src/FSM/State_BalanceTest.cpp':
[4.235s] 3: 
[4.235s] 3: --- src/FSM/State_BalanceTest.cpp
[4.235s] 3: +++ src/FSM/State_BalanceTest.cpp.uncrustify
[4.236s] 3: @@ -6,4 +6,5 @@
[4.236s] 3: -State_BalanceTest::State_BalanceTest(CtrlComponents *ctrlComp)
[4.236s] 3: -                  :FSMState(ctrlComp, FSMStateName::BALANCETEST, "balanceTest"),
[4.236s] 3: -                  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel), 
[4.236s] 3: -                  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact){
[4.236s] 3: +State_BalanceTest::State_BalanceTest(CtrlComponents * ctrlComp)
[4.236s] 3: +: FSMState(ctrlComp, FSMStateName::BALANCETEST, "balanceTest"),
[4.236s] 3: +  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel),
[4.236s] 3: +  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact)
[4.236s] 3: +{
[4.236s] 3: @@ -11,8 +12,8 @@
[4.236s] 3: -    _xMax = 0.05;
[4.236s] 3: -    _xMin = -_xMax;
[4.236s] 3: -    _yMax = 0.05;
[4.236s] 3: -    _yMin = -_yMax;
[4.236s] 3: -    _zMax = 0.04;
[4.236s] 3: -    _zMin = -_zMax;
[4.236s] 3: -    _yawMax = 20 * M_PI / 180;
[4.236s] 3: -    _yawMin = -_yawMax;
[4.236s] 3: +  _xMax = 0.05;
[4.236s] 3: +  _xMin = -_xMax;
[4.236s] 3: +  _yMax = 0.05;
[4.236s] 3: +  _yMin = -_yMax;
[4.236s] 3: +  _zMax = 0.04;
[4.237s] 3: +  _zMin = -_zMax;
[4.237s] 3: +  _yawMax = 20 * M_PI / 180;
[4.237s] 3: +  _yawMin = -_yawMax;
[4.237s] 3: @@ -20,2 +21,2 @@
[4.237s] 3: -    _Kpp = Vec3(150, 150, 150).asDiagonal();
[4.237s] 3: -    _Kdp = Vec3(25, 25, 25).asDiagonal();
[4.237s] 3: +  _Kpp = Vec3(150, 150, 150).asDiagonal();
[4.237s] 3: +  _Kdp = Vec3(25, 25, 25).asDiagonal();
[4.237s] 3: @@ -23,2 +24,2 @@
[4.237s] 3: -    _kpw = 200;
[4.237s] 3: -    _Kdw = Vec3(30, 30, 30).asDiagonal();
[4.237s] 3: +  _kpw = 200;
[4.237s] 3: +  _Kdw = Vec3(30, 30, 30).asDiagonal();
[4.237s] 3: @@ -27,4 +28,5 @@
[4.237s] 3: -void State_BalanceTest::enter(){
[4.237s] 3: -    _pcdInit = _est->getPosition();
[4.237s] 3: -    _pcd = _pcdInit;
[4.237s] 3: -    _RdInit = _lowState->getRotMat();
[4.238s] 3: +void State_BalanceTest::enter()
[4.238s] 3: +{
[4.238s] 3: +  _pcdInit = _est->getPosition();
[4.238s] 3: +  _pcd = _pcdInit;
[4.238s] 3: +  _RdInit = _lowState->getRotMat();
[4.238s] 3: @@ -32,2 +34,2 @@
[4.238s] 3: -    _ctrlComp->setAllStance();
[4.238s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.238s] 3: +  _ctrlComp->setAllStance();
[4.239s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.239s] 3: @@ -36,2 +38,3 @@
[4.239s] 3: -void State_BalanceTest::run(){
[4.239s] 3: -    _userValue = _lowState->userValue;
[4.239s] 3: +void State_BalanceTest::run()
[4.239s] 3: +{
[4.239s] 3: +  _userValue = _lowState->userValue;
[4.239s] 3: @@ -39,3 +42,3 @@
[4.239s] 3: -    _pcd(0) = _pcdInit(0) + invNormalize(_userValue.ly, _xMin, _xMax);
[4.239s] 3: -    _pcd(1) = _pcdInit(1) - invNormalize(_userValue.lx, _yMin, _yMax);
[4.239s] 3: -    _pcd(2) = _pcdInit(2) + invNormalize(_userValue.ry, _zMin, _zMax);
[4.239s] 3: +  _pcd(0) = _pcdInit(0) + invNormalize(_userValue.ly, _xMin, _xMax);
[4.239s] 3: +  _pcd(1) = _pcdInit(1) - invNormalize(_userValue.lx, _yMin, _yMax);
[4.239s] 3: +  _pcd(2) = _pcdInit(2) + invNormalize(_userValue.ry, _zMin, _zMax);
[4.239s] 3: @@ -43,2 +46,2 @@
[4.239s] 3: -    float yaw = invNormalize(_userValue.rx, _yawMin, _yawMax);
[4.239s] 3: -    _Rd = rpyToRotMat(0, 0, yaw)*_RdInit;
[4.239s] 3: +  float yaw = invNormalize(_userValue.rx, _yawMin, _yawMax);
[4.239s] 3: +  _Rd = rpyToRotMat(0, 0, yaw) * _RdInit;
[4.239s] 3: @@ -46,2 +49,2 @@
[4.239s] 3: -    _posBody = _est->getPosition();
[4.239s] 3: -    _velBody = _est->getVelocity();
[4.240s] 3: +  _posBody = _est->getPosition();
[4.240s] 3: +  _velBody = _est->getVelocity();
[4.240s] 3: @@ -49,2 +52,2 @@
[4.240s] 3: -    _B2G_RotMat = _lowState->getRotMat();
[4.240s] 3: -    _G2B_RotMat = _B2G_RotMat.transpose();
[4.240s] 3: +  _B2G_RotMat = _lowState->getRotMat();
[4.240s] 3: +  _G2B_RotMat = _B2G_RotMat.transpose();
[4.240s] 3: @@ -52 +55 @@
[4.240s] 3: -    calcTau();
[4.240s] 3: +  calcTau();
[4.240s] 3: @@ -54,3 +57,3 @@
[4.240s] 3: -    _lowCmd->setStableGain();
[4.240s] 3: -    _lowCmd->setTau(_tau);
[4.240s] 3: -    _lowCmd->setQ(_q);
[4.240s] 3: +  _lowCmd->setStableGain();
[4.240s] 3: +  _lowCmd->setTau(_tau);
[4.240s] 3: +  _lowCmd->setQ(_q);
[4.240s] 3: @@ -59,2 +62,3 @@
[4.240s] 3: -void State_BalanceTest::exit(){
[4.240s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.240s] 3: +void State_BalanceTest::exit()
[4.240s] 3: +{
[4.240s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.241s] 3: @@ -63,10 +67,9 @@
[4.241s] 3: -FSMStateName State_BalanceTest::checkChange(){
[4.241s] 3: -    if(_lowState->userCmd == UserCommand::L2_B){
[4.241s] 3: -        return FSMStateName::PASSIVE;
[4.241s] 3: -    }
[4.241s] 3: -    else if(_lowState->userCmd == UserCommand::L2_A){
[4.241s] 3: -        return FSMStateName::FIXEDSTAND;
[4.241s] 3: -    }
[4.241s] 3: -    else{
[4.241s] 3: -        return FSMStateName::BALANCETEST;
[4.241s] 3: -    }
[4.241s] 3: +FSMStateName State_BalanceTest::checkChange()
[4.241s] 3: +{
[4.241s] 3: +  if (_lowState->userCmd == UserCommand::L2_B) {
[4.241s] 3: +    return FSMStateName::PASSIVE;
[4.241s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {
[4.241s] 3: +    return FSMStateName::FIXEDSTAND;
[4.241s] 3: +  } else {
[4.241s] 3: +    return FSMStateName::BALANCETEST;
[4.241s] 3: +  }
[4.241s] 3: @@ -75 +78,2 @@
[4.241s] 3: -void State_BalanceTest::calcTau(){
[4.242s] 3: +void State_BalanceTest::calcTau()
[4.242s] 3: +{
[4.242s] 3: @@ -77,2 +81,3 @@
[4.242s] 3: -    _ddPcd = _Kpp*(_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);
[4.242s] 3: -    _dWbd  = _kpw*rotMatToExp(_Rd*_G2B_RotMat) + _Kdw * (Vec3(0, 0, 0) - _lowState->getGyroGlobal());
[4.242s] 3: +  _ddPcd = _Kpp * (_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);
[4.242s] 3: +  _dWbd = _kpw * rotMatToExp(_Rd * _G2B_RotMat) + _Kdw *
[4.242s] 3: +    (Vec3(0, 0, 0) - _lowState->getGyroGlobal());
[4.242s] 3: @@ -80 +85 @@
[4.242s] 3: -    _posFeet2BGlobal = _est->getPosFeet2BGlobal();
[4.242s] 3: +  _posFeet2BGlobal = _est->getPosFeet2BGlobal();
[4.242s] 3: @@ -82,2 +87,2 @@
[4.242s] 3: -    _forceFeetGlobal = - _balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);
[4.242s] 3: -    _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;
[4.242s] 3: +  _forceFeetGlobal = -_balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);
[4.242s] 3: +  _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;
[4.242s] 3: @@ -85,3 +90,3 @@
[4.242s] 3: -    _q = vec34ToVec12(_lowState->getQ());
[4.242s] 3: -    _tau = _robModel->getTau(_q, _forceFeetBody);
[4.242s] 3: -}
[4.242s] 3: +  _q = vec34ToVec12(_lowState->getQ());
[4.242s] 3: +  _tau = _robModel->getTau(_q, _forceFeetBody);
[4.242s] 3: +}
[4.243s] 3: 
[4.243s] 3: Code style divergence in file 'src/FSM/State_FixedStand.cpp':
[4.243s] 3: 
[4.243s] 3: --- src/FSM/State_FixedStand.cpp
[4.243s] 3: +++ src/FSM/State_FixedStand.cpp.uncrustify
[4.243s] 3: @@ -7,2 +7,2 @@
[4.243s] 3: -State_FixedStand::State_FixedStand(CtrlComponents *ctrlComp)
[4.243s] 3: -                :FSMState(ctrlComp, FSMStateName::FIXEDSTAND, "fixed stand"){}
[4.243s] 3: +State_FixedStand::State_FixedStand(CtrlComponents * ctrlComp)
[4.243s] 3: +: FSMState(ctrlComp, FSMStateName::FIXEDSTAND, "fixed stand") {}
[4.243s] 3: @@ -10,10 +10,7 @@
[4.243s] 3: -void State_FixedStand::enter(){
[4.243s] 3: -    for(int i=0; i<4; i++){
[4.243s] 3: -        if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){
[4.243s] 3: -            _lowCmd->setSimStanceGain(i);
[4.243s] 3: -        }
[4.243s] 3: -        else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){
[4.243s] 3: -            _lowCmd->setRealStanceGain(i);
[4.243s] 3: -        }
[4.243s] 3: -        _lowCmd->setZeroDq(i);
[4.243s] 3: -        _lowCmd->setZeroTau(i);
[4.243s] 3: +void State_FixedStand::enter()
[4.243s] 3: +{
[4.244s] 3: +  for (int i = 0; i < 4; i++) {
[4.244s] 3: +    if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {
[4.244s] 3: +      _lowCmd->setSimStanceGain(i);
[4.244s] 3: +    } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {
[4.244s] 3: +      _lowCmd->setRealStanceGain(i);
[4.244s] 3: @@ -21,5 +18,8 @@
[4.244s] 3: -    for(int i=0; i<12; i++){
[4.244s] 3: -        _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;
[4.244s] 3: -        _startPos[i] = _lowState->motorState[i].q;
[4.244s] 3: -    }
[4.244s] 3: -    _ctrlComp->setAllStance();
[4.244s] 3: +    _lowCmd->setZeroDq(i);
[4.244s] 3: +    _lowCmd->setZeroTau(i);
[4.244s] 3: +  }
[4.244s] 3: +  for (int i = 0; i < 12; i++) {
[4.244s] 3: +    _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;
[4.244s] 3: +    _startPos[i] = _lowState->motorState[i].q;
[4.244s] 3: +  }
[4.244s] 3: +  _ctrlComp->setAllStance();
[4.244s] 3: @@ -28,6 +28,7 @@
[4.244s] 3: -void State_FixedStand::run(){
[4.244s] 3: -    _percent += (float)1/_duration;
[4.244s] 3: -    _percent = _percent > 1 ? 1 : _percent;
[4.245s] 3: -    for(int j=0; j<12; j++){
[4.245s] 3: -        _lowCmd->motorCmd[j].q = (1 - _percent)*_startPos[j] + _percent*_targetPos[j]; 
[4.245s] 3: -    }
[4.245s] 3: +void State_FixedStand::run()
[4.245s] 3: +{
[4.245s] 3: +  _percent += (float)1 / _duration;
[4.245s] 3: +  _percent = _percent > 1 ? 1 : _percent;
[4.245s] 3: +  for (int j = 0; j < 12; j++) {
[4.245s] 3: +    _lowCmd->motorCmd[j].q = (1 - _percent) * _startPos[j] + _percent * _targetPos[j];
[4.245s] 3: +  }
[4.245s] 3: @@ -36,2 +37,3 @@
[4.245s] 3: -void State_FixedStand::exit(){
[4.245s] 3: -    _percent = 0;
[4.245s] 3: +void State_FixedStand::exit()
[4.245s] 3: +{
[4.245s] 3: +  _percent = 0;
[4.245s] 3: @@ -40,19 +42,15 @@
[4.245s] 3: -FSMStateName State_FixedStand::checkChange(){
[4.245s] 3: -    if(_lowState->userCmd == UserCommand::L2_B){
[4.245s] 3: -        return FSMStateName::PASSIVE;
[4.245s] 3: -    }
[4.245s] 3: -    else if(_lowState->userCmd == UserCommand::L2_X){
[4.245s] 3: -        return FSMStateName::FREESTAND;
[4.246s] 3: -    }
[4.246s] 3: -    else if(_lowState->userCmd == UserCommand::START){
[4.246s] 3: -        return FSMStateName::TROTTING;
[4.246s] 3: -    }
[4.246s] 3: -    else if(_lowState->userCmd == UserCommand::L1_X){
[4.246s] 3: -        return FSMStateName::BALANCETEST;
[4.246s] 3: -    }
[4.246s] 3: -    else if(_lowState->userCmd == UserCommand::L1_A){
[4.246s] 3: -        return FSMStateName::SWINGTEST;
[4.246s] 3: -    }
[4.246s] 3: -    else if(_lowState->userCmd == UserCommand::L1_Y){
[4.246s] 3: -        return FSMStateName::STEPTEST;
[4.246s] 3: -    }
[4.246s] 3: +FSMStateName State_FixedStand::checkChange()
[4.246s] 3: +{
[4.246s] 3: +  if (_lowState->userCmd == UserCommand::L2_B) {
[4.247s] 3: +    return FSMStateName::PASSIVE;
[4.247s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_X) {
[4.247s] 3: +    return FSMStateName::FREESTAND;
[4.247s] 3: +  } else if (_lowState->userCmd == UserCommand::START) {
[4.247s] 3: +    return FSMStateName::TROTTING;
[4.247s] 3: +  } else if (_lowState->userCmd == UserCommand::L1_X) {
[4.247s] 3: +    return FSMStateName::BALANCETEST;
[4.247s] 3: +  } else if (_lowState->userCmd == UserCommand::L1_A) {
[4.247s] 3: +    return FSMStateName::SWINGTEST;
[4.247s] 3: +  } else if (_lowState->userCmd == UserCommand::L1_Y) {
[4.247s] 3: +    return FSMStateName::STEPTEST;
[4.247s] 3: +  }
[4.247s] 3: @@ -60,3 +58,3 @@
[4.247s] 3: -    else if(_lowState->userCmd == UserCommand::L2_Y){
[4.247s] 3: -        return FSMStateName::MOVE_BASE;
[4.247s] 3: -    }
[4.247s] 3: +  else if (_lowState->userCmd == UserCommand::L2_Y) {
[4.247s] 3: +    return FSMStateName::MOVE_BASE;
[4.247s] 3: +  }
[4.247s] 3: @@ -66,3 +64,3 @@
[4.247s] 3: -    else if(_lowState->userCmd == UserCommand::L2_Y){
[4.248s] 3: -        return FSMStateName::MOVE_BASE;
[4.248s] 3: -    }
[4.248s] 3: +  else if (_lowState->userCmd == UserCommand::L2_Y) {
[4.248s] 3: +    return FSMStateName::MOVE_BASE;
[4.248s] 3: +  }
[4.248s] 3: @@ -70,4 +68,4 @@
[4.248s] 3: -    else{
[4.248s] 3: -        return FSMStateName::FIXEDSTAND;
[4.248s] 3: -    }
[4.248s] 3: -}
[4.248s] 3: +  else {
[4.248s] 3: +    return FSMStateName::FIXEDSTAND;
[4.248s] 3: +  }
[4.248s] 3: +}
[4.248s] 3: 
[4.248s] 3: Code style divergence in file 'src/FSM/State_FreeStand.cpp':
[4.248s] 3: 
[4.248s] 3: --- src/FSM/State_FreeStand.cpp
[4.248s] 3: +++ src/FSM/State_FreeStand.cpp.uncrustify
[4.248s] 3: @@ -6,10 +6,11 @@
[4.248s] 3: -State_FreeStand::State_FreeStand(CtrlComponents *ctrlComp)
[4.248s] 3: -             :FSMState(ctrlComp, FSMStateName::FREESTAND, "free stand"){
[4.249s] 3: -    _rowMax = 20 * M_PI / 180;
[4.249s] 3: -    _rowMin = -_rowMax;
[4.249s] 3: -    _pitchMax = 15 * M_PI / 180;
[4.249s] 3: -    _pitchMin = -_pitchMax;
[4.249s] 3: -    _yawMax = 20 * M_PI / 180;
[4.249s] 3: -    _yawMin = -_yawMax;
[4.249s] 3: -    _heightMax = 0.04;
[4.249s] 3: -    _heightMin = -_heightMax;
[4.249s] 3: +State_FreeStand::State_FreeStand(CtrlComponents * ctrlComp)
[4.249s] 3: +: FSMState(ctrlComp, FSMStateName::FREESTAND, "free stand")
[4.249s] 3: +{
[4.249s] 3: +  _rowMax = 20 * M_PI / 180;
[4.249s] 3: +  _rowMin = -_rowMax;
[4.249s] 3: +  _pitchMax = 15 * M_PI / 180;
[4.249s] 3: +  _pitchMin = -_pitchMax;
[4.249s] 3: +  _yawMax = 20 * M_PI / 180;
[4.249s] 3: +  _yawMin = -_yawMax;
[4.249s] 3: +  _heightMax = 0.04;
[4.249s] 3: +  _heightMin = -_heightMax;
[4.249s] 3: @@ -18,10 +19,7 @@
[4.249s] 3: -void State_FreeStand::enter(){
[4.249s] 3: -    for(int i=0; i<4; i++){
[4.249s] 3: -        if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){
[4.250s] 3: -            _lowCmd->setSimStanceGain(i);
[4.250s] 3: -        }
[4.250s] 3: -        else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){
[4.250s] 3: -            _lowCmd->setRealStanceGain(i);
[4.250s] 3: -        }
[4.250s] 3: -        _lowCmd->setZeroDq(i);
[4.250s] 3: -        _lowCmd->setZeroTau(i);
[4.250s] 3: +void State_FreeStand::enter()
[4.250s] 3: +{
[4.250s] 3: +  for (int i = 0; i < 4; i++) {
[4.250s] 3: +    if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {
[4.250s] 3: +      _lowCmd->setSimStanceGain(i);
[4.250s] 3: +    } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {
[4.250s] 3: +      _lowCmd->setRealStanceGain(i);
[4.250s] 3: @@ -28,0 +27,3 @@
[4.250s] 3: +    _lowCmd->setZeroDq(i);
[4.250s] 3: +    _lowCmd->setZeroTau(i);
[4.250s] 3: +  }
[4.250s] 3: @@ -30,5 +31,5 @@
[4.250s] 3: -    for(int i=0; i<12; i++){
[4.250s] 3: -        _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;
[4.250s] 3: -    }
[4.250s] 3: -    _initVecOX = _ctrlComp->robotModel->getX(*_lowState);
[4.250s] 3: -    _initVecXP = _ctrlComp->robotModel->getVecXP(*_lowState);
[4.251s] 3: +  for (int i = 0; i < 12; i++) {
[4.251s] 3: +    _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;
[4.251s] 3: +  }
[4.251s] 3: +  _initVecOX = _ctrlComp->robotModel->getX(*_lowState);
[4.251s] 3: +  _initVecXP = _ctrlComp->robotModel->getVecXP(*_lowState);
[4.251s] 3: @@ -36,2 +37,2 @@
[4.251s] 3: -    _ctrlComp->setAllStance();
[4.251s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.251s] 3: +  _ctrlComp->setAllStance();
[4.251s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.251s] 3: @@ -40,3 +41,4 @@
[4.251s] 3: -void State_FreeStand::run(){
[4.251s] 3: -    Vec34 vecOP;
[4.251s] 3: -    _userValue = _lowState->userValue;
[4.251s] 3: +void State_FreeStand::run()
[4.251s] 3: +{
[4.251s] 3: +  Vec34 vecOP;
[4.251s] 3: +  _userValue = _lowState->userValue;
[4.251s] 3: @@ -44,5 +46,6 @@
[4.251s] 3: -    vecOP = _calcOP( invNormalize(_userValue.lx, _rowMin, _rowMax),
[4.251s] 3: -                     invNormalize(_userValue.ly, _pitchMin, _pitchMax),
[4.251s] 3: -                    -invNormalize(_userValue.rx, _yawMin, _yawMax),
[4.251s] 3: -                     invNormalize(_userValue.ry, _heightMin, _heightMax) );
[4.252s] 3: -    _calcCmd(vecOP);
[4.252s] 3: +  vecOP = _calcOP(
[4.252s] 3: +    invNormalize(_userValue.lx, _rowMin, _rowMax),
[4.252s] 3: +    invNormalize(_userValue.ly, _pitchMin, _pitchMax),
[4.252s] 3: +    -invNormalize(_userValue.rx, _yawMin, _yawMax),
[4.252s] 3: +    invNormalize(_userValue.ry, _heightMin, _heightMax) );
[4.252s] 3: +  _calcCmd(vecOP);
[4.252s] 3: @@ -51,2 +54,3 @@
[4.252s] 3: -void State_FreeStand::exit(){
[4.252s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.252s] 3: +void State_FreeStand::exit()
[4.252s] 3: +{
[4.252s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.252s] 3: @@ -55,13 +59,11 @@
[4.252s] 3: -FSMStateName State_FreeStand::checkChange(){
[4.252s] 3: -    if(_lowState->userCmd == UserCommand::L2_A){
[4.252s] 3: -        return FSMStateName::FIXEDSTAND;
[4.252s] 3: -    }
[4.252s] 3: -    else if(_lowState->userCmd == UserCommand::L2_B){
[4.252s] 3: -        return FSMStateName::PASSIVE;
[4.252s] 3: -    }
[4.252s] 3: -    else if(_lowState->userCmd == UserCommand::START){
[4.252s] 3: -        return FSMStateName::TROTTING;
[4.253s] 3: -    }
[4.253s] 3: -    else{
[4.253s] 3: -        return FSMStateName::FREESTAND;
[4.253s] 3: -    }
[4.253s] 3: +FSMStateName State_FreeStand::checkChange()
[4.253s] 3: +{
[4.253s] 3: +  if (_lowState->userCmd == UserCommand::L2_A) {
[4.253s] 3: +    return FSMStateName::FIXEDSTAND;
[4.253s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_B) {
[4.253s] 3: +    return FSMStateName::PASSIVE;
[4.253s] 3: +  } else if (_lowState->userCmd == UserCommand::START) {
[4.253s] 3: +    return FSMStateName::TROTTING;
[4.253s] 3: +  } else {
[4.253s] 3: +    return FSMStateName::FREESTAND;
[4.253s] 3: +  }
[4.253s] 3: @@ -70,3 +72,4 @@
[4.253s] 3: -Vec34 State_FreeStand::_calcOP(float row, float pitch, float yaw, float height){
[4.253s] 3: -    Vec3 vecXO = -_initVecOX;
[4.253s] 3: -    vecXO(2) += height;
[4.253s] 3: +Vec34 State_FreeStand::_calcOP(float row, float pitch, float yaw, float height)
[4.253s] 3: +{
[4.253s] 3: +  Vec3 vecXO = -_initVecOX;
[4.253s] 3: +  vecXO(2) += height;
[4.254s] 3: @@ -74 +77 @@
[4.254s] 3: -    RotMat rotM = rpyToRotMat(row, pitch, yaw);
[4.254s] 3: +  RotMat rotM = rpyToRotMat(row, pitch, yaw);
[4.254s] 3: @@ -76,2 +79,2 @@
[4.254s] 3: -    HomoMat Tsb = homoMatrix(vecXO, rotM);
[4.254s] 3: -    HomoMat Tbs = homoMatrixInverse(Tsb);
[4.254s] 3: +  HomoMat Tsb = homoMatrix(vecXO, rotM);
[4.254s] 3: +  HomoMat Tbs = homoMatrixInverse(Tsb);
[4.254s] 3: @@ -79,6 +82,6 @@
[4.254s] 3: -    Vec4 tempVec4;
[4.254s] 3: -    Vec34 vecOP;
[4.254s] 3: -    for(int i(0); i<4; ++i){
[4.254s] 3: -        tempVec4 = Tbs * homoVec(_initVecXP.col(i));
[4.254s] 3: -        vecOP.col(i) = noHomoVec(tempVec4);
[4.254s] 3: -    }
[4.254s] 3: +  Vec4 tempVec4;
[4.254s] 3: +  Vec34 vecOP;
[4.254s] 3: +  for (int i(0); i < 4; ++i) {
[4.254s] 3: +    tempVec4 = Tbs * homoVec(_initVecXP.col(i));
[4.254s] 3: +    vecOP.col(i) = noHomoVec(tempVec4);
[4.255s] 3: +  }
[4.255s] 3: @@ -86 +89 @@
[4.255s] 3: -    return vecOP;
[4.255s] 3: +  return vecOP;
[4.255s] 3: @@ -89,4 +92,5 @@
[4.255s] 3: -void State_FreeStand::_calcCmd(Vec34 vecOP){
[4.255s] 3: -    Vec12 q = _ctrlComp->robotModel->getQ(vecOP, FrameType::BODY);
[4.255s] 3: -    _lowCmd->setQ(q);
[4.255s] 3: -}
[4.255s] 3: +void State_FreeStand::_calcCmd(Vec34 vecOP)
[4.255s] 3: +{
[4.255s] 3: +  Vec12 q = _ctrlComp->robotModel->getQ(vecOP, FrameType::BODY);
[4.255s] 3: +  _lowCmd->setQ(q);
[4.255s] 3: +}
[4.255s] 3: 
[4.255s] 3: Code style divergence in file 'src/FSM/State_Passive.cpp':
[4.255s] 3: 
[4.255s] 3: --- src/FSM/State_Passive.cpp
[4.255s] 3: +++ src/FSM/State_Passive.cpp.uncrustify
[4.255s] 3: @@ -6,2 +6,2 @@
[4.255s] 3: -State_Passive::State_Passive(CtrlComponents *ctrlComp)
[4.255s] 3: -             :FSMState(ctrlComp, FSMStateName::PASSIVE, "passive"){}
[4.256s] 3: +State_Passive::State_Passive(CtrlComponents * ctrlComp)
[4.256s] 3: +: FSMState(ctrlComp, FSMStateName::PASSIVE, "passive") {}
[4.256s] 3: @@ -9,10 +9,10 @@
[4.256s] 3: -void State_Passive::enter(){
[4.256s] 3: -    if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){
[4.256s] 3: -        for(int i=0; i<12; i++){
[4.256s] 3: -            _lowCmd->motorCmd[i].mode = 10;
[4.256s] 3: -            _lowCmd->motorCmd[i].q = 0;
[4.256s] 3: -            _lowCmd->motorCmd[i].dq = 0;
[4.256s] 3: -            _lowCmd->motorCmd[i].Kp = 0;
[4.256s] 3: -            _lowCmd->motorCmd[i].Kd = 8;
[4.256s] 3: -            _lowCmd->motorCmd[i].tau = 0;
[4.256s] 3: -        }
[4.256s] 3: +void State_Passive::enter()
[4.256s] 3: +{
[4.256s] 3: +  if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {
[4.256s] 3: +    for (int i = 0; i < 12; i++) {
[4.256s] 3: +      _lowCmd->motorCmd[i].mode = 10;
[4.256s] 3: +      _lowCmd->motorCmd[i].q = 0;
[4.256s] 3: +      _lowCmd->motorCmd[i].dq = 0;
[4.256s] 3: +      _lowCmd->motorCmd[i].Kp = 0;
[4.256s] 3: +      _lowCmd->motorCmd[i].Kd = 8;
[4.256s] 3: +      _lowCmd->motorCmd[i].tau = 0;
[4.256s] 3: @@ -20,9 +20,8 @@
[4.257s] 3: -    else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){
[4.257s] 3: -        for(int i=0; i<12; i++){
[4.257s] 3: -            _lowCmd->motorCmd[i].mode = 10;
[4.257s] 3: -            _lowCmd->motorCmd[i].q = 0;
[4.257s] 3: -            _lowCmd->motorCmd[i].dq = 0;
[4.257s] 3: -            _lowCmd->motorCmd[i].Kp = 0;
[4.257s] 3: -            _lowCmd->motorCmd[i].Kd = 3;
[4.257s] 3: -            _lowCmd->motorCmd[i].tau = 0;
[4.257s] 3: -        }
[4.257s] 3: +  } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {
[4.257s] 3: +    for (int i = 0; i < 12; i++) {
[4.257s] 3: +      _lowCmd->motorCmd[i].mode = 10;
[4.257s] 3: +      _lowCmd->motorCmd[i].q = 0;
[4.257s] 3: +      _lowCmd->motorCmd[i].dq = 0;
[4.257s] 3: +      _lowCmd->motorCmd[i].Kp = 0;
[4.257s] 3: +      _lowCmd->motorCmd[i].Kd = 3;
[4.257s] 3: +      _lowCmd->motorCmd[i].tau = 0;
[4.257s] 3: @@ -29,0 +29 @@
[4.257s] 3: +  }
[4.257s] 3: @@ -31 +31 @@
[4.257s] 3: -    _ctrlComp->setAllSwing();
[4.257s] 3: +  _ctrlComp->setAllSwing();
[4.257s] 3: @@ -34,5 +34,2 @@
[4.258s] 3: -void State_Passive::run(){
[4.258s] 3: -    
[4.258s] 3: -}
[4.258s] 3: -
[4.258s] 3: -void State_Passive::exit(){
[4.258s] 3: +void State_Passive::run()
[4.258s] 3: +{
[4.258s] 3: @@ -42,8 +39,13 @@
[4.258s] 3: -FSMStateName State_Passive::checkChange(){
[4.258s] 3: -    if(_lowState->userCmd == UserCommand::L2_A){
[4.258s] 3: -        return FSMStateName::FIXEDSTAND;
[4.258s] 3: -    }
[4.258s] 3: -    else{
[4.258s] 3: -        return FSMStateName::PASSIVE;
[4.258s] 3: -    }
[4.258s] 3: -}
[4.258s] 3: +void State_Passive::exit()
[4.258s] 3: +{
[4.258s] 3: +
[4.258s] 3: +}
[4.258s] 3: +
[4.258s] 3: +FSMStateName State_Passive::checkChange()
[4.258s] 3: +{
[4.258s] 3: +  if (_lowState->userCmd == UserCommand::L2_A) {
[4.259s] 3: +    return FSMStateName::FIXEDSTAND;
[4.259s] 3: +  } else {
[4.259s] 3: +    return FSMStateName::PASSIVE;
[4.259s] 3: +  }
[4.259s] 3: +}
[4.259s] 3: 
[4.259s] 3: Code style divergence in file 'src/FSM/State_StepTest.cpp':
[4.259s] 3: 
[4.259s] 3: --- src/FSM/State_StepTest.cpp
[4.259s] 3: +++ src/FSM/State_StepTest.cpp.uncrustify
[4.259s] 3: @@ -6,5 +6,6 @@
[4.259s] 3: -State_StepTest::State_StepTest(CtrlComponents *ctrlComp)
[4.259s] 3: -                  :FSMState(ctrlComp, FSMStateName::STEPTEST, "stepTest"),
[4.259s] 3: -                  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel), 
[4.259s] 3: -                  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact),
[4.259s] 3: -                  _phase(ctrlComp->phase){
[4.259s] 3: +State_StepTest::State_StepTest(CtrlComponents * ctrlComp)
[4.259s] 3: +: FSMState(ctrlComp, FSMStateName::STEPTEST, "stepTest"),
[4.259s] 3: +  _est(ctrlComp->estimator), _robModel(ctrlComp->robotModel),
[4.259s] 3: +  _balCtrl(ctrlComp->balCtrl), _contact(ctrlComp->contact),
[4.259s] 3: +  _phase(ctrlComp->phase)
[4.259s] 3: +{
[4.259s] 3: @@ -12 +13 @@
[4.259s] 3: -    _gaitHeight = 0.05;
[4.260s] 3: +  _gaitHeight = 0.05;
[4.260s] 3: @@ -14,2 +15,2 @@
[4.260s] 3: -    _KpSwing = Vec3(600, 600, 200).asDiagonal();
[4.260s] 3: -    _KdSwing = Vec3(20, 20, 5).asDiagonal();
[4.260s] 3: +  _KpSwing = Vec3(600, 600, 200).asDiagonal();
[4.260s] 3: +  _KdSwing = Vec3(20, 20, 5).asDiagonal();
[4.260s] 3: @@ -17,4 +18,4 @@
[4.260s] 3: -    _Kpp = Vec3(50, 50, 300).asDiagonal();
[4.260s] 3: -    _Kpw = Vec3(600, 600, 600).asDiagonal();
[4.260s] 3: -    _Kdp = Vec3(5, 5, 20).asDiagonal();
[4.260s] 3: -    _Kdw = Vec3(10, 10, 10).asDiagonal();
[4.260s] 3: +  _Kpp = Vec3(50, 50, 300).asDiagonal();
[4.260s] 3: +  _Kpw = Vec3(600, 600, 600).asDiagonal();
[4.260s] 3: +  _Kdp = Vec3(5, 5, 20).asDiagonal();
[4.260s] 3: +  _Kdw = Vec3(10, 10, 10).asDiagonal();
[4.260s] 3: @@ -23,7 +24,8 @@
[4.260s] 3: -void State_StepTest::enter(){
[4.260s] 3: -    _pcd = _est->getPosition();
[4.261s] 3: -    _Rd  = _lowState->getRotMat();
[4.261s] 3: -    _posFeetGlobalInit = _est->getFeetPos();
[4.261s] 3: -    _posFeetGlobalGoal = _posFeetGlobalInit;
[4.261s] 3: -    _ctrlComp->setStartWave();
[4.261s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.261s] 3: +void State_StepTest::enter()
[4.261s] 3: +{
[4.261s] 3: +  _pcd = _est->getPosition();
[4.261s] 3: +  _Rd = _lowState->getRotMat();
[4.261s] 3: +  _posFeetGlobalInit = _est->getFeetPos();
[4.261s] 3: +  _posFeetGlobalGoal = _posFeetGlobalInit;
[4.261s] 3: +  _ctrlComp->setStartWave();
[4.261s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.261s] 3: @@ -32,3 +34,4 @@
[4.261s] 3: -void State_StepTest::run(){
[4.261s] 3: -    _posBody = _est->getPosition();
[4.261s] 3: -    _velBody = _est->getVelocity();
[4.261s] 3: +void State_StepTest::run()
[4.261s] 3: +{
[4.262s] 3: +  _posBody = _est->getPosition();
[4.262s] 3: +  _velBody = _est->getVelocity();
[4.262s] 3: @@ -36,2 +39,2 @@
[4.262s] 3: -    _B2G_RotMat = _lowState->getRotMat();
[4.262s] 3: -    _G2B_RotMat = _B2G_RotMat.transpose();
[4.262s] 3: +  _B2G_RotMat = _lowState->getRotMat();
[4.262s] 3: +  _G2B_RotMat = _B2G_RotMat.transpose();
[4.262s] 3: @@ -40,5 +43,6 @@
[4.262s] 3: -    for(int i(0); i<4; ++i){
[4.262s] 3: -        if((*_contact)(i) == 0){
[4.262s] 3: -            _posFeetGlobalGoal(2, i) = _posFeetGlobalInit(2, i) + (1-cos((*_phase)(i)*2*M_PI))*_gaitHeight;
[4.262s] 3: -            _velFeetGlobalGoal(2, i) = sin((*_phase)(i)*2*M_PI)*2*M_PI*_gaitHeight;
[4.262s] 3: -        }
[4.262s] 3: +  for (int i(0); i < 4; ++i) {
[4.262s] 3: +    if ((*_contact)(i) == 0) {
[4.262s] 3: +      _posFeetGlobalGoal(
[4.262s] 3: +        2,
[4.262s] 3: +        i) = _posFeetGlobalInit(2, i) + (1 - cos((*_phase)(i) * 2 * M_PI)) * _gaitHeight;
[4.262s] 3: +      _velFeetGlobalGoal(2, i) = sin((*_phase)(i) * 2 * M_PI) * 2 * M_PI * _gaitHeight;
[4.262s] 3: @@ -45,0 +50 @@
[4.262s] 3: +  }
[4.263s] 3: @@ -47 +52 @@
[4.263s] 3: -    calcTau();
[4.263s] 3: +  calcTau();
[4.263s] 3: @@ -49,2 +54,2 @@
[4.263s] 3: -    _lowCmd->setZeroGain();
[4.263s] 3: -    _lowCmd->setTau(_tau);
[4.263s] 3: +  _lowCmd->setZeroGain();
[4.263s] 3: +  _lowCmd->setTau(_tau);
[4.263s] 3: @@ -53,3 +58,4 @@
[4.263s] 3: -void State_StepTest::exit(){
[4.263s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.263s] 3: -    _ctrlComp->setAllSwing();
[4.263s] 3: +void State_StepTest::exit()
[4.263s] 3: +{
[4.263s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.263s] 3: +  _ctrlComp->setAllSwing();
[4.263s] 3: @@ -58,10 +64,9 @@
[4.263s] 3: -FSMStateName State_StepTest::checkChange(){
[4.263s] 3: -    if(_lowState->userCmd == UserCommand::L2_B){
[4.263s] 3: -        return FSMStateName::PASSIVE;
[4.263s] 3: -    }
[4.263s] 3: -    else if(_lowState->userCmd == UserCommand::L2_A){
[4.263s] 3: -        return FSMStateName::FIXEDSTAND;
[4.263s] 3: -    }
[4.264s] 3: -    else{
[4.264s] 3: -        return FSMStateName::STEPTEST;
[4.264s] 3: -    }
[4.264s] 3: +FSMStateName State_StepTest::checkChange()
[4.264s] 3: +{
[4.264s] 3: +  if (_lowState->userCmd == UserCommand::L2_B) {
[4.264s] 3: +    return FSMStateName::PASSIVE;
[4.264s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {
[4.264s] 3: +    return FSMStateName::FIXEDSTAND;
[4.264s] 3: +  } else {
[4.264s] 3: +    return FSMStateName::STEPTEST;
[4.264s] 3: +  }
[4.264s] 3: @@ -70,3 +75,5 @@
[4.264s] 3: -void State_StepTest::calcTau(){
[4.264s] 3: -    _ddPcd = _Kpp*(_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);
[4.264s] 3: -    _dWbd  = _Kpw*rotMatToExp(_Rd*_G2B_RotMat) + _Kdw * (Vec3(0, 0, 0) - _lowState->getGyroGlobal());
[4.264s] 3: +void State_StepTest::calcTau()
[4.264s] 3: +{
[4.264s] 3: +  _ddPcd = _Kpp * (_pcd - _posBody) + _Kdp * (Vec3(0, 0, 0) - _velBody);
[4.264s] 3: +  _dWbd = _Kpw * rotMatToExp(_Rd * _G2B_RotMat) + _Kdw *
[4.264s] 3: +    (Vec3(0, 0, 0) - _lowState->getGyroGlobal());
[4.264s] 3: @@ -74,9 +81,9 @@
[4.264s] 3: -    _posFeet2BGlobal = _est->getPosFeet2BGlobal();
[4.265s] 3: -    _forceFeetGlobal = - _balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);
[4.265s] 3: -    
[4.265s] 3: -    _posFeetGlobal = _est->getFeetPos();
[4.265s] 3: -    _velFeetGlobal = _est->getFeetVel();
[4.265s] 3: -    for(int i(0); i<4; ++i){
[4.265s] 3: -        if((*_contact)(i) == 0){
[4.265s] 3: -            _forceFeetGlobal.col(i) = _KpSwing*(_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) + _KdSwing*(_velFeetGlobalGoal.col(i)-_velFeetGlobal.col(i));
[4.265s] 3: -        }
[4.265s] 3: +  _posFeet2BGlobal = _est->getPosFeet2BGlobal();
[4.265s] 3: +  _forceFeetGlobal = -_balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);
[4.265s] 3: +
[4.265s] 3: +  _posFeetGlobal = _est->getFeetPos();
[4.265s] 3: +  _velFeetGlobal = _est->getFeetVel();
[4.265s] 3: +  for (int i(0); i < 4; ++i) {
[4.265s] 3: +    if ((*_contact)(i) == 0) {
[4.265s] 3: +      _forceFeetGlobal.col(i) = _KpSwing * (_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) +
[4.265s] 3: +        _KdSwing * (_velFeetGlobalGoal.col(i) - _velFeetGlobal.col(i));
[4.265s] 3: @@ -84,2 +91 @@
[4.265s] 3: -    
[4.265s] 3: -    _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;
[4.265s] 3: +  }
[4.266s] 3: @@ -87,3 +93,5 @@
[4.266s] 3: -    _q = vec34ToVec12(_lowState->getQ());
[4.266s] 3: -    _tau = _robModel->getTau(_q, _forceFeetBody);
[4.266s] 3: -}
[4.266s] 3: +  _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;
[4.266s] 3: +
[4.266s] 3: +  _q = vec34ToVec12(_lowState->getQ());
[4.266s] 3: +  _tau = _robModel->getTau(_q, _forceFeetBody);
[4.266s] 3: +}
[4.266s] 3: 
[4.266s] 3: Code style divergence in file 'src/FSM/State_SwingTest.cpp':
[4.266s] 3: 
[4.266s] 3: --- src/FSM/State_SwingTest.cpp
[4.266s] 3: +++ src/FSM/State_SwingTest.cpp.uncrustify
[4.266s] 3: @@ -6,8 +6,9 @@
[4.266s] 3: -State_SwingTest::State_SwingTest(CtrlComponents *ctrlComp)
[4.266s] 3: -                :FSMState(ctrlComp, FSMStateName::SWINGTEST, "swingTest"){
[4.266s] 3: -    _xMin = -0.15;
[4.266s] 3: -    _xMax =  0.10;
[4.266s] 3: -    _yMin = -0.15;
[4.266s] 3: -    _yMax =  0.15;
[4.266s] 3: -    _zMin = -0.05;
[4.267s] 3: -    _zMax =  0.20;
[4.267s] 3: +State_SwingTest::State_SwingTest(CtrlComponents * ctrlComp)
[4.267s] 3: +: FSMState(ctrlComp, FSMStateName::SWINGTEST, "swingTest")
[4.267s] 3: +{
[4.267s] 3: +  _xMin = -0.15;
[4.267s] 3: +  _xMax = 0.10;
[4.267s] 3: +  _yMin = -0.15;
[4.267s] 3: +  _yMax = 0.15;
[4.267s] 3: +  _zMin = -0.05;
[4.267s] 3: +  _zMax = 0.20;
[4.267s] 3: @@ -16,10 +17,7 @@
[4.267s] 3: -void State_SwingTest::enter(){
[4.267s] 3: -    for(int i=0; i<4; i++){
[4.267s] 3: -        if(_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO){
[4.267s] 3: -            _lowCmd->setSimStanceGain(i);
[4.267s] 3: -        }
[4.267s] 3: -        else if(_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT){
[4.267s] 3: -            _lowCmd->setRealStanceGain(i);
[4.267s] 3: -        }
[4.267s] 3: -        _lowCmd->setZeroDq(i);
[4.267s] 3: -        _lowCmd->setZeroTau(i);
[4.267s] 3: +void State_SwingTest::enter()
[4.267s] 3: +{
[4.268s] 3: +  for (int i = 0; i < 4; i++) {
[4.268s] 3: +    if (_ctrlComp->ctrlPlatform == CtrlPlatform::GAZEBO) {
[4.268s] 3: +      _lowCmd->setSimStanceGain(i);
[4.268s] 3: +    } else if (_ctrlComp->ctrlPlatform == CtrlPlatform::REALROBOT) {
[4.268s] 3: +      _lowCmd->setRealStanceGain(i);
[4.268s] 3: @@ -27 +25,4 @@
[4.268s] 3: -    _lowCmd->setSwingGain(0);
[4.268s] 3: +    _lowCmd->setZeroDq(i);
[4.268s] 3: +    _lowCmd->setZeroTau(i);
[4.268s] 3: +  }
[4.268s] 3: +  _lowCmd->setSwingGain(0);
[4.268s] 3: @@ -29,2 +30,2 @@
[4.268s] 3: -    _Kp = Vec3(20, 20, 50).asDiagonal();
[4.268s] 3: -    _Kd = Vec3( 5,  5, 20).asDiagonal();
[4.268s] 3: +  _Kp = Vec3(20, 20, 50).asDiagonal();
[4.268s] 3: +  _Kd = Vec3(5, 5, 20).asDiagonal();
[4.268s] 3: @@ -32,3 +33,3 @@
[4.268s] 3: -    for(int i=0; i<12; i++){
[4.268s] 3: -        _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;
[4.268s] 3: -    }
[4.268s] 3: +  for (int i = 0; i < 12; i++) {
[4.269s] 3: +    _lowCmd->motorCmd[i].q = _lowState->motorState[i].q;
[4.269s] 3: +  }
[4.269s] 3: @@ -36,3 +37,3 @@
[4.269s] 3: -    _initFeetPos = _ctrlComp->robotModel->getFeet2BPositions(*_lowState, FrameType::HIP);
[4.269s] 3: -    _feetPos = _initFeetPos;
[4.269s] 3: -    _initPos = _initFeetPos.col(0);
[4.269s] 3: +  _initFeetPos = _ctrlComp->robotModel->getFeet2BPositions(*_lowState, FrameType::HIP);
[4.269s] 3: +  _feetPos = _initFeetPos;
[4.269s] 3: +  _initPos = _initFeetPos.col(0);
[4.269s] 3: @@ -40 +41 @@
[4.269s] 3: -    _ctrlComp->setAllSwing();
[4.269s] 3: +  _ctrlComp->setAllSwing();
[4.269s] 3: @@ -43,2 +44,3 @@
[4.269s] 3: -void State_SwingTest::run(){
[4.269s] 3: -    _userValue = _lowState->userValue;
[4.269s] 3: +void State_SwingTest::run()
[4.269s] 3: +{
[4.269s] 3: +  _userValue = _lowState->userValue;
[4.269s] 3: @@ -46,11 +48,5 @@
[4.269s] 3: -    if(_userValue.ly > 0){
[4.269s] 3: -        _posGoal(0) = invNormalize(_userValue.ly, _initPos(0), _initPos(0)+_xMax, 0, 1);
[4.269s] 3: -    }else{
[4.269s] 3: -        _posGoal(0) = invNormalize(_userValue.ly, _initPos(0)+_xMin, _initPos(0), -1, 0);
[4.269s] 3: -    }
[4.270s] 3: -    
[4.270s] 3: -    if(_userValue.lx > 0){
[4.270s] 3: -        _posGoal(1) = invNormalize(_userValue.lx, _initPos(1, 0), _initPos(1)+_yMax, 0, 1);
[4.270s] 3: -    }else{
[4.270s] 3: -        _posGoal(1) = invNormalize(_userValue.lx, _initPos(1)+_yMin, _initPos(1), -1, 0);
[4.270s] 3: -    }
[4.270s] 3: +  if (_userValue.ly > 0) {
[4.270s] 3: +    _posGoal(0) = invNormalize(_userValue.ly, _initPos(0), _initPos(0) + _xMax, 0, 1);
[4.270s] 3: +  } else {
[4.270s] 3: +    _posGoal(0) = invNormalize(_userValue.ly, _initPos(0) + _xMin, _initPos(0), -1, 0);
[4.270s] 3: +  }
[4.270s] 3: @@ -58,5 +54,5 @@
[4.270s] 3: -    if(_userValue.ry > 0){
[4.270s] 3: -        _posGoal(2) = invNormalize(_userValue.ry, _initPos(2), _initPos(2)+_zMax, 0, 1);
[4.270s] 3: -    }else{
[4.270s] 3: -        _posGoal(2) = invNormalize(_userValue.ry, _initPos(2)+_zMin, _initPos(2), -1, 0);
[4.270s] 3: -    }
[4.270s] 3: +  if (_userValue.lx > 0) {
[4.270s] 3: +    _posGoal(1) = invNormalize(_userValue.lx, _initPos(1, 0), _initPos(1) + _yMax, 0, 1);
[4.271s] 3: +  } else {
[4.271s] 3: +    _posGoal(1) = invNormalize(_userValue.lx, _initPos(1) + _yMin, _initPos(1), -1, 0);
[4.271s] 3: +  }
[4.271s] 3: @@ -64,2 +60,8 @@
[4.271s] 3: -    _positionCtrl();
[4.271s] 3: -    _torqueCtrl();
[4.271s] 3: +  if (_userValue.ry > 0) {
[4.271s] 3: +    _posGoal(2) = invNormalize(_userValue.ry, _initPos(2), _initPos(2) + _zMax, 0, 1);
[4.271s] 3: +  } else {
[4.271s] 3: +    _posGoal(2) = invNormalize(_userValue.ry, _initPos(2) + _zMin, _initPos(2), -1, 0);
[4.271s] 3: +  }
[4.271s] 3: +
[4.271s] 3: +  _positionCtrl();
[4.271s] 3: +  _torqueCtrl();
[4.271s] 3: @@ -68,2 +70,3 @@
[4.271s] 3: -void State_SwingTest::exit(){
[4.271s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.271s] 3: +void State_SwingTest::exit()
[4.271s] 3: +{
[4.271s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.271s] 3: @@ -72,10 +75,9 @@
[4.271s] 3: -FSMStateName State_SwingTest::checkChange(){
[4.271s] 3: -    if(_lowState->userCmd == UserCommand::L2_B){
[4.271s] 3: -        return FSMStateName::PASSIVE;
[4.272s] 3: -    }
[4.272s] 3: -    else if(_lowState->userCmd == UserCommand::L2_A){
[4.272s] 3: -        return FSMStateName::FIXEDSTAND;
[4.272s] 3: -    }
[4.272s] 3: -    else{
[4.272s] 3: -        return FSMStateName::SWINGTEST;
[4.272s] 3: -    }
[4.272s] 3: +FSMStateName State_SwingTest::checkChange()
[4.272s] 3: +{
[4.272s] 3: +  if (_lowState->userCmd == UserCommand::L2_B) {
[4.272s] 3: +    return FSMStateName::PASSIVE;
[4.272s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {
[4.272s] 3: +    return FSMStateName::FIXEDSTAND;
[4.272s] 3: +  } else {
[4.272s] 3: +    return FSMStateName::SWINGTEST;
[4.272s] 3: +  }
[4.272s] 3: @@ -84,4 +86,5 @@
[4.272s] 3: -void State_SwingTest::_positionCtrl(){
[4.272s] 3: -    _feetPos.col(0) = _posGoal;
[4.272s] 3: -    _targetPos = _ctrlComp->robotModel->getQ(_feetPos, FrameType::HIP);
[4.272s] 3: -    _lowCmd->setQ(_targetPos);
[4.272s] 3: +void State_SwingTest::_positionCtrl()
[4.272s] 3: +{
[4.272s] 3: +  _feetPos.col(0) = _posGoal;
[4.273s] 3: +  _targetPos = _ctrlComp->robotModel->getQ(_feetPos, FrameType::HIP);
[4.273s] 3: +  _lowCmd->setQ(_targetPos);
[4.273s] 3: @@ -90,3 +93,4 @@
[4.273s] 3: -void State_SwingTest::_torqueCtrl(){
[4.273s] 3: -    Vec3 pos0 = _ctrlComp->robotModel->getFootPosition(*_lowState, 0, FrameType::HIP);
[4.273s] 3: -    Vec3 vel0 = _ctrlComp->robotModel->getFootVelocity(*_lowState, 0);
[4.273s] 3: +void State_SwingTest::_torqueCtrl()
[4.273s] 3: +{
[4.273s] 3: +  Vec3 pos0 = _ctrlComp->robotModel->getFootPosition(*_lowState, 0, FrameType::HIP);
[4.273s] 3: +  Vec3 vel0 = _ctrlComp->robotModel->getFootVelocity(*_lowState, 0);
[4.273s] 3: @@ -94 +98 @@
[4.273s] 3: -    Vec3 force0 = _Kp*(_posGoal - pos0) + _Kd*(-vel0);
[4.273s] 3: +  Vec3 force0 = _Kp * (_posGoal - pos0) + _Kd * (-vel0);
[4.273s] 3: @@ -96,2 +100,2 @@
[4.273s] 3: -    Vec12 torque;
[4.273s] 3: -    Mat3 jaco0 = _ctrlComp->robotModel->getJaco(*_lowState, 0);
[4.273s] 3: +  Vec12 torque;
[4.273s] 3: +  Mat3 jaco0 = _ctrlComp->robotModel->getJaco(*_lowState, 0);
[4.273s] 3: @@ -99 +103 @@
[4.273s] 3: -    torque.segment(0, 3) = jaco0.transpose() * force0;
[4.273s] 3: +  torque.segment(0, 3) = jaco0.transpose() * force0;
[4.273s] 3: @@ -101,2 +105,2 @@
[4.273s] 3: -    _lowCmd->setTau(torque);
[4.273s] 3: -}
[4.274s] 3: +  _lowCmd->setTau(torque);
[4.274s] 3: +}
[4.274s] 3: 
[4.274s] 3: Code style divergence in file 'src/FSM/State_Trotting.cpp':
[4.274s] 3: 
[4.274s] 3: --- src/FSM/State_Trotting.cpp
[4.274s] 3: +++ src/FSM/State_Trotting.cpp.uncrustify
[4.274s] 3: @@ -7,8 +7,9 @@
[4.274s] 3: -State_Trotting::State_Trotting(CtrlComponents *ctrlComp)
[4.274s] 3: -             :FSMState(ctrlComp, FSMStateName::TROTTING, "trotting"), 
[4.274s] 3: -              _est(ctrlComp->estimator), _phase(ctrlComp->phase), 
[4.274s] 3: -              _contact(ctrlComp->contact), _robModel(ctrlComp->robotModel), 
[4.274s] 3: -              _balCtrl(ctrlComp->balCtrl){
[4.274s] 3: -    _gait = new GaitGenerator(ctrlComp);
[4.274s] 3: -
[4.274s] 3: -    _gaitHeight = 0.08;
[4.274s] 3: +State_Trotting::State_Trotting(CtrlComponents * ctrlComp)
[4.274s] 3: +: FSMState(ctrlComp, FSMStateName::TROTTING, "trotting"),
[4.274s] 3: +  _est(ctrlComp->estimator), _phase(ctrlComp->phase),
[4.274s] 3: +  _contact(ctrlComp->contact), _robModel(ctrlComp->robotModel),
[4.274s] 3: +  _balCtrl(ctrlComp->balCtrl)
[4.274s] 3: +{
[4.274s] 3: +  _gait = new GaitGenerator(ctrlComp);
[4.275s] 3: +
[4.275s] 3: +  _gaitHeight = 0.08;
[4.275s] 3: @@ -17,6 +18,6 @@
[4.275s] 3: -    _Kpp = Vec3(70, 70, 70).asDiagonal();
[4.275s] 3: -    _Kdp = Vec3(10, 10, 10).asDiagonal();
[4.275s] 3: -    _kpw = 780; 
[4.275s] 3: -    _Kdw = Vec3(70, 70, 70).asDiagonal();
[4.275s] 3: -    _KpSwing = Vec3(400, 400, 400).asDiagonal();
[4.275s] 3: -    _KdSwing = Vec3(10, 10, 10).asDiagonal();
[4.275s] 3: +  _Kpp = Vec3(70, 70, 70).asDiagonal();
[4.275s] 3: +  _Kdp = Vec3(10, 10, 10).asDiagonal();
[4.275s] 3: +  _kpw = 780;
[4.275s] 3: +  _Kdw = Vec3(70, 70, 70).asDiagonal();
[4.275s] 3: +  _KpSwing = Vec3(400, 400, 400).asDiagonal();
[4.275s] 3: +  _KdSwing = Vec3(10, 10, 10).asDiagonal();
[4.275s] 3: @@ -26,6 +27,6 @@
[4.275s] 3: -    _Kpp = Vec3(20, 20, 100).asDiagonal();
[4.275s] 3: -    _Kdp = Vec3(20, 20, 20).asDiagonal();
[4.275s] 3: -    _kpw = 400;
[4.275s] 3: -    _Kdw = Vec3(50, 50, 50).asDiagonal();
[4.275s] 3: -    _KpSwing = Vec3(400, 400, 400).asDiagonal();
[4.275s] 3: -    _KdSwing = Vec3(10, 10, 10).asDiagonal();
[4.275s] 3: +  _Kpp = Vec3(20, 20, 100).asDiagonal();
[4.276s] 3: +  _Kdp = Vec3(20, 20, 20).asDiagonal();
[4.276s] 3: +  _kpw = 400;
[4.276s] 3: +  _Kdw = Vec3(50, 50, 50).asDiagonal();
[4.276s] 3: +  _KpSwing = Vec3(400, 400, 400).asDiagonal();
[4.276s] 3: +  _KdSwing = Vec3(10, 10, 10).asDiagonal();
[4.276s] 3: @@ -34,30 +35,79 @@
[4.276s] 3: -    _vxLim = _robModel->getRobVelLimitX();
[4.276s] 3: -    _vyLim = _robModel->getRobVelLimitY();
[4.276s] 3: -    _wyawLim = _robModel->getRobVelLimitYaw();
[4.276s] 3: -
[4.276s] 3: -}
[4.276s] 3: -
[4.276s] 3: -State_Trotting::~State_Trotting(){
[4.276s] 3: -    delete _gait;
[4.276s] 3: -}
[4.276s] 3: -
[4.276s] 3: -void State_Trotting::enter(){
[4.276s] 3: -    _pcd = _est->getPosition();
[4.276s] 3: -    _pcd(2) = -_robModel->getFeetPosIdeal()(2, 0);
[4.276s] 3: -    _vCmdBody.setZero();
[4.276s] 3: -    _yawCmd = _lowState->getYaw();
[4.276s] 3: -    _Rd = rotz(_yawCmd);
[4.276s] 3: -    _wCmdGlobal.setZero();
[4.277s] 3: -
[4.277s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.277s] 3: -    _gait->restart();
[4.277s] 3: -}
[4.277s] 3: -
[4.277s] 3: -void State_Trotting::exit(){
[4.277s] 3: -    _ctrlComp->ioInter->zeroCmdPanel();
[4.277s] 3: -    _ctrlComp->setAllSwing();
[4.277s] 3: -}
[4.277s] 3: -
[4.277s] 3: -FSMStateName State_Trotting::checkChange(){
[4.277s] 3: -    if(_lowState->userCmd == UserCommand::L2_B){
[4.277s] 3: -        return FSMStateName::PASSIVE;
[4.277s] 3: +  _vxLim = _robModel->getRobVelLimitX();
[4.277s] 3: +  _vyLim = _robModel->getRobVelLimitY();
[4.277s] 3: +  _wyawLim = _robModel->getRobVelLimitYaw();
[4.277s] 3: +
[4.277s] 3: +}
[4.277s] 3: +
[4.277s] 3: +State_Trotting::~State_Trotting()
[4.277s] 3: +{
[4.277s] 3: +  delete _gait;
[4.278s] 3: +}
[4.278s] 3: +
[4.278s] 3: +void State_Trotting::enter()
[4.278s] 3: +{
[4.278s] 3: +  _pcd = _est->getPosition();
[4.278s] 3: +  _pcd(2) = -_robModel->getFeetPosIdeal()(2, 0);
[4.278s] 3: +  _vCmdBody.setZero();
[4.278s] 3: +  _yawCmd = _lowState->getYaw();
[4.278s] 3: +  _Rd = rotz(_yawCmd);
[4.278s] 3: +  _wCmdGlobal.setZero();
[4.278s] 3: +
[4.278s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.278s] 3: +  _gait->restart();
[4.278s] 3: +}
[4.278s] 3: +
[4.278s] 3: +void State_Trotting::exit()
[4.278s] 3: +{
[4.278s] 3: +  _ctrlComp->ioInter->zeroCmdPanel();
[4.278s] 3: +  _ctrlComp->setAllSwing();
[4.278s] 3: +}
[4.278s] 3: +
[4.278s] 3: +FSMStateName State_Trotting::checkChange()
[4.278s] 3: +{
[4.279s] 3: +  if (_lowState->userCmd == UserCommand::L2_B) {
[4.279s] 3: +    return FSMStateName::PASSIVE;
[4.279s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {
[4.279s] 3: +    return FSMStateName::FIXEDSTAND;
[4.279s] 3: +  } else {
[4.279s] 3: +    return FSMStateName::TROTTING;
[4.279s] 3: +  }
[4.279s] 3: +}
[4.279s] 3: +
[4.279s] 3: +void State_Trotting::run()
[4.279s] 3: +{
[4.279s] 3: +  _posBody = _est->getPosition();
[4.279s] 3: +  _velBody = _est->getVelocity();
[4.279s] 3: +  _posFeet2BGlobal = _est->getPosFeet2BGlobal();
[4.279s] 3: +  _posFeetGlobal = _est->getFeetPos();
[4.279s] 3: +  _velFeetGlobal = _est->getFeetVel();
[4.279s] 3: +  _B2G_RotMat = _lowState->getRotMat();
[4.279s] 3: +  _G2B_RotMat = _B2G_RotMat.transpose();
[4.279s] 3: +  _yaw = _lowState->getYaw();
[4.279s] 3: +  _dYaw = _lowState->getDYaw();
[4.280s] 3: +
[4.280s] 3: +  _userValue = _lowState->userValue;
[4.280s] 3: +
[4.280s] 3: +  getUserCmd();
[4.280s] 3: +  calcCmd();
[4.280s] 3: +
[4.280s] 3: +  _gait->setGait(_vCmdGlobal.segment(0, 2), _wCmdGlobal(2), _gaitHeight);
[4.280s] 3: +  _gait->run(_posFeetGlobalGoal, _velFeetGlobalGoal);
[4.280s] 3: +
[4.280s] 3: +  calcTau();
[4.280s] 3: +  calcQQd();
[4.280s] 3: +
[4.280s] 3: +  if (checkStepOrNot()) {
[4.280s] 3: +    _ctrlComp->setStartWave();
[4.280s] 3: +  } else {
[4.280s] 3: +    _ctrlComp->setAllStance();
[4.280s] 3: +  }
[4.280s] 3: +
[4.280s] 3: +  _lowCmd->setTau(_tau);
[4.280s] 3: +  _lowCmd->setQ(vec34ToVec12(_qGoal));
[4.280s] 3: +  _lowCmd->setQd(vec34ToVec12(_qdGoal));
[4.280s] 3: +
[4.280s] 3: +  for (int i(0); i < 4; ++i) {
[4.280s] 3: +    if ((*_contact)(i) == 0) {
[4.281s] 3: +      _lowCmd->setSwingGain(i);
[4.281s] 3: +    } else {
[4.281s] 3: +      _lowCmd->setStableGain(i);
[4.281s] 3: @@ -65,2 +115,91 @@
[4.281s] 3: -    else if(_lowState->userCmd == UserCommand::L2_A){
[4.281s] 3: -        return FSMStateName::FIXEDSTAND;
[4.281s] 3: +  }
[4.281s] 3: +
[4.281s] 3: +}
[4.281s] 3: +
[4.281s] 3: +bool State_Trotting::checkStepOrNot()
[4.281s] 3: +{
[4.281s] 3: +  if ( (fabs(_vCmdBody(0)) > 0.03) ||
[4.281s] 3: +    (fabs(_vCmdBody(1)) > 0.03) ||
[4.281s] 3: +    (fabs(_posError(0)) > 0.08) ||
[4.281s] 3: +    (fabs(_posError(1)) > 0.08) ||
[4.281s] 3: +    (fabs(_velError(0)) > 0.05) ||
[4.281s] 3: +    (fabs(_velError(1)) > 0.05) ||
[4.281s] 3: +    (fabs(_dYawCmd) > 0.20) )
[4.281s] 3: +  {
[4.281s] 3: +    return true;
[4.282s] 3: +  } else {
[4.282s] 3: +    return false;
[4.282s] 3: +  }
[4.282s] 3: +}
[4.282s] 3: +
[4.282s] 3: +void State_Trotting::setHighCmd(double vx, double vy, double wz)
[4.282s] 3: +{
[4.282s] 3: +  _vCmdBody(0) = vx;
[4.282s] 3: +  _vCmdBody(1) = vy;
[4.282s] 3: +  _vCmdBody(2) = 0;
[4.282s] 3: +  _dYawCmd = wz;
[4.282s] 3: +}
[4.282s] 3: +
[4.282s] 3: +void State_Trotting::getUserCmd()
[4.282s] 3: +{
[4.282s] 3: +  /* Movement */
[4.282s] 3: +  _vCmdBody(0) = invNormalize(_userValue.ly, _vxLim(0), _vxLim(1));
[4.282s] 3: +  _vCmdBody(1) = -invNormalize(_userValue.lx, _vyLim(0), _vyLim(1));
[4.282s] 3: +  _vCmdBody(2) = 0;
[4.282s] 3: +
[4.282s] 3: +  /* Turning */
[4.282s] 3: +  _dYawCmd = -invNormalize(_userValue.rx, _wyawLim(0), _wyawLim(1));
[4.283s] 3: +  _dYawCmd = 0.9 * _dYawCmdPast + (1 - 0.9) * _dYawCmd;
[4.283s] 3: +  _dYawCmdPast = _dYawCmd;
[4.283s] 3: +}
[4.283s] 3: +
[4.283s] 3: +void State_Trotting::calcCmd()
[4.283s] 3: +{
[4.283s] 3: +  /* Movement */
[4.283s] 3: +  _vCmdGlobal = _B2G_RotMat * _vCmdBody;
[4.283s] 3: +
[4.283s] 3: +  _vCmdGlobal(0) = saturation(_vCmdGlobal(0), Vec2(_velBody(0) - 0.2, _velBody(0) + 0.2));
[4.283s] 3: +  _vCmdGlobal(1) = saturation(_vCmdGlobal(1), Vec2(_velBody(1) - 0.2, _velBody(1) + 0.2));
[4.283s] 3: +
[4.283s] 3: +  _pcd(0) =
[4.283s] 3: +    saturation(
[4.283s] 3: +    _pcd(0) + _vCmdGlobal(0) * _ctrlComp->dt, Vec2(
[4.283s] 3: +      _posBody(0) - 0.05, _posBody(
[4.283s] 3: +        0) + 0.05));
[4.283s] 3: +  _pcd(1) =
[4.283s] 3: +    saturation(
[4.283s] 3: +    _pcd(1) + _vCmdGlobal(1) * _ctrlComp->dt, Vec2(
[4.283s] 3: +      _posBody(1) - 0.05, _posBody(
[4.283s] 3: +        1) + 0.05));
[4.283s] 3: +
[4.283s] 3: +  _vCmdGlobal(2) = 0;
[4.284s] 3: +
[4.284s] 3: +  /* Turning */
[4.284s] 3: +  _yawCmd = _yawCmd + _dYawCmd * _ctrlComp->dt;
[4.284s] 3: +
[4.284s] 3: +  _Rd = rotz(_yawCmd);
[4.284s] 3: +  _wCmdGlobal(2) = _dYawCmd;
[4.284s] 3: +}
[4.284s] 3: +
[4.284s] 3: +void State_Trotting::calcTau()
[4.284s] 3: +{
[4.284s] 3: +  _posError = _pcd - _posBody;
[4.284s] 3: +  _velError = _vCmdGlobal - _velBody;
[4.284s] 3: +
[4.284s] 3: +  _ddPcd = _Kpp * _posError + _Kdp * _velError;
[4.284s] 3: +  _dWbd = _kpw * rotMatToExp(_Rd * _G2B_RotMat) + _Kdw * (_wCmdGlobal - _lowState->getGyroGlobal());
[4.284s] 3: +
[4.284s] 3: +  _ddPcd(0) = saturation(_ddPcd(0), Vec2(-3, 3));
[4.285s] 3: +  _ddPcd(1) = saturation(_ddPcd(1), Vec2(-3, 3));
[4.285s] 3: +  _ddPcd(2) = saturation(_ddPcd(2), Vec2(-5, 5));
[4.285s] 3: +
[4.285s] 3: +  _dWbd(0) = saturation(_dWbd(0), Vec2(-40, 40));
[4.285s] 3: +  _dWbd(1) = saturation(_dWbd(1), Vec2(-40, 40));
[4.285s] 3: +  _dWbd(2) = saturation(_dWbd(2), Vec2(-10, 10));
[4.285s] 3: +
[4.285s] 3: +  _forceFeetGlobal = -_balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);
[4.285s] 3: +
[4.285s] 3: +  for (int i(0); i < 4; ++i) {
[4.285s] 3: +    if ((*_contact)(i) == 0) {
[4.285s] 3: +      _forceFeetGlobal.col(i) = _KpSwing * (_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) +
[4.285s] 3: +        _KdSwing * (_velFeetGlobalGoal.col(i) - _velFeetGlobal.col(i));
[4.285s] 3: @@ -68,142 +207,22 @@
[4.286s] 3: -    else{
[4.286s] 3: -        return FSMStateName::TROTTING;
[4.286s] 3: -    }
[4.286s] 3: -}
[4.286s] 3: -
[4.286s] 3: -void State_Trotting::run(){
[4.286s] 3: -    _posBody = _est->getPosition();
[4.286s] 3: -    _velBody = _est->getVelocity();
[4.286s] 3: -    _posFeet2BGlobal = _est->getPosFeet2BGlobal();
[4.286s] 3: -    _posFeetGlobal = _est->getFeetPos();
[4.286s] 3: -    _velFeetGlobal = _est->getFeetVel();
[4.286s] 3: -    _B2G_RotMat = _lowState->getRotMat();
[4.286s] 3: -    _G2B_RotMat = _B2G_RotMat.transpose();
[4.286s] 3: -    _yaw = _lowState->getYaw();
[4.286s] 3: -    _dYaw = _lowState->getDYaw();
[4.286s] 3: -
[4.286s] 3: -    _userValue = _lowState->userValue;
[4.286s] 3: -
[4.287s] 3: -    getUserCmd();
[4.287s] 3: -    calcCmd();
[4.287s] 3: -
[4.287s] 3: -    _gait->setGait(_vCmdGlobal.segment(0,2), _wCmdGlobal(2), _gaitHeight);
[4.287s] 3: -    _gait->run(_posFeetGlobalGoal, _velFeetGlobalGoal);
[4.287s] 3: -
[4.287s] 3: -    calcTau();
[4.287s] 3: -    calcQQd();
[4.287s] 3: -
[4.287s] 3: -    if(checkStepOrNot()){
[4.287s] 3: -        _ctrlComp->setStartWave();
[4.287s] 3: -    }else{
[4.287s] 3: -        _ctrlComp->setAllStance();
[4.287s] 3: -    }
[4.287s] 3: -
[4.287s] 3: -    _lowCmd->setTau(_tau);
[4.287s] 3: -    _lowCmd->setQ(vec34ToVec12(_qGoal));
[4.287s] 3: -    _lowCmd->setQd(vec34ToVec12(_qdGoal));
[4.287s] 3: -
[4.287s] 3: -    for(int i(0); i<4; ++i){
[4.287s] 3: -        if((*_contact)(i) == 0){
[4.287s] 3: -            _lowCmd->setSwingGain(i);
[4.288s] 3: -        }else{
[4.288s] 3: -            _lowCmd->setStableGain(i);
[4.288s] 3: -        }
[4.288s] 3: -    }
[4.288s] 3: -
[4.288s] 3: -}
[4.288s] 3: -
[4.288s] 3: -bool State_Trotting::checkStepOrNot(){
[4.288s] 3: -    if( (fabs(_vCmdBody(0)) > 0.03) ||
[4.288s] 3: -        (fabs(_vCmdBody(1)) > 0.03) ||
[4.288s] 3: -        (fabs(_posError(0)) > 0.08) ||
[4.288s] 3: -        (fabs(_posError(1)) > 0.08) ||
[4.288s] 3: -        (fabs(_velError(0)) > 0.05) ||
[4.289s] 3: -        (fabs(_velError(1)) > 0.05) ||
[4.289s] 3: -        (fabs(_dYawCmd) > 0.20) ){
[4.289s] 3: -        return true;
[4.289s] 3: -    }else{
[4.289s] 3: -        return false;
[4.289s] 3: -    }
[4.289s] 3: -}
[4.289s] 3: -
[4.289s] 3: -void State_Trotting::setHighCmd(double vx, double vy, double wz){
[4.289s] 3: -    _vCmdBody(0) = vx;
[4.289s] 3: -    _vCmdBody(1) = vy;
[4.289s] 3: -    _vCmdBody(2) = 0; 
[4.289s] 3: -    _dYawCmd = wz;
[4.289s] 3: -}
[4.289s] 3: -
[4.289s] 3: -void State_Trotting::getUserCmd(){
[4.289s] 3: -    /* Movement */
[4.289s] 3: -    _vCmdBody(0) =  invNormalize(_userValue.ly, _vxLim(0), _vxLim(1));
[4.289s] 3: -    _vCmdBody(1) = -invNormalize(_userValue.lx, _vyLim(0), _vyLim(1));
[4.289s] 3: -    _vCmdBody(2) = 0;
[4.289s] 3: -
[4.289s] 3: -    /* Turning */
[4.289s] 3: -    _dYawCmd = -invNormalize(_userValue.rx, _wyawLim(0), _wyawLim(1));
[4.290s] 3: -    _dYawCmd = 0.9*_dYawCmdPast + (1-0.9) * _dYawCmd;
[4.290s] 3: -    _dYawCmdPast = _dYawCmd;
[4.290s] 3: -}
[4.290s] 3: -
[4.290s] 3: -void State_Trotting::calcCmd(){
[4.290s] 3: -    /* Movement */
[4.290s] 3: -    _vCmdGlobal = _B2G_RotMat * _vCmdBody;
[4.290s] 3: -
[4.290s] 3: -    _vCmdGlobal(0) = saturation(_vCmdGlobal(0), Vec2(_velBody(0)-0.2, _velBody(0)+0.2));
[4.290s] 3: -    _vCmdGlobal(1) = saturation(_vCmdGlobal(1), Vec2(_velBody(1)-0.2, _velBody(1)+0.2));
[4.290s] 3: -
[4.290s] 3: -    _pcd(0) = saturation(_pcd(0) + _vCmdGlobal(0) * _ctrlComp->dt, Vec2(_posBody(0) - 0.05, _posBody(0) + 0.05));
[4.290s] 3: -    _pcd(1) = saturation(_pcd(1) + _vCmdGlobal(1) * _ctrlComp->dt, Vec2(_posBody(1) - 0.05, _posBody(1) + 0.05));
[4.290s] 3: -
[4.290s] 3: -    _vCmdGlobal(2) = 0;
[4.290s] 3: -
[4.290s] 3: -    /* Turning */
[4.290s] 3: -    _yawCmd = _yawCmd + _dYawCmd * _ctrlComp->dt;
[4.290s] 3: -
[4.290s] 3: -    _Rd = rotz(_yawCmd);
[4.290s] 3: -    _wCmdGlobal(2) = _dYawCmd;
[4.290s] 3: -}
[4.290s] 3: -
[4.291s] 3: -void State_Trotting::calcTau(){
[4.291s] 3: -    _posError = _pcd - _posBody;
[4.291s] 3: -    _velError = _vCmdGlobal - _velBody;
[4.291s] 3: -
[4.291s] 3: -    _ddPcd = _Kpp * _posError + _Kdp * _velError;
[4.291s] 3: -    _dWbd  = _kpw*rotMatToExp(_Rd*_G2B_RotMat) + _Kdw * (_wCmdGlobal - _lowState->getGyroGlobal());
[4.291s] 3: -
[4.291s] 3: -    _ddPcd(0) = saturation(_ddPcd(0), Vec2(-3, 3));
[4.291s] 3: -    _ddPcd(1) = saturation(_ddPcd(1), Vec2(-3, 3));
[4.291s] 3: -    _ddPcd(2) = saturation(_ddPcd(2), Vec2(-5, 5));
[4.291s] 3: -
[4.291s] 3: -    _dWbd(0) = saturation(_dWbd(0), Vec2(-40, 40));
[4.291s] 3: -    _dWbd(1) = saturation(_dWbd(1), Vec2(-40, 40));
[4.291s] 3: -    _dWbd(2) = saturation(_dWbd(2), Vec2(-10, 10));
[4.291s] 3: -
[4.291s] 3: -    _forceFeetGlobal = - _balCtrl->calF(_ddPcd, _dWbd, _B2G_RotMat, _posFeet2BGlobal, *_contact);
[4.291s] 3: -
[4.291s] 3: -    for(int i(0); i<4; ++i){
[4.291s] 3: -        if((*_contact)(i) == 0){
[4.291s] 3: -            _forceFeetGlobal.col(i) = _KpSwing*(_posFeetGlobalGoal.col(i) - _posFeetGlobal.col(i)) + _KdSwing*(_velFeetGlobalGoal.col(i)-_velFeetGlobal.col(i));
[4.291s] 3: -        }
[4.291s] 3: -    }
[4.292s] 3: -
[4.292s] 3: -    _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;
[4.292s] 3: -    _q = vec34ToVec12(_lowState->getQ());
[4.292s] 3: -    _tau = _robModel->getTau(_q, _forceFeetBody);
[4.292s] 3: -}
[4.292s] 3: -
[4.292s] 3: -void State_Trotting::calcQQd(){
[4.292s] 3: -
[4.292s] 3: -    Vec34 _posFeet2B;
[4.292s] 3: -    _posFeet2B = _robModel->getFeet2BPositions(*_lowState,FrameType::BODY);
[4.292s] 3: -    
[4.292s] 3: -    for(int i(0); i<4; ++i){
[4.292s] 3: -        _posFeet2BGoal.col(i) = _G2B_RotMat * (_posFeetGlobalGoal.col(i) - _posBody);
[4.292s] 3: -        _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody); 
[4.292s] 3: -        // _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody - _B2G_RotMat * (skew(_lowState->getGyro()) * _posFeet2B.col(i)) );  //  c.f formula (6.12) 
[4.292s] 3: -    }
[4.292s] 3: -    
[4.292s] 3: -    _qGoal = vec12ToVec34(_robModel->getQ(_posFeet2BGoal, FrameType::BODY));
[4.292s] 3: -    _qdGoal = vec12ToVec34(_robModel->getQd(_posFeet2B, _velFeet2BGoal, FrameType::BODY));
[4.292s] 3: -}
[4.292s] 3: -
[4.292s] 3: +  }
[4.293s] 3: +
[4.293s] 3: +  _forceFeetBody = _G2B_RotMat * _forceFeetGlobal;
[4.293s] 3: +  _q = vec34ToVec12(_lowState->getQ());
[4.293s] 3: +  _tau = _robModel->getTau(_q, _forceFeetBody);
[4.293s] 3: +}
[4.293s] 3: +
[4.293s] 3: +void State_Trotting::calcQQd()
[4.293s] 3: +{
[4.293s] 3: +
[4.293s] 3: +  Vec34 _posFeet2B;
[4.293s] 3: +  _posFeet2B = _robModel->getFeet2BPositions(*_lowState, FrameType::BODY);
[4.293s] 3: +
[4.293s] 3: +  for (int i(0); i < 4; ++i) {
[4.293s] 3: +    _posFeet2BGoal.col(i) = _G2B_RotMat * (_posFeetGlobalGoal.col(i) - _posBody);
[4.293s] 3: +    _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody);
[4.293s] 3: +    // _velFeet2BGoal.col(i) = _G2B_RotMat * (_velFeetGlobalGoal.col(i) - _velBody - _B2G_RotMat * (skew(_lowState->getGyro()) * _posFeet2B.col(i)) );  //  c.f formula (6.12)
[4.293s] 3: +  }
[4.293s] 3: +
[4.293s] 3: +  _qGoal = vec12ToVec34(_robModel->getQ(_posFeet2BGoal, FrameType::BODY));
[4.293s] 3: +  _qdGoal = vec12ToVec34(_robModel->getQd(_posFeet2B, _velFeet2BGoal, FrameType::BODY));
[4.294s] 3: +}
[4.294s] 3: 
[4.294s] 3: Code style divergence in file 'src/FSM/State_move_base.cpp':
[4.294s] 3: 
[4.294s] 3: --- src/FSM/State_move_base.cpp
[4.294s] 3: +++ src/FSM/State_move_base.cpp.uncrustify
[4.294s] 3: @@ -8,6 +8,7 @@
[4.294s] 3: -State_move_base::State_move_base(CtrlComponents *ctrlComp)
[4.294s] 3: -    :State_Trotting(ctrlComp){
[4.294s] 3: -    _stateName = FSMStateName::MOVE_BASE;
[4.294s] 3: -    _stateNameString = "move_base";
[4.294s] 3: -    initRecv();
[4.294s] 3: -    
[4.294s] 3: +State_move_base::State_move_base(CtrlComponents * ctrlComp)
[4.294s] 3: +: State_Trotting(ctrlComp)
[4.294s] 3: +{
[4.294s] 3: +  _stateName = FSMStateName::MOVE_BASE;
[4.294s] 3: +  _stateNameString = "move_base";
[4.294s] 3: +  initRecv();
[4.294s] 3: +
[4.294s] 3: @@ -16,10 +17,9 @@
[4.294s] 3: -FSMStateName State_move_base::checkChange(){
[4.295s] 3: -    if(_lowState->userCmd == UserCommand::L2_B){
[4.295s] 3: -        return FSMStateName::PASSIVE;
[4.295s] 3: -    }
[4.295s] 3: -    else if(_lowState->userCmd == UserCommand::L2_A){
[4.295s] 3: -        return FSMStateName::FIXEDSTAND;
[4.295s] 3: -    }
[4.295s] 3: -    else{
[4.295s] 3: -        return FSMStateName::MOVE_BASE;
[4.295s] 3: -    }
[4.295s] 3: +FSMStateName State_move_base::checkChange()
[4.295s] 3: +{
[4.295s] 3: +  if (_lowState->userCmd == UserCommand::L2_B) {
[4.295s] 3: +    return FSMStateName::PASSIVE;
[4.295s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {
[4.295s] 3: +    return FSMStateName::FIXEDSTAND;
[4.295s] 3: +  } else {
[4.295s] 3: +    return FSMStateName::MOVE_BASE;
[4.295s] 3: +  }
[4.295s] 3: @@ -28,3 +28,4 @@
[4.295s] 3: -void State_move_base::getUserCmd(){
[4.295s] 3: -    setHighCmd(_vx, _vy, _wz);
[4.295s] 3: -    ros::spinOnce();
[4.296s] 3: +void State_move_base::getUserCmd()
[4.296s] 3: +{
[4.296s] 3: +  setHighCmd(_vx, _vy, _wz);
[4.296s] 3: +  ros::spinOnce();
[4.296s] 3: @@ -33,4 +34,5 @@
[4.296s] 3: -void State_move_base::twistCallback(const geometry_msgs::Twist& msg){
[4.296s] 3: -    _vx = msg.linear.x;
[4.296s] 3: -    _vy = msg.linear.y;
[4.296s] 3: -    _wz = msg.angular.z;
[4.296s] 3: +void State_move_base::twistCallback(const geometry_msgs::Twist & msg)
[4.296s] 3: +{
[4.296s] 3: +  _vx = msg.linear.x;
[4.296s] 3: +  _vy = msg.linear.y;
[4.296s] 3: +  _wz = msg.angular.z;
[4.296s] 3: @@ -39,2 +41,3 @@
[4.296s] 3: -void State_move_base::initRecv(){
[4.296s] 3: -    _cmdSub = _nm.subscribe("/cmd_vel", 1, &State_move_base::twistCallback, this);
[4.296s] 3: +void State_move_base::initRecv()
[4.296s] 3: +{
[4.296s] 3: +  _cmdSub = _nm.subscribe("/cmd_vel", 1, &State_move_base::twistCallback, this);
[4.296s] 3: @@ -49,11 +52,13 @@
[4.296s] 3: -State_move_base::State_move_base(CtrlComponents *ctrlComp)
[4.297s] 3: -    :State_Trotting(ctrlComp){
[4.297s] 3: -    _stateName = FSMStateName::MOVE_BASE;
[4.297s] 3: -    _stateNameString = "move_base";
[4.297s] 3: -    _nm = rclcpp::Node::make_shared("state_mb");
[4.297s] 3: -    auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(
[4.297s] 3: -        rclcpp::ExecutorOptions(), 1
[4.297s] 3: -    );
[4.297s] 3: -    executor->add_node(_nm);
[4.297s] 3: -    executor_thread = std::thread([executor] (){
[4.297s] 3: -        executor->spin();
[4.297s] 3: +State_move_base::State_move_base(CtrlComponents * ctrlComp)
[4.297s] 3: +: State_Trotting(ctrlComp)
[4.297s] 3: +{
[4.297s] 3: +  _stateName = FSMStateName::MOVE_BASE;
[4.297s] 3: +  _stateNameString = "move_base";
[4.297s] 3: +  _nm = rclcpp::Node::make_shared("state_mb");
[4.297s] 3: +  auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(
[4.297s] 3: +    rclcpp::ExecutorOptions(), 1
[4.297s] 3: +  );
[4.297s] 3: +  executor->add_node(_nm);
[4.297s] 3: +  executor_thread = std::thread(
[4.297s] 3: +    [executor]() {
[4.298s] 3: +      executor->spin();
[4.298s] 3: @@ -61,2 +66,2 @@
[4.298s] 3: -    executor_thread.detach();
[4.298s] 3: -    initRecv();
[4.298s] 3: +  executor_thread.detach();
[4.298s] 3: +  initRecv();
[4.298s] 3: @@ -65,10 +70,9 @@
[4.298s] 3: -FSMStateName State_move_base::checkChange(){
[4.298s] 3: -    if(_lowState->userCmd == UserCommand::L2_B){
[4.298s] 3: -        return FSMStateName::PASSIVE;
[4.298s] 3: -    }
[4.298s] 3: -    else if(_lowState->userCmd == UserCommand::L2_A){
[4.298s] 3: -        return FSMStateName::FIXEDSTAND;
[4.298s] 3: -    }
[4.298s] 3: -    else{
[4.298s] 3: -        return FSMStateName::MOVE_BASE;
[4.298s] 3: -    }
[4.298s] 3: +FSMStateName State_move_base::checkChange()
[4.298s] 3: +{
[4.298s] 3: +  if (_lowState->userCmd == UserCommand::L2_B) {
[4.298s] 3: +    return FSMStateName::PASSIVE;
[4.298s] 3: +  } else if (_lowState->userCmd == UserCommand::L2_A) {
[4.299s] 3: +    return FSMStateName::FIXEDSTAND;
[4.299s] 3: +  } else {
[4.299s] 3: +    return FSMStateName::MOVE_BASE;
[4.299s] 3: +  }
[4.299s] 3: @@ -77,2 +81,3 @@
[4.299s] 3: -void State_move_base::getUserCmd(){
[4.299s] 3: -    setHighCmd(_vx, _vy, _wz);
[4.299s] 3: +void State_move_base::getUserCmd()
[4.299s] 3: +{
[4.299s] 3: +  setHighCmd(_vx, _vy, _wz);
[4.299s] 3: @@ -81,4 +86,5 @@
[4.299s] 3: -void State_move_base::twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg){
[4.299s] 3: -    _vx = msg->linear.x;
[4.299s] 3: -    _vy = msg->linear.y;
[4.299s] 3: -    _wz = msg->angular.z;
[4.299s] 3: +void State_move_base::twistCallback(const geometry_msgs::msg::Twist::SharedPtr msg)
[4.299s] 3: +{
[4.299s] 3: +  _vx = msg->linear.x;
[4.299s] 3: +  _vy = msg->linear.y;
[4.299s] 3: +  _wz = msg->angular.z;
[4.299s] 3: @@ -87,3 +93,7 @@
[4.300s] 3: -void State_move_base::initRecv(){
[4.300s] 3: -    std::cout << "Initialized cmd vel sub" << std::endl;
[4.300s] 3: -    _cmdSub = _nm->create_subscription<geometry_msgs::msg::Twist>("/cmd_vel", 1, std::bind(&State_move_base::twistCallback, this, std::placeholders::_1));
[4.300s] 3: +void State_move_base::initRecv()
[4.300s] 3: +{
[4.300s] 3: +  std::cout << "Initialized cmd vel sub" << std::endl;
[4.300s] 3: +  _cmdSub =
[4.300s] 3: +    _nm->create_subscription<geometry_msgs::msg::Twist>(
[4.300s] 3: +    "/cmd_vel", 1,
[4.300s] 3: +    std::bind(&State_move_base::twistCallback, this, std::placeholders::_1));
[4.300s] 3: @@ -92 +102 @@
[4.300s] 3: -#endif  // COMPILE_WITH_ROS2_MB
[4.300s] 3: +#endif  // COMPILE_WITH_ROS2_MB
[4.300s] 3: 
[4.300s] 3: Code style divergence in file 'src/Gait/FeetEndCal.cpp':
[4.300s] 3: 
[4.300s] 3: --- src/Gait/FeetEndCal.cpp
[4.304s] 3: +++ src/Gait/FeetEndCal.cpp.uncrustify
[4.304s] 3: @@ -6,5 +6,6 @@
[4.304s] 3: -FeetEndCal::FeetEndCal(CtrlComponents *ctrlComp)
[4.304s] 3: -           : _est(ctrlComp->estimator), _lowState(ctrlComp->lowState),
[4.305s] 3: -             _robModel(ctrlComp->robotModel){
[4.305s] 3: -    _Tstance  = ctrlComp->waveGen->getTstance();
[4.305s] 3: -    _Tswing   = ctrlComp->waveGen->getTswing();
[4.305s] 3: +FeetEndCal::FeetEndCal(CtrlComponents * ctrlComp)
[4.305s] 3: +: _est(ctrlComp->estimator), _lowState(ctrlComp->lowState),
[4.305s] 3: +  _robModel(ctrlComp->robotModel)
[4.305s] 3: +{
[4.305s] 3: +  _Tstance = ctrlComp->waveGen->getTstance();
[4.305s] 3: +  _Tswing = ctrlComp->waveGen->getTswing();
[4.305s] 3: @@ -12,3 +13,3 @@
[4.305s] 3: -    _kx = 0.005;
[4.305s] 3: -    _ky = 0.005;
[4.305s] 3: -    _kyaw = 0.005;
[4.305s] 3: +  _kx = 0.005;
[4.305s] 3: +  _ky = 0.005;
[4.305s] 3: +  _kyaw = 0.005;
[4.305s] 3: @@ -16,5 +17,5 @@
[4.305s] 3: -    Vec34 feetPosBody = _robModel->getFeetPosIdeal();
[4.305s] 3: -    for(int i(0); i<4; ++i){
[4.305s] 3: -        _feetRadius(i)    = sqrt( pow(feetPosBody(0, i), 2) + pow(feetPosBody(1, i), 2) );
[4.305s] 3: -        _feetInitAngle(i) = atan2(feetPosBody(1, i), feetPosBody(0, i));
[4.306s] 3: -    }
[4.306s] 3: +  Vec34 feetPosBody = _robModel->getFeetPosIdeal();
[4.306s] 3: +  for (int i(0); i < 4; ++i) {
[4.306s] 3: +    _feetRadius(i) = sqrt(pow(feetPosBody(0, i), 2) + pow(feetPosBody(1, i), 2) );
[4.306s] 3: +    _feetInitAngle(i) = atan2(feetPosBody(1, i), feetPosBody(0, i));
[4.306s] 3: +  }
[4.306s] 3: @@ -23 +24,2 @@
[4.306s] 3: -FeetEndCal::~FeetEndCal(){
[4.306s] 3: +FeetEndCal::~FeetEndCal()
[4.306s] 3: +{
[4.306s] 3: @@ -27,3 +29,4 @@
[4.306s] 3: -Vec3 FeetEndCal::calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase){
[4.306s] 3: -    _bodyVelGlobal = _est->getVelocity();
[4.306s] 3: -    _bodyWGlobal = _lowState->getGyroGlobal();
[4.306s] 3: +Vec3 FeetEndCal::calFootPos(int legID, Vec2 vxyGoalGlobal, float dYawGoal, float phase)
[4.306s] 3: +{
[4.306s] 3: +  _bodyVelGlobal = _est->getVelocity();
[4.306s] 3: +  _bodyWGlobal = _lowState->getGyroGlobal();
[4.306s] 3: @@ -31,3 +34,5 @@
[4.307s] 3: -    _nextStep(0) = _bodyVelGlobal(0)*(1-phase)*_Tswing + _bodyVelGlobal(0)*_Tstance/2 + _kx*(_bodyVelGlobal(0) - vxyGoalGlobal(0));
[4.307s] 3: -    _nextStep(1) = _bodyVelGlobal(1)*(1-phase)*_Tswing + _bodyVelGlobal(1)*_Tstance/2 + _ky*(_bodyVelGlobal(1) - vxyGoalGlobal(1));
[4.307s] 3: -    _nextStep(2) = 0;
[4.307s] 3: +  _nextStep(0) = _bodyVelGlobal(0) * (1 - phase) * _Tswing + _bodyVelGlobal(0) * _Tstance / 2 +
[4.307s] 3: +    _kx * (_bodyVelGlobal(0) - vxyGoalGlobal(0));
[4.307s] 3: +  _nextStep(1) = _bodyVelGlobal(1) * (1 - phase) * _Tswing + _bodyVelGlobal(1) * _Tstance / 2 +
[4.307s] 3: +    _ky * (_bodyVelGlobal(1) - vxyGoalGlobal(1));
[4.307s] 3: +  _nextStep(2) = 0;
[4.307s] 3: @@ -35,3 +40,3 @@
[4.307s] 3: -    _yaw = _lowState->getYaw();
[4.307s] 3: -    _dYaw = _lowState->getDYaw();
[4.307s] 3: -    _nextYaw = _dYaw*(1-phase)*_Tswing + _dYaw*_Tstance/2 + _kyaw*(dYawGoal - _dYaw);
[4.307s] 3: +  _yaw = _lowState->getYaw();
[4.307s] 3: +  _dYaw = _lowState->getDYaw();
[4.307s] 3: +  _nextYaw = _dYaw * (1 - phase) * _Tswing + _dYaw * _Tstance / 2 + _kyaw * (dYawGoal - _dYaw);
[4.307s] 3: @@ -39,2 +44,2 @@
[4.307s] 3: -    _nextStep(0) += _feetRadius(legID) * cos(_yaw + _feetInitAngle(legID) + _nextYaw);
[4.307s] 3: -    _nextStep(1) += _feetRadius(legID) * sin(_yaw + _feetInitAngle(legID) + _nextYaw);
[4.307s] 3: +  _nextStep(0) += _feetRadius(legID) * cos(_yaw + _feetInitAngle(legID) + _nextYaw);
[4.307s] 3: +  _nextStep(1) += _feetRadius(legID) * sin(_yaw + _feetInitAngle(legID) + _nextYaw);
[4.307s] 3: @@ -42,2 +47,2 @@
[4.307s] 3: -    _footPos = _est->getPosition() + _nextStep;
[4.308s] 3: -    _footPos(2) = 0.0;
[4.308s] 3: +  _footPos = _est->getPosition() + _nextStep;
[4.308s] 3: +  _footPos(2) = 0.0;
[4.308s] 3: @@ -45,2 +50,2 @@
[4.308s] 3: -    return _footPos;
[4.308s] 3: -}
[4.308s] 3: +  return _footPos;
[4.308s] 3: +}
[4.308s] 3: 
[4.308s] 3: Code style divergence in file 'src/Gait/GaitGenerator.cpp':
[4.308s] 3: 
[4.308s] 3: --- src/Gait/GaitGenerator.cpp
[4.308s] 3: +++ src/Gait/GaitGenerator.cpp.uncrustify
[4.308s] 3: @@ -6,6 +6,7 @@
[4.308s] 3: -GaitGenerator::GaitGenerator(CtrlComponents *ctrlComp)
[4.308s] 3: -              : _waveG(ctrlComp->waveGen), _est(ctrlComp->estimator), 
[4.308s] 3: -                _phase(ctrlComp->phase), _contact(ctrlComp->contact), 
[4.308s] 3: -                _robModel(ctrlComp->robotModel), _state(ctrlComp->lowState){
[4.308s] 3: -    _feetCal = new FeetEndCal(ctrlComp);
[4.308s] 3: -    _firstRun = true;
[4.309s] 3: +GaitGenerator::GaitGenerator(CtrlComponents * ctrlComp)
[4.309s] 3: +: _waveG(ctrlComp->waveGen), _est(ctrlComp->estimator),
[4.309s] 3: +  _phase(ctrlComp->phase), _contact(ctrlComp->contact),
[4.309s] 3: +  _robModel(ctrlComp->robotModel), _state(ctrlComp->lowState)
[4.309s] 3: +{
[4.309s] 3: +  _feetCal = new FeetEndCal(ctrlComp);
[4.309s] 3: +  _firstRun = true;
[4.309s] 3: @@ -14 +15,2 @@
[4.309s] 3: -GaitGenerator::~GaitGenerator(){
[4.309s] 3: +GaitGenerator::~GaitGenerator()
[4.309s] 3: +{
[4.309s] 3: @@ -17,4 +19,5 @@
[4.309s] 3: -void GaitGenerator::setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight){
[4.309s] 3: -    _vxyGoal = vxyGoalGlobal;
[4.309s] 3: -    _dYawGoal = dYawGoal;
[4.309s] 3: -    _gaitHeight = gaitHeight;
[4.309s] 3: +void GaitGenerator::setGait(Vec2 vxyGoalGlobal, float dYawGoal, float gaitHeight)
[4.309s] 3: +{
[4.309s] 3: +  _vxyGoal = vxyGoalGlobal;
[4.309s] 3: +  _dYawGoal = dYawGoal;
[4.309s] 3: +  _gaitHeight = gaitHeight;
[4.310s] 3: @@ -23,3 +26,4 @@
[4.310s] 3: -void GaitGenerator::restart(){
[4.310s] 3: -    _firstRun = true;
[4.310s] 3: -    _vxyGoal.setZero();
[4.310s] 3: +void GaitGenerator::restart()
[4.310s] 3: +{
[4.310s] 3: +  _firstRun = true;
[4.310s] 3: +  _vxyGoal.setZero();
[4.310s] 3: @@ -28,4 +32,19 @@
[4.310s] 3: -void GaitGenerator::run(Vec34 &feetPos, Vec34 &feetVel){
[4.310s] 3: -    if(_firstRun){
[4.310s] 3: -        _startP = _est->getFeetPos();
[4.310s] 3: -        _firstRun = false;
[4.310s] 3: +void GaitGenerator::run(Vec34 & feetPos, Vec34 & feetVel)
[4.310s] 3: +{
[4.310s] 3: +  if (_firstRun) {
[4.311s] 3: +    _startP = _est->getFeetPos();
[4.311s] 3: +    _firstRun = false;
[4.311s] 3: +  }
[4.311s] 3: +
[4.311s] 3: +  for (int i(0); i < 4; ++i) {
[4.311s] 3: +    if ((*_contact)(i) == 1) {
[4.311s] 3: +      if ((*_phase)(i) < 0.5) {
[4.311s] 3: +        _startP.col(i) = _est->getFootPos(i);
[4.311s] 3: +      }
[4.311s] 3: +      feetPos.col(i) = _startP.col(i);
[4.311s] 3: +      feetVel.col(i).setZero();
[4.311s] 3: +    } else {
[4.311s] 3: +      _endP.col(i) = _feetCal->calFootPos(i, _vxyGoal, _dYawGoal, (*_phase)(i));
[4.311s] 3: +
[4.311s] 3: +      feetPos.col(i) = getFootPos(i);
[4.311s] 3: +      feetVel.col(i) = getFootVel(i);
[4.312s] 3: @@ -33,18 +52,3 @@
[4.312s] 3: -
[4.312s] 3: -    for(int i(0); i<4; ++i){
[4.312s] 3: -        if((*_contact)(i) == 1){
[4.312s] 3: -            if((*_phase)(i) < 0.5){
[4.312s] 3: -                _startP.col(i) = _est->getFootPos(i);
[4.312s] 3: -            }
[4.312s] 3: -            feetPos.col(i) = _startP.col(i);
[4.312s] 3: -            feetVel.col(i).setZero();
[4.312s] 3: -        }
[4.312s] 3: -        else{
[4.312s] 3: -            _endP.col(i) = _feetCal->calFootPos(i, _vxyGoal, _dYawGoal, (*_phase)(i));
[4.312s] 3: -
[4.312s] 3: -            feetPos.col(i) = getFootPos(i);
[4.312s] 3: -            feetVel.col(i) = getFootVel(i);
[4.312s] 3: -        }
[4.312s] 3: -    }
[4.312s] 3: -    _pastP = feetPos;
[4.312s] 3: -    _phasePast = *_phase;
[4.312s] 3: +  }
[4.312s] 3: +  _pastP = feetPos;
[4.313s] 3: +  _phasePast = *_phase;
[4.313s] 3: @@ -53,2 +57,3 @@
[4.313s] 3: -Vec3 GaitGenerator::getFootPos(int i){
[4.313s] 3: -    Vec3 footPos;
[4.313s] 3: +Vec3 GaitGenerator::getFootPos(int i)
[4.313s] 3: +{
[4.313s] 3: +  Vec3 footPos;
[4.313s] 3: @@ -56,5 +61,5 @@
[4.313s] 3: -    footPos(0) = cycloidXYPosition(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));
[4.313s] 3: -    footPos(1) = cycloidXYPosition(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));
[4.313s] 3: -    footPos(2) =  cycloidZPosition(_startP.col(i)(2), _gaitHeight, (*_phase)(i));
[4.313s] 3: -    
[4.313s] 3: -    return footPos;
[4.313s] 3: +  footPos(0) = cycloidXYPosition(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));
[4.313s] 3: +  footPos(1) = cycloidXYPosition(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));
[4.313s] 3: +  footPos(2) = cycloidZPosition(_startP.col(i)(2), _gaitHeight, (*_phase)(i));
[4.314s] 3: +
[4.314s] 3: +  return footPos;
[4.314s] 3: @@ -63,2 +68,3 @@
[4.314s] 3: -Vec3 GaitGenerator::getFootVel(int i){
[4.314s] 3: -    Vec3 footVel;
[4.314s] 3: +Vec3 GaitGenerator::getFootVel(int i)
[4.314s] 3: +{
[4.314s] 3: +  Vec3 footVel;
[4.314s] 3: @@ -66,3 +72,3 @@
[4.314s] 3: -    footVel(0) = cycloidXYVelocity(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));
[4.314s] 3: -    footVel(1) = cycloidXYVelocity(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));
[4.314s] 3: -    footVel(2) =  cycloidZVelocity(_gaitHeight, (*_phase)(i));
[4.314s] 3: +  footVel(0) = cycloidXYVelocity(_startP.col(i)(0), _endP.col(i)(0), (*_phase)(i));
[4.314s] 3: +  footVel(1) = cycloidXYVelocity(_startP.col(i)(1), _endP.col(i)(1), (*_phase)(i));
[4.314s] 3: +  footVel(2) = cycloidZVelocity(_gaitHeight, (*_phase)(i));
[4.314s] 3: @@ -70 +76 @@
[4.314s] 3: -    return footVel;
[4.314s] 3: +  return footVel;
[4.314s] 3: @@ -73,3 +79,4 @@
[4.314s] 3: -float GaitGenerator::cycloidXYPosition(float start, float end, float phase){
[4.314s] 3: -    float phasePI = 2 * M_PI * phase;
[4.315s] 3: -    return (end - start)*(phasePI - sin(phasePI))/(2*M_PI) + start;
[4.315s] 3: +float GaitGenerator::cycloidXYPosition(float start, float end, float phase)
[4.315s] 3: +{
[4.315s] 3: +  float phasePI = 2 * M_PI * phase;
[4.315s] 3: +  return (end - start) * (phasePI - sin(phasePI)) / (2 * M_PI) + start;
[4.315s] 3: @@ -78,3 +85,4 @@
[4.315s] 3: -float GaitGenerator::cycloidXYVelocity(float start, float end, float phase){
[4.315s] 3: -    float phasePI = 2 * M_PI * phase;
[4.315s] 3: -    return (end - start)*(1 - cos(phasePI)) / _waveG->getTswing();
[4.315s] 3: +float GaitGenerator::cycloidXYVelocity(float start, float end, float phase)
[4.315s] 3: +{
[4.315s] 3: +  float phasePI = 2 * M_PI * phase;
[4.315s] 3: +  return (end - start) * (1 - cos(phasePI)) / _waveG->getTswing();
[4.315s] 3: @@ -83,3 +91,4 @@
[4.315s] 3: -float GaitGenerator::cycloidZPosition(float start, float h, float phase){
[4.315s] 3: -    float phasePI = 2 * M_PI * phase;
[4.315s] 3: -    return h*(1 - cos(phasePI))/2 + start;
[4.315s] 3: +float GaitGenerator::cycloidZPosition(float start, float h, float phase)
[4.315s] 3: +{
[4.315s] 3: +  float phasePI = 2 * M_PI * phase;
[4.315s] 3: +  return h * (1 - cos(phasePI)) / 2 + start;
[4.316s] 3: @@ -88,4 +97,5 @@
[4.316s] 3: -float GaitGenerator::cycloidZVelocity(float h, float phase){
[4.316s] 3: -    float phasePI = 2 * M_PI * phase;
[4.316s] 3: -    return h*M_PI * sin(phasePI) / _waveG->getTswing();
[4.316s] 3: -}
[4.316s] 3: +float GaitGenerator::cycloidZVelocity(float h, float phase)
[4.316s] 3: +{
[4.316s] 3: +  float phasePI = 2 * M_PI * phase;
[4.316s] 3: +  return h * M_PI * sin(phasePI) / _waveG->getTswing();
[4.316s] 3: +}
[4.316s] 3: 
[4.316s] 3: Code style divergence in file 'src/Gait/WaveGenerator.cpp':
[4.316s] 3: 
[4.316s] 3: --- src/Gait/WaveGenerator.cpp
[4.316s] 3: +++ src/Gait/WaveGenerator.cpp.uncrustify
[4.316s] 3: @@ -10 +10 @@
[4.316s] 3: -    : _period(period), _stRatio(stancePhaseRatio), _bias(bias)
[4.316s] 3: +: _period(period), _stRatio(stancePhaseRatio), _bias(bias)
[4.316s] 3: @@ -13,4 +13,9 @@
[4.317s] 3: -    if ((_stRatio >= 1) || (_stRatio <= 0))
[4.317s] 3: -    {
[4.317s] 3: -        std::cout << "[ERROR] The stancePhaseRatio of WaveGenerator should between (0, 1)" << std::endl;
[4.317s] 3: -        exit(-1);
[4.317s] 3: +  if ((_stRatio >= 1) || (_stRatio <= 0)) {
[4.317s] 3: +    std::cout << "[ERROR] The stancePhaseRatio of WaveGenerator should between (0, 1)" << std::endl;
[4.317s] 3: +    exit(-1);
[4.317s] 3: +  }
[4.317s] 3: +
[4.317s] 3: +  for (int i(0); i < bias.rows(); ++i) {
[4.317s] 3: +    if ((bias(i) > 1) || (bias(i) < 0)) {
[4.317s] 3: +      std::cout << "[ERROR] The bias of WaveGenerator should between [0, 1]" << std::endl;
[4.317s] 3: +      exit(-1);
[4.317s] 3: @@ -17,0 +23 @@
[4.317s] 3: +  }
[4.317s] 3: @@ -19,13 +25,4 @@
[4.317s] 3: -    for (int i(0); i < bias.rows(); ++i)
[4.317s] 3: -    {
[4.317s] 3: -        if ((bias(i) > 1) || (bias(i) < 0))
[4.317s] 3: -        {
[4.317s] 3: -            std::cout << "[ERROR] The bias of WaveGenerator should between [0, 1]" << std::endl;
[4.317s] 3: -            exit(-1);
[4.318s] 3: -        }
[4.318s] 3: -    }
[4.318s] 3: -
[4.318s] 3: -    _startT = getSystemTime();
[4.318s] 3: -    _contactPast.setZero();
[4.318s] 3: -    _phasePast << 0.5, 0.5, 0.5, 0.5;
[4.318s] 3: -    _statusPast = WaveStatus::SWING_ALL;
[4.318s] 3: +  _startT = getSystemTime();
[4.318s] 3: +  _contactPast.setZero();
[4.318s] 3: +  _phasePast << 0.5, 0.5, 0.5, 0.5;
[4.318s] 3: +  _statusPast = WaveStatus::SWING_ALL;
[4.318s] 3: @@ -38 +35 @@
[4.318s] 3: -void WaveGenerator::calcContactPhase(Vec4 &phaseResult, VecInt4 &contactResult, WaveStatus status)
[4.318s] 3: +void WaveGenerator::calcContactPhase(Vec4 & phaseResult, VecInt4 & contactResult, WaveStatus status)
[4.318s] 3: @@ -41 +38 @@
[4.318s] 3: -    calcWave(_phase, _contact, status);
[4.318s] 3: +  calcWave(_phase, _contact, status);
[4.318s] 3: @@ -43,16 +40,3 @@
[4.318s] 3: -    if (status != _statusPast)
[4.318s] 3: -    {
[4.319s] 3: -        if (_switchStatus.sum() == 0)
[4.319s] 3: -        {
[4.319s] 3: -            _switchStatus.setOnes();
[4.319s] 3: -        }
[4.319s] 3: -        calcWave(_phasePast, _contactPast, _statusPast);
[4.319s] 3: -        // two special case
[4.319s] 3: -        if ((status == WaveStatus::STANCE_ALL) && (_statusPast == WaveStatus::SWING_ALL))
[4.319s] 3: -        {
[4.319s] 3: -            _contactPast.setOnes();
[4.319s] 3: -        }
[4.319s] 3: -        else if ((status == WaveStatus::SWING_ALL) && (_statusPast == WaveStatus::STANCE_ALL))
[4.319s] 3: -        {
[4.319s] 3: -            _contactPast.setZero();
[4.319s] 3: -        }
[4.319s] 3: +  if (status != _statusPast) {
[4.319s] 3: +    if (_switchStatus.sum() == 0) {
[4.319s] 3: +      _switchStatus.setOnes();
[4.319s] 3: @@ -59,0 +44,8 @@
[4.319s] 3: +    calcWave(_phasePast, _contactPast, _statusPast);
[4.320s] 3: +    // two special case
[4.320s] 3: +    if ((status == WaveStatus::STANCE_ALL) && (_statusPast == WaveStatus::SWING_ALL)) {
[4.320s] 3: +      _contactPast.setOnes();
[4.320s] 3: +    } else if ((status == WaveStatus::SWING_ALL) && (_statusPast == WaveStatus::STANCE_ALL)) {
[4.320s] 3: +      _contactPast.setZero();
[4.320s] 3: +    }
[4.320s] 3: +  }
[4.320s] 3: @@ -61,18 +53,8 @@
[4.320s] 3: -    if (_switchStatus.sum() != 0)
[4.320s] 3: -    {
[4.320s] 3: -        for (int i(0); i < 4; ++i)
[4.320s] 3: -        {
[4.320s] 3: -            if (_contact(i) == _contactPast(i))
[4.320s] 3: -            {
[4.320s] 3: -                _switchStatus(i) = 0;
[4.320s] 3: -            }
[4.320s] 3: -            else
[4.320s] 3: -            {
[4.320s] 3: -                _contact(i) = _contactPast(i);
[4.321s] 3: -                _phase(i) = _phasePast(i);
[4.321s] 3: -            }
[4.321s] 3: -        }
[4.321s] 3: -        if (_switchStatus.sum() == 0)
[4.321s] 3: -        {
[4.321s] 3: -            _statusPast = status;
[4.321s] 3: -        }
[4.321s] 3: +  if (_switchStatus.sum() != 0) {
[4.321s] 3: +    for (int i(0); i < 4; ++i) {
[4.321s] 3: +      if (_contact(i) == _contactPast(i)) {
[4.321s] 3: +        _switchStatus(i) = 0;
[4.321s] 3: +      } else {
[4.321s] 3: +        _contact(i) = _contactPast(i);
[4.321s] 3: +        _phase(i) = _phasePast(i);
[4.321s] 3: +      }
[4.322s] 3: @@ -79,0 +62,4 @@
[4.322s] 3: +    if (_switchStatus.sum() == 0) {
[4.322s] 3: +      _statusPast = status;
[4.322s] 3: +    }
[4.322s] 3: +  }
[4.322s] 3: @@ -81,2 +67,2 @@
[4.322s] 3: -    phaseResult = _phase;
[4.322s] 3: -    contactResult = _contact;
[4.322s] 3: +  phaseResult = _phase;
[4.322s] 3: +  contactResult = _contact;
[4.322s] 3: @@ -87 +73 @@
[4.322s] 3: -    return _period * _stRatio;
[4.322s] 3: +  return _period * _stRatio;
[4.322s] 3: @@ -92 +78 @@
[4.322s] 3: -    return _period * (1 - _stRatio);
[4.322s] 3: +  return _period * (1 - _stRatio);
[4.322s] 3: @@ -97 +83 @@
[4.322s] 3: -    return _period;
[4.322s] 3: +  return _period;
[4.322s] 3: @@ -100 +86 @@
[4.322s] 3: -void WaveGenerator::calcWave(Vec4 &phase, VecInt4 &contact, WaveStatus status)
[4.323s] 3: +void WaveGenerator::calcWave(Vec4 & phase, VecInt4 & contact, WaveStatus status)
[4.323s] 3: @@ -102,17 +88,11 @@
[4.323s] 3: -    if (status == WaveStatus::WAVE_ALL)
[4.323s] 3: -    {
[4.323s] 3: -        _passT = (double)(getSystemTime() - _startT) * 1e-6;
[4.323s] 3: -        for (int i(0); i < 4; ++i)
[4.323s] 3: -        {
[4.323s] 3: -            _normalT(i) = fmod(_passT + _period - _period * _bias(i), _period) / _period;
[4.323s] 3: -            if (_normalT(i) < _stRatio)
[4.323s] 3: -            {
[4.323s] 3: -                contact(i) = 1;
[4.323s] 3: -                phase(i) = _normalT(i) / _stRatio;
[4.323s] 3: -            }
[4.323s] 3: -            else
[4.323s] 3: -            {
[4.323s] 3: -                contact(i) = 0;
[4.323s] 3: -                phase(i) = (_normalT(i) - _stRatio) / (1 - _stRatio);
[4.323s] 3: -            }
[4.323s] 3: -        }
[4.323s] 3: +  if (status == WaveStatus::WAVE_ALL) {
[4.324s] 3: +    _passT = (double)(getSystemTime() - _startT) * 1e-6;
[4.324s] 3: +    for (int i(0); i < 4; ++i) {
[4.324s] 3: +      _normalT(i) = fmod(_passT + _period - _period * _bias(i), _period) / _period;
[4.324s] 3: +      if (_normalT(i) < _stRatio) {
[4.324s] 3: +        contact(i) = 1;
[4.324s] 3: +        phase(i) = _normalT(i) / _stRatio;
[4.324s] 3: +      } else {
[4.324s] 3: +        contact(i) = 0;
[4.324s] 3: +        phase(i) = (_normalT(i) - _stRatio) / (1 - _stRatio);
[4.324s] 3: +      }
[4.324s] 3: @@ -120,11 +100,8 @@
[4.324s] 3: -    else if (status == WaveStatus::SWING_ALL)
[4.324s] 3: -    {
[4.324s] 3: -        contact.setZero();
[4.324s] 3: -        phase << 0.5, 0.5, 0.5, 0.5;
[4.324s] 3: -    }
[4.324s] 3: -    else if (status == WaveStatus::STANCE_ALL)
[4.324s] 3: -    {
[4.324s] 3: -        contact.setOnes();
[4.325s] 3: -        phase << 0.5, 0.5, 0.5, 0.5;
[4.325s] 3: -    }
[4.325s] 3: -}
[4.325s] 3: +  } else if (status == WaveStatus::SWING_ALL) {
[4.325s] 3: +    contact.setZero();
[4.325s] 3: +    phase << 0.5, 0.5, 0.5, 0.5;
[4.325s] 3: +  } else if (status == WaveStatus::STANCE_ALL) {
[4.325s] 3: +    contact.setOnes();
[4.325s] 3: +    phase << 0.5, 0.5, 0.5, 0.5;
[4.325s] 3: +  }
[4.325s] 3: +}
[4.325s] 3: 
[4.325s] 3: Code style divergence in file 'src/common/LowPassFilter.cpp':
[4.325s] 3: 
[4.325s] 3: --- src/common/LowPassFilter.cpp
[4.325s] 3: +++ src/common/LowPassFilter.cpp.uncrustify
[4.325s] 3: @@ -7,3 +7,4 @@
[4.325s] 3: -LPFilter::LPFilter(double samplePeriod, double cutFrequency){
[4.325s] 3: -    _weight = 1.0 / ( 1.0 + 1.0/(2.0*M_PI * samplePeriod * cutFrequency) );
[4.325s] 3: -    _start  = false;
[4.325s] 3: +LPFilter::LPFilter(double samplePeriod, double cutFrequency)
[4.325s] 3: +{
[4.325s] 3: +  _weight = 1.0 / ( 1.0 + 1.0 / (2.0 * M_PI * samplePeriod * cutFrequency) );
[4.326s] 3: +  _start = false;
[4.326s] 3: @@ -12,6 +13,7 @@
[4.326s] 3: -void LPFilter::addValue(double newValue){
[4.326s] 3: -    if(!_start){
[4.326s] 3: -        _start = true;
[4.326s] 3: -        _pastValue = newValue;
[4.326s] 3: -    }
[4.326s] 3: -    _pastValue = _weight*newValue + (1-_weight)*_pastValue;
[4.326s] 3: +void LPFilter::addValue(double newValue)
[4.326s] 3: +{
[4.326s] 3: +  if (!_start) {
[4.326s] 3: +    _start = true;
[4.326s] 3: +    _pastValue = newValue;
[4.326s] 3: +  }
[4.326s] 3: +  _pastValue = _weight * newValue + (1 - _weight) * _pastValue;
[4.326s] 3: @@ -20,2 +22,3 @@
[4.326s] 3: -double LPFilter::getValue(){
[4.326s] 3: -    return _pastValue;
[4.326s] 3: +double LPFilter::getValue()
[4.326s] 3: +{
[4.326s] 3: +  return _pastValue;
[4.326s] 3: @@ -24,3 +27,4 @@
[4.327s] 3: -void LPFilter::clear(){
[4.327s] 3: -    _start = false;
[4.327s] 3: -}
[4.327s] 3: +void LPFilter::clear()
[4.327s] 3: +{
[4.327s] 3: +  _start = false;
[4.327s] 3: +}
[4.327s] 3: 
[4.327s] 3: Code style divergence in file 'src/common/unitreeLeg.cpp':
[4.327s] 3: 
[4.327s] 3: --- src/common/unitreeLeg.cpp
[4.327s] 3: +++ src/common/unitreeLeg.cpp.uncrustify
[4.327s] 3: @@ -11,14 +11,16 @@
[4.327s] 3: -QuadrupedLeg::QuadrupedLeg(int legID, float abadLinkLength, float hipLinkLength, 
[4.327s] 3: -                           float kneeLinkLength, Vec3 pHip2B)
[4.327s] 3: -            :_abadLinkLength(abadLinkLength), 
[4.327s] 3: -             _hipLinkLength(hipLinkLength), 
[4.327s] 3: -             _kneeLinkLength(kneeLinkLength), 
[4.327s] 3: -             _pHip2B(pHip2B){
[4.327s] 3: -    if (legID == 0 || legID == 2)
[4.327s] 3: -        _sideSign = -1;
[4.327s] 3: -    else if (legID == 1 || legID == 3)
[4.327s] 3: -        _sideSign = 1;
[4.328s] 3: -    else{
[4.328s] 3: -        std::cout << "Leg ID incorrect!" << std::endl;
[4.328s] 3: -        exit(-1);
[4.328s] 3: -    }
[4.328s] 3: +QuadrupedLeg::QuadrupedLeg(
[4.328s] 3: +  int legID, float abadLinkLength, float hipLinkLength,
[4.328s] 3: +  float kneeLinkLength, Vec3 pHip2B)
[4.328s] 3: +: _abadLinkLength(abadLinkLength),
[4.328s] 3: +  _hipLinkLength(hipLinkLength),
[4.328s] 3: +  _kneeLinkLength(kneeLinkLength),
[4.328s] 3: +  _pHip2B(pHip2B)
[4.328s] 3: +{
[4.328s] 3: +  if (legID == 0 || legID == 2) {
[4.328s] 3: +    _sideSign = -1;
[4.328s] 3: +  } else if (legID == 1 || legID == 3) {
[4.328s] 3: +    _sideSign = 1;
[4.328s] 3: +  } else {
[4.328s] 3: +    std::cout << "Leg ID incorrect!" << std::endl;
[4.328s] 3: +    exit(-1);
[4.328s] 3: +  }
[4.328s] 3: @@ -28,4 +30,5 @@
[4.329s] 3: -Vec3 QuadrupedLeg::calcPEe2H(Vec3 q){
[4.329s] 3: -    float l1 = _sideSign * _abadLinkLength;
[4.329s] 3: -    float l2 = -_hipLinkLength;
[4.329s] 3: -    float l3 = -_kneeLinkLength;
[4.329s] 3: +Vec3 QuadrupedLeg::calcPEe2H(Vec3 q)
[4.329s] 3: +{
[4.329s] 3: +  float l1 = _sideSign * _abadLinkLength;
[4.329s] 3: +  float l2 = -_hipLinkLength;
[4.329s] 3: +  float l3 = -_kneeLinkLength;
[4.329s] 3: @@ -33,3 +36,3 @@
[4.329s] 3: -    float s1 = std::sin(q(0));
[4.329s] 3: -    float s2 = std::sin(q(1));
[4.329s] 3: -    float s3 = std::sin(q(2));
[4.329s] 3: +  float s1 = std::sin(q(0));
[4.329s] 3: +  float s2 = std::sin(q(1));
[4.329s] 3: +  float s3 = std::sin(q(2));
[4.329s] 3: @@ -37,3 +40,3 @@
[4.329s] 3: -    float c1 = std::cos(q(0));
[4.329s] 3: -    float c2 = std::cos(q(1));
[4.329s] 3: -    float c3 = std::cos(q(2));
[4.329s] 3: +  float c1 = std::cos(q(0));
[4.329s] 3: +  float c2 = std::cos(q(1));
[4.330s] 3: +  float c3 = std::cos(q(2));
[4.330s] 3: @@ -41,2 +44,2 @@
[4.330s] 3: -    float c23 = c2 * c3 - s2 * s3;
[4.330s] 3: -    float s23 = s2 * c3 + c2 * s3;
[4.330s] 3: +  float c23 = c2 * c3 - s2 * s3;
[4.330s] 3: +  float s23 = s2 * c3 + c2 * s3;
[4.330s] 3: @@ -44 +47 @@
[4.330s] 3: -    Vec3 pEe2H;
[4.330s] 3: +  Vec3 pEe2H;
[4.330s] 3: @@ -46,3 +49,3 @@
[4.330s] 3: -    pEe2H(0) = l3 * s23 + l2 * s2;
[4.330s] 3: -    pEe2H(1) = -l3 * s1 * c23 + l1 * c1 - l2 * c2 * s1;
[4.330s] 3: -    pEe2H(2) =  l3 * c1 * c23 + l1 * s1 + l2 * c1 * c2;
[4.330s] 3: +  pEe2H(0) = l3 * s23 + l2 * s2;
[4.330s] 3: +  pEe2H(1) = -l3 * s1 * c23 + l1 * c1 - l2 * c2 * s1;
[4.330s] 3: +  pEe2H(2) = l3 * c1 * c23 + l1 * s1 + l2 * c1 * c2;
[4.330s] 3: @@ -50 +53 @@
[4.330s] 3: -    return pEe2H;
[4.330s] 3: +  return pEe2H;
[4.330s] 3: @@ -54,2 +57,3 @@
[4.331s] 3: -Vec3 QuadrupedLeg::calcPEe2B(Vec3 q){
[4.331s] 3: -    return _pHip2B + calcPEe2H(q);
[4.331s] 3: +Vec3 QuadrupedLeg::calcPEe2B(Vec3 q)
[4.331s] 3: +{
[4.331s] 3: +  return _pHip2B + calcPEe2H(q);
[4.331s] 3: @@ -59,2 +63,3 @@
[4.331s] 3: -Vec3 QuadrupedLeg::calcVEe(Vec3 q, Vec3 qd){
[4.331s] 3: -    return calcJaco(q) * qd;
[4.331s] 3: +Vec3 QuadrupedLeg::calcVEe(Vec3 q, Vec3 qd)
[4.331s] 3: +{
[4.331s] 3: +  return calcJaco(q) * qd;
[4.331s] 3: @@ -64,10 +69,11 @@
[4.331s] 3: -Vec3 QuadrupedLeg::calcQ(Vec3 pEe, FrameType frame){
[4.331s] 3: -    Vec3 pEe2H;
[4.331s] 3: -    if(frame == FrameType::HIP)
[4.331s] 3: -        pEe2H = pEe;
[4.331s] 3: -    else if(frame == FrameType::BODY)
[4.331s] 3: -        pEe2H = pEe - _pHip2B;
[4.332s] 3: -    else{
[4.332s] 3: -        std::cout << "[ERROR] The frame of QuadrupedLeg::calcQ can only be HIP or BODY!" << std::endl;
[4.332s] 3: -        exit(-1);
[4.332s] 3: -    }
[4.332s] 3: +Vec3 QuadrupedLeg::calcQ(Vec3 pEe, FrameType frame)
[4.332s] 3: +{
[4.332s] 3: +  Vec3 pEe2H;
[4.332s] 3: +  if (frame == FrameType::HIP) {
[4.332s] 3: +    pEe2H = pEe;
[4.332s] 3: +  } else if (frame == FrameType::BODY) {
[4.332s] 3: +    pEe2H = pEe - _pHip2B;
[4.332s] 3: +  } else {
[4.332s] 3: +    std::cout << "[ERROR] The frame of QuadrupedLeg::calcQ can only be HIP or BODY!" << std::endl;
[4.332s] 3: +    exit(-1);
[4.332s] 3: +  }
[4.332s] 3: @@ -75,4 +81,4 @@
[4.332s] 3: -    float q1, q2, q3;
[4.333s] 3: -    Vec3 qResult;
[4.333s] 3: -    float px, py, pz;
[4.333s] 3: -    float b2y, b3z, b4z, a, b, c;
[4.333s] 3: +  float q1, q2, q3;
[4.333s] 3: +  Vec3 qResult;
[4.333s] 3: +  float px, py, pz;
[4.333s] 3: +  float b2y, b3z, b4z, a, b, c;
[4.333s] 3: @@ -80,3 +86,3 @@
[4.333s] 3: -    px = pEe2H(0);
[4.333s] 3: -    py = pEe2H(1);
[4.333s] 3: -    pz = pEe2H(2);
[4.333s] 3: +  px = pEe2H(0);
[4.333s] 3: +  py = pEe2H(1);
[4.333s] 3: +  pz = pEe2H(2);
[4.333s] 3: @@ -84,6 +90,6 @@
[4.333s] 3: -    b2y = _abadLinkLength * _sideSign;
[4.333s] 3: -    b3z = -_hipLinkLength;
[4.333s] 3: -    b4z = -_kneeLinkLength;
[4.333s] 3: -    a = _abadLinkLength;
[4.333s] 3: -    c = sqrt(pow(px, 2) + pow(py, 2) + pow(pz, 2)); // whole length
[4.334s] 3: -    b = sqrt(pow(c, 2) - pow(a, 2)); // distance between shoulder and footpoint
[4.334s] 3: +  b2y = _abadLinkLength * _sideSign;
[4.334s] 3: +  b3z = -_hipLinkLength;
[4.334s] 3: +  b4z = -_kneeLinkLength;
[4.334s] 3: +  a = _abadLinkLength;
[4.334s] 3: +  c = sqrt(pow(px, 2) + pow(py, 2) + pow(pz, 2));   // whole length
[4.334s] 3: +  b = sqrt(pow(c, 2) - pow(a, 2));   // distance between shoulder and footpoint
[4.334s] 3: @@ -91,3 +97,3 @@
[4.334s] 3: -    q1 = q1_ik(py, pz, b2y);
[4.334s] 3: -    q3 = q3_ik(b3z, b4z, b);
[4.334s] 3: -    q2 = q2_ik(q1, q3, px, py, pz, b3z, b4z);
[4.334s] 3: +  q1 = q1_ik(py, pz, b2y);
[4.334s] 3: +  q3 = q3_ik(b3z, b4z, b);
[4.334s] 3: +  q2 = q2_ik(q1, q3, px, py, pz, b3z, b4z);
[4.334s] 3: @@ -95,3 +101,3 @@
[4.334s] 3: -    qResult(0) = q1;
[4.334s] 3: -    qResult(1) = q2;
[4.334s] 3: -    qResult(2) = q3;
[4.334s] 3: +  qResult(0) = q1;
[4.334s] 3: +  qResult(1) = q2;
[4.334s] 3: +  qResult(2) = q3;
[4.335s] 3: @@ -99 +105 @@
[4.335s] 3: -    return qResult;
[4.335s] 3: +  return qResult;
[4.335s] 3: @@ -103,2 +109,3 @@
[4.335s] 3: -Vec3 QuadrupedLeg::calcQd(Vec3 q, Vec3 vEe){
[4.335s] 3: -    return calcJaco(q).inverse() * vEe;
[4.335s] 3: +Vec3 QuadrupedLeg::calcQd(Vec3 q, Vec3 vEe)
[4.335s] 3: +{
[4.335s] 3: +  return calcJaco(q).inverse() * vEe;
[4.335s] 3: @@ -108,3 +115,4 @@
[4.335s] 3: -Vec3 QuadrupedLeg::calcQd(Vec3 pEe, Vec3 vEe, FrameType frame){
[4.335s] 3: -    Vec3 q = calcQ(pEe, frame);
[4.335s] 3: -    return calcJaco(q).inverse() * vEe;
[4.335s] 3: +Vec3 QuadrupedLeg::calcQd(Vec3 pEe, Vec3 vEe, FrameType frame)
[4.335s] 3: +{
[4.335s] 3: +  Vec3 q = calcQ(pEe, frame);
[4.335s] 3: +  return calcJaco(q).inverse() * vEe;
[4.335s] 3: @@ -114,2 +122,3 @@
[4.335s] 3: -Vec3 QuadrupedLeg::calcTau(Vec3 q, Vec3 force){
[4.335s] 3: -    return calcJaco(q).transpose() * force;
[4.335s] 3: +Vec3 QuadrupedLeg::calcTau(Vec3 q, Vec3 force)
[4.336s] 3: +{
[4.336s] 3: +  return calcJaco(q).transpose() * force;
[4.336s] 3: @@ -119,2 +128,3 @@
[4.336s] 3: -Mat3 QuadrupedLeg::calcJaco(Vec3 q){
[4.336s] 3: -    Mat3 jaco;
[4.336s] 3: +Mat3 QuadrupedLeg::calcJaco(Vec3 q)
[4.336s] 3: +{
[4.336s] 3: +  Mat3 jaco;
[4.336s] 3: @@ -122,3 +132,3 @@
[4.336s] 3: -    float l1 = _abadLinkLength * _sideSign;
[4.336s] 3: -    float l2 = -_hipLinkLength;
[4.336s] 3: -    float l3 = -_kneeLinkLength;
[4.336s] 3: +  float l1 = _abadLinkLength * _sideSign;
[4.336s] 3: +  float l2 = -_hipLinkLength;
[4.336s] 3: +  float l3 = -_kneeLinkLength;
[4.336s] 3: @@ -126,3 +136,3 @@
[4.336s] 3: -    float s1 = std::sin(q(0));
[4.336s] 3: -    float s2 = std::sin(q(1));
[4.336s] 3: -    float s3 = std::sin(q(2));
[4.336s] 3: +  float s1 = std::sin(q(0));
[4.336s] 3: +  float s2 = std::sin(q(1));
[4.337s] 3: +  float s3 = std::sin(q(2));
[4.337s] 3: @@ -130,3 +140,3 @@
[4.337s] 3: -    float c1 = std::cos(q(0));
[4.337s] 3: -    float c2 = std::cos(q(1));
[4.337s] 3: -    float c3 = std::cos(q(2));
[4.337s] 3: +  float c1 = std::cos(q(0));
[4.337s] 3: +  float c2 = std::cos(q(1));
[4.337s] 3: +  float c3 = std::cos(q(2));
[4.337s] 3: @@ -134,11 +144,11 @@
[4.337s] 3: -    float c23 = c2 * c3 - s2 * s3;
[4.337s] 3: -    float s23 = s2 * c3 + c2 * s3;
[4.337s] 3: -    jaco(0, 0) = 0;
[4.337s] 3: -    jaco(1, 0) = -l3 * c1 * c23 - l2 * c1 * c2 - l1 * s1;
[4.337s] 3: -    jaco(2, 0) = -l3 * s1 * c23 - l2 * c2 * s1 + l1 * c1;
[4.337s] 3: -    jaco(0, 1) = l3 * c23 + l2 * c2;
[4.337s] 3: -    jaco(1, 1) = l3 * s1 * s23 + l2 * s1 * s2;
[4.337s] 3: -    jaco(2, 1) = -l3 * c1 * s23 - l2 * c1 * s2;
[4.337s] 3: -    jaco(0, 2) = l3 * c23;
[4.337s] 3: -    jaco(1, 2) = l3 * s1 * s23;
[4.338s] 3: -    jaco(2, 2) = -l3 * c1 * s23;
[4.338s] 3: +  float c23 = c2 * c3 - s2 * s3;
[4.338s] 3: +  float s23 = s2 * c3 + c2 * s3;
[4.338s] 3: +  jaco(0, 0) = 0;
[4.338s] 3: +  jaco(1, 0) = -l3 * c1 * c23 - l2 * c1 * c2 - l1 * s1;
[4.338s] 3: +  jaco(2, 0) = -l3 * s1 * c23 - l2 * c2 * s1 + l1 * c1;
[4.338s] 3: +  jaco(0, 1) = l3 * c23 + l2 * c2;
[4.338s] 3: +  jaco(1, 1) = l3 * s1 * s23 + l2 * s1 * s2;
[4.338s] 3: +  jaco(2, 1) = -l3 * c1 * s23 - l2 * c1 * s2;
[4.338s] 3: +  jaco(0, 2) = l3 * c23;
[4.338s] 3: +  jaco(1, 2) = l3 * s1 * s23;
[4.338s] 3: +  jaco(2, 2) = -l3 * c1 * s23;
[4.338s] 3: @@ -146 +156 @@
[4.338s] 3: -    return jaco;
[4.338s] 3: +  return jaco;
[4.339s] 3: @@ -149,5 +159,6 @@
[4.339s] 3: -float QuadrupedLeg::q1_ik(float py, float pz, float l1){
[4.339s] 3: -    float q1;
[4.339s] 3: -    float L = sqrt(pow(py,2)+pow(pz,2)-pow(l1,2));
[4.339s] 3: -    q1 = atan2(pz*l1+py*L, py*l1-pz*L);
[4.339s] 3: -    return q1;
[4.339s] 3: +float QuadrupedLeg::q1_ik(float py, float pz, float l1)
[4.339s] 3: +{
[4.339s] 3: +  float q1;
[4.339s] 3: +  float L = sqrt(pow(py, 2) + pow(pz, 2) - pow(l1, 2));
[4.339s] 3: +  q1 = atan2(pz * l1 + py * L, py * l1 - pz * L);
[4.339s] 3: +  return q1;
[4.339s] 3: @@ -156,8 +167,9 @@
[4.339s] 3: -float QuadrupedLeg::q3_ik(float b3z, float b4z, float b){
[4.339s] 3: -    float q3, temp;
[4.339s] 3: -    temp = (pow(b3z, 2) + pow(b4z, 2) - pow(b, 2))/(2*fabs(b3z*b4z));
[4.339s] 3: -    if(temp>1) temp = 1;
[4.339s] 3: -    if(temp<-1) temp = -1;
[4.339s] 3: -    q3 = acos(temp);
[4.339s] 3: -    q3 = -(M_PI - q3); //0~180
[4.339s] 3: -    return q3;
[4.339s] 3: +float QuadrupedLeg::q3_ik(float b3z, float b4z, float b)
[4.340s] 3: +{
[4.340s] 3: +  float q3, temp;
[4.340s] 3: +  temp = (pow(b3z, 2) + pow(b4z, 2) - pow(b, 2)) / (2 * fabs(b3z * b4z));
[4.340s] 3: +  if (temp > 1) {temp = 1;}
[4.340s] 3: +  if (temp < -1) {temp = -1;}
[4.340s] 3: +  q3 = acos(temp);
[4.340s] 3: +  q3 = -(M_PI - q3);   //0~180
[4.340s] 3: +  return q3;
[4.340s] 3: @@ -166,9 +178,10 @@
[4.340s] 3: -float QuadrupedLeg::q2_ik(float q1, float q3, float px, float py, float pz, float b3z, float b4z){
[4.340s] 3: -    float q2, a1, a2, m1, m2;
[4.340s] 3: -    
[4.340s] 3: -    a1 = py*sin(q1) - pz*cos(q1);
[4.340s] 3: -    a2 = px;
[4.340s] 3: -    m1 = b4z*sin(q3);
[4.340s] 3: -    m2 = b3z + b4z*cos(q3);
[4.340s] 3: -    q2 = atan2(m1*a1+m2*a2, m1*a2-m2*a1);
[4.340s] 3: -    return q2;
[4.340s] 3: +float QuadrupedLeg::q2_ik(float q1, float q3, float px, float py, float pz, float b3z, float b4z)
[4.340s] 3: +{
[4.340s] 3: +  float q2, a1, a2, m1, m2;
[4.340s] 3: +
[4.341s] 3: +  a1 = py * sin(q1) - pz * cos(q1);
[4.341s] 3: +  a2 = px;
[4.341s] 3: +  m1 = b4z * sin(q3);
[4.341s] 3: +  m2 = b3z + b4z * cos(q3);
[4.341s] 3: +  q2 = atan2(m1 * a1 + m2 * a2, m1 * a2 - m2 * a1);
[4.341s] 3: +  return q2;
[4.341s] 3: 
[4.341s] 3: Code style divergence in file 'src/common/unitreeRobot.cpp':
[4.341s] 3: 
[4.341s] 3: --- src/common/unitreeRobot.cpp
[4.341s] 3: +++ src/common/unitreeRobot.cpp.uncrustify
[4.341s] 3: @@ -7,2 +7,3 @@
[4.341s] 3: -Vec3 QuadrupedRobot::getX(LowlevelState &state){
[4.341s] 3: -    return getFootPosition(state, 0, FrameType::BODY);
[4.341s] 3: +Vec3 QuadrupedRobot::getX(LowlevelState & state)
[4.341s] 3: +{
[4.341s] 3: +  return getFootPosition(state, 0, FrameType::BODY);
[4.341s] 3: @@ -11,4 +12,5 @@
[4.341s] 3: -Vec34 QuadrupedRobot::getVecXP(LowlevelState &state){
[4.341s] 3: -    Vec3 x = getX(state);
[4.342s] 3: -    Vec34 vecXP, qLegs;
[4.342s] 3: -    qLegs = state.getQ();
[4.342s] 3: +Vec34 QuadrupedRobot::getVecXP(LowlevelState & state)
[4.342s] 3: +{
[4.342s] 3: +  Vec3 x = getX(state);
[4.342s] 3: +  Vec34 vecXP, qLegs;
[4.342s] 3: +  qLegs = state.getQ();
[4.342s] 3: @@ -16,4 +18,4 @@
[4.342s] 3: -    for(int i(0); i < 4; ++i){
[4.342s] 3: -        vecXP.col(i) = _Legs[i]->calcPEe2B(qLegs.col(i)) - x;
[4.342s] 3: -    }
[4.342s] 3: -    return vecXP;
[4.342s] 3: +  for (int i(0); i < 4; ++i) {
[4.342s] 3: +    vecXP.col(i) = _Legs[i]->calcPEe2B(qLegs.col(i)) - x;
[4.342s] 3: +  }
[4.342s] 3: +  return vecXP;
[4.342s] 3: @@ -22,6 +24,7 @@
[4.342s] 3: -Vec12 QuadrupedRobot::getQ(const Vec34 &vecP, FrameType frame){
[4.342s] 3: -    Vec12 q;
[4.342s] 3: -    for(int i(0); i < 4; ++i){
[4.342s] 3: -        q.segment(3*i, 3) = _Legs[i]->calcQ(vecP.col(i), frame);
[4.343s] 3: -    }
[4.343s] 3: -    return q;
[4.343s] 3: +Vec12 QuadrupedRobot::getQ(const Vec34 & vecP, FrameType frame)
[4.343s] 3: +{
[4.343s] 3: +  Vec12 q;
[4.343s] 3: +  for (int i(0); i < 4; ++i) {
[4.343s] 3: +    q.segment(3 * i, 3) = _Legs[i]->calcQ(vecP.col(i), frame);
[4.343s] 3: +  }
[4.343s] 3: +  return q;
[4.343s] 3: @@ -30,6 +33,7 @@
[4.343s] 3: -Vec12 QuadrupedRobot::getQd(const Vec34 &pos, const Vec34 &vel, FrameType frame){
[4.343s] 3: -    Vec12 qd;
[4.343s] 3: -    for(int i(0); i < 4; ++i){
[4.343s] 3: -        qd.segment(3*i, 3) = _Legs[i]->calcQd(pos.col(i), vel.col(i), frame);
[4.343s] 3: -    }
[4.343s] 3: -    return qd;
[4.343s] 3: +Vec12 QuadrupedRobot::getQd(const Vec34 & pos, const Vec34 & vel, FrameType frame)
[4.343s] 3: +{
[4.343s] 3: +  Vec12 qd;
[4.343s] 3: +  for (int i(0); i < 4; ++i) {
[4.343s] 3: +    qd.segment(3 * i, 3) = _Legs[i]->calcQd(pos.col(i), vel.col(i), frame);
[4.344s] 3: +  }
[4.344s] 3: +  return qd;
[4.344s] 3: @@ -38,6 +42,7 @@
[4.344s] 3: -Vec12 QuadrupedRobot::getTau(const Vec12 &q, const Vec34 feetForce){
[4.344s] 3: -    Vec12 tau;
[4.344s] 3: -    for(int i(0); i < 4; ++i){
[4.344s] 3: -        tau.segment(3*i, 3) = _Legs[i]->calcTau(q.segment(3*i, 3), feetForce.col(i));
[4.344s] 3: -    }
[4.344s] 3: -    return tau;
[4.344s] 3: +Vec12 QuadrupedRobot::getTau(const Vec12 & q, const Vec34 feetForce)
[4.344s] 3: +{
[4.344s] 3: +  Vec12 tau;
[4.344s] 3: +  for (int i(0); i < 4; ++i) {
[4.344s] 3: +    tau.segment(3 * i, 3) = _Legs[i]->calcTau(q.segment(3 * i, 3), feetForce.col(i));
[4.344s] 3: +  }
[4.344s] 3: +  return tau;
[4.344s] 3: @@ -47,2 +52,3 @@
[4.344s] 3: -Vec3 QuadrupedRobot::getFootPosition(LowlevelState &state, int id, FrameType frame){
[4.344s] 3: -    Vec34 qLegs= state.getQ();
[4.344s] 3: +Vec3 QuadrupedRobot::getFootPosition(LowlevelState & state, int id, FrameType frame)
[4.344s] 3: +{
[4.345s] 3: +  Vec34 qLegs = state.getQ();
[4.345s] 3: @@ -50,8 +56,9 @@
[4.345s] 3: -    if(frame == FrameType::BODY){
[4.345s] 3: -        return _Legs[id]->calcPEe2B(qLegs.col(id));
[4.345s] 3: -    }else if(frame == FrameType::HIP){
[4.345s] 3: -        return _Legs[id]->calcPEe2H(qLegs.col(id));
[4.345s] 3: -    }else{
[4.345s] 3: -        std::cout << "[ERROR] The frame of function: getFootPosition can only be BODY or HIP." << std::endl;
[4.345s] 3: -        exit(-1);
[4.345s] 3: -    }
[4.345s] 3: +  if (frame == FrameType::BODY) {
[4.345s] 3: +    return _Legs[id]->calcPEe2B(qLegs.col(id));
[4.345s] 3: +  } else if (frame == FrameType::HIP) {
[4.345s] 3: +    return _Legs[id]->calcPEe2H(qLegs.col(id));
[4.345s] 3: +  } else {
[4.345s] 3: +    std::cout << "[ERROR] The frame of function: getFootPosition can only be BODY or HIP." <<
[4.345s] 3: +      std::endl;
[4.345s] 3: +    exit(-1);
[4.345s] 3: +  }
[4.345s] 3: @@ -61,4 +68,5 @@
[4.345s] 3: -Vec3 QuadrupedRobot::getFootVelocity(LowlevelState &state, int id){
[4.346s] 3: -    Vec34 qLegs = state.getQ();
[4.346s] 3: -    Vec34 qdLegs= state.getQd();
[4.346s] 3: -    return _Legs[id]->calcVEe(qLegs.col(id), qdLegs.col(id));
[4.346s] 3: +Vec3 QuadrupedRobot::getFootVelocity(LowlevelState & state, int id)
[4.346s] 3: +{
[4.346s] 3: +  Vec34 qLegs = state.getQ();
[4.346s] 3: +  Vec34 qdLegs = state.getQd();
[4.346s] 3: +  return _Legs[id]->calcVEe(qLegs.col(id), qdLegs.col(id));
[4.346s] 3: @@ -68,7 +76,6 @@
[4.346s] 3: -Vec34 QuadrupedRobot::getFeet2BPositions(LowlevelState &state, FrameType frame){
[4.346s] 3: -    Vec34 feetPos;
[4.346s] 3: -    if(frame == FrameType::GLOBAL){
[4.346s] 3: -        for(int i(0); i<4; ++i){
[4.346s] 3: -            feetPos.col(i) = getFootPosition(state, i, FrameType::BODY);
[4.347s] 3: -        }
[4.347s] 3: -        feetPos = state.getRotMat() * feetPos;
[4.347s] 3: +Vec34 QuadrupedRobot::getFeet2BPositions(LowlevelState & state, FrameType frame)
[4.347s] 3: +{
[4.347s] 3: +  Vec34 feetPos;
[4.347s] 3: +  if (frame == FrameType::GLOBAL) {
[4.347s] 3: +    for (int i(0); i < 4; ++i) {
[4.347s] 3: +      feetPos.col(i) = getFootPosition(state, i, FrameType::BODY);
[4.347s] 3: @@ -76,4 +83,4 @@
[4.347s] 3: -    else if((frame == FrameType::BODY) || (frame == FrameType::HIP)){
[4.347s] 3: -        for(int i(0); i<4; ++i){
[4.347s] 3: -            feetPos.col(i) = getFootPosition(state, i, frame);
[4.347s] 3: -        }
[4.347s] 3: +    feetPos = state.getRotMat() * feetPos;
[4.347s] 3: +  } else if ((frame == FrameType::BODY) || (frame == FrameType::HIP)) {
[4.347s] 3: +    for (int i(0); i < 4; ++i) {
[4.347s] 3: +      feetPos.col(i) = getFootPosition(state, i, frame);
[4.347s] 3: @@ -81,5 +88,5 @@
[4.347s] 3: -    else{
[4.347s] 3: -        std::cout << "[ERROR] Frame error of function getFeet2BPositions" << std::endl;
[4.347s] 3: -        exit(-1);
[4.348s] 3: -    }
[4.348s] 3: -    return feetPos;
[4.348s] 3: +  } else {
[4.348s] 3: +    std::cout << "[ERROR] Frame error of function getFeet2BPositions" << std::endl;
[4.348s] 3: +    exit(-1);
[4.348s] 3: +  }
[4.348s] 3: +  return feetPos;
[4.348s] 3: @@ -88,5 +95,6 @@
[4.348s] 3: -Vec34 QuadrupedRobot::getFeet2BVelocities(LowlevelState &state, FrameType frame){
[4.348s] 3: -    Vec34 feetVel;
[4.348s] 3: -    for(int i(0); i<4; ++i){
[4.348s] 3: -        feetVel.col(i) = getFootVelocity(state, i);
[4.348s] 3: -    }
[4.348s] 3: +Vec34 QuadrupedRobot::getFeet2BVelocities(LowlevelState & state, FrameType frame)
[4.348s] 3: +{
[4.348s] 3: +  Vec34 feetVel;
[4.348s] 3: +  for (int i(0); i < 4; ++i) {
[4.348s] 3: +    feetVel.col(i) = getFootVelocity(state, i);
[4.348s] 3: +  }
[4.348s] 3: @@ -94,12 +102,10 @@
[4.349s] 3: -    if(frame == FrameType::GLOBAL){
[4.349s] 3: -        Vec34 feetPos = getFeet2BPositions(state, FrameType::BODY);
[4.349s] 3: -        feetVel += skew(state.getGyro()) * feetPos;
[4.349s] 3: -        return state.getRotMat() * feetVel;
[4.349s] 3: -    }
[4.349s] 3: -    else if((frame == FrameType::BODY) || (frame == FrameType::HIP)){
[4.349s] 3: -        return feetVel;
[4.349s] 3: -    }
[4.349s] 3: -    else{
[4.349s] 3: -        std::cout << "[ERROR] Frame error of function getFeet2BVelocities" << std::endl;
[4.349s] 3: -        exit(-1);
[4.349s] 3: -    }   
[4.349s] 3: +  if (frame == FrameType::GLOBAL) {
[4.349s] 3: +    Vec34 feetPos = getFeet2BPositions(state, FrameType::BODY);
[4.349s] 3: +    feetVel += skew(state.getGyro()) * feetPos;
[4.349s] 3: +    return state.getRotMat() * feetVel;
[4.349s] 3: +  } else if ((frame == FrameType::BODY) || (frame == FrameType::HIP)) {
[4.349s] 3: +    return feetVel;
[4.350s] 3: +  } else {
[4.350s] 3: +    std::cout << "[ERROR] Frame error of function getFeet2BVelocities" << std::endl;
[4.350s] 3: +    exit(-1);
[4.350s] 3: +  }
[4.350s] 3: @@ -108,2 +114,3 @@
[4.350s] 3: -Mat3 QuadrupedRobot::getJaco(LowlevelState &state, int legID){
[4.350s] 3: -    return _Legs[legID]->calcJaco(state.getQ().col(legID));
[4.350s] 3: +Mat3 QuadrupedRobot::getJaco(LowlevelState & state, int legID)
[4.350s] 3: +{
[4.350s] 3: +  return _Legs[legID]->calcJaco(state.getQ().col(legID));
[4.350s] 3: @@ -112,5 +119,6 @@
[4.350s] 3: -A1Robot::A1Robot(){
[4.350s] 3: -    _Legs[0] = new A1Leg(0, Vec3( 0.1805, -0.047, 0));
[4.350s] 3: -    _Legs[1] = new A1Leg(1, Vec3( 0.1805,  0.047, 0));
[4.350s] 3: -    _Legs[2] = new A1Leg(2, Vec3(-0.1805, -0.047, 0));
[4.350s] 3: -    _Legs[3] = new A1Leg(3, Vec3(-0.1805,  0.047, 0));
[4.350s] 3: +A1Robot::A1Robot()
[4.350s] 3: +{
[4.350s] 3: +  _Legs[0] = new A1Leg(0, Vec3(0.1805, -0.047, 0));
[4.350s] 3: +  _Legs[1] = new A1Leg(1, Vec3(0.1805, 0.047, 0));
[4.350s] 3: +  _Legs[2] = new A1Leg(2, Vec3(-0.1805, -0.047, 0));
[4.350s] 3: +  _Legs[3] = new A1Leg(3, Vec3(-0.1805, 0.047, 0));
[4.350s] 3: @@ -118,3 +126,3 @@
[4.351s] 3: -    _feetPosNormalStand <<  0.1805,  0.1805, -0.1805, -0.1805, 
[4.351s] 3: -                           -0.1308,  0.1308, -0.1308,  0.1308,
[4.351s] 3: -                           -0.3180, -0.3180, -0.3180, -0.3180;
[4.351s] 3: +  _feetPosNormalStand << 0.1805, 0.1805, -0.1805, -0.1805,
[4.351s] 3: +    -0.1308, 0.1308, -0.1308, 0.1308,
[4.351s] 3: +    -0.3180, -0.3180, -0.3180, -0.3180;
[4.351s] 3: @@ -122,3 +130,3 @@
[4.351s] 3: -    _robVelLimitX << -0.4, 0.4;
[4.351s] 3: -    _robVelLimitY << -0.3, 0.3;
[4.351s] 3: -    _robVelLimitYaw << -0.5, 0.5;
[4.351s] 3: +  _robVelLimitX << -0.4, 0.4;
[4.351s] 3: +  _robVelLimitY << -0.3, 0.3;
[4.351s] 3: +  _robVelLimitYaw << -0.5, 0.5;
[4.351s] 3: @@ -127,3 +135,3 @@
[4.351s] 3: -    _mass = 12.5;
[4.351s] 3: -    _pcb << 0.01, 0.0, 0.0;
[4.351s] 3: -    _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();
[4.351s] 3: +  _mass = 12.5;
[4.351s] 3: +  _pcb << 0.01, 0.0, 0.0;
[4.351s] 3: +  _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();
[4.351s] 3: @@ -133,3 +141,3 @@
[4.351s] 3: -    _mass = 13.4;
[4.352s] 3: -    _pcb << 0.0, 0.0, 0.0;
[4.352s] 3: -    _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();
[4.352s] 3: +  _mass = 13.4;
[4.352s] 3: +  _pcb << 0.0, 0.0, 0.0;
[4.352s] 3: +  _Ib = Vec3(0.132, 0.3475, 0.3775).asDiagonal();
[4.352s] 3: @@ -139,5 +147,6 @@
[4.352s] 3: -Go1Robot::Go1Robot(){
[4.352s] 3: -    _Legs[0] = new Go1Leg(0, Vec3( 0.1881, -0.04675, 0));
[4.352s] 3: -    _Legs[1] = new Go1Leg(1, Vec3( 0.1881,  0.04675, 0));
[4.352s] 3: -    _Legs[2] = new Go1Leg(2, Vec3(-0.1881, -0.04675, 0));
[4.352s] 3: -    _Legs[3] = new Go1Leg(3, Vec3(-0.1881,  0.04675, 0));
[4.352s] 3: +Go1Robot::Go1Robot()
[4.352s] 3: +{
[4.352s] 3: +  _Legs[0] = new Go1Leg(0, Vec3(0.1881, -0.04675, 0));
[4.352s] 3: +  _Legs[1] = new Go1Leg(1, Vec3(0.1881, 0.04675, 0));
[4.352s] 3: +  _Legs[2] = new Go1Leg(2, Vec3(-0.1881, -0.04675, 0));
[4.352s] 3: +  _Legs[3] = new Go1Leg(3, Vec3(-0.1881, 0.04675, 0));
[4.352s] 3: @@ -145,3 +154,3 @@
[4.352s] 3: -    _feetPosNormalStand <<  0.1881,  0.1881, -0.1881, -0.1881,
[4.352s] 3: -                           -0.1300,  0.1300, -0.1300,  0.1300,
[4.352s] 3: -                           -0.3200, -0.3200, -0.3200, -0.3200;
[4.352s] 3: +  _feetPosNormalStand << 0.1881, 0.1881, -0.1881, -0.1881,
[4.352s] 3: +    -0.1300, 0.1300, -0.1300, 0.1300,
[4.353s] 3: +    -0.3200, -0.3200, -0.3200, -0.3200;
[4.353s] 3: @@ -149,3 +158,3 @@
[4.353s] 3: -    _robVelLimitX << -0.4, 0.4;
[4.353s] 3: -    _robVelLimitY << -0.3, 0.3;
[4.353s] 3: -    _robVelLimitYaw << -0.5, 0.5;
[4.353s] 3: +  _robVelLimitX << -0.4, 0.4;
[4.353s] 3: +  _robVelLimitY << -0.3, 0.3;
[4.353s] 3: +  _robVelLimitYaw << -0.5, 0.5;
[4.353s] 3: @@ -155,3 +164,3 @@
[4.353s] 3: -    _mass = 10.5;
[4.353s] 3: -    _pcb << 0.04, 0.0, 0.0;
[4.353s] 3: -    _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();
[4.353s] 3: +  _mass = 10.5;
[4.353s] 3: +  _pcb << 0.04, 0.0, 0.0;
[4.353s] 3: +  _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();
[4.353s] 3: @@ -161,3 +170,3 @@
[4.353s] 3: -    _mass = 12.0;
[4.353s] 3: -    _pcb << 0.0, 0.0, 0.0;
[4.353s] 3: -    _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();
[4.353s] 3: +  _mass = 12.0;
[4.353s] 3: +  _pcb << 0.0, 0.0, 0.0;
[4.353s] 3: +  _Ib = Vec3(0.0792, 0.2085, 0.2265).asDiagonal();
[4.353s] 3: @@ -165 +174 @@
[4.353s] 3: -}
[4.353s] 3: +}
[4.354s] 3: 
[4.354s] 3: Code style divergence in file 'src/control/BalanceCtrl.cpp':
[4.354s] 3: 
[4.354s] 3: --- src/control/BalanceCtrl.cpp
[4.354s] 3: +++ src/control/BalanceCtrl.cpp.uncrustify
[4.354s] 3: @@ -9,9 +9,10 @@
[4.354s] 3: -            : _mass(mass), _Ib(Ib), _S(S), _alpha(alpha), _beta(beta){
[4.354s] 3: -    _Fprev.setZero();
[4.354s] 3: -    _g << 0, 0, -9.81;
[4.354s] 3: -    _fricRatio = 0.3;
[4.354s] 3: -    _fricMat <<  1,  0, _fricRatio,
[4.354s] 3: -                -1,  0, _fricRatio,
[4.354s] 3: -                 0,  1, _fricRatio,
[4.354s] 3: -                 0, -1, _fricRatio,
[4.354s] 3: -                 0,  0, 1;
[4.354s] 3: +: _mass(mass), _Ib(Ib), _S(S), _alpha(alpha), _beta(beta)
[4.354s] 3: +{
[4.354s] 3: +  _Fprev.setZero();
[4.354s] 3: +  _g << 0, 0, -9.81;
[4.354s] 3: +  _fricRatio = 0.3;
[4.354s] 3: +  _fricMat << 1, 0, _fricRatio,
[4.354s] 3: +    -1, 0, _fricRatio,
[4.354s] 3: +    0, 1, _fricRatio,
[4.355s] 3: +    0, -1, _fricRatio,
[4.355s] 3: +    0, 0, 1;
[4.355s] 3: @@ -20,3 +21,4 @@
[4.355s] 3: -BalanceCtrl::BalanceCtrl(QuadrupedRobot *robModel){
[4.355s] 3: -    Vec6 s;
[4.355s] 3: -    Vec12 w, u;
[4.355s] 3: +BalanceCtrl::BalanceCtrl(QuadrupedRobot * robModel)
[4.355s] 3: +{
[4.355s] 3: +  Vec6 s;
[4.355s] 3: +  Vec12 w, u;
[4.355s] 3: @@ -24,4 +26,4 @@
[4.355s] 3: -    _mass = robModel->getRobMass();
[4.355s] 3: -    _pcb = robModel->getPcb();
[4.355s] 3: -    _Ib = robModel->getRobInertial();
[4.355s] 3: -    _g << 0, 0, -9.81;
[4.355s] 3: +  _mass = robModel->getRobMass();
[4.355s] 3: +  _pcb = robModel->getPcb();
[4.355s] 3: +  _Ib = robModel->getRobInertial();
[4.355s] 3: +  _g << 0, 0, -9.81;
[4.355s] 3: @@ -29,5 +31,5 @@
[4.355s] 3: -    w << 10, 10, 4, 10, 10, 4, 10, 10, 4, 10, 10, 4;
[4.355s] 3: -    u << 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3;
[4.355s] 3: -    _alpha = 0.001;
[4.355s] 3: -    _beta  = 0.1;
[4.356s] 3: -    _fricRatio = 0.4;
[4.356s] 3: +  w << 10, 10, 4, 10, 10, 4, 10, 10, 4, 10, 10, 4;
[4.356s] 3: +  u << 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3;
[4.356s] 3: +  _alpha = 0.001;
[4.356s] 3: +  _beta = 0.1;
[4.356s] 3: +  _fricRatio = 0.4;
[4.356s] 3: @@ -35 +37 @@
[4.356s] 3: -    s << 20, 20, 50, 450, 450, 450; 
[4.356s] 3: +  s << 20, 20, 50, 450, 450, 450;
[4.356s] 3: @@ -37,10 +39,10 @@
[4.356s] 3: -    _S = s.asDiagonal();
[4.356s] 3: -    _W = w.asDiagonal();
[4.356s] 3: -    _U = u.asDiagonal();
[4.356s] 3: -    
[4.356s] 3: -    _Fprev.setZero();
[4.356s] 3: -    _fricMat <<  1,  0, _fricRatio,
[4.356s] 3: -                -1,  0, _fricRatio,
[4.356s] 3: -                 0,  1, _fricRatio,
[4.356s] 3: -                 0, -1, _fricRatio,
[4.356s] 3: -                 0,  0, 1;
[4.356s] 3: +  _S = s.asDiagonal();
[4.356s] 3: +  _W = w.asDiagonal();
[4.356s] 3: +  _U = u.asDiagonal();
[4.356s] 3: +
[4.357s] 3: +  _Fprev.setZero();
[4.357s] 3: +  _fricMat << 1, 0, _fricRatio,
[4.357s] 3: +    -1, 0, _fricRatio,
[4.357s] 3: +    0, 1, _fricRatio,
[4.357s] 3: +    0, -1, _fricRatio,
[4.357s] 3: +    0, 0, 1;
[4.357s] 3: @@ -49,4 +51,5 @@
[4.357s] 3: -Vec34 BalanceCtrl::calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact){
[4.357s] 3: -    calMatrixA(feetPos2B, rotM, contact);
[4.357s] 3: -    calVectorBd(ddPcd, dWbd, rotM);
[4.357s] 3: -    calConstraints(contact);
[4.357s] 3: +Vec34 BalanceCtrl::calF(Vec3 ddPcd, Vec3 dWbd, RotMat rotM, Vec34 feetPos2B, VecInt4 contact)
[4.357s] 3: +{
[4.357s] 3: +  calMatrixA(feetPos2B, rotM, contact);
[4.357s] 3: +  calVectorBd(ddPcd, dWbd, rotM);
[4.357s] 3: +  calConstraints(contact);
[4.357s] 3: @@ -54,2 +57,2 @@
[4.357s] 3: -    _G = _A.transpose()*_S*_A + _alpha*_W + _beta*_U;
[4.357s] 3: -    _g0T = -_bd.transpose()*_S*_A - _beta*_Fprev.transpose()*_U;
[4.357s] 3: +  _G = _A.transpose() * _S * _A + _alpha * _W + _beta * _U;
[4.357s] 3: +  _g0T = -_bd.transpose() * _S * _A - _beta * _Fprev.transpose() * _U;
[4.357s] 3: @@ -57 +60 @@
[4.358s] 3: -    solveQP();
[4.358s] 3: +  solveQP();
[4.358s] 3: @@ -59,2 +62,2 @@
[4.358s] 3: -    _Fprev = _F;
[4.358s] 3: -    return vec12ToVec34(_F);
[4.358s] 3: +  _Fprev = _F;
[4.358s] 3: +  return vec12ToVec34(_F);
[4.358s] 3: @@ -63,5 +66,6 @@
[4.358s] 3: -void BalanceCtrl::calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact){
[4.358s] 3: -    for(int i(0); i < 4; ++i){
[4.358s] 3: -        _A.block(0, 3*i, 3, 3) = I3;
[4.358s] 3: -        _A.block(3, 3*i, 3, 3) = skew(feetPos2B.col(i) - rotM*_pcb);
[4.358s] 3: -    }
[4.358s] 3: +void BalanceCtrl::calMatrixA(Vec34 feetPos2B, RotMat rotM, VecInt4 contact)
[4.358s] 3: +{
[4.358s] 3: +  for (int i(0); i < 4; ++i) {
[4.358s] 3: +    _A.block(0, 3 * i, 3, 3) = I3;
[4.358s] 3: +    _A.block(3, 3 * i, 3, 3) = skew(feetPos2B.col(i) - rotM * _pcb);
[4.358s] 3: +  }
[4.358s] 3: @@ -70,3 +74,4 @@
[4.358s] 3: -void BalanceCtrl::calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM){
[4.359s] 3: -    _bd.head(3) = _mass * (ddPcd - _g);
[4.359s] 3: -    _bd.tail(3) = (rotM * _Ib * rotM.transpose()) * dWbd;
[4.359s] 3: +void BalanceCtrl::calVectorBd(Vec3 ddPcd, Vec3 dWbd, RotMat rotM)
[4.359s] 3: +{
[4.359s] 3: +  _bd.head(3) = _mass * (ddPcd - _g);
[4.359s] 3: +  _bd.tail(3) = (rotM * _Ib * rotM.transpose()) * dWbd;
[4.359s] 3: @@ -75,6 +80,6 @@
[4.359s] 3: -void BalanceCtrl::calConstraints(VecInt4 contact){
[4.359s] 3: -    int contactLegNum = 0;
[4.359s] 3: -    for(int i(0); i<4; ++i){
[4.359s] 3: -        if(contact(i) == 1){
[4.359s] 3: -            contactLegNum += 1;
[4.359s] 3: -        }
[4.359s] 3: +void BalanceCtrl::calConstraints(VecInt4 contact)
[4.359s] 3: +{
[4.359s] 3: +  int contactLegNum = 0;
[4.359s] 3: +  for (int i(0); i < 4; ++i) {
[4.359s] 3: +    if (contact(i) == 1) {
[4.359s] 3: +      contactLegNum += 1;
[4.359s] 3: @@ -81,0 +87 @@
[4.359s] 3: +  }
[4.359s] 3: @@ -83,4 +89,4 @@
[4.359s] 3: -    _CI.resize(5*contactLegNum, 12);
[4.360s] 3: -    _ci0.resize(5*contactLegNum);
[4.360s] 3: -    _CE.resize(3*(4 - contactLegNum), 12);
[4.360s] 3: -    _ce0.resize(3*(4 - contactLegNum));
[4.360s] 3: +  _CI.resize(5 * contactLegNum, 12);
[4.360s] 3: +  _ci0.resize(5 * contactLegNum);
[4.360s] 3: +  _CE.resize(3 * (4 - contactLegNum), 12);
[4.360s] 3: +  _ce0.resize(3 * (4 - contactLegNum));
[4.360s] 3: @@ -88,4 +94,4 @@
[4.360s] 3: -    _CI.setZero();
[4.360s] 3: -    _ci0.setZero();
[4.360s] 3: -    _CE.setZero();
[4.360s] 3: -    _ce0.setZero();
[4.360s] 3: +  _CI.setZero();
[4.360s] 3: +  _ci0.setZero();
[4.360s] 3: +  _CE.setZero();
[4.360s] 3: +  _ce0.setZero();
[4.360s] 3: @@ -93,10 +99,9 @@
[4.360s] 3: -    int ceID = 0;
[4.360s] 3: -    int ciID = 0;
[4.360s] 3: -    for(int i(0); i<4; ++i){
[4.360s] 3: -        if(contact(i) == 1){
[4.360s] 3: -            _CI.block(5*ciID, 3*i, 5, 3) = _fricMat;
[4.360s] 3: -            ++ciID;
[4.361s] 3: -        }else{
[4.361s] 3: -            _CE.block(3*ceID, 3*i, 3, 3) = I3;
[4.361s] 3: -            ++ceID;
[4.361s] 3: -        }
[4.361s] 3: +  int ceID = 0;
[4.361s] 3: +  int ciID = 0;
[4.361s] 3: +  for (int i(0); i < 4; ++i) {
[4.361s] 3: +    if (contact(i) == 1) {
[4.361s] 3: +      _CI.block(5 * ciID, 3 * i, 5, 3) = _fricMat;
[4.361s] 3: +      ++ciID;
[4.361s] 3: +    } else {
[4.361s] 3: +      _CE.block(3 * ceID, 3 * i, 3, 3) = I3;
[4.361s] 3: +      ++ceID;
[4.361s] 3: @@ -103,0 +109 @@
[4.361s] 3: +  }
[4.361s] 3: @@ -106,4 +112,5 @@
[4.361s] 3: -void BalanceCtrl::solveQP(){
[4.361s] 3: -    int n = _F.size();
[4.361s] 3: -    int m = _ce0.size();
[4.361s] 3: -    int p = _ci0.size();
[4.361s] 3: +void BalanceCtrl::solveQP()
[4.361s] 3: +{
[4.361s] 3: +  int n = _F.size();
[4.362s] 3: +  int m = _ce0.size();
[4.362s] 3: +  int p = _ci0.size();
[4.362s] 3: @@ -111,7 +118,7 @@
[4.362s] 3: -    G.resize(n, n);
[4.362s] 3: -    CE.resize(n, m);
[4.362s] 3: -    CI.resize(n, p);
[4.362s] 3: -    g0.resize(n);
[4.362s] 3: -    ce0.resize(m);
[4.362s] 3: -    ci0.resize(p);
[4.362s] 3: -    x.resize(n);
[4.362s] 3: +  G.resize(n, n);
[4.362s] 3: +  CE.resize(n, m);
[4.362s] 3: +  CI.resize(n, p);
[4.362s] 3: +  g0.resize(n);
[4.362s] 3: +  ce0.resize(m);
[4.362s] 3: +  ci0.resize(p);
[4.362s] 3: +  x.resize(n);
[4.362s] 3: @@ -119,4 +126,3 @@
[4.362s] 3: -    for (int i = 0; i < n; ++i) {
[4.362s] 3: -        for (int j = 0; j < n; ++j) {
[4.362s] 3: -            G[i][j] = _G(i, j);
[4.362s] 3: -        }
[4.362s] 3: +  for (int i = 0; i < n; ++i) {
[4.363s] 3: +    for (int j = 0; j < n; ++j) {
[4.363s] 3: +      G[i][j] = _G(i, j);
[4.363s] 3: @@ -123,0 +130 @@
[4.363s] 3: +  }
[4.363s] 3: @@ -125,4 +132,3 @@
[4.363s] 3: -    for (int i = 0; i < n; ++i) {
[4.363s] 3: -        for (int j = 0; j < m; ++j) {
[4.363s] 3: -            CE[i][j] = (_CE.transpose())(i, j);
[4.363s] 3: -        }
[4.363s] 3: +  for (int i = 0; i < n; ++i) {
[4.363s] 3: +    for (int j = 0; j < m; ++j) {
[4.363s] 3: +      CE[i][j] = (_CE.transpose())(i, j);
[4.363s] 3: @@ -129,0 +136 @@
[4.363s] 3: +  }
[4.363s] 3: @@ -131,4 +138,3 @@
[4.363s] 3: -    for (int i = 0; i < n; ++i) {
[4.363s] 3: -        for (int j = 0; j < p; ++j) {
[4.363s] 3: -            CI[i][j] = (_CI.transpose())(i, j);
[4.363s] 3: -        }
[4.363s] 3: +  for (int i = 0; i < n; ++i) {
[4.363s] 3: +    for (int j = 0; j < p; ++j) {
[4.364s] 3: +      CI[i][j] = (_CI.transpose())(i, j);
[4.364s] 3: @@ -135,0 +142 @@
[4.364s] 3: +  }
[4.364s] 3: @@ -137,3 +144,3 @@
[4.364s] 3: -    for (int i = 0; i < n; ++i) {
[4.364s] 3: -        g0[i] = _g0T[i];
[4.364s] 3: -    }
[4.364s] 3: +  for (int i = 0; i < n; ++i) {
[4.364s] 3: +    g0[i] = _g0T[i];
[4.364s] 3: +  }
[4.364s] 3: @@ -141,3 +148,3 @@
[4.364s] 3: -    for (int i = 0; i < m; ++i) {
[4.364s] 3: -        ce0[i] = _ce0[i];
[4.364s] 3: -    }
[4.364s] 3: +  for (int i = 0; i < m; ++i) {
[4.364s] 3: +    ce0[i] = _ce0[i];
[4.364s] 3: +  }
[4.364s] 3: @@ -145,3 +152,3 @@
[4.365s] 3: -    for (int i = 0; i < p; ++i) {
[4.365s] 3: -        ci0[i] = _ci0[i];
[4.365s] 3: -    }
[4.365s] 3: +  for (int i = 0; i < p; ++i) {
[4.365s] 3: +    ci0[i] = _ci0[i];
[4.365s] 3: +  }
[4.365s] 3: @@ -149 +156 @@
[4.365s] 3: -    double value = solve_quadprog(G, g0, CE, ce0, CI, ci0, x);
[4.365s] 3: +  double value = solve_quadprog(G, g0, CE, ce0, CI, ci0, x);
[4.365s] 3: @@ -151,4 +158,4 @@
[4.365s] 3: -    for (int i = 0; i < n; ++i) {
[4.365s] 3: -        _F[i] = x[i];
[4.365s] 3: -    }
[4.365s] 3: -}
[4.365s] 3: +  for (int i = 0; i < n; ++i) {
[4.365s] 3: +    _F[i] = x[i];
[4.365s] 3: +  }
[4.365s] 3: +}
[4.365s] 3: 
[4.365s] 3: Code style divergence in file 'src/control/ControlFrame.cpp':
[4.365s] 3: 
[4.365s] 3: --- src/control/ControlFrame.cpp
[4.366s] 3: +++ src/control/ControlFrame.cpp.uncrustify
[4.366s] 3: @@ -6,2 +6,4 @@
[4.366s] 3: -ControlFrame::ControlFrame(CtrlComponents *ctrlComp):_ctrlComp(ctrlComp){
[4.366s] 3: -    _FSMController = new FSM(_ctrlComp);
[4.366s] 3: +ControlFrame::ControlFrame(CtrlComponents * ctrlComp)
[4.366s] 3: +: _ctrlComp(ctrlComp)
[4.366s] 3: +{
[4.366s] 3: +  _FSMController = new FSM(_ctrlComp);
[4.366s] 3: @@ -10,3 +12,4 @@
[4.366s] 3: -void ControlFrame::run(){
[4.366s] 3: -    _FSMController->run();
[4.366s] 3: -}
[4.366s] 3: +void ControlFrame::run()
[4.366s] 3: +{
[4.366s] 3: +  _FSMController->run();
[4.366s] 3: +}
[4.366s] 3: 
[4.366s] 3: Code style divergence in file 'src/control/Estimator.cpp':
[4.366s] 3: 
[4.366s] 3: --- src/control/Estimator.cpp
[4.366s] 3: +++ src/control/Estimator.cpp.uncrustify
[4.366s] 3: @@ -8,24 +8,25 @@
[4.366s] 3: -Estimator::Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, 
[4.366s] 3: -                     VecInt4 *contact, Vec4 *phase, double dt, Vec18 Qdig,
[4.367s] 3: -                     std::string testName)
[4.367s] 3: -          :_robModel(robotModel), _lowState(lowState), _contact(contact),
[4.367s] 3: -           _phase(phase), _dt(dt), _Qdig(Qdig), _estName(testName){
[4.367s] 3: -
[4.367s] 3: -    _initSystem();
[4.367s] 3: -}
[4.367s] 3: -
[4.367s] 3: -Estimator::Estimator(QuadrupedRobot *robotModel, LowlevelState* lowState, 
[4.367s] 3: -                     VecInt4 *contact, Vec4 *phase, double dt)
[4.367s] 3: -          :_robModel(robotModel), _lowState(lowState), _contact(contact), 
[4.367s] 3: -           _phase(phase), _dt(dt){
[4.367s] 3: -
[4.367s] 3: -    for(int i(0); i<_Qdig.rows(); ++i){
[4.367s] 3: -        if(i < 3){
[4.367s] 3: -            _Qdig(i) = 0.0003;
[4.367s] 3: -        }
[4.367s] 3: -        else if(i < 6){
[4.367s] 3: -            _Qdig(i) = 0.0003;
[4.367s] 3: -        }
[4.367s] 3: -        else{
[4.367s] 3: -            _Qdig(i) = 0.01;
[4.367s] 3: -        }
[4.367s] 3: +Estimator::Estimator(
[4.368s] 3: +  QuadrupedRobot * robotModel, LowlevelState * lowState,
[4.368s] 3: +  VecInt4 * contact, Vec4 * phase, double dt, Vec18 Qdig,
[4.368s] 3: +  std::string testName)
[4.368s] 3: +: _robModel(robotModel), _lowState(lowState), _contact(contact),
[4.368s] 3: +  _phase(phase), _dt(dt), _Qdig(Qdig), _estName(testName)
[4.368s] 3: +{
[4.368s] 3: +
[4.368s] 3: +  _initSystem();
[4.368s] 3: +}
[4.368s] 3: +
[4.368s] 3: +Estimator::Estimator(
[4.368s] 3: +  QuadrupedRobot * robotModel, LowlevelState * lowState,
[4.368s] 3: +  VecInt4 * contact, Vec4 * phase, double dt)
[4.368s] 3: +: _robModel(robotModel), _lowState(lowState), _contact(contact),
[4.368s] 3: +  _phase(phase), _dt(dt)
[4.368s] 3: +{
[4.368s] 3: +
[4.368s] 3: +  for (int i(0); i < _Qdig.rows(); ++i) {
[4.368s] 3: +    if (i < 3) {
[4.368s] 3: +      _Qdig(i) = 0.0003;
[4.368s] 3: +    } else if (i < 6) {
[4.368s] 3: +      _Qdig(i) = 0.0003;
[4.368s] 3: +    } else {
[4.369s] 3: +      _Qdig(i) = 0.01;
[4.369s] 3: @@ -33,86 +34,145 @@
[4.369s] 3: -
[4.369s] 3: -    _estName = "current";
[4.369s] 3: -
[4.369s] 3: -    _initSystem();
[4.369s] 3: -
[4.369s] 3: -}
[4.369s] 3: -
[4.369s] 3: -Estimator::~Estimator(){
[4.369s] 3: -}
[4.369s] 3: -
[4.369s] 3: -void Estimator::_initSystem(){
[4.369s] 3: -    _g << 0, 0, -9.81;
[4.369s] 3: -    _largeVariance = 100;
[4.369s] 3: -
[4.369s] 3: -    _xhat.setZero();
[4.369s] 3: -    _u.setZero();
[4.369s] 3: -    _A.setZero();
[4.369s] 3: -    _A.block(0, 0, 3, 3) = I3;
[4.369s] 3: -    _A.block(0, 3, 3, 3) = I3 * _dt;
[4.369s] 3: -    _A.block(3, 3, 3, 3) = I3;
[4.369s] 3: -    _A.block(6, 6, 12, 12) = I12;
[4.370s] 3: -    _B.setZero();
[4.370s] 3: -    _B.block(3, 0, 3, 3) = I3 * _dt;
[4.370s] 3: -    _C.setZero();
[4.370s] 3: -    _C.block(0, 0, 3, 3) = -I3;
[4.370s] 3: -    _C.block(3, 0, 3, 3) = -I3;
[4.370s] 3: -    _C.block(6, 0, 3, 3) = -I3;
[4.370s] 3: -    _C.block(9, 0, 3, 3) = -I3;
[4.370s] 3: -    _C.block(12, 3, 3, 3) = -I3;
[4.370s] 3: -    _C.block(15, 3, 3, 3) = -I3;
[4.370s] 3: -    _C.block(18, 3, 3, 3) = -I3;
[4.370s] 3: -    _C.block(21, 3, 3, 3) = -I3;
[4.370s] 3: -    _C.block(0, 6, 12, 12) = I12;
[4.370s] 3: -    _C(24, 8) = 1;
[4.370s] 3: -    _C(25, 11) = 1;
[4.370s] 3: -    _C(26, 14) = 1;
[4.370s] 3: -    _C(27, 17) = 1;
[4.370s] 3: -    _P.setIdentity();
[4.370s] 3: -    _P = _largeVariance * _P;
[4.370s] 3: -
[4.370s] 3: -    _RInit <<  0.008 , 0.012 ,-0.000 ,-0.009 , 0.012 , 0.000 , 0.009 ,-0.009 ,-0.000 ,-0.009 ,-0.009 , 0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 ,-0.000 ,-0.001 ,-0.002 , 0.000 ,-0.000 ,-0.003 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
[4.370s] 3: -               0.012 , 0.019 ,-0.001 ,-0.014 , 0.018 ,-0.000 , 0.014 ,-0.013 ,-0.000 ,-0.014 ,-0.014 , 0.001 ,-0.001 , 0.001 ,-0.001 , 0.000 , 0.000 ,-0.001 ,-0.003 , 0.000 ,-0.001 ,-0.004 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
[4.370s] 3: -               -0.000, -0.001,  0.001,  0.001, -0.001,  0.000, -0.000,  0.000, -0.000,  0.001,  0.000, -0.000,  0.000, -0.000,  0.000,  0.000, -0.000, -0.000,  0.000, -0.000, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,  0.000,  0.000,
[4.370s] 3: -               -0.009, -0.014,  0.001,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001,  0.000,  0.000,  0.001, -0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               0.012 , 0.018 ,-0.001 ,-0.013 , 0.018 ,-0.000 , 0.013 ,-0.013 ,-0.000 ,-0.013 ,-0.013 , 0.001 ,-0.001 , 0.000 ,-0.001 , 0.000 , 0.001 ,-0.001 ,-0.003 , 0.000 ,-0.001 ,-0.004 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 , 0.001 , 0.000 , 0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               0.009 , 0.014 ,-0.000 ,-0.010 , 0.013 , 0.000 , 0.010 ,-0.010 ,-0.000 ,-0.010 ,-0.010 , 0.000 ,-0.001 , 0.000 ,-0.001 , 0.000 ,-0.000 ,-0.001 ,-0.001 , 0.000 ,-0.000 ,-0.003 ,-0.000 ,-0.001 , 0.000 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               -0.009, -0.013,  0.000,  0.010, -0.013,  0.000, -0.010,  0.009,  0.000,  0.010,  0.010, -0.000,  0.001, -0.000,  0.000, -0.000,  0.000,  0.001,  0.002,  0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.000, -0.000, -0.000,  0.000, -0.000, -0.000, -0.000,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000,  0.000, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.009, -0.014,  0.001,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001,  0.000,  0.000, -0.000, -0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.000,  0.001,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.009, -0.014,  0.000,  0.010, -0.013,  0.000, -0.010,  0.010,  0.000,  0.010,  0.010, -0.000,  0.001, -0.000,  0.000, -0.000,  0.000,  0.001,  0.002, -0.000,  0.000,  0.003,  0.001,  0.001,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               0.000 , 0.001 ,-0.000 ,-0.000 , 0.001 ,-0.000 , 0.000 ,-0.000 , 0.000 ,-0.000 ,-0.000 , 0.001 , 0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               -0.000, -0.001,  0.000,  0.001, -0.001, -0.000, -0.001,  0.001,  0.000,  0.001,  0.001,  0.000,  1.708,  0.048,  0.784,  0.062,  0.042,  0.053,  0.077,  0.001, -0.061,  0.046, -0.019, -0.029,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               0.000 , 0.001 ,-0.000 , 0.000 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 ,-0.000 , 0.048 , 5.001 ,-1.631 ,-0.036 , 0.144 , 0.040 , 0.036 , 0.016 ,-0.051 ,-0.067 ,-0.024 ,-0.005 , 0.000 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               -0.000, -0.001,  0.000,  0.000, -0.001, -0.000, -0.001,  0.000,  0.000,  0.000,  0.000, -0.000,  0.784, -1.631,  1.242,  0.057, -0.037,  0.018,  0.034, -0.017, -0.015,  0.058, -0.021, -0.029,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               0.000 , 0.000 , 0.000 , 0.001 , 0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 ,-0.000 , 0.062 ,-0.036 , 0.057 , 6.228 ,-0.014 , 0.932 , 0.059 , 0.053 ,-0.069 , 0.148 , 0.015 ,-0.031 , 0.000 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               -0.000,  0.000, -0.000, -0.000,  0.001,  0.000, -0.000,  0.000,  0.000, -0.000,  0.000,  0.000,  0.042,  0.144, -0.037, -0.014,  3.011,  0.986,  0.076,  0.030, -0.052, -0.027,  0.057,  0.051,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.001, -0.001, -0.000,  0.001, -0.001,  0.000, -0.001,  0.001, -0.000,  0.001,  0.001,  0.000,  0.053,  0.040,  0.018,  0.932,  0.986,  0.885,  0.090,  0.044, -0.055,  0.057,  0.051, -0.003,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.002, -0.003,  0.000,  0.002, -0.003, -0.000, -0.001,  0.002,  0.000,  0.002,  0.002, -0.000,  0.077,  0.036,  0.034,  0.059,  0.076,  0.090,  6.230,  0.139,  0.763,  0.013, -0.019, -0.024,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               0.000 , 0.000 ,-0.000 ,-0.000 , 0.000 ,-0.000 , 0.000 , 0.000 ,-0.000 ,-0.000 ,-0.000 , 0.000 , 0.001 , 0.016 ,-0.017 , 0.053 , 0.030 , 0.044 , 0.139 , 3.130 ,-1.128 ,-0.010 , 0.131 , 0.018 , 0.000 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               -0.000, -0.001, -0.000,  0.000, -0.001, -0.000, -0.000,  0.000,  0.000,  0.000,  0.000,  0.000, -0.061, -0.051, -0.015, -0.069, -0.052, -0.055,  0.763, -1.128,  0.866, -0.022, -0.053,  0.007,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.003, -0.004, -0.000,  0.003, -0.004, -0.000, -0.003,  0.003,  0.000,  0.003,  0.003,  0.000,  0.046, -0.067,  0.058,  0.148, -0.027,  0.057,  0.013, -0.010, -0.022,  2.437, -0.102,  0.938,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.000, -0.000,  0.000,  0.000, -0.000,  0.000, -0.000,  0.000, -0.000,  0.000,  0.001,  0.000, -0.019, -0.024, -0.021,  0.015,  0.057,  0.051, -0.019,  0.131, -0.053, -0.102,  4.944,  1.724,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               -0.001, -0.001,  0.000,  0.001, -0.001,  0.000, -0.001,  0.001, -0.000,  0.001,  0.001,  0.000, -0.029, -0.005, -0.029, -0.031,  0.051, -0.003, -0.024,  0.018,  0.007,  0.938,  1.724,  1.569,  0.000,  0.000,  0.000,  0.000,
[4.371s] 3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000 , 0.000 , 0.000,
[4.371s] 3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000 , 0.000,
[4.371s] 3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0 , 0.000,
[4.372s] 3: -               0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 0.000 , 1.0;
[4.372s] 3: -
[4.372s] 3: -    /* A1 Worked */
[4.372s] 3: -    _Cu <<   268.573,  -43.819, -147.211,
[4.372s] 3: -            -43.819 ,  92.949 ,  58.082,
[4.372s] 3: -            -147.211,   58.082,  302.120;
[4.372s] 3: -
[4.372s] 3: -    _QInit = _Qdig.asDiagonal();
[4.372s] 3: -    _QInit +=  _B * _Cu * _B.transpose();
[4.372s] 3: -
[4.372s] 3: -    _RCheck  = new AvgCov(28, _estName + " R");
[4.372s] 3: -    _uCheck  = new AvgCov(3,  _estName + " u");
[4.372s] 3: -
[4.372s] 3: -    _vxFilter = new LPFilter(_dt, 3.0);
[4.372s] 3: -    _vyFilter = new LPFilter(_dt, 3.0);
[4.372s] 3: -    _vzFilter = new LPFilter(_dt, 3.0);
[4.372s] 3: -
[4.372s] 3: -
[4.372s] 3: -    /* ROS odometry publisher */
[4.372s] 3: +  }
[4.372s] 3: +
[4.372s] 3: +  _estName = "current";
[4.372s] 3: +
[4.372s] 3: +  _initSystem();
[4.373s] 3: +
[4.373s] 3: +}
[4.373s] 3: +
[4.373s] 3: +Estimator::~Estimator()
[4.373s] 3: +{
[4.373s] 3: +}
[4.373s] 3: +
[4.373s] 3: +void Estimator::_initSystem()
[4.373s] 3: +{
[4.373s] 3: +  _g << 0, 0, -9.81;
[4.373s] 3: +  _largeVariance = 100;
[4.373s] 3: +
[4.373s] 3: +  _xhat.setZero();
[4.373s] 3: +  _u.setZero();
[4.373s] 3: +  _A.setZero();
[4.373s] 3: +  _A.block(0, 0, 3, 3) = I3;
[4.373s] 3: +  _A.block(0, 3, 3, 3) = I3 * _dt;
[4.373s] 3: +  _A.block(3, 3, 3, 3) = I3;
[4.373s] 3: +  _A.block(6, 6, 12, 12) = I12;
[4.373s] 3: +  _B.setZero();
[4.373s] 3: +  _B.block(3, 0, 3, 3) = I3 * _dt;
[4.373s] 3: +  _C.setZero();
[4.373s] 3: +  _C.block(0, 0, 3, 3) = -I3;
[4.374s] 3: +  _C.block(3, 0, 3, 3) = -I3;
[4.374s] 3: +  _C.block(6, 0, 3, 3) = -I3;
[4.374s] 3: +  _C.block(9, 0, 3, 3) = -I3;
[4.374s] 3: +  _C.block(12, 3, 3, 3) = -I3;
[4.374s] 3: +  _C.block(15, 3, 3, 3) = -I3;
[4.374s] 3: +  _C.block(18, 3, 3, 3) = -I3;
[4.374s] 3: +  _C.block(21, 3, 3, 3) = -I3;
[4.374s] 3: +  _C.block(0, 6, 12, 12) = I12;
[4.374s] 3: +  _C(24, 8) = 1;
[4.374s] 3: +  _C(25, 11) = 1;
[4.374s] 3: +  _C(26, 14) = 1;
[4.374s] 3: +  _C(27, 17) = 1;
[4.374s] 3: +  _P.setIdentity();
[4.374s] 3: +  _P = _largeVariance * _P;
[4.374s] 3: +
[4.374s] 3: +  _RInit << 0.008, 0.012, -0.000, -0.009, 0.012, 0.000, 0.009, -0.009, -0.000, -0.009, -0.009,
[4.374s] 3: +    0.000, -0.000, 0.000, -0.000, 0.000, -0.000, -0.001, -0.002, 0.000, -0.000, -0.003, -0.000,
[4.374s] 3: +    -0.001, 0.000, 0.000, 0.000, 0.000,
[4.374s] 3: +    0.012, 0.019, -0.001, -0.014, 0.018, -0.000, 0.014, -0.013, -0.000, -0.014, -0.014, 0.001,
[4.374s] 3: +    -0.001, 0.001, -0.001, 0.000, 0.000, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001,
[4.374s] 3: +    0.000, 0.000, 0.000, 0.000,
[4.374s] 3: +    -0.000, -0.001, 0.001, 0.001, -0.001, 0.000, -0.000, 0.000, -0.000, 0.001, 0.000, -0.000, 0.000,
[4.374s] 3: +    -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000,
[4.375s] 3: +    0.000, 0.000,
[4.375s] 3: +    -0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001,
[4.375s] 3: +    0.000, 0.000, 0.001, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000,
[4.375s] 3: +    0.000, 0.000,
[4.375s] 3: +    0.012, 0.018, -0.001, -0.013, 0.018, -0.000, 0.013, -0.013, -0.000, -0.013, -0.013, 0.001,
[4.375s] 3: +    -0.001, 0.000, -0.001, 0.000, 0.001, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001,
[4.375s] 3: +    0.000, 0.000, 0.000, 0.000,
[4.375s] 3: +    0.000, -0.000, 0.000, 0.000, -0.000, 0.001, 0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000,
[4.375s] 3: +    0.000, -0.000, 0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000,
[4.375s] 3: +    0.000, 0.000,
[4.375s] 3: +    0.009, 0.014, -0.000, -0.010, 0.013, 0.000, 0.010, -0.010, -0.000, -0.010, -0.010, 0.000,
[4.375s] 3: +    -0.001, 0.000, -0.001, 0.000, -0.000, -0.001, -0.001, 0.000, -0.000, -0.003, -0.000, -0.001,
[4.375s] 3: +    0.000, 0.000, 0.000, 0.000,
[4.375s] 3: +    -0.009, -0.013, 0.000, 0.010, -0.013, 0.000, -0.010, 0.009, 0.000, 0.010, 0.010, -0.000, 0.001,
[4.375s] 3: +    -0.000, 0.000, -0.000, 0.000, 0.001, 0.002, 0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000,
[4.375s] 3: +    0.000, 0.000,
[4.375s] 3: +    -0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
[4.375s] 3: +    -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, 0.000,
[4.375s] 3: +    0.000, 0.000,
[4.375s] 3: +    -0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001,
[4.375s] 3: +    0.000, 0.000, -0.000, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000,
[4.375s] 3: +    0.000, 0.000,
[4.375s] 3: +    -0.009, -0.014, 0.000, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001,
[4.376s] 3: +    -0.000, 0.000, -0.000, 0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.001, 0.001, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.376s] 3: +    0.000, 0.001, -0.000, -0.000, 0.001, -0.000, 0.000, -0.000, 0.000, -0.000, -0.000, 0.001, 0.000,
[4.376s] 3: +    -0.000, -0.000, -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.376s] 3: +    -0.000, -0.001, 0.000, 0.001, -0.001, -0.000, -0.001, 0.001, 0.000, 0.001, 0.001, 0.000, 1.708,
[4.376s] 3: +    0.048, 0.784, 0.062, 0.042, 0.053, 0.077, 0.001, -0.061, 0.046, -0.019, -0.029, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.376s] 3: +    0.000, 0.001, -0.000, 0.000, 0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, -0.000, 0.048,
[4.376s] 3: +    5.001, -1.631, -0.036, 0.144, 0.040, 0.036, 0.016, -0.051, -0.067, -0.024, -0.005, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.376s] 3: +    -0.000, -0.001, 0.000, 0.000, -0.001, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000, -0.000, 0.784,
[4.376s] 3: +    -1.631, 1.242, 0.057, -0.037, 0.018, 0.034, -0.017, -0.015, 0.058, -0.021, -0.029, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.376s] 3: +    0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, -0.000, 0.062,
[4.376s] 3: +    -0.036, 0.057, 6.228, -0.014, 0.932, 0.059, 0.053, -0.069, 0.148, 0.015, -0.031, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.376s] 3: +    -0.000, 0.000, -0.000, -0.000, 0.001, 0.000, -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.042,
[4.376s] 3: +    0.144, -0.037, -0.014, 3.011, 0.986, 0.076, 0.030, -0.052, -0.027, 0.057, 0.051, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.376s] 3: +    -0.001, -0.001, -0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, 0.053,
[4.376s] 3: +    0.040, 0.018, 0.932, 0.986, 0.885, 0.090, 0.044, -0.055, 0.057, 0.051, -0.003, 0.000, 0.000,
[4.376s] 3: +    0.000, 0.000,
[4.377s] 3: +    -0.002, -0.003, 0.000, 0.002, -0.003, -0.000, -0.001, 0.002, 0.000, 0.002, 0.002, -0.000, 0.077,
[4.377s] 3: +    0.036, 0.034, 0.059, 0.076, 0.090, 6.230, 0.139, 0.763, 0.013, -0.019, -0.024, 0.000, 0.000,
[4.377s] 3: +    0.000, 0.000,
[4.377s] 3: +    0.000, 0.000, -0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001,
[4.377s] 3: +    0.016, -0.017, 0.053, 0.030, 0.044, 0.139, 3.130, -1.128, -0.010, 0.131, 0.018, 0.000, 0.000,
[4.377s] 3: +    0.000, 0.000,
[4.377s] 3: +    -0.000, -0.001, -0.000, 0.000, -0.001, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
[4.377s] 3: +    -0.061, -0.051, -0.015, -0.069, -0.052, -0.055, 0.763, -1.128, 0.866, -0.022, -0.053, 0.007,
[4.377s] 3: +    0.000, 0.000, 0.000, 0.000,
[4.377s] 3: +    -0.003, -0.004, -0.000, 0.003, -0.004, -0.000, -0.003, 0.003, 0.000, 0.003, 0.003, 0.000, 0.046,
[4.377s] 3: +    -0.067, 0.058, 0.148, -0.027, 0.057, 0.013, -0.010, -0.022, 2.437, -0.102, 0.938, 0.000, 0.000,
[4.377s] 3: +    0.000, 0.000,
[4.377s] 3: +    -0.000, -0.000, 0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.001, 0.000, -0.019,
[4.377s] 3: +    -0.024, -0.021, 0.015, 0.057, 0.051, -0.019, 0.131, -0.053, -0.102, 4.944, 1.724, 0.000, 0.000,
[4.377s] 3: +    0.000, 0.000,
[4.377s] 3: +    -0.001, -0.001, 0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, -0.029,
[4.377s] 3: +    -0.005, -0.029, -0.031, 0.051, -0.003, -0.024, 0.018, 0.007, 0.938, 1.724, 1.569, 0.000, 0.000,
[4.377s] 3: +    0.000, 0.000,
[4.377s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
[4.377s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000, 0.000,
[4.377s] 3: +    0.000,
[4.378s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
[4.378s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000,
[4.378s] 3: +    0.000,
[4.378s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
[4.378s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0,
[4.378s] 3: +    0.000,
[4.378s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
[4.378s] 3: +    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
[4.378s] 3: +    0.000, 1.0;
[4.378s] 3: +
[4.378s] 3: +  /* A1 Worked */
[4.378s] 3: +  _Cu << 268.573, -43.819, -147.211,
[4.378s] 3: +    -43.819, 92.949, 58.082,
[4.378s] 3: +    -147.211, 58.082, 302.120;
[4.378s] 3: +
[4.378s] 3: +  _QInit = _Qdig.asDiagonal();
[4.378s] 3: +  _QInit += _B * _Cu * _B.transpose();
[4.378s] 3: +
[4.378s] 3: +  _RCheck = new AvgCov(28, _estName + " R");
[4.378s] 3: +  _uCheck = new AvgCov(3, _estName + " u");
[4.378s] 3: +
[4.378s] 3: +  _vxFilter = new LPFilter(_dt, 3.0);
[4.379s] 3: +  _vyFilter = new LPFilter(_dt, 3.0);
[4.379s] 3: +  _vzFilter = new LPFilter(_dt, 3.0);
[4.379s] 3: +
[4.379s] 3: +
[4.379s] 3: +  /* ROS odometry publisher */
[4.379s] 3: @@ -120 +180 @@
[4.379s] 3: -        _pub = _nh.advertise<nav_msgs::Odometry>("odom", 1);
[4.379s] 3: +  _pub = _nh.advertise<nav_msgs::Odometry>("odom", 1);
[4.379s] 3: @@ -124,3 +184,3 @@
[4.379s] 3: -        _nh = rclcpp::Node::make_shared("estimator");
[4.379s] 3: -        _pub = _nh->create_publisher<nav_msgs::msg::Odometry>("odom", 1);
[4.379s] 3: -        _odomBroadcaster = std::make_shared<tf2_ros::TransformBroadcaster>(_nh); 
[4.379s] 3: +  _nh = rclcpp::Node::make_shared("estimator");
[4.379s] 3: +  _pub = _nh->create_publisher<nav_msgs::msg::Odometry>("odom", 1);
[4.379s] 3: +  _odomBroadcaster = std::make_shared<tf2_ros::TransformBroadcaster>(_nh);
[4.379s] 3: @@ -130,22 +190,21 @@
[4.379s] 3: -void Estimator::run(){
[4.379s] 3: -    _feetH.setZero();
[4.379s] 3: -    _feetPosGlobalKine = _robModel->getFeet2BPositions(*_lowState, FrameType::GLOBAL);
[4.379s] 3: -    _feetVelGlobalKine = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
[4.379s] 3: -
[4.379s] 3: -    _Q = _QInit;
[4.379s] 3: -    _R = _RInit;
[4.379s] 3: -
[4.380s] 3: -    for(int i(0); i < 4; ++i){
[4.380s] 3: -        if((*_contact)(i) == 0){
[4.380s] 3: -            _Q.block(6+3*i, 6+3*i, 3, 3) = _largeVariance * I3;
[4.380s] 3: -            _R.block(12+3*i, 12+3*i, 3, 3) = _largeVariance * I3;
[4.380s] 3: -            _R(24+i, 24+i) = _largeVariance;
[4.380s] 3: -        }
[4.380s] 3: -        else{
[4.380s] 3: -            _trust = windowFunc((*_phase)(i), 0.2);
[4.380s] 3: -            _Q.block(6+3*i, 6+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _QInit.block(6+3*i, 6+3*i, 3, 3);
[4.380s] 3: -            _R.block(12+3*i, 12+3*i, 3, 3) = (1 + (1-_trust)*_largeVariance) * _RInit.block(12+3*i, 12+3*i, 3, 3);
[4.380s] 3: -            _R(24+i, 24+i) = (1 + (1-_trust)*_largeVariance) * _RInit(24+i, 24+i);
[4.380s] 3: -        }
[4.380s] 3: -        _feetPos2Body.segment(3*i, 3) = _feetPosGlobalKine.col(i);
[4.380s] 3: -        _feetVel2Body.segment(3*i, 3) = _feetVelGlobalKine.col(i);
[4.380s] 3: +void Estimator::run()
[4.380s] 3: +{
[4.380s] 3: +  _feetH.setZero();
[4.380s] 3: +  _feetPosGlobalKine = _robModel->getFeet2BPositions(*_lowState, FrameType::GLOBAL);
[4.380s] 3: +  _feetVelGlobalKine = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
[4.381s] 3: +
[4.381s] 3: +  _Q = _QInit;
[4.381s] 3: +  _R = _RInit;
[4.381s] 3: +
[4.381s] 3: +  for (int i(0); i < 4; ++i) {
[4.381s] 3: +    if ((*_contact)(i) == 0) {
[4.381s] 3: +      _Q.block(6 + 3 * i, 6 + 3 * i, 3, 3) = _largeVariance * I3;
[4.381s] 3: +      _R.block(12 + 3 * i, 12 + 3 * i, 3, 3) = _largeVariance * I3;
[4.381s] 3: +      _R(24 + i, 24 + i) = _largeVariance;
[4.381s] 3: +    } else {
[4.381s] 3: +      _trust = windowFunc((*_phase)(i), 0.2);
[4.381s] 3: +      _Q.block(6 + 3 * i, 6 + 3 * i, 3, 3) = (1 + (1 - _trust) * _largeVariance) * _QInit.block(
[4.381s] 3: +        6 + 3 * i, 6 + 3 * i, 3, 3);
[4.381s] 3: +      _R.block(12 + 3 * i, 12 + 3 * i, 3, 3) = (1 + (1 - _trust) * _largeVariance) * _RInit.block(
[4.381s] 3: +        12 + 3 * i, 12 + 3 * i, 3, 3);
[4.381s] 3: +      _R(24 + i, 24 + i) = (1 + (1 - _trust) * _largeVariance) * _RInit(24 + i, 24 + i);
[4.381s] 3: @@ -153,23 +212,26 @@
[4.381s] 3: -
[4.381s] 3: -    _rotMatB2G = _lowState->getRotMat();
[4.381s] 3: -    _u = _rotMatB2G * _lowState->getAcc() + _g;
[4.381s] 3: -    _xhat = _A * _xhat + _B * _u;
[4.382s] 3: -    _yhat = _C * _xhat;
[4.382s] 3: -    _y << _feetPos2Body, _feetVel2Body, _feetH;
[4.382s] 3: -
[4.382s] 3: -    _Ppriori = _A * _P * _A.transpose() + _Q;
[4.382s] 3: -    _S =  _R + _C * _Ppriori * _C.transpose();
[4.382s] 3: -    _Slu = _S.lu();
[4.382s] 3: -    _Sy = _Slu.solve(_y - _yhat);
[4.382s] 3: -    _Sc = _Slu.solve(_C);
[4.382s] 3: -    _SR = _Slu.solve(_R);
[4.382s] 3: -    _STC = (_S.transpose()).lu().solve(_C);
[4.382s] 3: -    _IKC = I18 - _Ppriori*_C.transpose()*_Sc;
[4.382s] 3: -
[4.382s] 3: -    _xhat += _Ppriori * _C.transpose() * _Sy;
[4.382s] 3: -    _P =  _IKC * _Ppriori * _IKC.transpose()
[4.382s] 3: -        + _Ppriori * _C.transpose() * _SR * _STC * _Ppriori.transpose();
[4.382s] 3: -
[4.382s] 3: -    _vxFilter->addValue(_xhat(3));
[4.382s] 3: -    _vyFilter->addValue(_xhat(4));
[4.382s] 3: -    _vzFilter->addValue(_xhat(5));
[4.382s] 3: +    _feetPos2Body.segment(3 * i, 3) = _feetPosGlobalKine.col(i);
[4.382s] 3: +    _feetVel2Body.segment(3 * i, 3) = _feetVelGlobalKine.col(i);
[4.382s] 3: +  }
[4.382s] 3: +
[4.383s] 3: +  _rotMatB2G = _lowState->getRotMat();
[4.383s] 3: +  _u = _rotMatB2G * _lowState->getAcc() + _g;
[4.383s] 3: +  _xhat = _A * _xhat + _B * _u;
[4.383s] 3: +  _yhat = _C * _xhat;
[4.383s] 3: +  _y << _feetPos2Body, _feetVel2Body, _feetH;
[4.383s] 3: +
[4.383s] 3: +  _Ppriori = _A * _P * _A.transpose() + _Q;
[4.383s] 3: +  _S = _R + _C * _Ppriori * _C.transpose();
[4.383s] 3: +  _Slu = _S.lu();
[4.383s] 3: +  _Sy = _Slu.solve(_y - _yhat);
[4.383s] 3: +  _Sc = _Slu.solve(_C);
[4.383s] 3: +  _SR = _Slu.solve(_R);
[4.383s] 3: +  _STC = (_S.transpose()).lu().solve(_C);
[4.383s] 3: +  _IKC = I18 - _Ppriori * _C.transpose() * _Sc;
[4.383s] 3: +
[4.383s] 3: +  _xhat += _Ppriori * _C.transpose() * _Sy;
[4.383s] 3: +  _P = _IKC * _Ppriori * _IKC.transpose() +
[4.383s] 3: +    _Ppriori * _C.transpose() * _SR * _STC * _Ppriori.transpose();
[4.383s] 3: +
[4.383s] 3: +  _vxFilter->addValue(_xhat(3));
[4.383s] 3: +  _vyFilter->addValue(_xhat(4));
[4.383s] 3: +  _vzFilter->addValue(_xhat(5));
[4.383s] 3: @@ -178,46 +240,46 @@
[4.384s] 3: -        if(_count % ((int)( 1.0/(_dt*_pubFreq))) == 0){
[4.384s] 3: -            _currentTime = ros::Time::now();
[4.384s] 3: -            /* tf */
[4.384s] 3: -            _odomTF.header.stamp = _currentTime;
[4.384s] 3: -            _odomTF.header.frame_id = "odom";
[4.384s] 3: -            _odomTF.child_frame_id  = "base_link";
[4.384s] 3: -
[4.384s] 3: -            _odomTF.transform.translation.x = _xhat(0);
[4.384s] 3: -            _odomTF.transform.translation.y = _xhat(1);
[4.384s] 3: -            _odomTF.transform.translation.z = _xhat(2);
[4.384s] 3: -            _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];
[4.384s] 3: -            _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];
[4.384s] 3: -            _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];
[4.384s] 3: -            _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];
[4.384s] 3: -
[4.384s] 3: -            _odomBroadcaster.sendTransform(_odomTF);
[4.384s] 3: -
[4.384s] 3: -            /* odometry */
[4.384s] 3: -            _odomMsg.header.stamp = _currentTime;
[4.384s] 3: -            _odomMsg.header.frame_id = "odom";
[4.384s] 3: -
[4.385s] 3: -            _odomMsg.pose.pose.position.x = _xhat(0);
[4.385s] 3: -            _odomMsg.pose.pose.position.y = _xhat(1);
[4.385s] 3: -            _odomMsg.pose.pose.position.z = _xhat(2);
[4.385s] 3: -
[4.385s] 3: -            _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];
[4.385s] 3: -            _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];
[4.385s] 3: -            _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];
[4.385s] 3: -            _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];
[4.385s] 3: -            _odomMsg.pose.covariance = _odom_pose_covariance;
[4.385s] 3: -
[4.385s] 3: -            _odomMsg.child_frame_id = "base_link";
[4.385s] 3: -            _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);
[4.385s] 3: -            _wBody   = _lowState->imu.getGyro();
[4.385s] 3: -            _odomMsg.twist.twist.linear.x = _velBody(0);
[4.385s] 3: -            _odomMsg.twist.twist.linear.y = _velBody(1);
[4.385s] 3: -            _odomMsg.twist.twist.linear.z = _velBody(2);
[4.385s] 3: -            _odomMsg.twist.twist.angular.x = _wBody(0);
[4.385s] 3: -            _odomMsg.twist.twist.angular.y = _wBody(1);
[4.385s] 3: -            _odomMsg.twist.twist.angular.z = _wBody(2);
[4.385s] 3: -            _odomMsg.twist.covariance = _odom_twist_covariance;
[4.385s] 3: -
[4.385s] 3: -            _pub.publish(_odomMsg);
[4.386s] 3: -            _count = 1;
[4.386s] 3: -        }
[4.386s] 3: -        ++_count;
[4.386s] 3: +  if (_count % ((int)( 1.0 / (_dt * _pubFreq))) == 0) {
[4.386s] 3: +    _currentTime = ros::Time::now();
[4.386s] 3: +    /* tf */
[4.386s] 3: +    _odomTF.header.stamp = _currentTime;
[4.386s] 3: +    _odomTF.header.frame_id = "odom";
[4.386s] 3: +    _odomTF.child_frame_id = "base_link";
[4.386s] 3: +
[4.386s] 3: +    _odomTF.transform.translation.x = _xhat(0);
[4.386s] 3: +    _odomTF.transform.translation.y = _xhat(1);
[4.386s] 3: +    _odomTF.transform.translation.z = _xhat(2);
[4.386s] 3: +    _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];
[4.386s] 3: +    _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];
[4.386s] 3: +    _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];
[4.386s] 3: +    _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];
[4.386s] 3: +
[4.386s] 3: +    _odomBroadcaster.sendTransform(_odomTF);
[4.386s] 3: +
[4.386s] 3: +    /* odometry */
[4.386s] 3: +    _odomMsg.header.stamp = _currentTime;
[4.386s] 3: +    _odomMsg.header.frame_id = "odom";
[4.387s] 3: +
[4.387s] 3: +    _odomMsg.pose.pose.position.x = _xhat(0);
[4.387s] 3: +    _odomMsg.pose.pose.position.y = _xhat(1);
[4.387s] 3: +    _odomMsg.pose.pose.position.z = _xhat(2);
[4.387s] 3: +
[4.387s] 3: +    _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];
[4.387s] 3: +    _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];
[4.387s] 3: +    _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];
[4.387s] 3: +    _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];
[4.387s] 3: +    _odomMsg.pose.covariance = _odom_pose_covariance;
[4.387s] 3: +
[4.387s] 3: +    _odomMsg.child_frame_id = "base_link";
[4.387s] 3: +    _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);
[4.387s] 3: +    _wBody = _lowState->imu.getGyro();
[4.387s] 3: +    _odomMsg.twist.twist.linear.x = _velBody(0);
[4.387s] 3: +    _odomMsg.twist.twist.linear.y = _velBody(1);
[4.387s] 3: +    _odomMsg.twist.twist.linear.z = _velBody(2);
[4.387s] 3: +    _odomMsg.twist.twist.angular.x = _wBody(0);
[4.387s] 3: +    _odomMsg.twist.twist.angular.y = _wBody(1);
[4.387s] 3: +    _odomMsg.twist.twist.angular.z = _wBody(2);
[4.387s] 3: +    _odomMsg.twist.covariance = _odom_twist_covariance;
[4.387s] 3: +
[4.387s] 3: +    _pub.publish(_odomMsg);
[4.388s] 3: +    _count = 1;
[4.388s] 3: +  }
[4.388s] 3: +  ++_count;
[4.388s] 3: @@ -227,46 +289,46 @@
[4.388s] 3: -        if(_count % ((int)( 1.0/(_dt*_pubFreq))) == 0){
[4.388s] 3: -            _currentTime = _nh->get_clock()->now();
[4.388s] 3: -            /* tf */
[4.388s] 3: -            _odomTF.header.stamp = _currentTime;
[4.388s] 3: -            _odomTF.header.frame_id = "odom";
[4.388s] 3: -            _odomTF.child_frame_id  = "base";
[4.388s] 3: -
[4.388s] 3: -            _odomTF.transform.translation.x = _xhat(0);
[4.388s] 3: -            _odomTF.transform.translation.y = _xhat(1);
[4.388s] 3: -            _odomTF.transform.translation.z = _xhat(2);
[4.388s] 3: -            _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];
[4.388s] 3: -            _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];
[4.388s] 3: -            _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];
[4.388s] 3: -            _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];
[4.388s] 3: -
[4.388s] 3: -            // _odomBroadcaster->sendTransform(_odomTF);
[4.388s] 3: -
[4.388s] 3: -            /* odometry */
[4.388s] 3: -            _odomMsg.header.stamp = _currentTime;
[4.389s] 3: -            _odomMsg.header.frame_id = "odom";
[4.389s] 3: -
[4.389s] 3: -            _odomMsg.pose.pose.position.x = _xhat(0);
[4.389s] 3: -            _odomMsg.pose.pose.position.y = _xhat(1);
[4.389s] 3: -            _odomMsg.pose.pose.position.z = _xhat(2);
[4.389s] 3: -
[4.389s] 3: -            _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];
[4.389s] 3: -            _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];
[4.389s] 3: -            _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];
[4.389s] 3: -            _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];
[4.389s] 3: -            _odomMsg.pose.covariance = _odom_pose_covariance;
[4.389s] 3: -
[4.389s] 3: -            _odomMsg.child_frame_id = "base";
[4.389s] 3: -            _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);
[4.389s] 3: -            _wBody   = _lowState->imu.getGyro();
[4.389s] 3: -            _odomMsg.twist.twist.linear.x = _velBody(0);
[4.389s] 3: -            _odomMsg.twist.twist.linear.y = _velBody(1);
[4.389s] 3: -            _odomMsg.twist.twist.linear.z = _velBody(2);
[4.389s] 3: -            _odomMsg.twist.twist.angular.x = _wBody(0);
[4.389s] 3: -            _odomMsg.twist.twist.angular.y = _wBody(1);
[4.389s] 3: -            _odomMsg.twist.twist.angular.z = _wBody(2);
[4.389s] 3: -            _odomMsg.twist.covariance = _odom_twist_covariance;
[4.389s] 3: -
[4.390s] 3: -            // _pub->publish(_odomMsg);
[4.390s] 3: -            _count = 1;
[4.390s] 3: -        }
[4.390s] 3: -        ++_count;
[4.390s] 3: +  if (_count % ((int)( 1.0 / (_dt * _pubFreq))) == 0) {
[4.390s] 3: +    _currentTime = _nh->get_clock()->now();
[4.390s] 3: +    /* tf */
[4.390s] 3: +    _odomTF.header.stamp = _currentTime;
[4.390s] 3: +    _odomTF.header.frame_id = "odom";
[4.390s] 3: +    _odomTF.child_frame_id = "base";
[4.390s] 3: +
[4.390s] 3: +    _odomTF.transform.translation.x = _xhat(0);
[4.390s] 3: +    _odomTF.transform.translation.y = _xhat(1);
[4.390s] 3: +    _odomTF.transform.translation.z = _xhat(2);
[4.390s] 3: +    _odomTF.transform.rotation.w = _lowState->imu.quaternion[0];
[4.390s] 3: +    _odomTF.transform.rotation.x = _lowState->imu.quaternion[1];
[4.390s] 3: +    _odomTF.transform.rotation.y = _lowState->imu.quaternion[2];
[4.390s] 3: +    _odomTF.transform.rotation.z = _lowState->imu.quaternion[3];
[4.390s] 3: +
[4.390s] 3: +    // _odomBroadcaster->sendTransform(_odomTF);
[4.390s] 3: +
[4.390s] 3: +    /* odometry */
[4.390s] 3: +    _odomMsg.header.stamp = _currentTime;
[4.390s] 3: +    _odomMsg.header.frame_id = "odom";
[4.391s] 3: +
[4.391s] 3: +    _odomMsg.pose.pose.position.x = _xhat(0);
[4.391s] 3: +    _odomMsg.pose.pose.position.y = _xhat(1);
[4.391s] 3: +    _odomMsg.pose.pose.position.z = _xhat(2);
[4.391s] 3: +
[4.391s] 3: +    _odomMsg.pose.pose.orientation.w = _lowState->imu.quaternion[0];
[4.391s] 3: +    _odomMsg.pose.pose.orientation.x = _lowState->imu.quaternion[1];
[4.391s] 3: +    _odomMsg.pose.pose.orientation.y = _lowState->imu.quaternion[2];
[4.391s] 3: +    _odomMsg.pose.pose.orientation.z = _lowState->imu.quaternion[3];
[4.391s] 3: +    _odomMsg.pose.covariance = _odom_pose_covariance;
[4.391s] 3: +
[4.391s] 3: +    _odomMsg.child_frame_id = "base";
[4.391s] 3: +    _velBody = _rotMatB2G.transpose() * _xhat.segment(3, 3);
[4.391s] 3: +    _wBody = _lowState->imu.getGyro();
[4.391s] 3: +    _odomMsg.twist.twist.linear.x = _velBody(0);
[4.391s] 3: +    _odomMsg.twist.twist.linear.y = _velBody(1);
[4.391s] 3: +    _odomMsg.twist.twist.linear.z = _velBody(2);
[4.391s] 3: +    _odomMsg.twist.twist.angular.x = _wBody(0);
[4.391s] 3: +    _odomMsg.twist.twist.angular.y = _wBody(1);
[4.391s] 3: +    _odomMsg.twist.twist.angular.z = _wBody(2);
[4.391s] 3: +    _odomMsg.twist.covariance = _odom_twist_covariance;
[4.391s] 3: +
[4.391s] 3: +    // _pub->publish(_odomMsg);
[4.392s] 3: +    _count = 1;
[4.392s] 3: +  }
[4.392s] 3: +  ++_count;
[4.392s] 3: @@ -276,36 +338,43 @@
[4.392s] 3: -Vec3 Estimator::getPosition(){
[4.392s] 3: -    return _xhat.segment(0, 3);
[4.392s] 3: -}
[4.392s] 3: -
[4.392s] 3: -Vec3 Estimator::getVelocity(){
[4.392s] 3: -    return _xhat.segment(3, 3);
[4.392s] 3: -}
[4.392s] 3: -
[4.392s] 3: -Vec3 Estimator::getFootPos(int i){
[4.392s] 3: -    return getPosition() + _lowState->getRotMat() * _robModel->getFootPosition(*_lowState, i, FrameType::BODY);
[4.392s] 3: -}
[4.392s] 3: -
[4.392s] 3: -Vec34 Estimator::getFeetPos(){
[4.392s] 3: -    Vec34 feetPos;
[4.392s] 3: -    for(int i(0); i < 4; ++i){
[4.392s] 3: -        feetPos.col(i) = getFootPos(i);
[4.392s] 3: -    }
[4.392s] 3: -    return feetPos;
[4.392s] 3: -}
[4.392s] 3: -
[4.393s] 3: -Vec34 Estimator::getFeetVel(){
[4.393s] 3: -    Vec34 feetVel = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
[4.393s] 3: -    for(int i(0); i < 4; ++i){
[4.393s] 3: -        feetVel.col(i) += getVelocity();
[4.393s] 3: -    }
[4.393s] 3: -    return feetVel;
[4.393s] 3: -}
[4.393s] 3: -
[4.393s] 3: -Vec34 Estimator::getPosFeet2BGlobal(){
[4.393s] 3: -    Vec34 feet2BPos;
[4.393s] 3: -    for(int i(0); i < 4; ++i){
[4.393s] 3: -        feet2BPos.col(i) = getFootPos(i) - getPosition();
[4.393s] 3: -    }
[4.393s] 3: -    return feet2BPos;
[4.393s] 3: -}
[4.393s] 3: -
[4.393s] 3: +Vec3 Estimator::getPosition()
[4.393s] 3: +{
[4.393s] 3: +  return _xhat.segment(0, 3);
[4.393s] 3: +}
[4.393s] 3: +
[4.393s] 3: +Vec3 Estimator::getVelocity()
[4.393s] 3: +{
[4.394s] 3: +  return _xhat.segment(3, 3);
[4.394s] 3: +}
[4.394s] 3: +
[4.394s] 3: +Vec3 Estimator::getFootPos(int i)
[4.394s] 3: +{
[4.394s] 3: +  return getPosition() + _lowState->getRotMat() * _robModel->getFootPosition(
[4.394s] 3: +    *_lowState, i,
[4.394s] 3: +    FrameType::BODY);
[4.394s] 3: +}
[4.394s] 3: +
[4.394s] 3: +Vec34 Estimator::getFeetPos()
[4.394s] 3: +{
[4.394s] 3: +  Vec34 feetPos;
[4.394s] 3: +  for (int i(0); i < 4; ++i) {
[4.394s] 3: +    feetPos.col(i) = getFootPos(i);
[4.394s] 3: +  }
[4.394s] 3: +  return feetPos;
[4.394s] 3: +}
[4.394s] 3: +
[4.394s] 3: +Vec34 Estimator::getFeetVel()
[4.394s] 3: +{
[4.394s] 3: +  Vec34 feetVel = _robModel->getFeet2BVelocities(*_lowState, FrameType::GLOBAL);
[4.394s] 3: +  for (int i(0); i < 4; ++i) {
[4.394s] 3: +    feetVel.col(i) += getVelocity();
[4.395s] 3: +  }
[4.395s] 3: +  return feetVel;
[4.395s] 3: +}
[4.395s] 3: +
[4.395s] 3: +Vec34 Estimator::getPosFeet2BGlobal()
[4.395s] 3: +{
[4.395s] 3: +  Vec34 feet2BPos;
[4.395s] 3: +  for (int i(0); i < 4; ++i) {
[4.395s] 3: +    feet2BPos.col(i) = getFootPos(i) - getPosition();
[4.395s] 3: +  }
[4.395s] 3: +  return feet2BPos;
[4.395s] 3: +}
[4.395s] 3: 
[4.395s] 3: Code style divergence in file 'src/interface/IOROS.cpp':
[4.395s] 3: 
[4.395s] 3: --- src/interface/IOROS.cpp
[4.395s] 3: +++ src/interface/IOROS.cpp.uncrustify
[4.395s] 3: @@ -12,95 +12,140 @@
[4.395s] 3: -void RosShutDown(int sig){
[4.396s] 3: -	ROS_INFO("ROS interface shutting down!");
[4.396s] 3: -	ros::shutdown();
[4.396s] 3: -}
[4.396s] 3: -
[4.396s] 3: -IOROS::IOROS():IOInterface(){
[4.396s] 3: -    std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;
[4.396s] 3: -    ros::param::get("/robot_name", _robot_name);
[4.396s] 3: -    std::cout << "robot_name: " << _robot_name << std::endl;
[4.396s] 3: -
[4.396s] 3: -    // start subscriber
[4.396s] 3: -    initRecv();
[4.396s] 3: -    ros::AsyncSpinner subSpinner(1); // one threads
[4.396s] 3: -    subSpinner.start();
[4.396s] 3: -    usleep(300000);     //wait for subscribers start
[4.396s] 3: -    // initialize publisher
[4.396s] 3: -    initSend();   
[4.396s] 3: -
[4.396s] 3: -    signal(SIGINT, RosShutDown);
[4.396s] 3: -
[4.396s] 3: -    cmdPanel = new KeyBoard();
[4.396s] 3: -}
[4.397s] 3: -
[4.397s] 3: -IOROS::~IOROS(){
[4.397s] 3: -    delete cmdPanel;
[4.397s] 3: -    ros::shutdown();
[4.397s] 3: -}
[4.397s] 3: -
[4.397s] 3: -void IOROS::sendRecv(const LowlevelCmd *cmd, LowlevelState *state){
[4.397s] 3: -    sendCmd(cmd);
[4.397s] 3: -    recvState(state);
[4.397s] 3: -
[4.397s] 3: -    state->userCmd = cmdPanel->getUserCmd();
[4.397s] 3: -    state->userValue = cmdPanel->getUserValue();
[4.397s] 3: -}
[4.397s] 3: -
[4.397s] 3: -void IOROS::sendCmd(const LowlevelCmd *lowCmd){
[4.397s] 3: -    for(int i(0); i < 12; ++i){
[4.397s] 3: -        _lowCmd.motorCmd[i].mode = lowCmd->motorCmd[i].mode;
[4.397s] 3: -        _lowCmd.motorCmd[i].q = lowCmd->motorCmd[i].q;
[4.397s] 3: -        _lowCmd.motorCmd[i].dq = lowCmd->motorCmd[i].dq;
[4.397s] 3: -        _lowCmd.motorCmd[i].tau = lowCmd->motorCmd[i].tau;
[4.397s] 3: -        _lowCmd.motorCmd[i].Kd = lowCmd->motorCmd[i].Kd;
[4.398s] 3: -        _lowCmd.motorCmd[i].Kp = lowCmd->motorCmd[i].Kp;
[4.398s] 3: -    }
[4.398s] 3: -    for(int m(0); m < 12; ++m){
[4.398s] 3: -        _servo_pub[m].publish(_lowCmd.motorCmd[m]);
[4.398s] 3: -    }
[4.398s] 3: -    ros::spinOnce();
[4.398s] 3: -}
[4.398s] 3: -
[4.398s] 3: -void IOROS::recvState(LowlevelState *state){
[4.398s] 3: -    for(int i(0); i < 12; ++i){
[4.398s] 3: -        state->motorState[i].q = _lowState.motorState[i].q;
[4.398s] 3: -        state->motorState[i].dq = _lowState.motorState[i].dq;
[4.398s] 3: -        state->motorState[i].ddq = _lowState.motorState[i].ddq;
[4.398s] 3: -        state->motorState[i].tauEst = _lowState.motorState[i].tauEst;
[4.398s] 3: -    }
[4.398s] 3: -    for(int i(0); i < 3; ++i){
[4.398s] 3: -        state->imu.quaternion[i] = _lowState.imu.quaternion[i];
[4.398s] 3: -        state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];
[4.398s] 3: -        state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];
[4.398s] 3: -    }
[4.398s] 3: -    state->imu.quaternion[3] = _lowState.imu.quaternion[3];
[4.398s] 3: -}
[4.399s] 3: -
[4.399s] 3: -void IOROS::initSend(){
[4.399s] 3: -    _servo_pub[0] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FR_hip_controller/command", 1);
[4.399s] 3: -    _servo_pub[1] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FR_thigh_controller/command", 1);
[4.399s] 3: -    _servo_pub[2] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FR_calf_controller/command", 1);
[4.399s] 3: -    _servo_pub[3] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FL_hip_controller/command", 1);
[4.399s] 3: -    _servo_pub[4] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FL_thigh_controller/command", 1);
[4.399s] 3: -    _servo_pub[5] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/FL_calf_controller/command", 1);
[4.399s] 3: -    _servo_pub[6] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RR_hip_controller/command", 1);
[4.399s] 3: -    _servo_pub[7] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RR_thigh_controller/command", 1);
[4.399s] 3: -    _servo_pub[8] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RR_calf_controller/command", 1);
[4.399s] 3: -    _servo_pub[9] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RL_hip_controller/command", 1);
[4.399s] 3: -    _servo_pub[10] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RL_thigh_controller/command", 1);
[4.399s] 3: -    _servo_pub[11] = _nm.advertise<unitree_legged_msgs::MotorCmd>("/" + _robot_name + "_gazebo/RL_calf_controller/command", 1);
[4.399s] 3: -}
[4.399s] 3: -
[4.399s] 3: -void IOROS::initRecv(){
[4.399s] 3: -    _imu_sub = _nm.subscribe("/trunk_imu", 1, &IOROS::imuCallback, this);
[4.399s] 3: -    _servo_sub[0] = _nm.subscribe("/" + _robot_name + "_gazebo/FR_hip_controller/state", 1, &IOROS::FRhipCallback, this);
[4.399s] 3: -    _servo_sub[1] = _nm.subscribe("/" + _robot_name + "_gazebo/FR_thigh_controller/state", 1, &IOROS::FRthighCallback, this);
[4.399s] 3: -    _servo_sub[2] = _nm.subscribe("/" + _robot_name + "_gazebo/FR_calf_controller/state", 1, &IOROS::FRcalfCallback, this);
[4.399s] 3: -    _servo_sub[3] = _nm.subscribe("/" + _robot_name + "_gazebo/FL_hip_controller/state", 1, &IOROS::FLhipCallback, this);
[4.400s] 3: -    _servo_sub[4] = _nm.subscribe("/" + _robot_name + "_gazebo/FL_thigh_controller/state", 1, &IOROS::FLthighCallback, this);
[4.400s] 3: -    _servo_sub[5] = _nm.subscribe("/" + _robot_name + "_gazebo/FL_calf_controller/state", 1, &IOROS::FLcalfCallback, this);
[4.400s] 3: -    _servo_sub[6] = _nm.subscribe("/" + _robot_name + "_gazebo/RR_hip_controller/state", 1, &IOROS::RRhipCallback, this);
[4.400s] 3: -    _servo_sub[7] = _nm.subscribe("/" + _robot_name + "_gazebo/RR_thigh_controller/state", 1, &IOROS::RRthighCallback, this);
[4.400s] 3: -    _servo_sub[8] = _nm.subscribe("/" + _robot_name + "_gazebo/RR_calf_controller/state", 1, &IOROS::RRcalfCallback, this);
[4.400s] 3: -    _servo_sub[9] = _nm.subscribe("/" + _robot_name + "_gazebo/RL_hip_controller/state", 1, &IOROS::RLhipCallback, this);
[4.400s] 3: -    _servo_sub[10] = _nm.subscribe("/" + _robot_name + "_gazebo/RL_thigh_controller/state", 1, &IOROS::RLthighCallback, this);
[4.400s] 3: -    _servo_sub[11] = _nm.subscribe("/" + _robot_name + "_gazebo/RL_calf_controller/state", 1, &IOROS::RLcalfCallback, this);
[4.400s] 3: +void RosShutDown(int sig)
[4.400s] 3: +{
[4.400s] 3: +  ROS_INFO("ROS interface shutting down!");
[4.400s] 3: +  ros::shutdown();
[4.400s] 3: +}
[4.400s] 3: +
[4.400s] 3: +IOROS::IOROS()
[4.400s] 3: +: IOInterface()
[4.400s] 3: +{
[4.400s] 3: +  std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;
[4.400s] 3: +  ros::param::get("/robot_name", _robot_name);
[4.400s] 3: +  std::cout << "robot_name: " << _robot_name << std::endl;
[4.400s] 3: +
[4.400s] 3: +  // start subscriber
[4.400s] 3: +  initRecv();
[4.401s] 3: +  ros::AsyncSpinner subSpinner(1);   // one threads
[4.401s] 3: +  subSpinner.start();
[4.401s] 3: +  usleep(300000);       //wait for subscribers start
[4.401s] 3: +  // initialize publisher
[4.401s] 3: +  initSend();
[4.401s] 3: +
[4.401s] 3: +  signal(SIGINT, RosShutDown);
[4.401s] 3: +
[4.401s] 3: +  cmdPanel = new KeyBoard();
[4.401s] 3: +}
[4.401s] 3: +
[4.401s] 3: +IOROS::~IOROS()
[4.401s] 3: +{
[4.401s] 3: +  delete cmdPanel;
[4.401s] 3: +  ros::shutdown();
[4.401s] 3: +}
[4.401s] 3: +
[4.401s] 3: +void IOROS::sendRecv(const LowlevelCmd * cmd, LowlevelState * state)
[4.401s] 3: +{
[4.401s] 3: +  sendCmd(cmd);
[4.401s] 3: +  recvState(state);
[4.401s] 3: +
[4.402s] 3: +  state->userCmd = cmdPanel->getUserCmd();
[4.402s] 3: +  state->userValue = cmdPanel->getUserValue();
[4.402s] 3: +}
[4.402s] 3: +
[4.402s] 3: +void IOROS::sendCmd(const LowlevelCmd * lowCmd)
[4.402s] 3: +{
[4.402s] 3: +  for (int i(0); i < 12; ++i) {
[4.402s] 3: +    _lowCmd.motorCmd[i].mode = lowCmd->motorCmd[i].mode;
[4.402s] 3: +    _lowCmd.motorCmd[i].q = lowCmd->motorCmd[i].q;
[4.402s] 3: +    _lowCmd.motorCmd[i].dq = lowCmd->motorCmd[i].dq;
[4.402s] 3: +    _lowCmd.motorCmd[i].tau = lowCmd->motorCmd[i].tau;
[4.402s] 3: +    _lowCmd.motorCmd[i].Kd = lowCmd->motorCmd[i].Kd;
[4.402s] 3: +    _lowCmd.motorCmd[i].Kp = lowCmd->motorCmd[i].Kp;
[4.402s] 3: +  }
[4.402s] 3: +  for (int m(0); m < 12; ++m) {
[4.402s] 3: +    _servo_pub[m].publish(_lowCmd.motorCmd[m]);
[4.402s] 3: +  }
[4.402s] 3: +  ros::spinOnce();
[4.402s] 3: +}
[4.402s] 3: +
[4.402s] 3: +void IOROS::recvState(LowlevelState * state)
[4.402s] 3: +{
[4.403s] 3: +  for (int i(0); i < 12; ++i) {
[4.403s] 3: +    state->motorState[i].q = _lowState.motorState[i].q;
[4.403s] 3: +    state->motorState[i].dq = _lowState.motorState[i].dq;
[4.403s] 3: +    state->motorState[i].ddq = _lowState.motorState[i].ddq;
[4.403s] 3: +    state->motorState[i].tauEst = _lowState.motorState[i].tauEst;
[4.403s] 3: +  }
[4.403s] 3: +  for (int i(0); i < 3; ++i) {
[4.403s] 3: +    state->imu.quaternion[i] = _lowState.imu.quaternion[i];
[4.403s] 3: +    state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];
[4.403s] 3: +    state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];
[4.403s] 3: +  }
[4.403s] 3: +  state->imu.quaternion[3] = _lowState.imu.quaternion[3];
[4.403s] 3: +}
[4.403s] 3: +
[4.403s] 3: +void IOROS::initSend()
[4.403s] 3: +{
[4.403s] 3: +  _servo_pub[0] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/FR_hip_controller/command", 1);
[4.404s] 3: +  _servo_pub[1] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/FR_thigh_controller/command", 1);
[4.404s] 3: +  _servo_pub[2] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/FR_calf_controller/command", 1);
[4.404s] 3: +  _servo_pub[3] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/FL_hip_controller/command", 1);
[4.404s] 3: +  _servo_pub[4] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/FL_thigh_controller/command", 1);
[4.404s] 3: +  _servo_pub[5] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/FL_calf_controller/command", 1);
[4.404s] 3: +  _servo_pub[6] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/RR_hip_controller/command", 1);
[4.404s] 3: +  _servo_pub[7] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/RR_thigh_controller/command", 1);
[4.404s] 3: +  _servo_pub[8] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.404s] 3: +    "/" + _robot_name + "_gazebo/RR_calf_controller/command", 1);
[4.405s] 3: +  _servo_pub[9] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.405s] 3: +    "/" + _robot_name + "_gazebo/RL_hip_controller/command", 1);
[4.405s] 3: +  _servo_pub[10] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.405s] 3: +    "/" + _robot_name + "_gazebo/RL_thigh_controller/command", 1);
[4.405s] 3: +  _servo_pub[11] = _nm.advertise<unitree_legged_msgs::MotorCmd>(
[4.405s] 3: +    "/" + _robot_name + "_gazebo/RL_calf_controller/command", 1);
[4.405s] 3: +}
[4.405s] 3: +
[4.405s] 3: +void IOROS::initRecv()
[4.405s] 3: +{
[4.405s] 3: +  _imu_sub = _nm.subscribe("/trunk_imu", 1, &IOROS::imuCallback, this);
[4.405s] 3: +  _servo_sub[0] = _nm.subscribe(
[4.405s] 3: +    "/" + _robot_name + "_gazebo/FR_hip_controller/state", 1,
[4.405s] 3: +    &IOROS::FRhipCallback, this);
[4.405s] 3: +  _servo_sub[1] = _nm.subscribe(
[4.405s] 3: +    "/" + _robot_name + "_gazebo/FR_thigh_controller/state", 1,
[4.405s] 3: +    &IOROS::FRthighCallback, this);
[4.405s] 3: +  _servo_sub[2] = _nm.subscribe(
[4.406s] 3: +    "/" + _robot_name + "_gazebo/FR_calf_controller/state", 1,
[4.406s] 3: +    &IOROS::FRcalfCallback, this);
[4.406s] 3: +  _servo_sub[3] = _nm.subscribe(
[4.406s] 3: +    "/" + _robot_name + "_gazebo/FL_hip_controller/state", 1,
[4.406s] 3: +    &IOROS::FLhipCallback, this);
[4.406s] 3: +  _servo_sub[4] = _nm.subscribe(
[4.406s] 3: +    "/" + _robot_name + "_gazebo/FL_thigh_controller/state", 1,
[4.406s] 3: +    &IOROS::FLthighCallback, this);
[4.406s] 3: +  _servo_sub[5] = _nm.subscribe(
[4.406s] 3: +    "/" + _robot_name + "_gazebo/FL_calf_controller/state", 1,
[4.406s] 3: +    &IOROS::FLcalfCallback, this);
[4.406s] 3: +  _servo_sub[6] = _nm.subscribe(
[4.406s] 3: +    "/" + _robot_name + "_gazebo/RR_hip_controller/state", 1,
[4.406s] 3: +    &IOROS::RRhipCallback, this);
[4.406s] 3: +  _servo_sub[7] = _nm.subscribe(
[4.406s] 3: +    "/" + _robot_name + "_gazebo/RR_thigh_controller/state", 1,
[4.406s] 3: +    &IOROS::RRthighCallback, this);
[4.406s] 3: +  _servo_sub[8] = _nm.subscribe(
[4.406s] 3: +    "/" + _robot_name + "_gazebo/RR_calf_controller/state", 1,
[4.406s] 3: +    &IOROS::RRcalfCallback, this);
[4.406s] 3: +  _servo_sub[9] = _nm.subscribe(
[4.407s] 3: +    "/" + _robot_name + "_gazebo/RL_hip_controller/state", 1,
[4.407s] 3: +    &IOROS::RLhipCallback, this);
[4.407s] 3: +  _servo_sub[10] = _nm.subscribe(
[4.407s] 3: +    "/" + _robot_name + "_gazebo/RL_thigh_controller/state", 1,
[4.407s] 3: +    &IOROS::RLthighCallback, this);
[4.407s] 3: +  _servo_sub[11] = _nm.subscribe(
[4.407s] 3: +    "/" + _robot_name + "_gazebo/RL_calf_controller/state", 1,
[4.407s] 3: +    &IOROS::RLcalfCallback, this);
[4.407s] 3: @@ -110,109 +155,109 @@
[4.407s] 3: -{ 
[4.407s] 3: -    _lowState.imu.quaternion[0] = msg.orientation.w;
[4.407s] 3: -    _lowState.imu.quaternion[1] = msg.orientation.x;
[4.407s] 3: -    _lowState.imu.quaternion[2] = msg.orientation.y;
[4.407s] 3: -    _lowState.imu.quaternion[3] = msg.orientation.z;
[4.407s] 3: -
[4.407s] 3: -    _lowState.imu.gyroscope[0] = msg.angular_velocity.x;
[4.407s] 3: -    _lowState.imu.gyroscope[1] = msg.angular_velocity.y;
[4.407s] 3: -    _lowState.imu.gyroscope[2] = msg.angular_velocity.z;
[4.407s] 3: -    
[4.407s] 3: -    _lowState.imu.accelerometer[0] = msg.linear_acceleration.x;
[4.407s] 3: -    _lowState.imu.accelerometer[1] = msg.linear_acceleration.y;
[4.407s] 3: -    _lowState.imu.accelerometer[2] = msg.linear_acceleration.z;
[4.408s] 3: -}
[4.408s] 3: -
[4.408s] 3: -void IOROS::FRhipCallback(const unitree_legged_msgs::MotorState& msg)
[4.408s] 3: -{
[4.408s] 3: -    _lowState.motorState[0].mode = msg.mode;
[4.408s] 3: -    _lowState.motorState[0].q = msg.q;
[4.408s] 3: -    _lowState.motorState[0].dq = msg.dq;
[4.408s] 3: -    _lowState.motorState[0].tauEst = msg.tauEst;
[4.408s] 3: -}
[4.408s] 3: -
[4.408s] 3: -void IOROS::FRthighCallback(const unitree_legged_msgs::MotorState& msg)
[4.408s] 3: -{
[4.408s] 3: -    _lowState.motorState[1].mode = msg.mode;
[4.408s] 3: -    _lowState.motorState[1].q = msg.q;
[4.408s] 3: -    _lowState.motorState[1].dq = msg.dq;
[4.408s] 3: -    _lowState.motorState[1].tauEst = msg.tauEst;
[4.408s] 3: -}
[4.408s] 3: -
[4.408s] 3: -void IOROS::FRcalfCallback(const unitree_legged_msgs::MotorState& msg)
[4.408s] 3: -{
[4.408s] 3: -    _lowState.motorState[2].mode = msg.mode;
[4.408s] 3: -    _lowState.motorState[2].q = msg.q;
[4.408s] 3: -    _lowState.motorState[2].dq = msg.dq;
[4.409s] 3: -    _lowState.motorState[2].tauEst = msg.tauEst;
[4.409s] 3: -}
[4.409s] 3: -
[4.409s] 3: -void IOROS::FLhipCallback(const unitree_legged_msgs::MotorState& msg)
[4.409s] 3: -{
[4.409s] 3: -    _lowState.motorState[3].mode = msg.mode;
[4.409s] 3: -    _lowState.motorState[3].q = msg.q;
[4.409s] 3: -    _lowState.motorState[3].dq = msg.dq;
[4.409s] 3: -    _lowState.motorState[3].tauEst = msg.tauEst;
[4.409s] 3: -}
[4.409s] 3: -
[4.409s] 3: -void IOROS::FLthighCallback(const unitree_legged_msgs::MotorState& msg)
[4.409s] 3: -{
[4.409s] 3: -    _lowState.motorState[4].mode = msg.mode;
[4.409s] 3: -    _lowState.motorState[4].q = msg.q;
[4.409s] 3: -    _lowState.motorState[4].dq = msg.dq;
[4.409s] 3: -    _lowState.motorState[4].tauEst = msg.tauEst;
[4.410s] 3: -}
[4.410s] 3: -
[4.410s] 3: -void IOROS::FLcalfCallback(const unitree_legged_msgs::MotorState& msg)
[4.410s] 3: -{
[4.410s] 3: -    _lowState.motorState[5].mode = msg.mode;
[4.410s] 3: -    _lowState.motorState[5].q = msg.q;
[4.410s] 3: -    _lowState.motorState[5].dq = msg.dq;
[4.410s] 3: -    _lowState.motorState[5].tauEst = msg.tauEst;
[4.410s] 3: -}
[4.410s] 3: -
[4.410s] 3: -void IOROS::RRhipCallback(const unitree_legged_msgs::MotorState& msg)
[4.410s] 3: -{
[4.410s] 3: -    _lowState.motorState[6].mode = msg.mode;
[4.410s] 3: -    _lowState.motorState[6].q = msg.q;
[4.410s] 3: -    _lowState.motorState[6].dq = msg.dq;
[4.410s] 3: -    _lowState.motorState[6].tauEst = msg.tauEst;
[4.410s] 3: -}
[4.410s] 3: -
[4.410s] 3: -void IOROS::RRthighCallback(const unitree_legged_msgs::MotorState& msg)
[4.410s] 3: -{
[4.410s] 3: -    _lowState.motorState[7].mode = msg.mode;
[4.411s] 3: -    _lowState.motorState[7].q = msg.q;
[4.411s] 3: -    _lowState.motorState[7].dq = msg.dq;
[4.411s] 3: -    _lowState.motorState[7].tauEst = msg.tauEst;
[4.411s] 3: -}
[4.411s] 3: -
[4.411s] 3: -void IOROS::RRcalfCallback(const unitree_legged_msgs::MotorState& msg)
[4.411s] 3: -{
[4.411s] 3: -    _lowState.motorState[8].mode = msg.mode;
[4.411s] 3: -    _lowState.motorState[8].q = msg.q;
[4.411s] 3: -    _lowState.motorState[8].dq = msg.dq;
[4.411s] 3: -    _lowState.motorState[8].tauEst = msg.tauEst;
[4.411s] 3: -}
[4.411s] 3: -
[4.411s] 3: -void IOROS::RLhipCallback(const unitree_legged_msgs::MotorState& msg)
[4.411s] 3: -{
[4.411s] 3: -    _lowState.motorState[9].mode = msg.mode;
[4.411s] 3: -    _lowState.motorState[9].q = msg.q;
[4.411s] 3: -    _lowState.motorState[9].dq = msg.dq;
[4.411s] 3: -    _lowState.motorState[9].tauEst = msg.tauEst;
[4.411s] 3: -}
[4.411s] 3: -
[4.412s] 3: -void IOROS::RLthighCallback(const unitree_legged_msgs::MotorState& msg)
[4.412s] 3: -{
[4.412s] 3: -    _lowState.motorState[10].mode = msg.mode;
[4.412s] 3: -    _lowState.motorState[10].q = msg.q;
[4.412s] 3: -    _lowState.motorState[10].dq = msg.dq;
[4.412s] 3: -    _lowState.motorState[10].tauEst = msg.tauEst;
[4.412s] 3: -}
[4.412s] 3: -
[4.412s] 3: -void IOROS::RLcalfCallback(const unitree_legged_msgs::MotorState& msg)
[4.412s] 3: -{
[4.412s] 3: -    _lowState.motorState[11].mode = msg.mode;
[4.412s] 3: -    _lowState.motorState[11].q = msg.q;
[4.412s] 3: -    _lowState.motorState[11].dq = msg.dq;
[4.412s] 3: -    _lowState.motorState[11].tauEst = msg.tauEst;
[4.412s] 3: +{
[4.412s] 3: +  _lowState.imu.quaternion[0] = msg.orientation.w;
[4.412s] 3: +  _lowState.imu.quaternion[1] = msg.orientation.x;
[4.412s] 3: +  _lowState.imu.quaternion[2] = msg.orientation.y;
[4.412s] 3: +  _lowState.imu.quaternion[3] = msg.orientation.z;
[4.413s] 3: +
[4.413s] 3: +  _lowState.imu.gyroscope[0] = msg.angular_velocity.x;
[4.413s] 3: +  _lowState.imu.gyroscope[1] = msg.angular_velocity.y;
[4.413s] 3: +  _lowState.imu.gyroscope[2] = msg.angular_velocity.z;
[4.413s] 3: +
[4.413s] 3: +  _lowState.imu.accelerometer[0] = msg.linear_acceleration.x;
[4.413s] 3: +  _lowState.imu.accelerometer[1] = msg.linear_acceleration.y;
[4.413s] 3: +  _lowState.imu.accelerometer[2] = msg.linear_acceleration.z;
[4.413s] 3: +}
[4.413s] 3: +
[4.413s] 3: +void IOROS::FRhipCallback(const unitree_legged_msgs::MotorState & msg)
[4.413s] 3: +{
[4.413s] 3: +  _lowState.motorState[0].mode = msg.mode;
[4.413s] 3: +  _lowState.motorState[0].q = msg.q;
[4.413s] 3: +  _lowState.motorState[0].dq = msg.dq;
[4.413s] 3: +  _lowState.motorState[0].tauEst = msg.tauEst;
[4.413s] 3: +}
[4.413s] 3: +
[4.413s] 3: +void IOROS::FRthighCallback(const unitree_legged_msgs::MotorState & msg)
[4.413s] 3: +{
[4.413s] 3: +  _lowState.motorState[1].mode = msg.mode;
[4.413s] 3: +  _lowState.motorState[1].q = msg.q;
[4.413s] 3: +  _lowState.motorState[1].dq = msg.dq;
[4.414s] 3: +  _lowState.motorState[1].tauEst = msg.tauEst;
[4.414s] 3: +}
[4.414s] 3: +
[4.414s] 3: +void IOROS::FRcalfCallback(const unitree_legged_msgs::MotorState & msg)
[4.414s] 3: +{
[4.414s] 3: +  _lowState.motorState[2].mode = msg.mode;
[4.414s] 3: +  _lowState.motorState[2].q = msg.q;
[4.414s] 3: +  _lowState.motorState[2].dq = msg.dq;
[4.414s] 3: +  _lowState.motorState[2].tauEst = msg.tauEst;
[4.414s] 3: +}
[4.414s] 3: +
[4.414s] 3: +void IOROS::FLhipCallback(const unitree_legged_msgs::MotorState & msg)
[4.414s] 3: +{
[4.414s] 3: +  _lowState.motorState[3].mode = msg.mode;
[4.414s] 3: +  _lowState.motorState[3].q = msg.q;
[4.414s] 3: +  _lowState.motorState[3].dq = msg.dq;
[4.414s] 3: +  _lowState.motorState[3].tauEst = msg.tauEst;
[4.414s] 3: +}
[4.414s] 3: +
[4.414s] 3: +void IOROS::FLthighCallback(const unitree_legged_msgs::MotorState & msg)
[4.414s] 3: +{
[4.414s] 3: +  _lowState.motorState[4].mode = msg.mode;
[4.414s] 3: +  _lowState.motorState[4].q = msg.q;
[4.415s] 3: +  _lowState.motorState[4].dq = msg.dq;
[4.415s] 3: +  _lowState.motorState[4].tauEst = msg.tauEst;
[4.415s] 3: +}
[4.415s] 3: +
[4.415s] 3: +void IOROS::FLcalfCallback(const unitree_legged_msgs::MotorState & msg)
[4.415s] 3: +{
[4.415s] 3: +  _lowState.motorState[5].mode = msg.mode;
[4.415s] 3: +  _lowState.motorState[5].q = msg.q;
[4.415s] 3: +  _lowState.motorState[5].dq = msg.dq;
[4.415s] 3: +  _lowState.motorState[5].tauEst = msg.tauEst;
[4.415s] 3: +}
[4.415s] 3: +
[4.415s] 3: +void IOROS::RRhipCallback(const unitree_legged_msgs::MotorState & msg)
[4.415s] 3: +{
[4.415s] 3: +  _lowState.motorState[6].mode = msg.mode;
[4.415s] 3: +  _lowState.motorState[6].q = msg.q;
[4.415s] 3: +  _lowState.motorState[6].dq = msg.dq;
[4.415s] 3: +  _lowState.motorState[6].tauEst = msg.tauEst;
[4.415s] 3: +}
[4.416s] 3: +
[4.416s] 3: +void IOROS::RRthighCallback(const unitree_legged_msgs::MotorState & msg)
[4.416s] 3: +{
[4.416s] 3: +  _lowState.motorState[7].mode = msg.mode;
[4.416s] 3: +  _lowState.motorState[7].q = msg.q;
[4.416s] 3: +  _lowState.motorState[7].dq = msg.dq;
[4.416s] 3: +  _lowState.motorState[7].tauEst = msg.tauEst;
[4.416s] 3: +}
[4.416s] 3: +
[4.416s] 3: +void IOROS::RRcalfCallback(const unitree_legged_msgs::MotorState & msg)
[4.416s] 3: +{
[4.416s] 3: +  _lowState.motorState[8].mode = msg.mode;
[4.416s] 3: +  _lowState.motorState[8].q = msg.q;
[4.416s] 3: +  _lowState.motorState[8].dq = msg.dq;
[4.416s] 3: +  _lowState.motorState[8].tauEst = msg.tauEst;
[4.416s] 3: +}
[4.416s] 3: +
[4.416s] 3: +void IOROS::RLhipCallback(const unitree_legged_msgs::MotorState & msg)
[4.416s] 3: +{
[4.416s] 3: +  _lowState.motorState[9].mode = msg.mode;
[4.416s] 3: +  _lowState.motorState[9].q = msg.q;
[4.417s] 3: +  _lowState.motorState[9].dq = msg.dq;
[4.417s] 3: +  _lowState.motorState[9].tauEst = msg.tauEst;
[4.417s] 3: +}
[4.417s] 3: +
[4.417s] 3: +void IOROS::RLthighCallback(const unitree_legged_msgs::MotorState & msg)
[4.417s] 3: +{
[4.417s] 3: +  _lowState.motorState[10].mode = msg.mode;
[4.417s] 3: +  _lowState.motorState[10].q = msg.q;
[4.417s] 3: +  _lowState.motorState[10].dq = msg.dq;
[4.417s] 3: +  _lowState.motorState[10].tauEst = msg.tauEst;
[4.417s] 3: +}
[4.417s] 3: +
[4.417s] 3: +void IOROS::RLcalfCallback(const unitree_legged_msgs::MotorState & msg)
[4.417s] 3: +{
[4.417s] 3: +  _lowState.motorState[11].mode = msg.mode;
[4.417s] 3: +  _lowState.motorState[11].q = msg.q;
[4.417s] 3: +  _lowState.motorState[11].dq = msg.dq;
[4.417s] 3: +  _lowState.motorState[11].tauEst = msg.tauEst;
[4.417s] 3: @@ -236,6 +281,7 @@
[4.417s] 3: -void IOROS::RosShutDown(int sig){
[4.417s] 3: -
[4.418s] 3: -	// RCLCPP_INFO_ONCE(_nm->get_logger(), "ROS 2 interface shutting down!");
[4.418s] 3: -    std::cout << "ROS 2 interface shutting down!" << std::endl;
[4.418s] 3: -    // executor_thread.join();
[4.418s] 3: -	rclcpp::shutdown();
[4.418s] 3: +void IOROS::RosShutDown(int sig)
[4.418s] 3: +{
[4.418s] 3: +
[4.418s] 3: +  // RCLCPP_INFO_ONCE(_nm->get_logger(), "ROS 2 interface shutting down!");
[4.418s] 3: +  std::cout << "ROS 2 interface shutting down!" << std::endl;
[4.418s] 3: +  // executor_thread.join();
[4.418s] 3: +  rclcpp::shutdown();
[4.418s] 3: @@ -246 +292 @@
[4.418s] 3: -//     joint_index_map["FL_thigh_joint"] = 1;         
[4.418s] 3: +//     joint_index_map["FL_thigh_joint"] = 1;
[4.418s] 3: @@ -250 +296 @@
[4.418s] 3: -//     joint_index_map["FR_calf_joint"] = 5;         
[4.418s] 3: +//     joint_index_map["FR_calf_joint"] = 5;
[4.418s] 3: @@ -252 +298 @@
[4.418s] 3: -//     joint_index_map["RL_thigh_joint"] = 7;         
[4.418s] 3: +//     joint_index_map["RL_thigh_joint"] = 7;
[4.418s] 3: @@ -254,2 +300,2 @@
[4.419s] 3: -//     joint_index_map["RR_hip_joint"] = 9;          
[4.419s] 3: -//     joint_index_map["RR_thigh_joint"] = 10;        
[4.419s] 3: +//     joint_index_map["RR_hip_joint"] = 9;
[4.419s] 3: +//     joint_index_map["RR_thigh_joint"] = 10;
[4.419s] 3: @@ -259,31 +305,34 @@
[4.419s] 3: -IOROS::IOROS(rclcpp::Node::SharedPtr node_ptr) : IOInterface(){
[4.419s] 3: -    _nm = node_ptr;
[4.419s] 3: -    
[4.419s] 3: -    std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;
[4.419s] 3: -    _nm->declare_parameter("robot_name", "go2");
[4.419s] 3: -    _nm->get_parameter("robot_name", _robot_name);
[4.419s] 3: -    std::cout << "robot_name: " << _robot_name << std::endl;
[4.419s] 3: -
[4.419s] 3: -    // initialize map
[4.419s] 3: -    // initializeJointIndexMap();
[4.419s] 3: -
[4.419s] 3: -    // _joint_cmd = std_msgs::msg::Float64MultiArray();
[4.419s] 3: -    // for(int i = 0; i < 12; i++){
[4.419s] 3: -    //     _joint_cmd.data.push_back(0.0);
[4.419s] 3: -    // }
[4.419s] 3: -    
[4.420s] 3: -    // start subscriber
[4.420s] 3: -    initRecv();
[4.420s] 3: -    std::cout << "init recv" << std::endl;
[4.420s] 3: -
[4.420s] 3: -    // ros::AsyncSpinner subSpinner(1); // one threads
[4.420s] 3: -    // subSpinner.start();
[4.420s] 3: -
[4.420s] 3: -    // ROS 2 equivalent
[4.420s] 3: -    auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(
[4.420s] 3: -        rclcpp::ExecutorOptions(), 1
[4.420s] 3: -    );
[4.420s] 3: -    
[4.420s] 3: -    executor->add_node(_nm);
[4.420s] 3: -    executor_thread = std::thread([executor] (){
[4.420s] 3: -        executor->spin();
[4.420s] 3: +IOROS::IOROS(rclcpp::Node::SharedPtr node_ptr)
[4.420s] 3: +: IOInterface()
[4.420s] 3: +{
[4.420s] 3: +  _nm = node_ptr;
[4.420s] 3: +
[4.420s] 3: +  std::cout << "The control interface for ROS 2 Gazebo simulation" << std::endl;
[4.421s] 3: +  _nm->declare_parameter("robot_name", "go2");
[4.421s] 3: +  _nm->get_parameter("robot_name", _robot_name);
[4.421s] 3: +  std::cout << "robot_name: " << _robot_name << std::endl;
[4.421s] 3: +
[4.421s] 3: +  // initialize map
[4.421s] 3: +  // initializeJointIndexMap();
[4.421s] 3: +
[4.421s] 3: +  // _joint_cmd = std_msgs::msg::Float64MultiArray();
[4.421s] 3: +  // for(int i = 0; i < 12; i++){
[4.421s] 3: +  //     _joint_cmd.data.push_back(0.0);
[4.421s] 3: +  // }
[4.421s] 3: +
[4.421s] 3: +  // start subscriber
[4.421s] 3: +  initRecv();
[4.421s] 3: +  std::cout << "init recv" << std::endl;
[4.421s] 3: +
[4.421s] 3: +  // ros::AsyncSpinner subSpinner(1); // one threads
[4.421s] 3: +  // subSpinner.start();
[4.421s] 3: +
[4.421s] 3: +  // ROS 2 equivalent
[4.421s] 3: +  auto executor = std::make_shared<rclcpp::executors::MultiThreadedExecutor>(
[4.421s] 3: +    rclcpp::ExecutorOptions(), 1
[4.422s] 3: +  );
[4.422s] 3: +
[4.422s] 3: +  executor->add_node(_nm);
[4.422s] 3: +  executor_thread = std::thread(
[4.422s] 3: +    [executor]() {
[4.422s] 3: +      executor->spin();
[4.422s] 3: @@ -291,92 +340,165 @@
[4.422s] 3: -    executor_thread.detach();
[4.422s] 3: -    std::cout << "executor thread detached and running" << std::endl;
[4.422s] 3: -
[4.422s] 3: -    usleep(300000);     // wait for subscribers start
[4.422s] 3: -
[4.422s] 3: -    initSend();   
[4.422s] 3: -
[4.422s] 3: -    signal(SIGINT, IOROS::RosShutDown);
[4.422s] 3: -
[4.422s] 3: -    cmdPanel = new KeyBoard();
[4.422s] 3: -    
[4.422s] 3: -}
[4.422s] 3: -
[4.422s] 3: -IOROS::~IOROS(){
[4.422s] 3: -    delete cmdPanel;
[4.422s] 3: -    rclcpp::shutdown();
[4.423s] 3: -}
[4.423s] 3: -
[4.423s] 3: -void IOROS::sendRecv(const LowlevelCmd *cmd, LowlevelState *state){
[4.423s] 3: -    sendCmd(cmd);
[4.423s] 3: -    recvState(state);
[4.423s] 3: -
[4.423s] 3: -    state->userCmd = cmdPanel->getUserCmd();
[4.423s] 3: -    state->userValue = cmdPanel->getUserValue();
[4.423s] 3: -}
[4.423s] 3: -
[4.423s] 3: -void IOROS::sendCmd(const LowlevelCmd *lowCmd){
[4.423s] 3: -    
[4.423s] 3: -    for(int i(0); i < 12; ++i){
[4.423s] 3: -        _lowCmd.motor_cmd[i].mode = lowCmd->motorCmd[i].mode;
[4.423s] 3: -        _lowCmd.motor_cmd[i].q = lowCmd->motorCmd[i].q;
[4.423s] 3: -        _lowCmd.motor_cmd[i].dq = lowCmd->motorCmd[i].dq;
[4.423s] 3: -        _lowCmd.motor_cmd[i].tau = lowCmd->motorCmd[i].tau;
[4.423s] 3: -        _lowCmd.motor_cmd[i].kd = lowCmd->motorCmd[i].Kd;
[4.423s] 3: -        _lowCmd.motor_cmd[i].kp = lowCmd->motorCmd[i].Kp;
[4.423s] 3: -
[4.423s] 3: -    }
[4.423s] 3: -    for(int m(0); m < 12; ++m){
[4.423s] 3: -        _servo_pub[m]->publish(_lowCmd.motor_cmd[m]);
[4.424s] 3: -    }
[4.424s] 3: -    // _joint_cmd_pub->publish(_joint_cmd);
[4.424s] 3: -    // rclcpp::spin_once();
[4.424s] 3: -
[4.424s] 3: -
[4.424s] 3: -}
[4.424s] 3: -
[4.424s] 3: -void IOROS::recvState(LowlevelState *state){
[4.424s] 3: -    for(int i(0); i < 12; ++i){
[4.424s] 3: -        state->motorState[i].q = _lowState.motor_state[i].q;
[4.424s] 3: -        state->motorState[i].dq = _lowState.motor_state[i].dq;
[4.424s] 3: -        state->motorState[i].ddq = _lowState.motor_state[i].ddq;
[4.424s] 3: -        state->motorState[i].tauEst = _lowState.motor_state[i].tau_est;
[4.424s] 3: -    }
[4.424s] 3: -    for(int i(0); i < 3; ++i){
[4.424s] 3: -        state->imu.quaternion[i] = _lowState.imu.quaternion[i];
[4.424s] 3: -        state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];
[4.424s] 3: -        state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];
[4.424s] 3: -    }
[4.424s] 3: -    state->imu.quaternion[3] = _lowState.imu.quaternion[3];
[4.424s] 3: -}
[4.424s] 3: -
[4.425s] 3: -void IOROS::initSend(){
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FR_hip_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FR_thigh_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FR_calf_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FL_hip_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FL_thigh_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/FL_calf_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RR_hip_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RR_thigh_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RR_calf_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RL_hip_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RL_thigh_controller/command", 1));
[4.425s] 3: -    _servo_pub.push_back(_nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>("/RL_calf_controller/command", 1));
[4.425s] 3: -    // _joint_cmd_pub = _nm->create_publisher<std_msgs::msg::Float64MultiArray>("/joint_group_position_controller/commands", 1);
[4.425s] 3: -}
[4.425s] 3: -
[4.425s] 3: -void IOROS::initRecv(){
[4.425s] 3: -    _imu_sub = _nm->create_subscription<sensor_msgs::msg::Imu>("/imu_plugin/out", 1, std::bind(&IOROS::imuCallback, this, std::placeholders::_1));
[4.425s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FR_hip_controller/state", 1, std::bind(&IOROS::FRhipCallback, this, std::placeholders::_1)));
[4.425s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FR_thigh_controller/state", 1, std::bind(&IOROS::FRthighCallback, this, std::placeholders::_1)));
[4.425s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FR_calf_controller/state", 1, std::bind(&IOROS::FRcalfCallback, this, std::placeholders::_1)));
[4.425s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FL_hip_controller/state", 1, std::bind(&IOROS::FLhipCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FL_thigh_controller/state", 1, std::bind(&IOROS::FLthighCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/FL_calf_controller/state", 1, std::bind(&IOROS::FLcalfCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RR_hip_controller/state", 1, std::bind(&IOROS::RRhipCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RR_thigh_controller/state", 1, std::bind(&IOROS::RRthighCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RR_calf_controller/state", 1, std::bind(&IOROS::RRcalfCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RL_hip_controller/state", 1, std::bind(&IOROS::RLhipCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RL_thigh_controller/state", 1, std::bind(&IOROS::RLthighCallback, this, std::placeholders::_1)));
[4.426s] 3: -    _servo_sub.push_back(_nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>("/RL_calf_controller/state", 1, std::bind(&IOROS::RLcalfCallback, this, std::placeholders::_1)));
[4.426s] 3: -    // _joint_state_sub = _nm->create_subscription<sensor_msgs::msg::JointState>("/joint_states", 1, std::bind(&IOROS::jointStateCallback, this, std::placeholders::_1));
[4.426s] 3: +  executor_thread.detach();
[4.426s] 3: +  std::cout << "executor thread detached and running" << std::endl;
[4.426s] 3: +
[4.426s] 3: +  usleep(300000);       // wait for subscribers start
[4.426s] 3: +
[4.426s] 3: +  initSend();
[4.426s] 3: +
[4.426s] 3: +  signal(SIGINT, IOROS::RosShutDown);
[4.426s] 3: +
[4.426s] 3: +  cmdPanel = new KeyBoard();
[4.426s] 3: +
[4.426s] 3: +}
[4.426s] 3: +
[4.426s] 3: +IOROS::~IOROS()
[4.427s] 3: +{
[4.427s] 3: +  delete cmdPanel;
[4.427s] 3: +  rclcpp::shutdown();
[4.427s] 3: +}
[4.427s] 3: +
[4.427s] 3: +void IOROS::sendRecv(const LowlevelCmd * cmd, LowlevelState * state)
[4.427s] 3: +{
[4.427s] 3: +  sendCmd(cmd);
[4.427s] 3: +  recvState(state);
[4.427s] 3: +
[4.427s] 3: +  state->userCmd = cmdPanel->getUserCmd();
[4.427s] 3: +  state->userValue = cmdPanel->getUserValue();
[4.427s] 3: +}
[4.427s] 3: +
[4.427s] 3: +void IOROS::sendCmd(const LowlevelCmd * lowCmd)
[4.427s] 3: +{
[4.427s] 3: +
[4.427s] 3: +  for (int i(0); i < 12; ++i) {
[4.427s] 3: +    _lowCmd.motor_cmd[i].mode = lowCmd->motorCmd[i].mode;
[4.427s] 3: +    _lowCmd.motor_cmd[i].q = lowCmd->motorCmd[i].q;
[4.427s] 3: +    _lowCmd.motor_cmd[i].dq = lowCmd->motorCmd[i].dq;
[4.427s] 3: +    _lowCmd.motor_cmd[i].tau = lowCmd->motorCmd[i].tau;
[4.427s] 3: +    _lowCmd.motor_cmd[i].kd = lowCmd->motorCmd[i].Kd;
[4.428s] 3: +    _lowCmd.motor_cmd[i].kp = lowCmd->motorCmd[i].Kp;
[4.428s] 3: +
[4.428s] 3: +  }
[4.428s] 3: +  for (int m(0); m < 12; ++m) {
[4.428s] 3: +    _servo_pub[m]->publish(_lowCmd.motor_cmd[m]);
[4.428s] 3: +  }
[4.428s] 3: +  // _joint_cmd_pub->publish(_joint_cmd);
[4.428s] 3: +  // rclcpp::spin_once();
[4.428s] 3: +
[4.428s] 3: +
[4.428s] 3: +}
[4.428s] 3: +
[4.428s] 3: +void IOROS::recvState(LowlevelState * state)
[4.428s] 3: +{
[4.428s] 3: +  for (int i(0); i < 12; ++i) {
[4.428s] 3: +    state->motorState[i].q = _lowState.motor_state[i].q;
[4.428s] 3: +    state->motorState[i].dq = _lowState.motor_state[i].dq;
[4.428s] 3: +    state->motorState[i].ddq = _lowState.motor_state[i].ddq;
[4.428s] 3: +    state->motorState[i].tauEst = _lowState.motor_state[i].tau_est;
[4.428s] 3: +  }
[4.429s] 3: +  for (int i(0); i < 3; ++i) {
[4.429s] 3: +    state->imu.quaternion[i] = _lowState.imu.quaternion[i];
[4.429s] 3: +    state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];
[4.429s] 3: +    state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];
[4.429s] 3: +  }
[4.429s] 3: +  state->imu.quaternion[3] = _lowState.imu.quaternion[3];
[4.429s] 3: +}
[4.429s] 3: +
[4.429s] 3: +void IOROS::initSend()
[4.429s] 3: +{
[4.429s] 3: +  _servo_pub.push_back(
[4.429s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.429s] 3: +      "/FR_hip_controller/command", 1));
[4.429s] 3: +  _servo_pub.push_back(
[4.429s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.429s] 3: +      "/FR_thigh_controller/command", 1));
[4.429s] 3: +  _servo_pub.push_back(
[4.429s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.429s] 3: +      "/FR_calf_controller/command", 1));
[4.429s] 3: +  _servo_pub.push_back(
[4.429s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.429s] 3: +      "/FL_hip_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.430s] 3: +      "/FL_thigh_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.430s] 3: +      "/FL_calf_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.430s] 3: +      "/RR_hip_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.430s] 3: +      "/RR_thigh_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.430s] 3: +      "/RR_calf_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.430s] 3: +      "/RL_hip_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.430s] 3: +      "/RL_thigh_controller/command", 1));
[4.430s] 3: +  _servo_pub.push_back(
[4.430s] 3: +    _nm->create_publisher<ros2_unitree_legged_msgs::msg::MotorCmd>(
[4.431s] 3: +      "/RL_calf_controller/command", 1));
[4.431s] 3: +  // _joint_cmd_pub = _nm->create_publisher<std_msgs::msg::Float64MultiArray>("/joint_group_position_controller/commands", 1);
[4.431s] 3: +}
[4.431s] 3: +
[4.431s] 3: +void IOROS::initRecv()
[4.431s] 3: +{
[4.431s] 3: +  _imu_sub =
[4.431s] 3: +    _nm->create_subscription<sensor_msgs::msg::Imu>(
[4.431s] 3: +    "/imu_plugin/out", 1,
[4.431s] 3: +    std::bind(&IOROS::imuCallback, this, std::placeholders::_1));
[4.431s] 3: +  _servo_sub.push_back(
[4.431s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.431s] 3: +      "/FR_hip_controller/state", 1,
[4.431s] 3: +      std::bind(&IOROS::FRhipCallback, this, std::placeholders::_1)));
[4.431s] 3: +  _servo_sub.push_back(
[4.431s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.431s] 3: +      "/FR_thigh_controller/state", 1, std::bind(
[4.431s] 3: +        &IOROS::FRthighCallback, this,
[4.431s] 3: +        std::placeholders::_1)));
[4.431s] 3: +  _servo_sub.push_back(
[4.431s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.431s] 3: +      "/FR_calf_controller/state", 1,
[4.431s] 3: +      std::bind(&IOROS::FRcalfCallback, this, std::placeholders::_1)));
[4.432s] 3: +  _servo_sub.push_back(
[4.432s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.432s] 3: +      "/FL_hip_controller/state", 1,
[4.432s] 3: +      std::bind(&IOROS::FLhipCallback, this, std::placeholders::_1)));
[4.432s] 3: +  _servo_sub.push_back(
[4.432s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.432s] 3: +      "/FL_thigh_controller/state", 1, std::bind(
[4.432s] 3: +        &IOROS::FLthighCallback, this,
[4.432s] 3: +        std::placeholders::_1)));
[4.432s] 3: +  _servo_sub.push_back(
[4.432s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.432s] 3: +      "/FL_calf_controller/state", 1,
[4.432s] 3: +      std::bind(&IOROS::FLcalfCallback, this, std::placeholders::_1)));
[4.432s] 3: +  _servo_sub.push_back(
[4.432s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.432s] 3: +      "/RR_hip_controller/state", 1,
[4.432s] 3: +      std::bind(&IOROS::RRhipCallback, this, std::placeholders::_1)));
[4.432s] 3: +  _servo_sub.push_back(
[4.432s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.432s] 3: +      "/RR_thigh_controller/state", 1, std::bind(
[4.432s] 3: +        &IOROS::RRthighCallback, this,
[4.432s] 3: +        std::placeholders::_1)));
[4.432s] 3: +  _servo_sub.push_back(
[4.433s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.433s] 3: +      "/RR_calf_controller/state", 1,
[4.433s] 3: +      std::bind(&IOROS::RRcalfCallback, this, std::placeholders::_1)));
[4.433s] 3: +  _servo_sub.push_back(
[4.433s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.433s] 3: +      "/RL_hip_controller/state", 1,
[4.433s] 3: +      std::bind(&IOROS::RLhipCallback, this, std::placeholders::_1)));
[4.433s] 3: +  _servo_sub.push_back(
[4.433s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.433s] 3: +      "/RL_thigh_controller/state", 1, std::bind(
[4.433s] 3: +        &IOROS::RLthighCallback, this,
[4.433s] 3: +        std::placeholders::_1)));
[4.433s] 3: +  _servo_sub.push_back(
[4.433s] 3: +    _nm->create_subscription<ros2_unitree_legged_msgs::msg::MotorState>(
[4.433s] 3: +      "/RL_calf_controller/state", 1,
[4.433s] 3: +      std::bind(&IOROS::RLcalfCallback, this, std::placeholders::_1)));
[4.433s] 3: +  // _joint_state_sub = _nm->create_subscription<sensor_msgs::msg::JointState>("/joint_states", 1, std::bind(&IOROS::jointStateCallback, this, std::placeholders::_1));
[4.433s] 3: @@ -387,12 +509,12 @@
[4.433s] 3: -    _lowState.imu.quaternion[0] = msg->orientation.w;
[4.433s] 3: -    _lowState.imu.quaternion[1] = msg->orientation.x;
[4.433s] 3: -    _lowState.imu.quaternion[2] = msg->orientation.y;
[4.433s] 3: -    _lowState.imu.quaternion[3] = msg->orientation.z;
[4.433s] 3: -
[4.433s] 3: -    _lowState.imu.gyroscope[0] = msg->angular_velocity.x;
[4.434s] 3: -    _lowState.imu.gyroscope[1] = msg->angular_velocity.y;
[4.434s] 3: -    _lowState.imu.gyroscope[2] = msg->angular_velocity.z;
[4.434s] 3: -    
[4.434s] 3: -    _lowState.imu.accelerometer[0] = msg->linear_acceleration.x;
[4.434s] 3: -    _lowState.imu.accelerometer[1] = msg->linear_acceleration.y;
[4.434s] 3: -    _lowState.imu.accelerometer[2] = msg->linear_acceleration.z;
[4.434s] 3: +  _lowState.imu.quaternion[0] = msg->orientation.w;
[4.434s] 3: +  _lowState.imu.quaternion[1] = msg->orientation.x;
[4.434s] 3: +  _lowState.imu.quaternion[2] = msg->orientation.y;
[4.434s] 3: +  _lowState.imu.quaternion[3] = msg->orientation.z;
[4.434s] 3: +
[4.434s] 3: +  _lowState.imu.gyroscope[0] = msg->angular_velocity.x;
[4.434s] 3: +  _lowState.imu.gyroscope[1] = msg->angular_velocity.y;
[4.434s] 3: +  _lowState.imu.gyroscope[2] = msg->angular_velocity.z;
[4.434s] 3: +
[4.434s] 3: +  _lowState.imu.accelerometer[0] = msg->linear_acceleration.x;
[4.434s] 3: +  _lowState.imu.accelerometer[1] = msg->linear_acceleration.y;
[4.434s] 3: +  _lowState.imu.accelerometer[2] = msg->linear_acceleration.z;
[4.434s] 3: @@ -404,4 +526,4 @@
[4.434s] 3: -    _lowState.motor_state[0].mode = msg->mode;
[4.434s] 3: -    _lowState.motor_state[0].q = msg->q;
[4.434s] 3: -    _lowState.motor_state[0].dq = msg->dq;
[4.435s] 3: -    _lowState.motor_state[0].tau_est = msg->tau_est;
[4.435s] 3: +  _lowState.motor_state[0].mode = msg->mode;
[4.435s] 3: +  _lowState.motor_state[0].q = msg->q;
[4.435s] 3: +  _lowState.motor_state[0].dq = msg->dq;
[4.435s] 3: +  _lowState.motor_state[0].tau_est = msg->tau_est;
[4.435s] 3: @@ -412,4 +534,4 @@
[4.435s] 3: -    _lowState.motor_state[1].mode = msg->mode;
[4.435s] 3: -    _lowState.motor_state[1].q = msg->q;
[4.435s] 3: -    _lowState.motor_state[1].dq = msg->dq;
[4.435s] 3: -    _lowState.motor_state[1].tau_est = msg->tau_est;
[4.435s] 3: +  _lowState.motor_state[1].mode = msg->mode;
[4.435s] 3: +  _lowState.motor_state[1].q = msg->q;
[4.435s] 3: +  _lowState.motor_state[1].dq = msg->dq;
[4.435s] 3: +  _lowState.motor_state[1].tau_est = msg->tau_est;
[4.435s] 3: @@ -420,4 +542,4 @@
[4.435s] 3: -    _lowState.motor_state[2].mode = msg->mode;
[4.435s] 3: -    _lowState.motor_state[2].q = msg->q;
[4.435s] 3: -    _lowState.motor_state[2].dq = msg->dq;
[4.435s] 3: -    _lowState.motor_state[2].tau_est = msg->tau_est;
[4.435s] 3: +  _lowState.motor_state[2].mode = msg->mode;
[4.435s] 3: +  _lowState.motor_state[2].q = msg->q;
[4.435s] 3: +  _lowState.motor_state[2].dq = msg->dq;
[4.436s] 3: +  _lowState.motor_state[2].tau_est = msg->tau_est;
[4.436s] 3: @@ -428,4 +550,4 @@
[4.436s] 3: -    _lowState.motor_state[3].mode = msg->mode;
[4.436s] 3: -    _lowState.motor_state[3].q = msg->q;
[4.436s] 3: -    _lowState.motor_state[3].dq = msg->dq;
[4.436s] 3: -    _lowState.motor_state[3].tau_est = msg->tau_est;
[4.436s] 3: +  _lowState.motor_state[3].mode = msg->mode;
[4.436s] 3: +  _lowState.motor_state[3].q = msg->q;
[4.436s] 3: +  _lowState.motor_state[3].dq = msg->dq;
[4.436s] 3: +  _lowState.motor_state[3].tau_est = msg->tau_est;
[4.436s] 3: @@ -436,4 +558,4 @@
[4.436s] 3: -    _lowState.motor_state[4].mode = msg->mode;
[4.436s] 3: -    _lowState.motor_state[4].q = msg->q;
[4.436s] 3: -    _lowState.motor_state[4].dq = msg->dq;
[4.436s] 3: -    _lowState.motor_state[4].tau_est = msg->tau_est;
[4.436s] 3: +  _lowState.motor_state[4].mode = msg->mode;
[4.436s] 3: +  _lowState.motor_state[4].q = msg->q;
[4.436s] 3: +  _lowState.motor_state[4].dq = msg->dq;
[4.436s] 3: +  _lowState.motor_state[4].tau_est = msg->tau_est;
[4.436s] 3: @@ -444,4 +566,4 @@
[4.436s] 3: -    _lowState.motor_state[5].mode = msg->mode;
[4.436s] 3: -    _lowState.motor_state[5].q = msg->q;
[4.437s] 3: -    _lowState.motor_state[5].dq = msg->dq;
[4.437s] 3: -    _lowState.motor_state[5].tau_est = msg->tau_est;
[4.437s] 3: +  _lowState.motor_state[5].mode = msg->mode;
[4.437s] 3: +  _lowState.motor_state[5].q = msg->q;
[4.437s] 3: +  _lowState.motor_state[5].dq = msg->dq;
[4.437s] 3: +  _lowState.motor_state[5].tau_est = msg->tau_est;
[4.437s] 3: @@ -452,4 +574,4 @@
[4.437s] 3: -    _lowState.motor_state[6].mode = msg->mode;
[4.437s] 3: -    _lowState.motor_state[6].q = msg->q;
[4.437s] 3: -    _lowState.motor_state[6].dq = msg->dq;
[4.437s] 3: -    _lowState.motor_state[6].tau_est = msg->tau_est;
[4.437s] 3: +  _lowState.motor_state[6].mode = msg->mode;
[4.437s] 3: +  _lowState.motor_state[6].q = msg->q;
[4.437s] 3: +  _lowState.motor_state[6].dq = msg->dq;
[4.437s] 3: +  _lowState.motor_state[6].tau_est = msg->tau_est;
[4.437s] 3: @@ -460,4 +582,4 @@
[4.437s] 3: -    _lowState.motor_state[7].mode = msg->mode;
[4.438s] 3: -    _lowState.motor_state[7].q = msg->q;
[4.438s] 3: -    _lowState.motor_state[7].dq = msg->dq;
[4.438s] 3: -    _lowState.motor_state[7].tau_est = msg->tau_est;
[4.438s] 3: +  _lowState.motor_state[7].mode = msg->mode;
[4.438s] 3: +  _lowState.motor_state[7].q = msg->q;
[4.438s] 3: +  _lowState.motor_state[7].dq = msg->dq;
[4.438s] 3: +  _lowState.motor_state[7].tau_est = msg->tau_est;
[4.438s] 3: @@ -468,4 +590,4 @@
[4.438s] 3: -    _lowState.motor_state[8].mode = msg->mode;
[4.438s] 3: -    _lowState.motor_state[8].q = msg->q;
[4.438s] 3: -    _lowState.motor_state[8].dq = msg->dq;
[4.438s] 3: -    _lowState.motor_state[8].tau_est = msg->tau_est;
[4.438s] 3: +  _lowState.motor_state[8].mode = msg->mode;
[4.439s] 3: +  _lowState.motor_state[8].q = msg->q;
[4.439s] 3: +  _lowState.motor_state[8].dq = msg->dq;
[4.439s] 3: +  _lowState.motor_state[8].tau_est = msg->tau_est;
[4.439s] 3: @@ -476,4 +598,4 @@
[4.439s] 3: -    _lowState.motor_state[9].mode = msg->mode;
[4.439s] 3: -    _lowState.motor_state[9].q = msg->q;
[4.439s] 3: -    _lowState.motor_state[9].dq = msg->dq;
[4.439s] 3: -    _lowState.motor_state[9].tau_est = msg->tau_est;
[4.439s] 3: +  _lowState.motor_state[9].mode = msg->mode;
[4.439s] 3: +  _lowState.motor_state[9].q = msg->q;
[4.439s] 3: +  _lowState.motor_state[9].dq = msg->dq;
[4.439s] 3: +  _lowState.motor_state[9].tau_est = msg->tau_est;
[4.439s] 3: @@ -484,4 +606,4 @@
[4.439s] 3: -    _lowState.motor_state[10].mode = msg->mode;
[4.439s] 3: -    _lowState.motor_state[10].q = msg->q;
[4.439s] 3: -    _lowState.motor_state[10].dq = msg->dq;
[4.439s] 3: -    _lowState.motor_state[10].tau_est = msg->tau_est;
[4.439s] 3: +  _lowState.motor_state[10].mode = msg->mode;
[4.439s] 3: +  _lowState.motor_state[10].q = msg->q;
[4.439s] 3: +  _lowState.motor_state[10].dq = msg->dq;
[4.439s] 3: +  _lowState.motor_state[10].tau_est = msg->tau_est;
[4.439s] 3: @@ -492,8 +614,8 @@
[4.439s] 3: -    _lowState.motor_state[11].mode = msg->mode;
[4.440s] 3: -    _lowState.motor_state[11].q = msg->q;
[4.440s] 3: -    _lowState.motor_state[11].dq = msg->dq;
[4.440s] 3: -    _lowState.motor_state[11].tau_est = msg->tau_est;
[4.440s] 3: -}
[4.440s] 3: -
[4.440s] 3: -
[4.440s] 3: -#endif  // COMPILE_WITH_ROS2_MB
[4.440s] 3: +  _lowState.motor_state[11].mode = msg->mode;
[4.440s] 3: +  _lowState.motor_state[11].q = msg->q;
[4.440s] 3: +  _lowState.motor_state[11].dq = msg->dq;
[4.440s] 3: +  _lowState.motor_state[11].tau_est = msg->tau_est;
[4.440s] 3: +}
[4.440s] 3: +
[4.440s] 3: +
[4.440s] 3: +#endif  // COMPILE_WITH_ROS2_MB
[4.440s] 3: 
[4.440s] 3: Code style divergence in file 'src/interface/IOSDK.cpp':
[4.440s] 3: 
[4.440s] 3: --- src/interface/IOSDK.cpp
[4.440s] 3: +++ src/interface/IOSDK.cpp.uncrustify
[4.440s] 3: @@ -11,4 +11,7 @@
[4.440s] 3: -IOSDK::IOSDK():_safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL, 8090, "192.168.123.10", 8007){
[4.441s] 3: -    std::cout << "The control interface for real robot" << std::endl;
[4.441s] 3: -    _udp.InitCmdData(_lowCmd);
[4.441s] 3: -    cmdPanel = new WirelessHandle();
[4.441s] 3: +IOSDK::IOSDK()
[4.441s] 3: +: _safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL, 8090,
[4.441s] 3: +    "192.168.123.10", 8007)
[4.441s] 3: +{
[4.441s] 3: +  std::cout << "The control interface for real robot" << std::endl;
[4.441s] 3: +  _udp.InitCmdData(_lowCmd);
[4.441s] 3: +  cmdPanel = new WirelessHandle();
[4.441s] 3: @@ -17,5 +20,5 @@
[4.441s] 3: -    _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);
[4.441s] 3: -    _joint_state.name.resize(12);
[4.441s] 3: -    _joint_state.position.resize(12);
[4.441s] 3: -    _joint_state.velocity.resize(12);
[4.441s] 3: -    _joint_state.effort.resize(12);
[4.441s] 3: +  _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);
[4.441s] 3: +  _joint_state.name.resize(12);
[4.441s] 3: +  _joint_state.position.resize(12);
[4.441s] 3: +  _joint_state.velocity.resize(12);
[4.441s] 3: +  _joint_state.effort.resize(12);
[4.441s] 3: @@ -27,4 +30,6 @@
[4.441s] 3: -IOSDK::IOSDK():_safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL){
[4.441s] 3: -    std::cout << "The control interface for real robot" << std::endl;
[4.442s] 3: -    _udp.InitCmdData(_lowCmd);
[4.442s] 3: -    cmdPanel = new WirelessHandle();
[4.442s] 3: +IOSDK::IOSDK()
[4.442s] 3: +: _safe(UNITREE_LEGGED_SDK::LeggedType::Aliengo), _udp(UNITREE_LEGGED_SDK::LOWLEVEL)
[4.442s] 3: +{
[4.442s] 3: +  std::cout << "The control interface for real robot" << std::endl;
[4.442s] 3: +  _udp.InitCmdData(_lowCmd);
[4.442s] 3: +  cmdPanel = new WirelessHandle();
[4.442s] 3: @@ -33,5 +38,5 @@
[4.442s] 3: -    _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);
[4.442s] 3: -    _joint_state.name.resize(12);
[4.442s] 3: -    _joint_state.position.resize(12);
[4.442s] 3: -    _joint_state.velocity.resize(12);
[4.442s] 3: -    _joint_state.effort.resize(12);
[4.442s] 3: +  _pub = _nh.advertise<sensor_msgs::JointState>("/realRobot/joint_states", 20);
[4.442s] 3: +  _joint_state.name.resize(12);
[4.442s] 3: +  _joint_state.position.resize(12);
[4.442s] 3: +  _joint_state.velocity.resize(12);
[4.442s] 3: +  _joint_state.effort.resize(12);
[4.442s] 3: @@ -43,12 +48,10 @@
[4.442s] 3: -void IOSDK::sendRecv(const LowlevelCmd *cmd, LowlevelState *state){
[4.442s] 3: -    for(int i(0); i < 12; ++i){
[4.443s] 3: -        _lowCmd.motorCmd[i].mode = cmd->motorCmd[i].mode;
[4.443s] 3: -        _lowCmd.motorCmd[i].q    = cmd->motorCmd[i].q;
[4.443s] 3: -        _lowCmd.motorCmd[i].dq   = cmd->motorCmd[i].dq;
[4.443s] 3: -        _lowCmd.motorCmd[i].Kp   = cmd->motorCmd[i].Kp;
[4.443s] 3: -        _lowCmd.motorCmd[i].Kd   = cmd->motorCmd[i].Kd;
[4.443s] 3: -        _lowCmd.motorCmd[i].tau  = cmd->motorCmd[i].tau;
[4.443s] 3: -    }
[4.443s] 3: -    
[4.443s] 3: -    _udp.SetSend(_lowCmd);
[4.443s] 3: -    _udp.Send();
[4.443s] 3: +void IOSDK::sendRecv(const LowlevelCmd * cmd, LowlevelState * state)
[4.443s] 3: +{
[4.443s] 3: +  for (int i(0); i < 12; ++i) {
[4.443s] 3: +    _lowCmd.motorCmd[i].mode = cmd->motorCmd[i].mode;
[4.443s] 3: +    _lowCmd.motorCmd[i].q = cmd->motorCmd[i].q;
[4.443s] 3: +    _lowCmd.motorCmd[i].dq = cmd->motorCmd[i].dq;
[4.443s] 3: +    _lowCmd.motorCmd[i].Kp = cmd->motorCmd[i].Kp;
[4.443s] 3: +    _lowCmd.motorCmd[i].Kd = cmd->motorCmd[i].Kd;
[4.443s] 3: +    _lowCmd.motorCmd[i].tau = cmd->motorCmd[i].tau;
[4.443s] 3: +  }
[4.443s] 3: @@ -56,2 +59,2 @@
[4.443s] 3: -    _udp.Recv();
[4.443s] 3: -    _udp.GetRecv(_lowState);
[4.443s] 3: +  _udp.SetSend(_lowCmd);
[4.444s] 3: +  _udp.Send();
[4.444s] 3: @@ -59,7 +62,2 @@
[4.444s] 3: -    for(int i(0); i < 12; ++i){
[4.444s] 3: -        state->motorState[i].q = _lowState.motorState[i].q;
[4.444s] 3: -        state->motorState[i].dq = _lowState.motorState[i].dq;
[4.444s] 3: -        state->motorState[i].ddq = _lowState.motorState[i].ddq;
[4.444s] 3: -        state->motorState[i].tauEst = _lowState.motorState[i].tauEst;
[4.444s] 3: -        state->motorState[i].mode = _lowState.motorState[i].mode;
[4.444s] 3: -    }
[4.444s] 3: +  _udp.Recv();
[4.444s] 3: +  _udp.GetRecv(_lowState);
[4.444s] 3: @@ -67,6 +65,7 @@
[4.444s] 3: -    for(int i(0); i < 3; ++i){
[4.444s] 3: -        state->imu.quaternion[i] = _lowState.imu.quaternion[i];
[4.444s] 3: -        state->imu.gyroscope[i]  = _lowState.imu.gyroscope[i];
[4.444s] 3: -        state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];
[4.444s] 3: -    }
[4.444s] 3: -    state->imu.quaternion[3] = _lowState.imu.quaternion[3];
[4.444s] 3: +  for (int i(0); i < 12; ++i) {
[4.445s] 3: +    state->motorState[i].q = _lowState.motorState[i].q;
[4.445s] 3: +    state->motorState[i].dq = _lowState.motorState[i].dq;
[4.445s] 3: +    state->motorState[i].ddq = _lowState.motorState[i].ddq;
[4.445s] 3: +    state->motorState[i].tauEst = _lowState.motorState[i].tauEst;
[4.445s] 3: +    state->motorState[i].mode = _lowState.motorState[i].mode;
[4.445s] 3: +  }
[4.445s] 3: @@ -74,3 +73,10 @@
[4.445s] 3: -    cmdPanel->receiveHandle(&_lowState);
[4.445s] 3: -    state->userCmd = cmdPanel->getUserCmd();
[4.445s] 3: -    state->userValue = cmdPanel->getUserValue();
[4.445s] 3: +  for (int i(0); i < 3; ++i) {
[4.445s] 3: +    state->imu.quaternion[i] = _lowState.imu.quaternion[i];
[4.445s] 3: +    state->imu.gyroscope[i] = _lowState.imu.gyroscope[i];
[4.445s] 3: +    state->imu.accelerometer[i] = _lowState.imu.accelerometer[i];
[4.445s] 3: +  }
[4.445s] 3: +  state->imu.quaternion[3] = _lowState.imu.quaternion[3];
[4.445s] 3: +
[4.445s] 3: +  cmdPanel->receiveHandle(&_lowState);
[4.445s] 3: +  state->userCmd = cmdPanel->getUserCmd();
[4.446s] 3: +  state->userValue = cmdPanel->getUserValue();
[4.446s] 3: @@ -79,10 +85,10 @@
[4.446s] 3: -    _joint_state.header.stamp = ros::Time::now();
[4.446s] 3: -    _joint_state.name = {"FR_hip_joint", "FR_thigh_joint", "FR_calf_joint", 
[4.446s] 3: -                         "FL_hip_joint", "FL_thigh_joint", "FL_calf_joint",  
[4.446s] 3: -                         "RR_hip_joint", "RR_thigh_joint", "RR_calf_joint", 
[4.446s] 3: -                         "RL_hip_joint", "RL_thigh_joint", "RL_calf_joint"};
[4.446s] 3: -    for(int i(0); i<12; ++i){
[4.446s] 3: -        _joint_state.position[i] = state->motorState[i].q;
[4.446s] 3: -        _joint_state.velocity[i] = state->motorState[i].dq;
[4.446s] 3: -        _joint_state.effort[i]   = state->motorState[i].tauEst;
[4.446s] 3: -    }
[4.446s] 3: +  _joint_state.header.stamp = ros::Time::now();
[4.446s] 3: +  _joint_state.name = {"FR_hip_joint", "FR_thigh_joint", "FR_calf_joint",
[4.446s] 3: +    "FL_hip_joint", "FL_thigh_joint", "FL_calf_joint",
[4.446s] 3: +    "RR_hip_joint", "RR_thigh_joint", "RR_calf_joint",
[4.446s] 3: +    "RL_hip_joint", "RL_thigh_joint", "RL_calf_joint"};
[4.446s] 3: +  for (int i(0); i < 12; ++i) {
[4.447s] 3: +    _joint_state.position[i] = state->motorState[i].q;
[4.447s] 3: +    _joint_state.velocity[i] = state->motorState[i].dq;
[4.447s] 3: +    _joint_state.effort[i] = state->motorState[i].tauEst;
[4.447s] 3: +  }
[4.447s] 3: @@ -90 +96 @@
[4.447s] 3: -    _pub.publish(_joint_state);
[4.447s] 3: +  _pub.publish(_joint_state);
[4.447s] 3: @@ -94 +100 @@
[4.447s] 3: -#endif  // COMPILE_WITH_REAL_ROBOT
[4.447s] 3: +#endif  // COMPILE_WITH_REAL_ROBOT
[4.447s] 3: 
[4.447s] 3: Code style divergence in file 'src/interface/KeyBoard.cpp':
[4.447s] 3: 
[4.450s] 3: --- src/interface/KeyBoard.cpp
[4.450s] 3: +++ src/interface/KeyBoard.cpp.uncrustify
[4.450s] 3: @@ -7,3 +7,4 @@
[4.450s] 3: -KeyBoard::KeyBoard(){
[4.450s] 3: -    userCmd = UserCommand::NONE;
[4.450s] 3: -    userValue.setZero();
[4.450s] 3: +KeyBoard::KeyBoard()
[4.450s] 3: +{
[4.450s] 3: +  userCmd = UserCommand::NONE;
[4.450s] 3: +  userValue.setZero();
[4.450s] 3: @@ -11,4 +12,4 @@
[4.450s] 3: -    tcgetattr( fileno( stdin ), &_oldSettings );
[4.450s] 3: -    _newSettings = _oldSettings;
[4.451s] 3: -    _newSettings.c_lflag &= (~ICANON & ~ECHO);
[4.451s] 3: -    tcsetattr( fileno( stdin ), TCSANOW, &_newSettings );
[4.451s] 3: +  tcgetattr(fileno(stdin), &_oldSettings);
[4.451s] 3: +  _newSettings = _oldSettings;
[4.451s] 3: +  _newSettings.c_lflag &= (~ICANON & ~ECHO);
[4.451s] 3: +  tcsetattr(fileno(stdin), TCSANOW, &_newSettings);
[4.451s] 3: @@ -16 +17 @@
[4.451s] 3: -    pthread_create(&_tid, NULL, runKeyBoard, (void*)this);
[4.451s] 3: +  pthread_create(&_tid, NULL, runKeyBoard, (void *)this);
[4.451s] 3: @@ -19,4 +20,5 @@
[4.451s] 3: -KeyBoard::~KeyBoard(){
[4.451s] 3: -    pthread_cancel(_tid);
[4.451s] 3: -    pthread_join(_tid, NULL);
[4.451s] 3: -    tcsetattr( fileno( stdin ), TCSANOW, &_oldSettings );
[4.451s] 3: +KeyBoard::~KeyBoard()
[4.452s] 3: +{
[4.452s] 3: +  pthread_cancel(_tid);
[4.452s] 3: +  pthread_join(_tid, NULL);
[4.452s] 3: +  tcsetattr(fileno(stdin), TCSANOW, &_oldSettings);
[4.452s] 3: @@ -25,2 +27,3 @@
[4.452s] 3: -UserCommand KeyBoard::checkCmd(){
[4.452s] 3: -    switch (_c){
[4.452s] 3: +UserCommand KeyBoard::checkCmd()
[4.452s] 3: +{
[4.452s] 3: +  switch (_c) {
[4.452s] 3: @@ -28 +31 @@
[4.452s] 3: -        return UserCommand::L2_B;
[4.452s] 3: +      return UserCommand::L2_B;
[4.452s] 3: @@ -30 +33 @@
[4.452s] 3: -        return UserCommand::L2_A;
[4.452s] 3: +      return UserCommand::L2_A;
[4.452s] 3: @@ -32 +35 @@
[4.452s] 3: -        return UserCommand::L2_X;
[4.452s] 3: +      return UserCommand::L2_X;
[4.453s] 3: @@ -34 +37 @@
[4.453s] 3: -        return UserCommand::START;
[4.453s] 3: +      return UserCommand::START;
[4.453s] 3: @@ -37 +40 @@
[4.453s] 3: -        return UserCommand::L2_Y;
[4.453s] 3: +      return UserCommand::L2_Y;
[4.453s] 3: @@ -41 +44 @@
[4.453s] 3: -        return UserCommand::L2_Y;
[4.453s] 3: +      return UserCommand::L2_Y;
[4.453s] 3: @@ -44 +47 @@
[4.453s] 3: -        return UserCommand::L1_X;
[4.453s] 3: +      return UserCommand::L1_X;
[4.453s] 3: @@ -46 +49 @@
[4.453s] 3: -        return UserCommand::L1_A;
[4.453s] 3: +      return UserCommand::L1_A;
[4.453s] 3: @@ -48 +51 @@
[4.453s] 3: -        return UserCommand::L1_Y;
[4.453s] 3: +      return UserCommand::L1_Y;
[4.453s] 3: @@ -50,2 +53,2 @@
[4.453s] 3: -        userValue.setZero();
[4.453s] 3: -        return UserCommand::NONE;
[4.453s] 3: +      userValue.setZero();
[4.453s] 3: +      return UserCommand::NONE;
[4.454s] 3: @@ -53,2 +56,2 @@
[4.454s] 3: -        return UserCommand::NONE;
[4.454s] 3: -    }
[4.454s] 3: +      return UserCommand::NONE;
[4.454s] 3: +  }
[4.454s] 3: @@ -57,14 +60,15 @@
[4.454s] 3: -void KeyBoard::changeValue(){
[4.454s] 3: -    switch (_c){
[4.454s] 3: -    case 'w':case 'W':
[4.454s] 3: -        userValue.ly = min<float>(userValue.ly+sensitivityLeft, 1.0);
[4.454s] 3: -        break;
[4.454s] 3: -    case 's':case 'S':
[4.454s] 3: -        userValue.ly = max<float>(userValue.ly-sensitivityLeft, -1.0);
[4.454s] 3: -        break;
[4.454s] 3: -    case 'd':case 'D':
[4.454s] 3: -        userValue.lx = min<float>(userValue.lx+sensitivityLeft, 1.0);
[4.454s] 3: -        break;
[4.454s] 3: -    case 'a':case 'A':
[4.454s] 3: -        userValue.lx = max<float>(userValue.lx-sensitivityLeft, -1.0);
[4.454s] 3: -        break;
[4.454s] 3: +void KeyBoard::changeValue()
[4.454s] 3: +{
[4.454s] 3: +  switch (_c) {
[4.454s] 3: +    case 'w': case 'W':
[4.455s] 3: +      userValue.ly = min<float>(userValue.ly + sensitivityLeft, 1.0);
[4.455s] 3: +      break;
[4.455s] 3: +    case 's': case 'S':
[4.455s] 3: +      userValue.ly = max<float>(userValue.ly - sensitivityLeft, -1.0);
[4.455s] 3: +      break;
[4.455s] 3: +    case 'd': case 'D':
[4.455s] 3: +      userValue.lx = min<float>(userValue.lx + sensitivityLeft, 1.0);
[4.455s] 3: +      break;
[4.455s] 3: +    case 'a': case 'A':
[4.455s] 3: +      userValue.lx = max<float>(userValue.lx - sensitivityLeft, -1.0);
[4.455s] 3: +      break;
[4.455s] 3: @@ -72,12 +76,12 @@
[4.455s] 3: -    case 'i':case 'I':
[4.455s] 3: -        userValue.ry = min<float>(userValue.ry+sensitivityRight, 1.0);
[4.455s] 3: -        break;
[4.455s] 3: -    case 'k':case 'K':
[4.455s] 3: -        userValue.ry = max<float>(userValue.ry-sensitivityRight, -1.0);
[4.455s] 3: -        break;
[4.455s] 3: -    case 'l':case 'L':
[4.455s] 3: -        userValue.rx = min<float>(userValue.rx+sensitivityRight, 1.0);
[4.455s] 3: -        break;
[4.455s] 3: -    case 'j':case 'J':
[4.455s] 3: -        userValue.rx = max<float>(userValue.rx-sensitivityRight, -1.0);
[4.456s] 3: -        break;
[4.456s] 3: +    case 'i': case 'I':
[4.456s] 3: +      userValue.ry = min<float>(userValue.ry + sensitivityRight, 1.0);
[4.456s] 3: +      break;
[4.456s] 3: +    case 'k': case 'K':
[4.456s] 3: +      userValue.ry = max<float>(userValue.ry - sensitivityRight, -1.0);
[4.456s] 3: +      break;
[4.456s] 3: +    case 'l': case 'L':
[4.456s] 3: +      userValue.rx = min<float>(userValue.rx + sensitivityRight, 1.0);
[4.456s] 3: +      break;
[4.456s] 3: +    case 'j': case 'J':
[4.456s] 3: +      userValue.rx = max<float>(userValue.rx - sensitivityRight, -1.0);
[4.456s] 3: +      break;
[4.456s] 3: @@ -85,2 +89,2 @@
[4.456s] 3: -        break;
[4.457s] 3: -    }
[4.457s] 3: +      break;
[4.457s] 3: +  }
[4.457s] 3: @@ -89,3 +93,4 @@
[4.457s] 3: -void* KeyBoard::runKeyBoard(void *arg){
[4.457s] 3: -    ((KeyBoard*)arg)->run(NULL);
[4.457s] 3: -    return NULL;
[4.457s] 3: +void * KeyBoard::runKeyBoard(void * arg)
[4.457s] 3: +{
[4.457s] 3: +  ((KeyBoard *)arg)->run(NULL);
[4.457s] 3: +  return NULL;
[4.457s] 3: @@ -94,4 +99,5 @@
[4.457s] 3: -void* KeyBoard::run(void *arg){
[4.458s] 3: -    while(1){
[4.458s] 3: -        FD_ZERO(&set);
[4.458s] 3: -        FD_SET( fileno( stdin ), &set );
[4.458s] 3: +void * KeyBoard::run(void * arg)
[4.458s] 3: +{
[4.458s] 3: +  while (1) {
[4.458s] 3: +    FD_ZERO(&set);
[4.458s] 3: +    FD_SET(fileno(stdin), &set);
[4.458s] 3: @@ -99 +105 @@
[4.458s] 3: -        res = select( fileno( stdin )+1, &set, NULL, NULL, NULL);
[4.458s] 3: +    res = select(fileno(stdin) + 1, &set, NULL, NULL, NULL);
[4.458s] 3: @@ -101,8 +107,7 @@
[4.458s] 3: -        if(res > 0){
[4.458s] 3: -            ret = read( fileno( stdin ), &_c, 1 );
[4.458s] 3: -            userCmd = checkCmd();
[4.458s] 3: -            if(userCmd == UserCommand::NONE)
[4.458s] 3: -                changeValue();
[4.458s] 3: -            _c = '\0';
[4.458s] 3: -        }
[4.458s] 3: -        usleep(1000);
[4.458s] 3: +    if (res > 0) {
[4.458s] 3: +      ret = read(fileno(stdin), &_c, 1);
[4.458s] 3: +      userCmd = checkCmd();
[4.459s] 3: +      if (userCmd == UserCommand::NONE) {
[4.459s] 3: +        changeValue();
[4.459s] 3: +      }
[4.459s] 3: +      _c = '\0';
[4.459s] 3: @@ -110,2 +115,4 @@
[4.459s] 3: -    return NULL;
[4.459s] 3: -}
[4.459s] 3: +    usleep(1000);
[4.459s] 3: +  }
[4.459s] 3: +  return NULL;
[4.459s] 3: +}
[4.459s] 3: 
[4.459s] 3: Code style divergence in file 'src/interface/WirelessHandle.cpp':
[4.459s] 3: 
[4.459s] 3: --- src/interface/WirelessHandle.cpp
[4.459s] 3: +++ src/interface/WirelessHandle.cpp.uncrustify
[4.459s] 3: @@ -11 +11,2 @@
[4.459s] 3: -WirelessHandle::WirelessHandle(){
[4.459s] 3: +WirelessHandle::WirelessHandle()
[4.459s] 3: +{
[4.459s] 3: @@ -14 +15,2 @@
[4.459s] 3: -void WirelessHandle::receiveHandle(UNITREE_LEGGED_SDK::LowState *lowState){
[4.459s] 3: +void WirelessHandle::receiveHandle(UNITREE_LEGGED_SDK::LowState * lowState)
[4.459s] 3: +{
[4.460s] 3: @@ -16 +18 @@
[4.460s] 3: -    memcpy(&_keyData, lowState->wirelessRemote, 40);  // note: available in the unitree_legged_sdk_3.2
[4.460s] 3: +  memcpy(&_keyData, lowState->wirelessRemote, 40);    // note: available in the unitree_legged_sdk_3.2
[4.460s] 3: @@ -19,14 +21,15 @@
[4.460s] 3: -    memcpy(&_keyData, &lowState->wirelessRemote[0], 40);
[4.460s] 3: -#endif  
[4.460s] 3: -    if(((int)_keyData.btn.components.L2 == 1) && 
[4.460s] 3: -       ((int)_keyData.btn.components.B  == 1)){
[4.460s] 3: -        userCmd = UserCommand::L2_B;
[4.460s] 3: -    }
[4.460s] 3: -    else if(((int)_keyData.btn.components.L2 == 1) && 
[4.460s] 3: -            ((int)_keyData.btn.components.A  == 1)){
[4.460s] 3: -        userCmd = UserCommand::L2_A;
[4.460s] 3: -    }
[4.460s] 3: -    else if(((int)_keyData.btn.components.L2 == 1) && 
[4.460s] 3: -            ((int)_keyData.btn.components.X  == 1)){
[4.460s] 3: -        userCmd = UserCommand::L2_X;
[4.460s] 3: -    }
[4.460s] 3: +  memcpy(&_keyData, &lowState->wirelessRemote[0], 40);
[4.460s] 3: +#endif
[4.461s] 3: +  if (((int)_keyData.btn.components.L2 == 1) &&
[4.461s] 3: +    ((int)_keyData.btn.components.B == 1))
[4.461s] 3: +  {
[4.461s] 3: +    userCmd = UserCommand::L2_B;
[4.461s] 3: +  } else if (((int)_keyData.btn.components.L2 == 1) &&
[4.461s] 3: +    ((int)_keyData.btn.components.A == 1))
[4.461s] 3: +  {
[4.461s] 3: +    userCmd = UserCommand::L2_A;
[4.461s] 3: +  } else if (((int)_keyData.btn.components.L2 == 1) &&
[4.461s] 3: +    ((int)_keyData.btn.components.X == 1))
[4.461s] 3: +  {
[4.461s] 3: +    userCmd = UserCommand::L2_X;
[4.461s] 3: +  }
[4.461s] 3: @@ -35,4 +38,5 @@
[4.461s] 3: -    else if(((int)_keyData.btn.components.L2 == 1) && 
[4.461s] 3: -            ((int)_keyData.btn.components.Y  == 1)){
[4.461s] 3: -        userCmd = UserCommand::L2_Y;
[4.461s] 3: -    }
[4.461s] 3: +  else if (((int)_keyData.btn.components.L2 == 1) &&
[4.461s] 3: +    ((int)_keyData.btn.components.Y == 1))
[4.461s] 3: +  {
[4.461s] 3: +    userCmd = UserCommand::L2_Y;
[4.462s] 3: +  }
[4.462s] 3: @@ -42,4 +46,5 @@
[4.462s] 3: -    else if(((int)_keyData.btn.components.L2 == 1) && 
[4.462s] 3: -            ((int)_keyData.btn.components.Y  == 1)){
[4.462s] 3: -        userCmd = UserCommand::L2_Y;
[4.462s] 3: -    }
[4.462s] 3: +  else if (((int)_keyData.btn.components.L2 == 1) &&
[4.462s] 3: +    ((int)_keyData.btn.components.Y == 1))
[4.462s] 3: +  {
[4.462s] 3: +    userCmd = UserCommand::L2_Y;
[4.462s] 3: +  }
[4.462s] 3: @@ -48,15 +53,15 @@
[4.462s] 3: -    else if(((int)_keyData.btn.components.L1 == 1) && 
[4.462s] 3: -            ((int)_keyData.btn.components.X  == 1)){
[4.462s] 3: -        userCmd = UserCommand::L1_X;
[4.462s] 3: -    }
[4.462s] 3: -    else if(((int)_keyData.btn.components.L1 == 1) && 
[4.462s] 3: -            ((int)_keyData.btn.components.A  == 1)){
[4.462s] 3: -        userCmd = UserCommand::L1_A;
[4.462s] 3: -    }
[4.462s] 3: -    else if(((int)_keyData.btn.components.L1 == 1) && 
[4.462s] 3: -            ((int)_keyData.btn.components.Y  == 1)){
[4.463s] 3: -        userCmd = UserCommand::L1_Y;
[4.463s] 3: -    }
[4.463s] 3: -    else if((int)_keyData.btn.components.start == 1){
[4.463s] 3: -        userCmd = UserCommand::START;
[4.463s] 3: -    }
[4.463s] 3: +  else if (((int)_keyData.btn.components.L1 == 1) &&
[4.463s] 3: +    ((int)_keyData.btn.components.X == 1))
[4.463s] 3: +  {
[4.463s] 3: +    userCmd = UserCommand::L1_X;
[4.463s] 3: +  } else if (((int)_keyData.btn.components.L1 == 1) &&
[4.463s] 3: +    ((int)_keyData.btn.components.A == 1))
[4.463s] 3: +  {
[4.463s] 3: +    userCmd = UserCommand::L1_A;
[4.463s] 3: +  } else if (((int)_keyData.btn.components.L1 == 1) &&
[4.463s] 3: +    ((int)_keyData.btn.components.Y == 1))
[4.463s] 3: +  {
[4.463s] 3: +    userCmd = UserCommand::L1_Y;
[4.463s] 3: +  } else if ((int)_keyData.btn.components.start == 1) {
[4.463s] 3: +    userCmd = UserCommand::START;
[4.463s] 3: +  }
[4.463s] 3: @@ -64,5 +69,5 @@
[4.463s] 3: -    userValue.L2 = killZeroOffset(_keyData.L2, 0.08);
[4.463s] 3: -    userValue.lx = killZeroOffset(_keyData.lx, 0.08);
[4.463s] 3: -    userValue.ly = killZeroOffset(_keyData.ly, 0.08);
[4.464s] 3: -    userValue.rx = killZeroOffset(_keyData.rx, 0.08);
[4.464s] 3: -    userValue.ry = killZeroOffset(_keyData.ry, 0.08);
[4.464s] 3: +  userValue.L2 = killZeroOffset(_keyData.L2, 0.08);
[4.464s] 3: +  userValue.lx = killZeroOffset(_keyData.lx, 0.08);
[4.464s] 3: +  userValue.ly = killZeroOffset(_keyData.ly, 0.08);
[4.464s] 3: +  userValue.rx = killZeroOffset(_keyData.rx, 0.08);
[4.464s] 3: +  userValue.ry = killZeroOffset(_keyData.ry, 0.08);
[4.464s] 3: 
[4.464s] 3: Code style divergence in file 'src/main.cpp':
[4.464s] 3: 
[4.464s] 3: --- src/main.cpp
[4.464s] 3: +++ src/main.cpp.uncrustify
[4.464s] 3: @@ -33,2 +33,2 @@
[4.464s] 3: -    std::cout << "stop the controller" << std::endl;
[4.464s] 3: -    running = false;
[4.464s] 3: +  std::cout << "stop the controller" << std::endl;
[4.464s] 3: +  running = false;
[4.464s] 3: @@ -39,7 +39,6 @@
[4.464s] 3: -    pid_t pid = getpid();
[4.464s] 3: -    sched_param param;
[4.464s] 3: -    param.sched_priority = sched_get_priority_max(SCHED_FIFO);
[4.464s] 3: -    if (sched_setscheduler(pid, SCHED_FIFO, &param) == -1)
[4.464s] 3: -    {
[4.465s] 3: -        std::cout << "[ERROR] Function setProcessScheduler failed." << std::endl;
[4.465s] 3: -    }
[4.465s] 3: +  pid_t pid = getpid();
[4.465s] 3: +  sched_param param;
[4.465s] 3: +  param.sched_priority = sched_get_priority_max(SCHED_FIFO);
[4.465s] 3: +  if (sched_setscheduler(pid, SCHED_FIFO, &param) == -1) {
[4.465s] 3: +    std::cout << "[ERROR] Function setProcessScheduler failed." << std::endl;
[4.465s] 3: +  }
[4.465s] 3: @@ -48 +47 @@
[4.465s] 3: -int main(int argc, char **argv)
[4.465s] 3: +int main(int argc, char ** argv)
[4.465s] 3: @@ -50,4 +49,4 @@
[4.465s] 3: -    /* set real-time process */
[4.465s] 3: -    setProcessScheduler();
[4.465s] 3: -    /* set the print format */
[4.465s] 3: -    std::cout << std::fixed << std::setprecision(3);
[4.465s] 3: +  /* set real-time process */
[4.465s] 3: +  setProcessScheduler();
[4.465s] 3: +  /* set the print format */
[4.465s] 3: +  std::cout << std::fixed << std::setprecision(3);
[4.465s] 3: @@ -56 +55 @@
[4.465s] 3: -    // ros::init(argc, argv, "unitree_gazebo_servo");
[4.465s] 3: +  // ros::init(argc, argv, "unitree_gazebo_servo");
[4.466s] 3: @@ -58,4 +57,4 @@
[4.466s] 3: -    // ROS 2
[4.466s] 3: -    rclcpp::init(argc, argv);
[4.466s] 3: -    auto node = std::make_shared<rclcpp::Node>("unitree_gazebo_server");
[4.466s] 3: -    std::cout << "initialized node" << std::endl;
[4.466s] 3: +  // ROS 2
[4.466s] 3: +  rclcpp::init(argc, argv);
[4.466s] 3: +  auto node = std::make_shared<rclcpp::Node>("unitree_gazebo_server");
[4.466s] 3: +  std::cout << "initialized node" << std::endl;
[4.466s] 3: @@ -65,2 +64,2 @@
[4.466s] 3: -    IOInterface *ioInter;
[4.466s] 3: -    CtrlPlatform ctrlPlat;
[4.466s] 3: +  IOInterface * ioInter;
[4.466s] 3: +  CtrlPlatform ctrlPlat;
[4.466s] 3: @@ -69,2 +68,2 @@
[4.466s] 3: -    ioInter = new IOROS(node);
[4.466s] 3: -    ctrlPlat = CtrlPlatform::GAZEBO;
[4.466s] 3: +  ioInter = new IOROS(node);
[4.466s] 3: +  ctrlPlat = CtrlPlatform::GAZEBO;
[4.466s] 3: @@ -74,2 +73,2 @@
[4.466s] 3: -    ioInter = new IOSDK();
[4.466s] 3: -    ctrlPlat = CtrlPlatform::REALROBOT;
[4.466s] 3: +  ioInter = new IOSDK();
[4.466s] 3: +  ctrlPlat = CtrlPlatform::REALROBOT;
[4.467s] 3: @@ -78,5 +77,5 @@
[4.467s] 3: -    CtrlComponents *ctrlComp = new CtrlComponents(ioInter);
[4.467s] 3: -    ctrlComp->ctrlPlatform = ctrlPlat;
[4.467s] 3: -    ctrlComp->dt = 0.002; // run at 500hz
[4.467s] 3: -    ctrlComp->running = &running;
[4.467s] 3: -    std::cout << "initialized ctrl components" << std::endl;
[4.467s] 3: +  CtrlComponents * ctrlComp = new CtrlComponents(ioInter);
[4.467s] 3: +  ctrlComp->ctrlPlatform = ctrlPlat;
[4.467s] 3: +  ctrlComp->dt = 0.002;   // run at 500hz
[4.467s] 3: +  ctrlComp->running = &running;
[4.467s] 3: +  std::cout << "initialized ctrl components" << std::endl;
[4.467s] 3: @@ -85 +84 @@
[4.467s] 3: -    ctrlComp->robotModel = new A1Robot();
[4.467s] 3: +  ctrlComp->robotModel = new A1Robot();
[4.467s] 3: @@ -88 +87 @@
[4.467s] 3: -    ctrlComp->robotModel = new Go1Robot();
[4.467s] 3: +  ctrlComp->robotModel = new Go1Robot();
[4.467s] 3: @@ -91,6 +90,6 @@
[4.467s] 3: -    ctrlComp->waveGen = new WaveGenerator(0.45, 0.5, Vec4(0, 0.5, 0.5, 0)); // Trot
[4.467s] 3: -    std::cout << "initialized wave generator" << std::endl;
[4.467s] 3: -    // ctrlComp->waveGen = new WaveGenerator(1.1, 0.75, Vec4(0, 0.25, 0.5, 0.75));  //Crawl, only for sim
[4.467s] 3: -    // ctrlComp->waveGen = new WaveGenerator(0.4, 0.6, Vec4(0, 0.5, 0.5, 0));  //Walking Trot, only for sim
[4.467s] 3: -    // ctrlComp->waveGen = new WaveGenerator(0.4, 0.35, Vec4(0, 0.5, 0.5, 0));  //Running Trot, only for sim
[4.468s] 3: -    // ctrlComp->waveGen = new WaveGenerator(0.4, 0.7, Vec4(0, 0, 0, 0));  //Pronk, only for sim
[4.468s] 3: +  ctrlComp->waveGen = new WaveGenerator(0.45, 0.5, Vec4(0, 0.5, 0.5, 0));   // Trot
[4.468s] 3: +  std::cout << "initialized wave generator" << std::endl;
[4.468s] 3: +  // ctrlComp->waveGen = new WaveGenerator(1.1, 0.75, Vec4(0, 0.25, 0.5, 0.75));  //Crawl, only for sim
[4.468s] 3: +  // ctrlComp->waveGen = new WaveGenerator(0.4, 0.6, Vec4(0, 0.5, 0.5, 0));  //Walking Trot, only for sim
[4.468s] 3: +  // ctrlComp->waveGen = new WaveGenerator(0.4, 0.35, Vec4(0, 0.5, 0.5, 0));  //Running Trot, only for sim
[4.468s] 3: +  // ctrlComp->waveGen = new WaveGenerator(0.4, 0.7, Vec4(0, 0, 0, 0));  //Pronk, only for sim
[4.468s] 3: @@ -98 +97 @@
[4.468s] 3: -    ctrlComp->geneObj();
[4.468s] 3: +  ctrlComp->geneObj();
[4.468s] 3: @@ -100,2 +99,2 @@
[4.468s] 3: -    ControlFrame ctrlFrame(ctrlComp);
[4.468s] 3: -    std::cout << "initialized ctrl frame" << std::endl;
[4.468s] 3: +  ControlFrame ctrlFrame(ctrlComp);
[4.468s] 3: +  std::cout << "initialized ctrl frame" << std::endl;
[4.468s] 3: @@ -103,2 +102,2 @@
[4.468s] 3: -    signal(SIGINT, ShutDown);
[4.468s] 3: -    // std::cout << "initialized main sig shutdown" << std::endl;
[4.468s] 3: +  signal(SIGINT, ShutDown);
[4.468s] 3: +  // std::cout << "initialized main sig shutdown" << std::endl;
[4.469s] 3: @@ -106,5 +105,4 @@
[4.469s] 3: -    while (running)
[4.469s] 3: -    {   
[4.469s] 3: -        // std::cout << "running main loop" << std::endl;
[4.469s] 3: -        ctrlFrame.run();
[4.469s] 3: -    }
[4.469s] 3: +  while (running) {
[4.469s] 3: +    // std::cout << "running main loop" << std::endl;
[4.469s] 3: +    ctrlFrame.run();
[4.469s] 3: +  }
[4.469s] 3: @@ -112,2 +110,2 @@
[4.469s] 3: -    delete ctrlComp;
[4.469s] 3: -    return 0;
[4.469s] 3: +  delete ctrlComp;
[4.469s] 3: +  return 0;
[4.469s] 3: 
[4.469s] 3: Code style divergence in file 'src/quadProgpp/Array.cc':
[4.469s] 3: 
[4.469s] 3: --- src/quadProgpp/Array.cc
[4.469s] 3: +++ src/quadProgpp/Array.cc.uncrustify
[4.469s] 3: @@ -2,2 +2,2 @@
[4.469s] 3: -// This file is part of QuadProg++:  
[4.470s] 3: -// Copyright (C) 2006--2009 Luca Di Gaspero. 
[4.470s] 3: +// This file is part of QuadProg++:
[4.470s] 3: +// Copyright (C) 2006--2009 Luca Di Gaspero.
[4.470s] 3: @@ -16,8 +16,6 @@
[4.470s] 3: -std::set<unsigned int> seq(unsigned int s, unsigned int e)
[4.470s] 3: -{
[4.470s] 3: -	std::set<unsigned int> tmp;
[4.470s] 3: -	for (unsigned int i = s; i <= e; i++)
[4.470s] 3: -		tmp.insert(i);
[4.470s] 3: -	
[4.470s] 3: -	return tmp;
[4.470s] 3: -}
[4.470s] 3: +  std::set < unsigned int > seq(unsigned int s, unsigned int e)
[4.470s] 3: +  {
[4.470s] 3: +    std::set < unsigned int > tmp;
[4.470s] 3: +    for (unsigned int i = s; i <= e; i++) {
[4.470s] 3: +      tmp.insert(i);
[4.470s] 3: +    }
[4.470s] 3: @@ -25,7 +23,10 @@
[4.470s] 3: -std::set<unsigned int> singleton(unsigned int i)
[4.470s] 3: -{
[4.470s] 3: -	std::set<unsigned int> tmp;
[4.470s] 3: -	tmp.insert(i);
[4.470s] 3: -	
[4.471s] 3: -	return tmp;
[4.471s] 3: -}
[4.471s] 3: +    return tmp;
[4.471s] 3: +  }
[4.471s] 3: +
[4.471s] 3: +  std::set < unsigned int > singleton(unsigned int i)
[4.471s] 3: +  {
[4.471s] 3: +    std::set < unsigned int > tmp;
[4.471s] 3: +    tmp.insert(i);
[4.471s] 3: +
[4.471s] 3: +    return tmp;
[4.471s] 3: +  }
[4.471s] 3: 
[4.471s] 3: Code style divergence in file 'src/quadProgpp/QuadProg++.cc':
[4.471s] 3: 
[4.471s] 3: --- src/quadProgpp/QuadProg++.cc
[4.471s] 3: +++ src/quadProgpp/QuadProg++.cc.uncrustify
[4.471s] 3: @@ -1 +1 @@
[4.471s] 3: -/* 
[4.471s] 3: +/*
[4.471s] 3: @@ -3 +3 @@
[4.471s] 3: - 
[4.471s] 3: +
[4.471s] 3: @@ -8 +8 @@
[4.472s] 3: - 
[4.472s] 3: +
[4.472s] 3: @@ -11 +11 @@
[4.472s] 3: - 
[4.472s] 3: +
[4.472s] 3: @@ -25,6 +25,14 @@
[4.472s] 3: -// Utility functions for updating some data needed by the solution method 
[4.472s] 3: -void compute_d(Vector<double>& d, const Matrix<double>& J, const Vector<double>& np);
[4.472s] 3: -void update_z(Vector<double>& z, const Matrix<double>& J, const Vector<double>& d, int iq);
[4.472s] 3: -void update_r(const Matrix<double>& R, Vector<double>& r, const Vector<double>& d, int iq);
[4.472s] 3: -bool add_constraint(Matrix<double>& R, Matrix<double>& J, Vector<double>& d, unsigned int& iq, double& rnorm);
[4.472s] 3: -void delete_constraint(Matrix<double>& R, Matrix<double>& J, Vector<int>& A, Vector<double>& u, unsigned int n, int p, unsigned int& iq, int l);
[4.472s] 3: +// Utility functions for updating some data needed by the solution method
[4.472s] 3: +  void compute_d(Vector < double > & d, const Matrix < double > & J, const Vector < double > & np);
[4.472s] 3: +  void update_z(
[4.472s] 3: +    Vector < double > & z, const Matrix < double > & J, const Vector < double > & d,
[4.472s] 3: +    int iq);
[4.472s] 3: +  void update_r(
[4.472s] 3: +    const Matrix < double > & R, Vector < double > & r, const Vector < double > & d,
[4.472s] 3: +    int iq);
[4.472s] 3: +  bool add_constraint(
[4.472s] 3: +    Matrix < double > & R, Matrix < double > & J, Vector < double > & d,
[4.472s] 3: +    unsigned int & iq, double & rnorm);
[4.473s] 3: +  void delete_constraint(
[4.473s] 3: +    Matrix < double > & R, Matrix < double > & J, Vector < int > & A,
[4.473s] 3: +    Vector < double > & u, unsigned int n, int p, unsigned int & iq, int l);
[4.473s] 3: @@ -34,6 +42,12 @@
[4.473s] 3: -void cholesky_decomposition(Matrix<double>& A);
[4.473s] 3: -void cholesky_solve(const Matrix<double>& L, Vector<double>& x, const Vector<double>& b);
[4.473s] 3: -void forward_elimination(const Matrix<double>& L, Vector<double>& y, const Vector<double>& b);
[4.473s] 3: -void backward_elimination(const Matrix<double>& U, Vector<double>& x, const Vector<double>& y);
[4.473s] 3: -
[4.473s] 3: -// Utility functions for computing the scalar product and the euclidean 
[4.473s] 3: +  void cholesky_decomposition(Matrix < double > & A);
[4.473s] 3: +  void cholesky_solve(
[4.473s] 3: +    const Matrix < double > & L, Vector < double > & x,
[4.473s] 3: +    const Vector < double > & b);
[4.473s] 3: +  void forward_elimination(
[4.473s] 3: +    const Matrix < double > & L, Vector < double > & y,
[4.473s] 3: +    const Vector < double > & b);
[4.473s] 3: +  void backward_elimination(
[4.473s] 3: +    const Matrix < double > & U, Vector < double > & x,
[4.473s] 3: +    const Vector < double > & y);
[4.473s] 3: +
[4.474s] 3: +// Utility functions for computing the scalar product and the euclidean
[4.474s] 3: @@ -41,2 +55,2 @@
[4.474s] 3: -double scalar_product(const Vector<double>& x, const Vector<double>& y);
[4.474s] 3: -double distance(double a, double b);
[4.474s] 3: +  double scalar_product(const Vector < double > & x, const Vector < double > & y);
[4.474s] 3: +  double distance(double a, double b);
[4.474s] 3: @@ -45,4 +59,4 @@
[4.474s] 3: -void print_matrix(const char* name, const Matrix<double>& A, int n = -1, int m = -1);
[4.474s] 3: -
[4.474s] 3: -template<typename T>
[4.474s] 3: -void print_vector(const char* name, const Vector<T>& v, int n = -1);
[4.474s] 3: +  void print_matrix(const char * name, const Matrix < double > & A, int n = -1, int m = -1);
[4.474s] 3: +
[4.474s] 3: +  template < typename T >
[4.474s] 3: +  void print_vector(const char * name, const Vector < T > & v, int n = -1);
[4.474s] 3: @@ -51,44 +65,45 @@
[4.474s] 3: -double solve_quadprog(Matrix<double>& G, Vector<double>& g0, 
[4.474s] 3: -                      const Matrix<double>& CE, const Vector<double>& ce0,  
[4.474s] 3: -                      const Matrix<double>& CI, const Vector<double>& ci0, 
[4.474s] 3: -                      Vector<double>& x)
[4.474s] 3: -{
[4.474s] 3: -  std::ostringstream msg;
[4.475s] 3: -  unsigned int n = G.ncols(), p = CE.ncols(), m = CI.ncols();
[4.475s] 3: -  if (G.nrows() != n)
[4.475s] 3: -  {
[4.475s] 3: -    msg << "The matrix G is not a squared matrix (" << G.nrows() << " x " << G.ncols() << ")";
[4.475s] 3: -    throw std::logic_error(msg.str());
[4.475s] 3: -  }
[4.475s] 3: -  if (CE.nrows() != n)
[4.475s] 3: -  {
[4.475s] 3: -    msg << "The matrix CE is incompatible (incorrect number of rows " << CE.nrows() << " , expecting " << n << ")";
[4.475s] 3: -    throw std::logic_error(msg.str());
[4.475s] 3: -  }
[4.475s] 3: -  if (ce0.size() != p)
[4.475s] 3: -  {
[4.475s] 3: -    msg << "The vector ce0 is incompatible (incorrect dimension " << ce0.size() << ", expecting " << p << ")";
[4.475s] 3: -    throw std::logic_error(msg.str());
[4.475s] 3: -  }
[4.475s] 3: -  if (CI.nrows() != n)
[4.475s] 3: -  {
[4.475s] 3: -    msg << "The matrix CI is incompatible (incorrect number of rows " << CI.nrows() << " , expecting " << n << ")";
[4.475s] 3: -    throw std::logic_error(msg.str());
[4.475s] 3: -  }
[4.475s] 3: -  if (ci0.size() != m)
[4.476s] 3: -  {
[4.476s] 3: -    msg << "The vector ci0 is incompatible (incorrect dimension " << ci0.size() << ", expecting " << m << ")";
[4.476s] 3: -    throw std::logic_error(msg.str());
[4.476s] 3: -  }
[4.476s] 3: -  x.resize(n);
[4.476s] 3: -  register unsigned int i, j, k, l; /* indices */
[4.476s] 3: -  int ip; // this is the index of the constraint to be added to the active set
[4.476s] 3: -  Matrix<double> R(n, n), J(n, n);
[4.476s] 3: -  Vector<double> s(m + p), z(n), r(m + p), d(n), np(n), u(m + p), x_old(n), u_old(m + p);
[4.476s] 3: -  double f_value, psi, c1, c2, sum, ss, R_norm;
[4.476s] 3: -  double inf;
[4.476s] 3: -  if (std::numeric_limits<double>::has_infinity)
[4.476s] 3: -    inf = std::numeric_limits<double>::infinity();
[4.476s] 3: -  else
[4.476s] 3: -    inf = 1.0E300;
[4.476s] 3: -  double t, t1, t2; /* t is the step lenght, which is the minimum of the partial step length t1 
[4.476s] 3: +  double solve_quadprog(
[4.476s] 3: +    Matrix < double > & G, Vector < double > & g0,
[4.476s] 3: +    const Matrix < double > & CE, const Vector < double > & ce0,
[4.476s] 3: +    const Matrix < double > & CI, const Vector < double > & ci0,
[4.476s] 3: +    Vector < double > & x)
[4.476s] 3: +  {
[4.477s] 3: +    std::ostringstream msg;
[4.477s] 3: +    unsigned int n = G.ncols(), p = CE.ncols(), m = CI.ncols();
[4.477s] 3: +    if (G.nrows() != n) {
[4.477s] 3: +      msg << "The matrix G is not a squared matrix (" << G.nrows() << " x " << G.ncols() << ")";
[4.477s] 3: +      throw std::logic_error(msg.str());
[4.477s] 3: +    }
[4.477s] 3: +    if (CE.nrows() != n) {
[4.477s] 3: +      msg << "The matrix CE is incompatible (incorrect number of rows " << CE.nrows() <<
[4.477s] 3: +        " , expecting " << n << ")";
[4.477s] 3: +      throw std::logic_error(msg.str());
[4.477s] 3: +    }
[4.477s] 3: +    if (ce0.size() != p) {
[4.477s] 3: +      msg << "The vector ce0 is incompatible (incorrect dimension " << ce0.size() <<
[4.477s] 3: +        ", expecting " << p << ")";
[4.477s] 3: +      throw std::logic_error(msg.str());
[4.477s] 3: +    }
[4.477s] 3: +    if (CI.nrows() != n) {
[4.477s] 3: +      msg << "The matrix CI is incompatible (incorrect number of rows " << CI.nrows() <<
[4.477s] 3: +        " , expecting " << n << ")";
[4.477s] 3: +      throw std::logic_error(msg.str());
[4.477s] 3: +    }
[4.477s] 3: +    if (ci0.size() != m) {
[4.477s] 3: +      msg << "The vector ci0 is incompatible (incorrect dimension " << ci0.size() <<
[4.478s] 3: +        ", expecting " << m << ")";
[4.478s] 3: +      throw std::logic_error(msg.str());
[4.478s] 3: +    }
[4.478s] 3: +    x.resize(n);
[4.478s] 3: +    register unsigned int i, j, k, l; /* indices */
[4.478s] 3: +    int ip; // this is the index of the constraint to be added to the active set
[4.478s] 3: +    Matrix < double > R(n, n), J(n, n);
[4.478s] 3: +    Vector < double > s(m + p), z(n), r(m + p), d(n), np(n), u(m + p), x_old(n), u_old(m + p);
[4.478s] 3: +    double f_value, psi, c1, c2, sum, ss, R_norm;
[4.478s] 3: +    double inf;
[4.478s] 3: +    if (std::numeric_limits < double > ::has_infinity) {
[4.478s] 3: +      inf = std::numeric_limits < double > ::infinity();
[4.478s] 3: +    } else {
[4.478s] 3: +      inf = 1.0E300;
[4.478s] 3: +    }
[4.478s] 3: +    double t, t1, t2; /* t is the step lenght, which is the minimum of the partial step length t1
[4.478s] 3: @@ -96,111 +111,153 @@
[4.478s] 3: -  Vector<int> A(m + p), A_old(m + p), iai(m + p);
[4.478s] 3: -  unsigned int iq, iter = 0;
[4.478s] 3: -  Vector<bool> iaexcl(m + p);
[4.478s] 3: -	
[4.478s] 3: -  /* p is the number of equality constraints */
[4.478s] 3: -  /* m is the number of inequality constraints */
[4.479s] 3: -#ifdef TRACE_SOLVER
[4.479s] 3: -  std::cout << std::endl << "Starting solve_quadprog" << std::endl;
[4.479s] 3: -  print_matrix("G", G);
[4.479s] 3: -  print_vector("g0", g0);
[4.479s] 3: -  print_matrix("CE", CE);
[4.479s] 3: -  print_vector("ce0", ce0);
[4.479s] 3: -  print_matrix("CI", CI);
[4.479s] 3: -  print_vector("ci0", ci0);
[4.479s] 3: -#endif  
[4.479s] 3: -  
[4.479s] 3: -  /*
[4.479s] 3: -   * Preprocessing phase
[4.479s] 3: -   */
[4.479s] 3: -	
[4.479s] 3: -  /* compute the trace of the original matrix G */
[4.479s] 3: -  c1 = 0.0;
[4.479s] 3: -  for (i = 0; i < n; i++)
[4.479s] 3: -  {
[4.479s] 3: -    c1 += G[i][i];
[4.479s] 3: -  }
[4.479s] 3: -  /* decompose the matrix G in the form L^T L */
[4.479s] 3: -  cholesky_decomposition(G);
[4.479s] 3: -#ifdef TRACE_SOLVER
[4.480s] 3: -  print_matrix("G", G);
[4.480s] 3: -#endif
[4.480s] 3: -  /* initialize the matrix R */
[4.480s] 3: -  for (i = 0; i < n; i++)
[4.480s] 3: -  {
[4.480s] 3: -    d[i] = 0.0;
[4.480s] 3: -    for (j = 0; j < n; j++)
[4.480s] 3: -      R[i][j] = 0.0;
[4.480s] 3: -  }
[4.480s] 3: -  R_norm = 1.0; /* this variable will hold the norm of the matrix R */
[4.480s] 3: -  
[4.480s] 3: -  /* compute the inverse of the factorized matrix G^-1, this is the initial value for H */
[4.480s] 3: -  c2 = 0.0;
[4.480s] 3: -  for (i = 0; i < n; i++) 
[4.480s] 3: -  {
[4.480s] 3: -    d[i] = 1.0;
[4.480s] 3: -    forward_elimination(G, z, d);
[4.480s] 3: -    for (j = 0; j < n; j++)
[4.480s] 3: -      J[i][j] = z[j];
[4.480s] 3: -    c2 += z[i];
[4.480s] 3: -    d[i] = 0.0;
[4.480s] 3: -  }
[4.481s] 3: -#ifdef TRACE_SOLVER
[4.481s] 3: -  print_matrix("J", J);
[4.481s] 3: -#endif
[4.481s] 3: -  
[4.481s] 3: -  /* c1 * c2 is an estimate for cond(G) */
[4.481s] 3: -  
[4.481s] 3: -  /* 
[4.481s] 3: -    * Find the unconstrained minimizer of the quadratic form 0.5 * x G x + g0 x 
[4.481s] 3: -   * this is a feasible point in the dual space
[4.481s] 3: -   * x = G^-1 * g0
[4.481s] 3: -   */
[4.481s] 3: -  cholesky_solve(G, x, g0);
[4.481s] 3: -  for (i = 0; i < n; i++)
[4.481s] 3: -    x[i] = -x[i];
[4.481s] 3: -  /* and compute the current solution value */ 
[4.481s] 3: -  f_value = 0.5 * scalar_product(g0, x);
[4.481s] 3: -#ifdef TRACE_SOLVER
[4.481s] 3: -  std::cout << "Unconstrained solution: " << f_value << std::endl;
[4.482s] 3: -  print_vector("x", x);
[4.482s] 3: -#endif
[4.482s] 3: -  
[4.482s] 3: -  /* Add equality constraints to the working set A */
[4.482s] 3: -  iq = 0;
[4.482s] 3: -  for (i = 0; i < p; i++)
[4.482s] 3: -  {
[4.482s] 3: -    for (j = 0; j < n; j++)
[4.482s] 3: -      np[j] = CE[j][i];
[4.482s] 3: -    compute_d(d, J, np);
[4.482s] 3: -    update_z(z, J, d, iq);
[4.482s] 3: -    update_r(R, r, d, iq);
[4.482s] 3: -#ifdef TRACE_SOLVER
[4.482s] 3: -    print_matrix("R", R, n, iq);
[4.482s] 3: -    print_vector("z", z);
[4.482s] 3: -    print_vector("r", r, iq);
[4.482s] 3: -    print_vector("d", d);
[4.482s] 3: -#endif
[4.482s] 3: -    
[4.482s] 3: -    /* compute full step length t2: i.e., the minimum step in primal space s.t. the contraint 
[4.482s] 3: -      becomes feasible */
[4.483s] 3: -    t2 = 0.0;
[4.483s] 3: -    if (fabs(scalar_product(z, z)) > std::numeric_limits<double>::epsilon()) // i.e. z != 0
[4.483s] 3: -      t2 = (-scalar_product(np, x) - ce0[i]) / scalar_product(z, np);
[4.483s] 3: -    
[4.483s] 3: -    /* set x = x + t2 * z */
[4.483s] 3: -    for (k = 0; k < n; k++)
[4.483s] 3: -      x[k] += t2 * z[k];
[4.483s] 3: -    
[4.483s] 3: -    /* set u = u+ */
[4.483s] 3: -    u[iq] = t2;
[4.483s] 3: -    for (k = 0; k < iq; k++)
[4.483s] 3: -      u[k] -= t2 * r[k];
[4.483s] 3: -    
[4.483s] 3: -    /* compute the new solution value */
[4.483s] 3: -    f_value += 0.5 * (t2 * t2) * scalar_product(z, np);
[4.483s] 3: -    A[i] = -i - 1;
[4.483s] 3: -    
[4.483s] 3: -    if (!add_constraint(R, J, d, iq, R_norm))
[4.483s] 3: -    {	  
[4.483s] 3: -      // Equality constraints are linearly dependent
[4.483s] 3: -      throw std::runtime_error("Constraints are linearly dependent");
[4.484s] 3: +    Vector < int > A(m + p), A_old(m + p), iai(m + p);
[4.484s] 3: +    unsigned int iq, iter = 0;
[4.484s] 3: +    Vector < bool > iaexcl(m + p);
[4.484s] 3: +
[4.484s] 3: +    /* p is the number of equality constraints */
[4.484s] 3: +    /* m is the number of inequality constraints */
[4.484s] 3: +#ifdef TRACE_SOLVER
[4.484s] 3: +    std::cout << std::endl << "Starting solve_quadprog" << std::endl;
[4.484s] 3: +    print_matrix("G", G);
[4.484s] 3: +    print_vector("g0", g0);
[4.484s] 3: +    print_matrix("CE", CE);
[4.484s] 3: +    print_vector("ce0", ce0);
[4.484s] 3: +    print_matrix("CI", CI);
[4.484s] 3: +    print_vector("ci0", ci0);
[4.484s] 3: +#endif
[4.484s] 3: +
[4.484s] 3: +    /*
[4.484s] 3: +     * Preprocessing phase
[4.484s] 3: +     */
[4.484s] 3: +
[4.484s] 3: +    /* compute the trace of the original matrix G */
[4.484s] 3: +    c1 = 0.0;
[4.485s] 3: +    for (i = 0; i < n; i++) {
[4.485s] 3: +      c1 += G[i][i];
[4.485s] 3: +    }
[4.485s] 3: +    /* decompose the matrix G in the form L^T L */
[4.485s] 3: +    cholesky_decomposition(G);
[4.485s] 3: +#ifdef TRACE_SOLVER
[4.485s] 3: +    print_matrix("G", G);
[4.485s] 3: +#endif
[4.485s] 3: +    /* initialize the matrix R */
[4.485s] 3: +    for (i = 0; i < n; i++) {
[4.485s] 3: +      d[i] = 0.0;
[4.485s] 3: +      for (j = 0; j < n; j++) {
[4.485s] 3: +        R[i][j] = 0.0;
[4.485s] 3: +      }
[4.485s] 3: +    }
[4.485s] 3: +    R_norm = 1.0; /* this variable will hold the norm of the matrix R */
[4.485s] 3: +
[4.485s] 3: +    /* compute the inverse of the factorized matrix G^-1, this is the initial value for H */
[4.485s] 3: +    c2 = 0.0;
[4.485s] 3: +    for (i = 0; i < n; i++) {
[4.486s] 3: +      d[i] = 1.0;
[4.486s] 3: +      forward_elimination(G, z, d);
[4.486s] 3: +      for (j = 0; j < n; j++) {
[4.486s] 3: +        J[i][j] = z[j];
[4.486s] 3: +      }
[4.486s] 3: +      c2 += z[i];
[4.486s] 3: +      d[i] = 0.0;
[4.486s] 3: +    }
[4.486s] 3: +#ifdef TRACE_SOLVER
[4.486s] 3: +    print_matrix("J", J);
[4.486s] 3: +#endif
[4.486s] 3: +
[4.486s] 3: +    /* c1 * c2 is an estimate for cond(G) */
[4.486s] 3: +
[4.486s] 3: +    /*
[4.486s] 3: +      * Find the unconstrained minimizer of the quadratic form 0.5 * x G x + g0 x
[4.486s] 3: +     * this is a feasible point in the dual space
[4.486s] 3: +     * x = G^-1 * g0
[4.486s] 3: +     */
[4.486s] 3: +    cholesky_solve(G, x, g0);
[4.486s] 3: +    for (i = 0; i < n; i++) {
[4.486s] 3: +      x[i] = -x[i];
[4.486s] 3: +    }
[4.487s] 3: +    /* and compute the current solution value */
[4.487s] 3: +    f_value = 0.5 * scalar_product(g0, x);
[4.487s] 3: +#ifdef TRACE_SOLVER
[4.487s] 3: +    std::cout << "Unconstrained solution: " << f_value << std::endl;
[4.487s] 3: +    print_vector("x", x);
[4.487s] 3: +#endif
[4.487s] 3: +
[4.487s] 3: +    /* Add equality constraints to the working set A */
[4.487s] 3: +    iq = 0;
[4.487s] 3: +    for (i = 0; i < p; i++) {
[4.487s] 3: +      for (j = 0; j < n; j++) {
[4.487s] 3: +        np[j] = CE[j][i];
[4.487s] 3: +      }
[4.487s] 3: +      compute_d(d, J, np);
[4.487s] 3: +      update_z(z, J, d, iq);
[4.487s] 3: +      update_r(R, r, d, iq);
[4.487s] 3: +#ifdef TRACE_SOLVER
[4.487s] 3: +      print_matrix("R", R, n, iq);
[4.487s] 3: +      print_vector("z", z);
[4.487s] 3: +      print_vector("r", r, iq);
[4.487s] 3: +      print_vector("d", d);
[4.487s] 3: +#endif
[4.487s] 3: +
[4.488s] 3: +      /* compute full step length t2: i.e., the minimum step in primal space s.t. the contraint
[4.488s] 3: +        becomes feasible */
[4.488s] 3: +      t2 = 0.0;
[4.488s] 3: +      if (fabs(scalar_product(z, z)) > std::numeric_limits < double > ::epsilon()) { // i.e. z != 0
[4.488s] 3: +        t2 = (-scalar_product(np, x) - ce0[i]) / scalar_product(z, np);
[4.488s] 3: +      }
[4.488s] 3: +
[4.488s] 3: +      /* set x = x + t2 * z */
[4.488s] 3: +      for (k = 0; k < n; k++) {
[4.488s] 3: +        x[k] += t2 * z[k];
[4.488s] 3: +      }
[4.488s] 3: +
[4.488s] 3: +      /* set u = u+ */
[4.488s] 3: +      u[iq] = t2;
[4.488s] 3: +      for (k = 0; k < iq; k++) {
[4.488s] 3: +        u[k] -= t2 * r[k];
[4.488s] 3: +      }
[4.488s] 3: +
[4.488s] 3: +      /* compute the new solution value */
[4.488s] 3: +      f_value += 0.5 * (t2 * t2) * scalar_product(z, np);
[4.488s] 3: +      A[i] = -i - 1;
[4.488s] 3: +
[4.488s] 3: +      if (!add_constraint(R, J, d, iq, R_norm)) {
[4.489s] 3: +        // Equality constraints are linearly dependent
[4.489s] 3: +        throw std::runtime_error("Constraints are linearly dependent");
[4.489s] 3: +        return f_value;
[4.489s] 3: +      }
[4.489s] 3: +    }
[4.489s] 3: +
[4.489s] 3: +    /* set iai = K \ A */
[4.489s] 3: +    for (i = 0; i < m; i++) {
[4.489s] 3: +      iai[i] = i;
[4.489s] 3: +    }
[4.489s] 3: +
[4.489s] 3: +l1: iter++;
[4.489s] 3: +#ifdef TRACE_SOLVER
[4.489s] 3: +    print_vector("x", x);
[4.489s] 3: +#endif
[4.489s] 3: +    /* step 1: choose a violated constraint */
[4.489s] 3: +    for (i = p; i < iq; i++) {
[4.489s] 3: +      ip = A[i];
[4.489s] 3: +      iai[ip] = -1;
[4.489s] 3: +    }
[4.489s] 3: +
[4.489s] 3: +    /* compute s[x] = ci^T * x + ci0 for all elements of K \ A */
[4.489s] 3: +    ss = 0.0;
[4.490s] 3: +    psi = 0.0; /* this value will contain the sum of all infeasibilities */
[4.490s] 3: +    ip = 0; /* ip will be the index of the chosen violated constraint */
[4.490s] 3: +    for (i = 0; i < m; i++) {
[4.490s] 3: +      iaexcl[i] = true;
[4.490s] 3: +      sum = 0.0;
[4.490s] 3: +      for (j = 0; j < n; j++) {
[4.490s] 3: +        sum += CI[j][i] * x[j];
[4.490s] 3: +      }
[4.490s] 3: +      sum += ci0[i];
[4.490s] 3: +      s[i] = sum;
[4.490s] 3: +      psi += std::min(0.0, sum);
[4.490s] 3: +    }
[4.490s] 3: +#ifdef TRACE_SOLVER
[4.490s] 3: +    print_vector("s", s, m);
[4.490s] 3: +#endif
[4.490s] 3: +
[4.490s] 3: +
[4.490s] 3: +    if (fabs(psi) <= m * std::numeric_limits < double > ::epsilon() * c1 * c2 * 100.0) {
[4.490s] 3: +      /* numerically there are not infeasibilities anymore */
[4.490s] 3: @@ -209,52 +266,11 @@
[4.490s] 3: -  }
[4.490s] 3: -  
[4.491s] 3: -  /* set iai = K \ A */
[4.491s] 3: -  for (i = 0; i < m; i++)
[4.491s] 3: -    iai[i] = i;
[4.491s] 3: -  
[4.491s] 3: -l1:	iter++;
[4.491s] 3: -#ifdef TRACE_SOLVER
[4.491s] 3: -  print_vector("x", x);
[4.491s] 3: -#endif
[4.491s] 3: -  /* step 1: choose a violated constraint */
[4.491s] 3: -  for (i = p; i < iq; i++)
[4.491s] 3: -  {
[4.491s] 3: -    ip = A[i];
[4.491s] 3: -    iai[ip] = -1;
[4.491s] 3: -  }
[4.491s] 3: -	
[4.491s] 3: -  /* compute s[x] = ci^T * x + ci0 for all elements of K \ A */
[4.491s] 3: -  ss = 0.0;
[4.491s] 3: -  psi = 0.0; /* this value will contain the sum of all infeasibilities */
[4.491s] 3: -  ip = 0; /* ip will be the index of the chosen violated constraint */
[4.491s] 3: -  for (i = 0; i < m; i++)
[4.491s] 3: -  {
[4.491s] 3: -    iaexcl[i] = true;
[4.491s] 3: -    sum = 0.0;
[4.491s] 3: -    for (j = 0; j < n; j++)
[4.492s] 3: -      sum += CI[j][i] * x[j];
[4.492s] 3: -    sum += ci0[i];
[4.492s] 3: -    s[i] = sum;
[4.492s] 3: -    psi += std::min(0.0, sum);
[4.492s] 3: -  }
[4.492s] 3: -#ifdef TRACE_SOLVER
[4.492s] 3: -  print_vector("s", s, m);
[4.492s] 3: -#endif
[4.492s] 3: -  
[4.492s] 3: -  
[4.492s] 3: -  if (fabs(psi) <= m * std::numeric_limits<double>::epsilon() * c1 * c2* 100.0)
[4.492s] 3: -  {
[4.492s] 3: -    /* numerically there are not infeasibilities anymore */
[4.492s] 3: -    return f_value;
[4.492s] 3: -  }
[4.492s] 3: -  
[4.492s] 3: -  /* save old values for u and A */
[4.492s] 3: -  for (i = 0; i < iq; i++)
[4.492s] 3: -  {
[4.492s] 3: -    u_old[i] = u[i];
[4.493s] 3: -    A_old[i] = A[i];
[4.493s] 3: -  }
[4.493s] 3: -  /* and for x */
[4.493s] 3: -  for (i = 0; i < n; i++)
[4.493s] 3: -    x_old[i] = x[i];
[4.493s] 3: -  
[4.493s] 3: +
[4.493s] 3: +    /* save old values for u and A */
[4.493s] 3: +    for (i = 0; i < iq; i++) {
[4.493s] 3: +      u_old[i] = u[i];
[4.493s] 3: +      A_old[i] = A[i];
[4.493s] 3: +    }
[4.493s] 3: +    /* and for x */
[4.493s] 3: +    for (i = 0; i < n; i++) {
[4.493s] 3: +      x_old[i] = x[i];
[4.493s] 3: +    }
[4.493s] 3: +
[4.493s] 3: @@ -262,4 +278,2 @@
[4.493s] 3: -    for (i = 0; i < m; i++)
[4.493s] 3: -    {
[4.494s] 3: -      if (s[i] < ss && iai[i] != -1 && iaexcl[i])
[4.494s] 3: -      {
[4.494s] 3: +    for (i = 0; i < m; i++) {
[4.494s] 3: +      if (s[i] < ss && iai[i] != -1 && iaexcl[i]) {
[4.494s] 3: @@ -270,18 +284,18 @@
[4.494s] 3: -  if (ss >= 0.0)
[4.494s] 3: -  {
[4.494s] 3: -    return f_value;
[4.494s] 3: -  }
[4.494s] 3: -  
[4.494s] 3: -  /* set np = n[ip] */
[4.494s] 3: -  for (i = 0; i < n; i++)
[4.494s] 3: -    np[i] = CI[i][ip];
[4.494s] 3: -  /* set u = [u 0]^T */
[4.494s] 3: -  u[iq] = 0.0;
[4.494s] 3: -  /* add ip to the active set A */
[4.494s] 3: -  A[iq] = ip;
[4.494s] 3: -  
[4.494s] 3: -#ifdef TRACE_SOLVER
[4.494s] 3: -  std::cout << "Trying with constraint " << ip << std::endl;
[4.494s] 3: -  print_vector("np", np);
[4.494s] 3: -#endif
[4.495s] 3: -  
[4.495s] 3: +    if (ss >= 0.0) {
[4.495s] 3: +      return f_value;
[4.495s] 3: +    }
[4.495s] 3: +
[4.495s] 3: +    /* set np = n[ip] */
[4.495s] 3: +    for (i = 0; i < n; i++) {
[4.495s] 3: +      np[i] = CI[i][ip];
[4.495s] 3: +    }
[4.495s] 3: +    /* set u = [u 0]^T */
[4.495s] 3: +    u[iq] = 0.0;
[4.495s] 3: +    /* add ip to the active set A */
[4.495s] 3: +    A[iq] = ip;
[4.495s] 3: +
[4.495s] 3: +#ifdef TRACE_SOLVER
[4.495s] 3: +    std::cout << "Trying with constraint " << ip << std::endl;
[4.495s] 3: +    print_vector("np", np);
[4.495s] 3: +#endif
[4.495s] 3: +
[4.495s] 3: @@ -291,58 +305,78 @@
[4.495s] 3: -  update_z(z, J, d, iq);
[4.495s] 3: -  /* compute N* np (if q > 0): the negative of the step direction in the dual space */
[4.495s] 3: -  update_r(R, r, d, iq);
[4.496s] 3: -#ifdef TRACE_SOLVER
[4.496s] 3: -  std::cout << "Step direction z" << std::endl;
[4.496s] 3: -  print_vector("z", z);
[4.496s] 3: -  print_vector("r", r, iq + 1);
[4.496s] 3: -  print_vector("u", u, iq + 1);
[4.496s] 3: -  print_vector("d", d);
[4.496s] 3: -  print_vector("A", A, iq + 1);
[4.496s] 3: -#endif
[4.496s] 3: -  
[4.496s] 3: -  /* Step 2b: compute step length */
[4.496s] 3: -  l = 0;
[4.496s] 3: -  /* Compute t1: partial step length (maximum step in dual space without violating dual feasibility */
[4.496s] 3: -  t1 = inf; /* +inf */
[4.496s] 3: -  /* find the index l s.t. it reaches the minimum of u+[x] / r */
[4.496s] 3: -  for (k = p; k < iq; k++)
[4.496s] 3: -  {
[4.496s] 3: -    if (r[k] > 0.0)
[4.496s] 3: -    {
[4.496s] 3: -      if (u[k] / r[k] < t1)
[4.496s] 3: -	    {
[4.496s] 3: -	      t1 = u[k] / r[k];
[4.496s] 3: -	      l = A[k];
[4.496s] 3: -	    }
[4.497s] 3: -    }
[4.497s] 3: -  }
[4.497s] 3: -  /* Compute t2: full step length (minimum step in primal space such that the constraint ip becomes feasible */
[4.497s] 3: -  if (fabs(scalar_product(z, z))  > std::numeric_limits<double>::epsilon()) // i.e. z != 0
[4.497s] 3: -  {
[4.497s] 3: -    t2 = -s[ip] / scalar_product(z, np);
[4.497s] 3: -    if (t2 < 0) // patch suggested by Takano Akio for handling numerical inconsistencies
[4.497s] 3: -      t2 = inf;
[4.497s] 3: -  }
[4.497s] 3: -  else
[4.497s] 3: -    t2 = inf; /* +inf */
[4.497s] 3: -  
[4.497s] 3: -  /* the step is chosen as the minimum of t1 and t2 */
[4.497s] 3: -  t = std::min(t1, t2);
[4.497s] 3: -#ifdef TRACE_SOLVER
[4.497s] 3: -  std::cout << "Step sizes: " << t << " (t1 = " << t1 << ", t2 = " << t2 << ") ";
[4.497s] 3: -#endif
[4.497s] 3: -  
[4.497s] 3: -  /* Step 2c: determine new S-pair and take step: */
[4.497s] 3: -  
[4.497s] 3: -  /* case (i): no step in primal or dual space */
[4.498s] 3: -  if (t >= inf)
[4.498s] 3: -  {
[4.498s] 3: -    /* QPP is infeasible */
[4.498s] 3: -    // FIXME: unbounded to raise
[4.498s] 3: -    return inf;
[4.498s] 3: -  }
[4.498s] 3: -  /* case (ii): step in dual space */
[4.498s] 3: -  if (t2 >= inf)
[4.498s] 3: -  {
[4.498s] 3: -    /* set u = u +  t * [-r 1] and drop constraint l from the active set A */
[4.498s] 3: -    for (k = 0; k < iq; k++)
[4.498s] 3: +    update_z(z, J, d, iq);
[4.498s] 3: +    /* compute N* np (if q > 0): the negative of the step direction in the dual space */
[4.498s] 3: +    update_r(R, r, d, iq);
[4.498s] 3: +#ifdef TRACE_SOLVER
[4.498s] 3: +    std::cout << "Step direction z" << std::endl;
[4.498s] 3: +    print_vector("z", z);
[4.498s] 3: +    print_vector("r", r, iq + 1);
[4.498s] 3: +    print_vector("u", u, iq + 1);
[4.498s] 3: +    print_vector("d", d);
[4.498s] 3: +    print_vector("A", A, iq + 1);
[4.499s] 3: +#endif
[4.499s] 3: +
[4.499s] 3: +    /* Step 2b: compute step length */
[4.499s] 3: +    l = 0;
[4.499s] 3: +    /* Compute t1: partial step length (maximum step in dual space without violating dual feasibility */
[4.499s] 3: +    t1 = inf; /* +inf */
[4.499s] 3: +    /* find the index l s.t. it reaches the minimum of u+[x] / r */
[4.499s] 3: +    for (k = p; k < iq; k++) {
[4.499s] 3: +      if (r[k] > 0.0) {
[4.499s] 3: +        if (u[k] / r[k] < t1) {
[4.499s] 3: +          t1 = u[k] / r[k];
[4.499s] 3: +          l = A[k];
[4.499s] 3: +        }
[4.499s] 3: +      }
[4.499s] 3: +    }
[4.499s] 3: +    /* Compute t2: full step length (minimum step in primal space such that the constraint ip becomes feasible */
[4.499s] 3: +    if (fabs(scalar_product(z, z)) > std::numeric_limits < double > ::epsilon()) { // i.e. z != 0
[4.499s] 3: +      t2 = -s[ip] / scalar_product(z, np);
[4.499s] 3: +      if (t2 < 0) { // patch suggested by Takano Akio for handling numerical inconsistencies
[4.499s] 3: +        t2 = inf;
[4.499s] 3: +      }
[4.499s] 3: +    } else {
[4.499s] 3: +      t2 = inf; /* +inf */
[4.500s] 3: +
[4.500s] 3: +    }
[4.500s] 3: +    /* the step is chosen as the minimum of t1 and t2 */
[4.500s] 3: +    t = std::min(t1, t2);
[4.500s] 3: +#ifdef TRACE_SOLVER
[4.500s] 3: +    std::cout << "Step sizes: " << t << " (t1 = " << t1 << ", t2 = " << t2 << ") ";
[4.500s] 3: +#endif
[4.500s] 3: +
[4.500s] 3: +    /* Step 2c: determine new S-pair and take step: */
[4.500s] 3: +
[4.500s] 3: +    /* case (i): no step in primal or dual space */
[4.500s] 3: +    if (t >= inf) {
[4.500s] 3: +      /* QPP is infeasible */
[4.500s] 3: +      // FIXME: unbounded to raise
[4.500s] 3: +      return inf;
[4.500s] 3: +    }
[4.500s] 3: +    /* case (ii): step in dual space */
[4.500s] 3: +    if (t2 >= inf) {
[4.500s] 3: +      /* set u = u +  t * [-r 1] and drop constraint l from the active set A */
[4.500s] 3: +      for (k = 0; k < iq; k++) {
[4.500s] 3: +        u[k] -= t * r[k];
[4.500s] 3: +      }
[4.500s] 3: +      u[iq] += t;
[4.500s] 3: +      iai[l] = l;
[4.501s] 3: +      delete_constraint(R, J, A, u, n, p, iq, l);
[4.501s] 3: +#ifdef TRACE_SOLVER
[4.501s] 3: +      std::cout << " in dual space: "
[4.501s] 3: +                << f_value << std::endl;
[4.501s] 3: +      print_vector("x", x);
[4.501s] 3: +      print_vector("z", z);
[4.501s] 3: +      print_vector("A", A, iq + 1);
[4.501s] 3: +#endif
[4.501s] 3: +      goto l2a;
[4.501s] 3: +    }
[4.501s] 3: +
[4.501s] 3: +    /* case (iii): step in primal and dual space */
[4.501s] 3: +
[4.501s] 3: +    /* set x = x + t * z */
[4.501s] 3: +    for (k = 0; k < n; k++) {
[4.502s] 3: +      x[k] += t * z[k];
[4.502s] 3: +    }
[4.502s] 3: +    /* update the solution value */
[4.502s] 3: +    f_value += t * scalar_product(z, np) * (0.5 * t + u[iq]);
[4.502s] 3: +    /* u = u + t * [-r 1] */
[4.502s] 3: +    for (k = 0; k < iq; k++) {
[4.502s] 3: @@ -349,0 +384 @@
[4.502s] 3: +    }
[4.502s] 3: @@ -350,0 +386,53 @@
[4.502s] 3: +#ifdef TRACE_SOLVER
[4.502s] 3: +    std::cout << " in both spaces: "
[4.502s] 3: +              << f_value << std::endl;
[4.502s] 3: +    print_vector("x", x);
[4.502s] 3: +    print_vector("u", u, iq + 1);
[4.502s] 3: +    print_vector("r", r, iq + 1);
[4.502s] 3: +    print_vector("A", A, iq + 1);
[4.502s] 3: +#endif
[4.502s] 3: +
[4.503s] 3: +    if (fabs(t - t2) < std::numeric_limits < double > ::epsilon()) {
[4.503s] 3: +#ifdef TRACE_SOLVER
[4.503s] 3: +      std::cout << "Full step has taken " << t << std::endl;
[4.503s] 3: +      print_vector("x", x);
[4.503s] 3: +#endif
[4.503s] 3: +      /* full step has taken */
[4.503s] 3: +      /* add constraint ip to the active set*/
[4.503s] 3: +      if (!add_constraint(R, J, d, iq, R_norm)) {
[4.503s] 3: +        iaexcl[ip] = false;
[4.503s] 3: +        delete_constraint(R, J, A, u, n, p, iq, ip);
[4.503s] 3: +#ifdef TRACE_SOLVER
[4.503s] 3: +        print_matrix("R", R);
[4.503s] 3: +        print_vector("A", A, iq);
[4.503s] 3: +        print_vector("iai", iai);
[4.503s] 3: +#endif
[4.503s] 3: +        for (i = 0; i < m; i++) {
[4.503s] 3: +          iai[i] = i;
[4.503s] 3: +        }
[4.503s] 3: +        for (i = p; i < iq; i++) {
[4.503s] 3: +          A[i] = A_old[i];
[4.503s] 3: +          u[i] = u_old[i];
[4.503s] 3: +          iai[A[i]] = -1;
[4.503s] 3: +        }
[4.503s] 3: +        for (i = 0; i < n; i++) {
[4.504s] 3: +          x[i] = x_old[i];
[4.504s] 3: +        }
[4.504s] 3: +        goto l2; /* go to step 2 */
[4.504s] 3: +      } else {
[4.504s] 3: +        iai[ip] = -1;
[4.504s] 3: +      }
[4.504s] 3: +#ifdef TRACE_SOLVER
[4.504s] 3: +      print_matrix("R", R);
[4.504s] 3: +      print_vector("A", A, iq);
[4.504s] 3: +      print_vector("iai", iai);
[4.504s] 3: +#endif
[4.504s] 3: +      goto l1;
[4.504s] 3: +    }
[4.504s] 3: +
[4.504s] 3: +    /* a patial step has taken */
[4.504s] 3: +#ifdef TRACE_SOLVER
[4.504s] 3: +    std::cout << "Partial step has taken " << t << std::endl;
[4.504s] 3: +    print_vector("x", x);
[4.504s] 3: +#endif
[4.505s] 3: +    /* drop constraint l */
[4.505s] 3: @@ -354,61 +441,0 @@
[4.505s] 3: -    std::cout << " in dual space: " 
[4.505s] 3: -      << f_value << std::endl;
[4.505s] 3: -    print_vector("x", x);
[4.505s] 3: -    print_vector("z", z);
[4.505s] 3: -    print_vector("A", A, iq + 1);
[4.505s] 3: -#endif
[4.505s] 3: -    goto l2a;
[4.505s] 3: -  }
[4.505s] 3: -  
[4.505s] 3: -  /* case (iii): step in primal and dual space */
[4.505s] 3: -  
[4.505s] 3: -  /* set x = x + t * z */
[4.505s] 3: -  for (k = 0; k < n; k++)
[4.505s] 3: -    x[k] += t * z[k];
[4.505s] 3: -  /* update the solution value */
[4.505s] 3: -  f_value += t * scalar_product(z, np) * (0.5 * t + u[iq]);
[4.505s] 3: -  /* u = u + t * [-r 1] */
[4.505s] 3: -  for (k = 0; k < iq; k++)
[4.505s] 3: -    u[k] -= t * r[k];
[4.506s] 3: -  u[iq] += t;
[4.506s] 3: -#ifdef TRACE_SOLVER
[4.506s] 3: -  std::cout << " in both spaces: " 
[4.506s] 3: -    << f_value << std::endl;
[4.506s] 3: -  print_vector("x", x);
[4.506s] 3: -  print_vector("u", u, iq + 1);
[4.506s] 3: -  print_vector("r", r, iq + 1);
[4.506s] 3: -  print_vector("A", A, iq + 1);
[4.506s] 3: -#endif
[4.506s] 3: -  
[4.506s] 3: -  if (fabs(t - t2) < std::numeric_limits<double>::epsilon())
[4.506s] 3: -  {
[4.506s] 3: -#ifdef TRACE_SOLVER
[4.506s] 3: -    std::cout << "Full step has taken " << t << std::endl;
[4.506s] 3: -    print_vector("x", x);
[4.506s] 3: -#endif
[4.506s] 3: -    /* full step has taken */
[4.506s] 3: -    /* add constraint ip to the active set*/
[4.507s] 3: -    if (!add_constraint(R, J, d, iq, R_norm))
[4.507s] 3: -    {
[4.507s] 3: -      iaexcl[ip] = false;
[4.507s] 3: -      delete_constraint(R, J, A, u, n, p, iq, ip);
[4.507s] 3: -#ifdef TRACE_SOLVER
[4.507s] 3: -      print_matrix("R", R);
[4.507s] 3: -      print_vector("A", A, iq);
[4.507s] 3: -			print_vector("iai", iai);
[4.507s] 3: -#endif
[4.507s] 3: -      for (i = 0; i < m; i++)
[4.507s] 3: -        iai[i] = i;
[4.507s] 3: -      for (i = p; i < iq; i++)
[4.507s] 3: -	    {
[4.507s] 3: -	      A[i] = A_old[i];
[4.507s] 3: -	      u[i] = u_old[i];
[4.507s] 3: -				iai[A[i]] = -1;
[4.507s] 3: -	    }
[4.507s] 3: -      for (i = 0; i < n; i++)
[4.507s] 3: -        x[i] = x_old[i];
[4.507s] 3: -      goto l2; /* go to step 2 */
[4.507s] 3: -    }    
[4.507s] 3: -    else
[4.507s] 3: -      iai[ip] = -1;
[4.508s] 3: -#ifdef TRACE_SOLVER
[4.508s] 3: @@ -417,38 +444,3 @@
[4.508s] 3: -		print_vector("iai", iai);
[4.508s] 3: -#endif
[4.508s] 3: -    goto l1;
[4.508s] 3: -  }
[4.508s] 3: -  
[4.508s] 3: -  /* a patial step has taken */
[4.508s] 3: -#ifdef TRACE_SOLVER
[4.508s] 3: -  std::cout << "Partial step has taken " << t << std::endl;
[4.508s] 3: -  print_vector("x", x);
[4.508s] 3: -#endif
[4.508s] 3: -  /* drop constraint l */
[4.508s] 3: -  iai[l] = l;
[4.508s] 3: -  delete_constraint(R, J, A, u, n, p, iq, l);
[4.508s] 3: -#ifdef TRACE_SOLVER
[4.508s] 3: -  print_matrix("R", R);
[4.508s] 3: -  print_vector("A", A, iq);
[4.508s] 3: -#endif
[4.509s] 3: -  
[4.509s] 3: -  /* update s[ip] = CI * x + ci0 */
[4.509s] 3: -  sum = 0.0;
[4.509s] 3: -  for (k = 0; k < n; k++)
[4.509s] 3: -    sum += CI[k][ip] * x[k];
[4.509s] 3: -  s[ip] = sum + ci0[ip];
[4.509s] 3: -  
[4.509s] 3: -#ifdef TRACE_SOLVER
[4.509s] 3: -  print_vector("s", s, m);
[4.509s] 3: -#endif
[4.509s] 3: -  goto l2a;
[4.509s] 3: -}
[4.509s] 3: -
[4.509s] 3: -inline void compute_d(Vector<double>& d, const Matrix<double>& J, const Vector<double>& np)
[4.509s] 3: -{
[4.509s] 3: -  register int i, j, n = d.size();
[4.509s] 3: -  register double sum;
[4.509s] 3: -  
[4.509s] 3: -  /* compute d = H^T * np */
[4.509s] 3: -  for (i = 0; i < n; i++)
[4.509s] 3: -  {
[4.509s] 3: +#endif
[4.510s] 3: +
[4.510s] 3: +    /* update s[ip] = CI * x + ci0 */
[4.510s] 3: @@ -456,132 +448,158 @@
[4.510s] 3: -    for (j = 0; j < n; j++)
[4.510s] 3: -      sum += J[j][i] * np[j];
[4.510s] 3: -    d[i] = sum;
[4.510s] 3: -  }
[4.510s] 3: -}
[4.510s] 3: -
[4.510s] 3: -inline void update_z(Vector<double>& z, const Matrix<double>& J, const Vector<double>& d, int iq)
[4.510s] 3: -{
[4.510s] 3: -  register int i, j, n = z.size();
[4.510s] 3: -	
[4.510s] 3: -  /* setting of z = H * d */
[4.510s] 3: -  for (i = 0; i < n; i++)
[4.510s] 3: -  {
[4.510s] 3: -    z[i] = 0.0;
[4.511s] 3: -    for (j = iq; j < n; j++)
[4.511s] 3: -      z[i] += J[i][j] * d[j];
[4.511s] 3: -  }
[4.511s] 3: -}
[4.511s] 3: -
[4.511s] 3: -inline void update_r(const Matrix<double>& R, Vector<double>& r, const Vector<double>& d, int iq)
[4.511s] 3: -{
[4.511s] 3: -  register int i, j;
[4.511s] 3: -  register double sum;
[4.511s] 3: -  
[4.511s] 3: -  /* setting of r = R^-1 d */
[4.511s] 3: -  for (i = iq - 1; i >= 0; i--)
[4.511s] 3: -  {
[4.511s] 3: -    sum = 0.0;
[4.511s] 3: -    for (j = i + 1; j < iq; j++)
[4.511s] 3: -      sum += R[i][j] * r[j];
[4.511s] 3: -    r[i] = (d[i] - sum) / R[i][i];
[4.512s] 3: -  }
[4.512s] 3: -}
[4.512s] 3: -
[4.512s] 3: -bool add_constraint(Matrix<double>& R, Matrix<double>& J, Vector<double>& d, unsigned int& iq, double& R_norm)
[4.512s] 3: -{
[4.512s] 3: -  unsigned int n = d.size();
[4.512s] 3: -#ifdef TRACE_SOLVER
[4.512s] 3: -  std::cout << "Add constraint " << iq << '/';
[4.512s] 3: -#endif
[4.512s] 3: -  register unsigned int i, j, k;
[4.512s] 3: -  double cc, ss, h, t1, t2, xny;
[4.512s] 3: -	
[4.512s] 3: -  /* we have to find the Givens rotation which will reduce the element
[4.512s] 3: -    d[j] to zero.
[4.512s] 3: -    if it is already zero we don't have to do anything, except of
[4.512s] 3: -    decreasing j */  
[4.512s] 3: -  for (j = n - 1; j >= iq + 1; j--)
[4.512s] 3: -  {
[4.512s] 3: -    /* The Givens rotation is done with the matrix (cc cs, cs -cc).
[4.512s] 3: -    If cc is one, then element (j) of d is zero compared with element
[4.513s] 3: -    (j - 1). Hence we don't have to do anything. 
[4.513s] 3: -    If cc is zero, then we just have to switch column (j) and column (j - 1) 
[4.513s] 3: -    of J. Since we only switch columns in J, we have to be careful how we
[4.513s] 3: -    update d depending on the sign of gs.
[4.513s] 3: -    Otherwise we have to apply the Givens rotation to these columns.
[4.513s] 3: -    The i - 1 element of d has to be updated to h. */
[4.513s] 3: -    cc = d[j - 1];
[4.513s] 3: -    ss = d[j];
[4.513s] 3: -    h = distance(cc, ss);
[4.513s] 3: -    if (fabs(h) < std::numeric_limits<double>::epsilon()) // h == 0
[4.513s] 3: -      continue;
[4.513s] 3: -    d[j] = 0.0;
[4.513s] 3: -    ss = ss / h;
[4.513s] 3: -    cc = cc / h;
[4.513s] 3: -    if (cc < 0.0)
[4.513s] 3: -    {
[4.513s] 3: -      cc = -cc;
[4.513s] 3: -      ss = -ss;
[4.513s] 3: -      d[j - 1] = -h;
[4.513s] 3: -    }
[4.513s] 3: -    else
[4.513s] 3: -      d[j - 1] = h;
[4.513s] 3: -    xny = ss / (1.0 + cc);
[4.514s] 3: -    for (k = 0; k < n; k++)
[4.514s] 3: -    {
[4.514s] 3: -      t1 = J[k][j - 1];
[4.514s] 3: -      t2 = J[k][j];
[4.514s] 3: -      J[k][j - 1] = t1 * cc + t2 * ss;
[4.514s] 3: -      J[k][j] = xny * (t1 + J[k][j - 1]) - t2;
[4.514s] 3: -    }
[4.514s] 3: -  }
[4.514s] 3: -  /* update the number of constraints added*/
[4.514s] 3: -  iq++;
[4.514s] 3: -  /* To update R we have to put the iq components of the d vector
[4.514s] 3: -    into column iq - 1 of R
[4.514s] 3: -    */
[4.514s] 3: -  for (i = 0; i < iq; i++)
[4.514s] 3: -    R[i][iq - 1] = d[i];
[4.514s] 3: -#ifdef TRACE_SOLVER
[4.514s] 3: -  std::cout << iq << std::endl;
[4.514s] 3: -  print_matrix("R", R, iq, iq);
[4.514s] 3: -  print_matrix("J", J);
[4.514s] 3: -  print_vector("d", d, iq);
[4.514s] 3: -#endif
[4.514s] 3: -  
[4.514s] 3: -  if (fabs(d[iq - 1]) <= std::numeric_limits<double>::epsilon() * R_norm) 
[4.515s] 3: -  {
[4.515s] 3: -    // problem degenerate
[4.515s] 3: -    return false;
[4.515s] 3: -  }
[4.515s] 3: -  R_norm = std::max<double>(R_norm, fabs(d[iq - 1]));
[4.515s] 3: -  return true;
[4.515s] 3: -}
[4.515s] 3: -
[4.515s] 3: -void delete_constraint(Matrix<double>& R, Matrix<double>& J, Vector<int>& A, Vector<double>& u, unsigned int n, int p, unsigned int& iq, int l)
[4.515s] 3: -{
[4.515s] 3: -#ifdef TRACE_SOLVER
[4.515s] 3: -  std::cout << "Delete constraint " << l << ' ' << iq;
[4.515s] 3: -#endif
[4.515s] 3: -  register unsigned int i, j, k, qq = 0; // just to prevent warnings from smart compilers
[4.515s] 3: -  double cc, ss, h, xny, t1, t2;
[4.515s] 3: -
[4.515s] 3: -  bool found = false;
[4.515s] 3: -  /* Find the index qq for active constraint l to be removed */
[4.515s] 3: -  for (i = p; i < iq; i++)
[4.515s] 3: -    if (A[i] == l)
[4.515s] 3: -    {
[4.515s] 3: -      qq = i;
[4.515s] 3: -      found = true;
[4.516s] 3: -      break;
[4.516s] 3: -    }
[4.516s] 3: -
[4.516s] 3: -  if(!found)
[4.516s] 3: -  {
[4.516s] 3: -    std::ostringstream os;
[4.516s] 3: -    os << "Attempt to delete non existing constraint, constraint: " << l;
[4.516s] 3: -    throw std::invalid_argument(os.str());
[4.516s] 3: -  }
[4.516s] 3: -  /* remove the constraint from the active set and the duals */
[4.516s] 3: -  for (i = qq; i < iq - 1; i++)
[4.516s] 3: -    {
[4.516s] 3: +    for (k = 0; k < n; k++) {
[4.516s] 3: +      sum += CI[k][ip] * x[k];
[4.516s] 3: +    }
[4.516s] 3: +    s[ip] = sum + ci0[ip];
[4.516s] 3: +
[4.516s] 3: +#ifdef TRACE_SOLVER
[4.516s] 3: +    print_vector("s", s, m);
[4.516s] 3: +#endif
[4.516s] 3: +    goto l2a;
[4.516s] 3: +  }
[4.517s] 3: +
[4.517s] 3: +  inline void compute_d(
[4.517s] 3: +    Vector < double > & d, const Matrix < double > & J,
[4.517s] 3: +    const Vector < double > & np)
[4.517s] 3: +  {
[4.517s] 3: +    register int i, j, n = d.size();
[4.517s] 3: +    register double sum;
[4.517s] 3: +
[4.517s] 3: +    /* compute d = H^T * np */
[4.517s] 3: +    for (i = 0; i < n; i++) {
[4.517s] 3: +      sum = 0.0;
[4.517s] 3: +      for (j = 0; j < n; j++) {
[4.517s] 3: +        sum += J[j][i] * np[j];
[4.517s] 3: +      }
[4.517s] 3: +      d[i] = sum;
[4.517s] 3: +    }
[4.517s] 3: +  }
[4.517s] 3: +
[4.517s] 3: +  inline void update_z(
[4.517s] 3: +    Vector < double > & z, const Matrix < double > & J,
[4.517s] 3: +    const Vector < double > & d, int iq)
[4.517s] 3: +  {
[4.517s] 3: +    register int i, j, n = z.size();
[4.518s] 3: +
[4.518s] 3: +    /* setting of z = H * d */
[4.518s] 3: +    for (i = 0; i < n; i++) {
[4.518s] 3: +      z[i] = 0.0;
[4.518s] 3: +      for (j = iq; j < n; j++) {
[4.518s] 3: +        z[i] += J[i][j] * d[j];
[4.518s] 3: +      }
[4.518s] 3: +    }
[4.518s] 3: +  }
[4.518s] 3: +
[4.518s] 3: +  inline void update_r(
[4.518s] 3: +    const Matrix < double > & R, Vector < double > & r,
[4.518s] 3: +    const Vector < double > & d, int iq)
[4.518s] 3: +  {
[4.518s] 3: +    register int i, j;
[4.518s] 3: +    register double sum;
[4.519s] 3: +
[4.519s] 3: +    /* setting of r = R^-1 d */
[4.519s] 3: +    for (i = iq - 1; i >= 0; i--) {
[4.519s] 3: +      sum = 0.0;
[4.519s] 3: +      for (j = i + 1; j < iq; j++) {
[4.519s] 3: +        sum += R[i][j] * r[j];
[4.519s] 3: +      }
[4.519s] 3: +      r[i] = (d[i] - sum) / R[i][i];
[4.519s] 3: +    }
[4.519s] 3: +  }
[4.519s] 3: +
[4.519s] 3: +  bool add_constraint(
[4.519s] 3: +    Matrix < double > & R, Matrix < double > & J, Vector < double > & d,
[4.519s] 3: +    unsigned int & iq, double & R_norm)
[4.519s] 3: +  {
[4.519s] 3: +    unsigned int n = d.size();
[4.519s] 3: +#ifdef TRACE_SOLVER
[4.519s] 3: +    std::cout << "Add constraint " << iq << '/';
[4.519s] 3: +#endif
[4.519s] 3: +    register unsigned int i, j, k;
[4.519s] 3: +    double cc, ss, h, t1, t2, xny;
[4.520s] 3: +
[4.520s] 3: +    /* we have to find the Givens rotation which will reduce the element
[4.520s] 3: +      d[j] to zero.
[4.520s] 3: +      if it is already zero we don't have to do anything, except of
[4.520s] 3: +      decreasing j */
[4.520s] 3: +    for (j = n - 1; j >= iq + 1; j--) {
[4.520s] 3: +      /* The Givens rotation is done with the matrix (cc cs, cs -cc).
[4.520s] 3: +      If cc is one, then element (j) of d is zero compared with element
[4.520s] 3: +      (j - 1). Hence we don't have to do anything.
[4.520s] 3: +      If cc is zero, then we just have to switch column (j) and column (j - 1)
[4.520s] 3: +      of J. Since we only switch columns in J, we have to be careful how we
[4.520s] 3: +      update d depending on the sign of gs.
[4.520s] 3: +      Otherwise we have to apply the Givens rotation to these columns.
[4.520s] 3: +      The i - 1 element of d has to be updated to h. */
[4.520s] 3: +      cc = d[j - 1];
[4.520s] 3: +      ss = d[j];
[4.520s] 3: +      h = distance(cc, ss);
[4.520s] 3: +      if (fabs(h) < std::numeric_limits < double > ::epsilon()) { // h == 0
[4.521s] 3: +        continue;
[4.521s] 3: +      }
[4.522s] 3: +      d[j] = 0.0;
[4.522s] 3: +      ss = ss / h;
[4.522s] 3: +      cc = cc / h;
[4.522s] 3: +      if (cc < 0.0) {
[4.522s] 3: +        cc = -cc;
[4.522s] 3: +        ss = -ss;
[4.522s] 3: +        d[j - 1] = -h;
[4.522s] 3: +      } else {
[4.522s] 3: +        d[j - 1] = h;
[4.522s] 3: +      }
[4.522s] 3: +      xny = ss / (1.0 + cc);
[4.522s] 3: +      for (k = 0; k < n; k++) {
[4.525s] 3: +        t1 = J[k][j - 1];
[4.525s] 3: +        t2 = J[k][j];
[4.525s] 3: +        J[k][j - 1] = t1 * cc + t2 * ss;
[4.525s] 3: +        J[k][j] = xny * (t1 + J[k][j - 1]) - t2;
[4.525s] 3: +      }
[4.525s] 3: +    }
[4.525s] 3: +    /* update the number of constraints added*/
[4.525s] 3: +    iq++;
[4.525s] 3: +    /* To update R we have to put the iq components of the d vector
[4.525s] 3: +      into column iq - 1 of R
[4.525s] 3: +      */
[4.525s] 3: +    for (i = 0; i < iq; i++) {
[4.525s] 3: +      R[i][iq - 1] = d[i];
[4.525s] 3: +    }
[4.525s] 3: +#ifdef TRACE_SOLVER
[4.525s] 3: +    std::cout << iq << std::endl;
[4.525s] 3: +    print_matrix("R", R, iq, iq);
[4.525s] 3: +    print_matrix("J", J);
[4.525s] 3: +    print_vector("d", d, iq);
[4.525s] 3: +#endif
[4.526s] 3: +
[4.526s] 3: +    if (fabs(d[iq - 1]) <= std::numeric_limits < double > ::epsilon() * R_norm) {
[4.526s] 3: +      // problem degenerate
[4.526s] 3: +      return false;
[4.526s] 3: +    }
[4.526s] 3: +    R_norm = std::max < double > (R_norm, fabs(d[iq - 1]));
[4.526s] 3: +    return true;
[4.526s] 3: +  }
[4.526s] 3: +
[4.526s] 3: +  void delete_constraint(
[4.526s] 3: +    Matrix < double > & R, Matrix < double > & J, Vector < int > & A,
[4.526s] 3: +    Vector < double > & u, unsigned int n, int p, unsigned int & iq, int l)
[4.526s] 3: +  {
[4.526s] 3: +#ifdef TRACE_SOLVER
[4.526s] 3: +    std::cout << "Delete constraint " << l << ' ' << iq;
[4.526s] 3: +#endif
[4.527s] 3: +    register unsigned int i, j, k, qq = 0; // just to prevent warnings from smart compilers
[4.527s] 3: +    double cc, ss, h, xny, t1, t2;
[4.527s] 3: +
[4.527s] 3: +    bool found = false;
[4.527s] 3: +    /* Find the index qq for active constraint l to be removed */
[4.527s] 3: +    for (i = p; i < iq; i++) {
[4.527s] 3: +      if (A[i] == l) {
[4.527s] 3: +        qq = i;
[4.527s] 3: +        found = true;
[4.527s] 3: +        break;
[4.527s] 3: +      }
[4.527s] 3: +    }
[4.527s] 3: +
[4.527s] 3: +    if (!found) {
[4.527s] 3: +      std::ostringstream os;
[4.527s] 3: +      os << "Attempt to delete non existing constraint, constraint: " << l;
[4.527s] 3: +      throw std::invalid_argument(os.str());
[4.527s] 3: +    }
[4.527s] 3: +    /* remove the constraint from the active set and the duals */
[4.527s] 3: +    for (i = qq; i < iq - 1; i++) {
[4.527s] 3: @@ -590 +608 @@
[4.528s] 3: -      for (j = 0; j < n; j++)
[4.528s] 3: +      for (j = 0; j < n; j++) {
[4.528s] 3: @@ -592,67 +610,63 @@
[4.528s] 3: -    }
[4.528s] 3: -      
[4.528s] 3: -  A[iq - 1] = A[iq];
[4.528s] 3: -  u[iq - 1] = u[iq];
[4.528s] 3: -  A[iq] = 0; 
[4.528s] 3: -  u[iq] = 0.0;
[4.528s] 3: -  for (j = 0; j < iq; j++)
[4.528s] 3: -    R[j][iq - 1] = 0.0;
[4.528s] 3: -  /* constraint has been fully removed */
[4.528s] 3: -  iq--;
[4.528s] 3: -#ifdef TRACE_SOLVER
[4.528s] 3: -  std::cout << '/' << iq << std::endl;
[4.528s] 3: -#endif 
[4.528s] 3: -  
[4.528s] 3: -  if (iq == 0)
[4.528s] 3: -    return;
[4.528s] 3: -  
[4.528s] 3: -  for (j = qq; j < iq; j++)
[4.529s] 3: -  {
[4.529s] 3: -    cc = R[j][j];
[4.529s] 3: -    ss = R[j + 1][j];
[4.529s] 3: -    h = distance(cc, ss);
[4.529s] 3: -    if (fabs(h) < std::numeric_limits<double>::epsilon()) // h == 0
[4.529s] 3: -      continue;
[4.529s] 3: -    cc = cc / h;
[4.529s] 3: -    ss = ss / h;
[4.529s] 3: -    R[j + 1][j] = 0.0;
[4.529s] 3: -    if (cc < 0.0)
[4.529s] 3: -    {
[4.529s] 3: -      R[j][j] = -h;
[4.529s] 3: -      cc = -cc;
[4.529s] 3: -      ss = -ss;
[4.529s] 3: -    }
[4.529s] 3: -    else
[4.529s] 3: -      R[j][j] = h;
[4.529s] 3: -    
[4.529s] 3: -    xny = ss / (1.0 + cc);
[4.529s] 3: -    for (k = j + 1; k < iq; k++)
[4.529s] 3: -    {
[4.529s] 3: -      t1 = R[j][k];
[4.529s] 3: -      t2 = R[j + 1][k];
[4.530s] 3: -      R[j][k] = t1 * cc + t2 * ss;
[4.530s] 3: -      R[j + 1][k] = xny * (t1 + R[j][k]) - t2;
[4.530s] 3: -    }
[4.530s] 3: -    for (k = 0; k < n; k++)
[4.530s] 3: -    {
[4.530s] 3: -      t1 = J[k][j];
[4.530s] 3: -      t2 = J[k][j + 1];
[4.530s] 3: -      J[k][j] = t1 * cc + t2 * ss;
[4.530s] 3: -      J[k][j + 1] = xny * (J[k][j] + t1) - t2;
[4.530s] 3: -    }
[4.530s] 3: -  }
[4.530s] 3: -}
[4.530s] 3: -
[4.530s] 3: -inline double distance(double a, double b)
[4.530s] 3: -{
[4.530s] 3: -  register double a1, b1, t;
[4.530s] 3: -  a1 = fabs(a);
[4.530s] 3: -  b1 = fabs(b);
[4.530s] 3: -  if (a1 > b1) 
[4.530s] 3: -  {
[4.530s] 3: -    t = (b1 / a1);
[4.530s] 3: -    return a1 * sqrt(1.0 + t * t);
[4.531s] 3: -  }
[4.531s] 3: -  else
[4.531s] 3: -    if (b1 > a1)
[4.531s] 3: -    {
[4.531s] 3: +      }
[4.531s] 3: +    }
[4.531s] 3: +
[4.531s] 3: +    A[iq - 1] = A[iq];
[4.531s] 3: +    u[iq - 1] = u[iq];
[4.531s] 3: +    A[iq] = 0;
[4.531s] 3: +    u[iq] = 0.0;
[4.531s] 3: +    for (j = 0; j < iq; j++) {
[4.531s] 3: +      R[j][iq - 1] = 0.0;
[4.531s] 3: +    }
[4.531s] 3: +    /* constraint has been fully removed */
[4.531s] 3: +    iq--;
[4.531s] 3: +#ifdef TRACE_SOLVER
[4.531s] 3: +    std::cout << '/' << iq << std::endl;
[4.531s] 3: +#endif
[4.531s] 3: +
[4.531s] 3: +    if (iq == 0) {
[4.532s] 3: +      return;
[4.532s] 3: +    }
[4.532s] 3: +
[4.532s] 3: +    for (j = qq; j < iq; j++) {
[4.532s] 3: +      cc = R[j][j];
[4.532s] 3: +      ss = R[j + 1][j];
[4.532s] 3: +      h = distance(cc, ss);
[4.532s] 3: +      if (fabs(h) < std::numeric_limits < double > ::epsilon()) { // h == 0
[4.532s] 3: +        continue;
[4.532s] 3: +      }
[4.532s] 3: +      cc = cc / h;
[4.532s] 3: +      ss = ss / h;
[4.532s] 3: +      R[j + 1][j] = 0.0;
[4.532s] 3: +      if (cc < 0.0) {
[4.532s] 3: +        R[j][j] = -h;
[4.532s] 3: +        cc = -cc;
[4.532s] 3: +        ss = -ss;
[4.532s] 3: +      } else {
[4.532s] 3: +        R[j][j] = h;
[4.532s] 3: +      }
[4.533s] 3: +
[4.533s] 3: +      xny = ss / (1.0 + cc);
[4.533s] 3: +      for (k = j + 1; k < iq; k++) {
[4.533s] 3: +        t1 = R[j][k];
[4.533s] 3: +        t2 = R[j + 1][k];
[4.533s] 3: +        R[j][k] = t1 * cc + t2 * ss;
[4.533s] 3: +        R[j + 1][k] = xny * (t1 + R[j][k]) - t2;
[4.533s] 3: +      }
[4.533s] 3: +      for (k = 0; k < n; k++) {
[4.533s] 3: +        t1 = J[k][j];
[4.533s] 3: +        t2 = J[k][j + 1];
[4.533s] 3: +        J[k][j] = t1 * cc + t2 * ss;
[4.533s] 3: +        J[k][j + 1] = xny * (J[k][j] + t1) - t2;
[4.533s] 3: +      }
[4.533s] 3: +    }
[4.533s] 3: +  }
[4.533s] 3: +
[4.533s] 3: +  inline double distance(double a, double b)
[4.533s] 3: +  {
[4.533s] 3: +    register double a1, b1, t;
[4.533s] 3: +    a1 = fabs(a);
[4.533s] 3: +    b1 = fabs(b);
[4.533s] 3: +    if (a1 > b1) {
[4.534s] 3: +      t = (b1 / a1);
[4.534s] 3: +      return a1 * sqrt(1.0 + t * t);
[4.534s] 3: +    } else if (b1 > a1) {
[4.534s] 3: @@ -662,37 +676,26 @@
[4.534s] 3: -  return a1 * sqrt(2.0);
[4.534s] 3: -}
[4.534s] 3: -
[4.534s] 3: -
[4.534s] 3: -inline double scalar_product(const Vector<double>& x, const Vector<double>& y)
[4.534s] 3: -{
[4.534s] 3: -  register int i, n = x.size();
[4.534s] 3: -  register double sum;
[4.534s] 3: -	
[4.534s] 3: -  sum = 0.0;
[4.534s] 3: -  for (i = 0; i < n; i++)
[4.534s] 3: -    sum += x[i] * y[i];
[4.534s] 3: -  return sum;			
[4.534s] 3: -}
[4.534s] 3: -
[4.534s] 3: -void cholesky_decomposition(Matrix<double>& A) 
[4.534s] 3: -{
[4.535s] 3: -  register int i, j, k, n = A.nrows();
[4.535s] 3: -  register double sum;
[4.535s] 3: -	
[4.535s] 3: -  for (i = 0; i < n; i++)
[4.535s] 3: -  {
[4.535s] 3: -    for (j = i; j < n; j++)
[4.535s] 3: -    {
[4.535s] 3: -      sum = A[i][j];
[4.535s] 3: -      for (k = i - 1; k >= 0; k--)
[4.535s] 3: -        sum -= A[i][k]*A[j][k];
[4.535s] 3: -      if (i == j) 
[4.535s] 3: -	    {
[4.535s] 3: -	      if (sum <= 0.0)
[4.535s] 3: -        {
[4.535s] 3: -          std::ostringstream os;
[4.535s] 3: -          // raise error
[4.535s] 3: -          print_matrix("A", A);
[4.535s] 3: -          os << "Error in cholesky decomposition, sum: " << sum;
[4.535s] 3: -          throw std::logic_error(os.str());
[4.535s] 3: -          exit(-1);
[4.535s] 3: +    return a1 * sqrt(2.0);
[4.536s] 3: +  }
[4.536s] 3: +
[4.536s] 3: +
[4.536s] 3: +  inline double scalar_product(const Vector < double > & x, const Vector < double > & y)
[4.536s] 3: +  {
[4.536s] 3: +    register int i, n = x.size();
[4.536s] 3: +    register double sum;
[4.536s] 3: +
[4.536s] 3: +    sum = 0.0;
[4.536s] 3: +    for (i = 0; i < n; i++) {
[4.536s] 3: +      sum += x[i] * y[i];
[4.536s] 3: +    }
[4.536s] 3: +    return sum;
[4.536s] 3: +  }
[4.536s] 3: +
[4.536s] 3: +  void cholesky_decomposition(Matrix < double > & A)
[4.536s] 3: +  {
[4.536s] 3: +    register int i, j, k, n = A.nrows();
[4.536s] 3: +    register double sum;
[4.536s] 3: +
[4.537s] 3: +    for (i = 0; i < n; i++) {
[4.537s] 3: +      for (j = i; j < n; j++) {
[4.537s] 3: +        sum = A[i][j];
[4.537s] 3: +        for (k = i - 1; k >= 0; k--) {
[4.537s] 3: +          sum -= A[i][k] * A[j][k];
[4.537s] 3: @@ -700,90 +703,108 @@
[4.537s] 3: -	      A[i][i] = sqrt(sum);
[4.537s] 3: -	    }
[4.537s] 3: -      else
[4.537s] 3: -        A[j][i] = sum / A[i][i];
[4.537s] 3: -    }
[4.537s] 3: -    for (k = i + 1; k < n; k++)
[4.537s] 3: -      A[i][k] = A[k][i];
[4.537s] 3: -  } 
[4.537s] 3: -}
[4.537s] 3: -
[4.537s] 3: -void cholesky_solve(const Matrix<double>& L, Vector<double>& x, const Vector<double>& b)
[4.537s] 3: -{
[4.537s] 3: -  int n = L.nrows();
[4.537s] 3: -  Vector<double> y(n);
[4.538s] 3: -	
[4.538s] 3: -  /* Solve L * y = b */
[4.538s] 3: -  forward_elimination(L, y, b);
[4.538s] 3: -  /* Solve L^T * x = y */
[4.538s] 3: -  backward_elimination(L, x, y);
[4.538s] 3: -}
[4.538s] 3: -
[4.538s] 3: -inline void forward_elimination(const Matrix<double>& L, Vector<double>& y, const Vector<double>& b)
[4.538s] 3: -{
[4.538s] 3: -  register int i, j, n = L.nrows();
[4.538s] 3: -	
[4.538s] 3: -  y[0] = b[0] / L[0][0];
[4.538s] 3: -  for (i = 1; i < n; i++)
[4.538s] 3: -  {
[4.538s] 3: -    y[i] = b[i];
[4.539s] 3: -    for (j = 0; j < i; j++)
[4.539s] 3: -      y[i] -= L[i][j] * y[j];
[4.539s] 3: -    y[i] = y[i] / L[i][i];
[4.539s] 3: -  }
[4.539s] 3: -}
[4.539s] 3: -
[4.539s] 3: -inline void backward_elimination(const Matrix<double>& U, Vector<double>& x, const Vector<double>& y)
[4.539s] 3: -{
[4.539s] 3: -  register int i, j, n = U.nrows();
[4.539s] 3: -	
[4.539s] 3: -  x[n - 1] = y[n - 1] / U[n - 1][n - 1];
[4.539s] 3: -  for (i = n - 2; i >= 0; i--)
[4.539s] 3: -  {
[4.539s] 3: -    x[i] = y[i];
[4.539s] 3: -    for (j = i + 1; j < n; j++)
[4.539s] 3: -      x[i] -= U[i][j] * x[j];
[4.539s] 3: -    x[i] = x[i] / U[i][i];
[4.539s] 3: -  }
[4.539s] 3: -}
[4.540s] 3: -
[4.540s] 3: -void print_matrix(const char* name, const Matrix<double>& A, int n, int m)
[4.540s] 3: -{
[4.540s] 3: -  std::ostringstream s;
[4.540s] 3: -  std::string t;
[4.540s] 3: -  if (n == -1)
[4.540s] 3: -    n = A.nrows();
[4.540s] 3: -  if (m == -1)
[4.540s] 3: -    m = A.ncols();
[4.540s] 3: -	
[4.540s] 3: -  s << name << ": " << std::endl;
[4.540s] 3: -  for (int i = 0; i < n; i++)
[4.540s] 3: -  {
[4.540s] 3: -    s << " ";
[4.540s] 3: -    for (int j = 0; j < m; j++)
[4.540s] 3: -      s << A[i][j] << ", ";
[4.540s] 3: -    s << std::endl;
[4.540s] 3: -  }
[4.540s] 3: -  t = s.str();
[4.540s] 3: -  t = t.substr(0, t.size() - 3); // To remove the trailing space, comma and newline
[4.541s] 3: -	
[4.541s] 3: -  std::cout << t << std::endl;
[4.541s] 3: -}
[4.541s] 3: -
[4.541s] 3: -template<typename T>
[4.541s] 3: -void print_vector(const char* name, const Vector<T>& v, int n)
[4.541s] 3: -{
[4.541s] 3: -  std::ostringstream s;
[4.541s] 3: -  std::string t;
[4.541s] 3: -  if (n == -1)
[4.541s] 3: -    n = v.size();
[4.541s] 3: -	
[4.541s] 3: -  s << name << ": " << std::endl << " ";
[4.541s] 3: -  for (int i = 0; i < n; i++)
[4.541s] 3: -  {
[4.541s] 3: -    s << v[i] << ", ";
[4.541s] 3: -  }
[4.541s] 3: -  t = s.str();
[4.541s] 3: -  t = t.substr(0, t.size() - 2); // To remove the trailing space and comma
[4.542s] 3: -	
[4.542s] 3: -  std::cout << t << std::endl;
[4.542s] 3: -}
[4.542s] 3: +        if (i == j) {
[4.542s] 3: +          if (sum <= 0.0) {
[4.542s] 3: +            std::ostringstream os;
[4.542s] 3: +            // raise error
[4.542s] 3: +            print_matrix("A", A);
[4.542s] 3: +            os << "Error in cholesky decomposition, sum: " << sum;
[4.542s] 3: +            throw std::logic_error(os.str());
[4.542s] 3: +            exit(-1);
[4.542s] 3: +          }
[4.542s] 3: +          A[i][i] = sqrt(sum);
[4.542s] 3: +        } else {
[4.542s] 3: +          A[j][i] = sum / A[i][i];
[4.542s] 3: +        }
[4.542s] 3: +      }
[4.542s] 3: +      for (k = i + 1; k < n; k++) {
[4.542s] 3: +        A[i][k] = A[k][i];
[4.543s] 3: +      }
[4.543s] 3: +    }
[4.543s] 3: +  }
[4.543s] 3: +
[4.543s] 3: +  void cholesky_solve(
[4.543s] 3: +    const Matrix < double > & L, Vector < double > & x,
[4.543s] 3: +    const Vector < double > & b)
[4.543s] 3: +  {
[4.543s] 3: +    int n = L.nrows();
[4.543s] 3: +    Vector < double > y(n);
[4.543s] 3: +
[4.543s] 3: +    /* Solve L * y = b */
[4.543s] 3: +    forward_elimination(L, y, b);
[4.543s] 3: +    /* Solve L^T * x = y */
[4.543s] 3: +    backward_elimination(L, x, y);
[4.543s] 3: +  }
[4.543s] 3: +
[4.543s] 3: +  inline void forward_elimination(
[4.543s] 3: +    const Matrix < double > & L, Vector < double > & y,
[4.543s] 3: +    const Vector < double > & b)
[4.543s] 3: +  {
[4.544s] 3: +    register int i, j, n = L.nrows();
[4.544s] 3: +
[4.544s] 3: +    y[0] = b[0] / L[0][0];
[4.544s] 3: +    for (i = 1; i < n; i++) {
[4.544s] 3: +      y[i] = b[i];
[4.544s] 3: +      for (j = 0; j < i; j++) {
[4.544s] 3: +        y[i] -= L[i][j] * y[j];
[4.544s] 3: +      }
[4.544s] 3: +      y[i] = y[i] / L[i][i];
[4.544s] 3: +    }
[4.544s] 3: +  }
[4.544s] 3: +
[4.544s] 3: +  inline void backward_elimination(
[4.544s] 3: +    const Matrix < double > & U, Vector < double > & x,
[4.544s] 3: +    const Vector < double > & y)
[4.544s] 3: +  {
[4.544s] 3: +    register int i, j, n = U.nrows();
[4.544s] 3: +
[4.544s] 3: +    x[n - 1] = y[n - 1] / U[n - 1][n - 1];
[4.544s] 3: +    for (i = n - 2; i >= 0; i--) {
[4.544s] 3: +      x[i] = y[i];
[4.545s] 3: +      for (j = i + 1; j < n; j++) {
[4.545s] 3: +        x[i] -= U[i][j] * x[j];
[4.545s] 3: +      }
[4.545s] 3: +      x[i] = x[i] / U[i][i];
[4.545s] 3: +    }
[4.545s] 3: +  }
[4.545s] 3: +
[4.545s] 3: +  void print_matrix(const char * name, const Matrix < double > & A, int n, int m)
[4.545s] 3: +  {
[4.545s] 3: +    std::ostringstream s;
[4.545s] 3: +    std::string t;
[4.545s] 3: +    if (n == -1) {
[4.545s] 3: +      n = A.nrows();
[4.545s] 3: +    }
[4.545s] 3: +    if (m == -1) {
[4.545s] 3: +      m = A.ncols();
[4.545s] 3: +    }
[4.545s] 3: +
[4.545s] 3: +    s << name << ": " << std::endl;
[4.545s] 3: +    for (int i = 0; i < n; i++) {
[4.545s] 3: +      s << " ";
[4.546s] 3: +      for (int j = 0; j < m; j++) {
[4.546s] 3: +        s << A[i][j] << ", ";
[4.546s] 3: +      }
[4.546s] 3: +      s << std::endl;
[4.546s] 3: +    }
[4.546s] 3: +    t = s.str();
[4.546s] 3: +    t = t.substr(0, t.size() - 3); // To remove the trailing space, comma and newline
[4.546s] 3: +
[4.546s] 3: +    std::cout << t << std::endl;
[4.546s] 3: +  }
[4.546s] 3: +
[4.546s] 3: +  template < typename T >
[4.546s] 3: +  void print_vector(const char * name, const Vector < T > & v, int n)
[4.546s] 3: +  {
[4.547s] 3: +    std::ostringstream s;
[4.547s] 3: +    std::string t;
[4.547s] 3: +    if (n == -1) {
[4.547s] 3: +      n = v.size();
[4.547s] 3: +    }
[4.547s] 3: +
[4.547s] 3: +    s << name << ": " << std::endl << " ";
[4.547s] 3: +    for (int i = 0; i < n; i++) {
[4.547s] 3: +      s << v[i] << ", ";
[4.547s] 3: +    }
[4.547s] 3: +    t = s.str();
[4.547s] 3: +    t = t.substr(0, t.size() - 2); // To remove the trailing space and comma
[4.547s] 3: +
[4.547s] 3: +    std::cout << t << std::endl;
[4.547s] 3: +  }
[4.547s] 3: 
[4.547s] 3: 63 files with code style divergence
[4.547s] 3: -- run_test.py: return code 1
[4.548s] 3: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/uncrustify.xunit.xml'
[4.548s] 3/4 Test #3: uncrustify .......................***Failed    3.03 sec
[4.548s] test 4
[4.548s]     Start 4: xmllint
[4.548s] 
[4.548s] 4: Test command: /usr/bin/python3 "-u" "/opt/ros/humble/share/ament_cmake_test/cmake/run_test.py" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml" "--package-name" "unitree_guide2" "--output-file" "/home/yk/rosros/build/unitree_guide2/ament_xmllint/xmllint.txt" "--command" "/opt/ros/humble/bin/ament_xmllint" "--xunit-file" "/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml"
[4.548s] 4: Test timeout computed to be: 60
[4.548s] 4: -- run_test.py: invoking following command in '/home/yk/rosros/src/unitree_ros2_sim/unitree_guide2':
[4.548s] 4:  - /opt/ros/humble/bin/ament_xmllint --xunit-file /home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml
[5.999s] 4: File 'package.xml' is valid
[6.000s] 4: 
[6.000s] 4: File 'config/plotjuggler_layout.xml' is valid
[6.000s] 4: 
[6.000s] 4: No problems found
[6.013s] 4: -- run_test.py: return code 0
[6.013s] 4: -- run_test.py: verify result file '/home/yk/rosros/build/unitree_guide2/test_results/unitree_guide2/xmllint.xunit.xml'
[6.026s] 4/4 Test #4: xmllint ..........................   Passed    2.45 sec
[6.026s] 
[6.026s] 75% tests passed[0;0m, [0;31m1 tests failed[0;0m out of 4
[6.026s] 
[6.026s] Label Time Summary:
[6.026s] cppcheck      =   0.25 sec*proc (1 test)
[6.026s] lint_cmake    =   0.17 sec*proc (1 test)
[6.026s] linter        =   5.91 sec*proc (4 tests)
[6.027s] uncrustify    =   3.03 sec*proc (1 test)
[6.027s] xmllint       =   2.45 sec*proc (1 test)
[6.027s] 
[6.027s] Total Test time (real) =   5.92 sec
[6.027s] 
[6.027s] The following tests FAILED:
[6.027s] 	[0;31m  3 - uncrustify (Failed)[0;0m
[6.041s] Errors while running CTest
[6.041s] Output from these tests are in: /home/yk/rosros/build/unitree_guide2/Testing/Temporary/LastTest.log
[6.042s] Use "--rerun-failed --output-on-failure" to re-run the failed cases verbosely.
[6.043s] Invoked command in '/home/yk/rosros/build/unitree_guide2' returned '8': AMENT_PREFIX_PATH=/home/yk/rosros/install/unitree_guide2:/home/yk/rosros/install/ros2_unitree_legged_msgs:${AMENT_PREFIX_PATH} CMAKE_PREFIX_PATH=/home/yk/rosros/install/unitree_guide2:/home/yk/rosros/install/ros2_unitree_legged_msgs LD_LIBRARY_PATH=/home/yk/rosros/install/ros2_unitree_legged_msgs/lib:${LD_LIBRARY_PATH} PYTHONPATH=/home/yk/rosros/install/ros2_unitree_legged_msgs/local/lib/python3.10/dist-packages:${PYTHONPATH} /usr/bin/ctest -C Release -D ExperimentalTest --no-compress-output -V --force-new-ctest-process
